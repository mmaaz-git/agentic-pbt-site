============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.4.1, pluggy-1.5.0 -- /home/npc/miniconda/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default'
rootdir: /home/npc/pbt/agentic-pbt/worker_/21
plugins: anyio-4.9.0, hypothesis-6.139.1, asyncio-1.2.0, langsmith-0.4.29
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 2 items

hypo.py::test_always_greater_than_total_ordering FAILED                  [ 50%]
hypo.py::test_always_less_than_total_ordering FAILED                     [100%]

=================================== FAILURES ===================================
___________________ test_always_greater_than_total_ordering ____________________

    @given(st.just(None))  # We don't need any parameters, just run once
>   def test_always_greater_than_total_ordering(dummy):
                   ^^^

hypo.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dummy = None

    @given(st.just(None))  # We don't need any parameters, just run once
    def test_always_greater_than_total_ordering(dummy):
        """Test that AlwaysGreaterThan satisfies total ordering properties."""
        inf1 = AlwaysGreaterThan()
        inf2 = AlwaysGreaterThan()
    
        # Test reflexivity: a == a
        assert inf1 == inf1
    
        # Test symmetry: if a == b then b == a
        assert inf1 == inf2
        assert inf2 == inf1
    
        # Test antisymmetry: if a == b, then not (a > b) and not (a < b)
        assert inf1 == inf2
        assert not (inf1 != inf2)
        assert not (inf1 < inf2), "AlwaysGreaterThan instances should not be less than each other"
>       assert not (inf1 > inf2), f"AlwaysGreaterThan instances should not be greater than each other when equal. Got inf1 > inf2 = {inf1 > inf2}"
E       AssertionError: AlwaysGreaterThan instances should not be greater than each other when equal. Got inf1 > inf2 = True
E       assert not <xarray.core.dtypes.AlwaysGreaterThan object at 0x71817e5aa060> > <xarray.core.dtypes.AlwaysGreaterThan object at 0x71817e5aa190>
E       Falsifying example: test_always_greater_than_total_ordering(
E           dummy=None,
E       )

hypo.py:21: AssertionError
_____________________ test_always_less_than_total_ordering _____________________

    @given(st.just(None))  # We don't need any parameters, just run once
>   def test_always_less_than_total_ordering(dummy):
                   ^^^

hypo.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dummy = None

    @given(st.just(None))  # We don't need any parameters, just run once
    def test_always_less_than_total_ordering(dummy):
        """Test that AlwaysLessThan satisfies total ordering properties."""
        ninf1 = AlwaysLessThan()
        ninf2 = AlwaysLessThan()
    
        # Test reflexivity: a == a
        assert ninf1 == ninf1
    
        # Test symmetry: if a == b then b == a
        assert ninf1 == ninf2
        assert ninf2 == ninf1
    
        # Test antisymmetry: if a == b, then not (a > b) and not (a < b)
        assert ninf1 == ninf2
        assert not (ninf1 != ninf2)
>       assert not (ninf1 < ninf2), f"AlwaysLessThan instances should not be less than each other when equal. Got ninf1 < ninf2 = {ninf1 < ninf2}"
E       AssertionError: AlwaysLessThan instances should not be less than each other when equal. Got ninf1 < ninf2 = True
E       assert not <xarray.core.dtypes.AlwaysLessThan object at 0x71817e5ab6f0> < <xarray.core.dtypes.AlwaysLessThan object at 0x71817e5ab490>
E       Falsifying example: test_always_less_than_total_ordering(
E           dummy=None,
E       )

hypo.py:43: AssertionError
=========================== short test summary info ============================
FAILED hypo.py::test_always_greater_than_total_ordering - AssertionError: Alw...
FAILED hypo.py::test_always_less_than_total_ordering - AssertionError: Always...
============================== 2 failed in 0.45s ===============================

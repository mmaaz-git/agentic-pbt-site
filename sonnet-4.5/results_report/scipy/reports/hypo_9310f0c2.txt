============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.4.1, pluggy-1.5.0 -- /home/npc/miniconda/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default'
rootdir: /home/npc/pbt/agentic-pbt/worker_/4
plugins: anyio-4.9.0, hypothesis-6.139.1, asyncio-1.2.0, langsmith-0.4.29
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 1 item

hypo.py::test_deconvolve_convolve_roundtrip FAILED                       [100%]

=================================== FAILURES ===================================
______________________ test_deconvolve_convolve_roundtrip ______________________

    @settings(max_examples=1000)
>   @given(
            
        original_signal=st.lists(st.floats(allow_nan=False, allow_infinity=False,
                                            min_value=-1e6, max_value=1e6),
                                 min_size=1, max_size=50),
        divisor=st.lists(st.floats(allow_nan=False, allow_infinity=False,
                                    min_value=-1e6, max_value=1e6),
                         min_size=1, max_size=50)
    )

hypo.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

original_signal = array([1.5, 0. , 0. , 1. ])
divisor = array([1.0e-08, 7.9e+01])

    @settings(max_examples=1000)
    @given(
        original_signal=st.lists(st.floats(allow_nan=False, allow_infinity=False,
                                            min_value=-1e6, max_value=1e6),
                                 min_size=1, max_size=50),
        divisor=st.lists(st.floats(allow_nan=False, allow_infinity=False,
                                    min_value=-1e6, max_value=1e6),
                         min_size=1, max_size=50)
    )
    def test_deconvolve_convolve_roundtrip(original_signal, divisor):
        original_signal = np.array(original_signal)
        divisor = np.array(divisor)
    
        assume(np.abs(divisor).max() > 1e-10)
        assume(np.abs(divisor[0]) > 1e-10)
    
        recorded = signal.convolve(divisor, original_signal)
        quotient, remainder = signal.deconvolve(recorded, divisor)
        reconstructed = signal.convolve(divisor, quotient) + remainder
    
        assert reconstructed.shape == recorded.shape
>       assert np.allclose(reconstructed, recorded, rtol=1e-8, atol=1e-10)
E       assert False
E        +  where False = <function allclose at 0x74b9e9d325f0>(array([1.500e-08, 1.185e+02, 0.000e+00, 1.000e-08, 7.800e+01]), array([1.500e-08, 1.185e+02, 0.000e+00, 1.000e-08, 7.900e+01]), rtol=1e-08, atol=1e-10)
E        +    where <function allclose at 0x74b9e9d325f0> = np.allclose
E       Falsifying example: test_deconvolve_convolve_roundtrip(
E           original_signal=[1.5, 0.0, 0.0, 1.0],
E           divisor=[1e-08, 79.0],
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /home/npc/miniconda/lib/python3.13/site-packages/numpy/_core/arrayprint.py:1016
E               /home/npc/miniconda/lib/python3.13/site-packages/numpy/_core/arrayprint.py:1021

hypo.py:28: AssertionError
=========================== short test summary info ============================
FAILED hypo.py::test_deconvolve_convolve_roundtrip - assert False
============================== 1 failed in 1.09s ===============================

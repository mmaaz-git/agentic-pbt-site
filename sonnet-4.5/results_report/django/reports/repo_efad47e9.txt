Django CSRF_TRUSTED_ORIGINS Validation Bug Demonstration
============================================================

Testing origin: '://'
----------------------------------------
  Passes validation check: True
  urlsplit() results:
    scheme: '' (empty=True)
    netloc: '' (empty=True)
  PROBLEM: This malformed URL passes validation but:
    - Has no scheme (middleware needs this)
    - Has no netloc (middleware needs this)
    - Would cause silent CSRF protection failure

Testing origin: '://example.com'
----------------------------------------
  Passes validation check: True
  urlsplit() results:
    scheme: '' (empty=True)
    netloc: '' (empty=True)
  PROBLEM: This malformed URL passes validation but:
    - Has no scheme (middleware needs this)
    - Has no netloc (middleware needs this)
    - Would cause silent CSRF protection failure

Testing origin: 'http://'
----------------------------------------
  Passes validation check: True
  urlsplit() results:
    scheme: 'http' (empty=False)
    netloc: '' (empty=True)
  PROBLEM: This malformed URL passes validation but:
    - Has no netloc (middleware needs this)
    - Would cause silent CSRF protection failure

Testing origin: 'https://'
----------------------------------------
  Passes validation check: True
  urlsplit() results:
    scheme: 'https' (empty=False)
    netloc: '' (empty=True)
  PROBLEM: This malformed URL passes validation but:
    - Has no netloc (middleware needs this)
    - Would cause silent CSRF protection failure

============================================================
CONCLUSION: The check function incorrectly accepts malformed URLs
that cannot be properly parsed by the CSRF middleware.
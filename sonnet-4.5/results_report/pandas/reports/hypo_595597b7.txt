Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/43/hypo.py", line 19, in test_unhashable_names_should_raise_valueerror
    df = pd.read_csv(io.StringIO(csv_data), names=unhashable_names, header=None)
  File "/home/npc/miniconda/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 1026, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/home/npc/miniconda/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 617, in _read
    _validate_names(kwds.get("names", None))
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/pandas/io/parsers/readers.py", line 575, in _validate_names
    if len(names) != len(set(names)):
                         ~~~^^^^^^^
TypeError: unhashable type: 'list'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/43/hypo.py", line 27, in <module>
    test_unhashable_names_should_raise_valueerror()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/npc/pbt/agentic-pbt/worker_/43/hypo.py", line 6, in test_unhashable_names_should_raise_valueerror
    unhashable_names=st.lists(
               ^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 2124, in wrapped_test
    raise the_error_hypothesis_found
  File "/home/npc/pbt/agentic-pbt/worker_/43/hypo.py", line 22, in test_unhashable_names_should_raise_valueerror
    assert False, "Got TypeError but docstring promises ValueError"
           ^^^^^
AssertionError: Got TypeError but docstring promises ValueError
Falsifying example: test_unhashable_names_should_raise_valueerror(
    unhashable_names=[[0], [0]],  # or any other generated value
)

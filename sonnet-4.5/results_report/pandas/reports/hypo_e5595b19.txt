============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.4.1, pluggy-1.5.0 -- /home/npc/miniconda/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default'
rootdir: /home/npc/pbt/agentic-pbt/worker_/63
plugins: anyio-4.9.0, hypothesis-6.139.1, asyncio-1.2.0, langsmith-0.4.29
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 1 item

hypo.py::test_abstract_method_error_validation_message Test failed for input 'invalid_type'
Error message: methodtype must be one of invalid_type, got {'staticmethod', 'classmethod', 'property', 'method'} instead.
After 'must be one of': 'invalid_type'
Expected to see valid types but saw: 'invalid_type'
FAILED

=================================== FAILURES ===================================
________________ test_abstract_method_error_validation_message _________________

    @given(st.text().filter(lambda x: x not in {"method", "classmethod", "staticmethod", "property"}))
>   @example("invalid_type")  # Explicitly provide the failing example
                   ^^^

hypo.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py:1613: in _raise_to_user
    raise the_error_hypothesis_found
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

invalid_methodtype = 'invalid_type'

    @given(st.text().filter(lambda x: x not in {"method", "classmethod", "staticmethod", "property"}))
    @example("invalid_type")  # Explicitly provide the failing example
    def test_abstract_method_error_validation_message(invalid_methodtype):
        class DummyClass:
            pass
    
        instance = DummyClass()
    
        with pytest.raises(ValueError) as exc_info:
            pd.errors.AbstractMethodError(instance, methodtype=invalid_methodtype)
    
        error_message = str(exc_info.value)
    
        valid_types = {"method", "classmethod", "staticmethod", "property"}
    
        # The bug: The error message has swapped parameters
        # It says "methodtype must be one of invalid_type, got {'method', ...} instead"
        # When it should say "methodtype must be one of {'method', ...}, got invalid_type instead"
    
        # This assertion will FAIL due to the bug
        # We expect the valid types to appear after "must be one of"
        if "must be one of" in error_message:
            parts = error_message.split("must be one of")[1].split(",")[0].strip()
            # The bug causes parts to be the invalid_methodtype, not the valid types
            print(f"Test failed for input '{invalid_methodtype}'")
            print(f"Error message: {error_message}")
            print(f"After 'must be one of': '{parts}'")
            print(f"Expected to see valid types but saw: '{parts}'")
    
            # This assertion demonstrates the bug
>           assert parts != invalid_methodtype, f"Bug confirmed: Error message has swapped parameters. The invalid input '{invalid_methodtype}' appears where valid options should be."
E           AssertionError: Bug confirmed: Error message has swapped parameters. The invalid input 'invalid_type' appears where valid options should be.
E           assert 'invalid_type' != 'invalid_type'
E           Falsifying explicit example: test_abstract_method_error_validation_message(
E               invalid_methodtype='invalid_type',
E           )

hypo.py:36: AssertionError
=========================== short test summary info ============================
FAILED hypo.py::test_abstract_method_error_validation_message - AssertionErro...
============================== 1 failed in 0.35s ===============================

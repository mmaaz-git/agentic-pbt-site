Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 17, in test_lexicon_validation_errors
    Lexicon([(Str('a'),)])
    ~~~~~~~^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 127, in __init__
    self.add_token_to_machine(
    ~~~~~~~~~~~~~~~~~~~~~~~~~^
        nfa, default_initial_state, spec, token_number)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 149, in add_token_to_machine
    (re, action_spec) = self.parse_token_definition(token_spec)
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 170, in parse_token_definition
    raise Errors.InvalidToken("Wrong number of items in token definition")
          ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: InvalidToken.__init__() missing 1 required positional argument: 'message'
Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 31, in test_lexicon_validation_errors
    Lexicon([("not an RE", "TEXT")])
    ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 127, in __init__
    self.add_token_to_machine(
    ~~~~~~~~~~~~~~~~~~~~~~~~~^
        nfa, default_initial_state, spec, token_number)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 149, in add_token_to_machine
    (re, action_spec) = self.parse_token_definition(token_spec)
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/Cython/Plex/Lexicons.py", line 174, in parse_token_definition
    raise Errors.InvalidToken("Pattern is not an RE instance")
          ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: InvalidToken.__init__() missing 1 required positional argument: 'message'
Testing InvalidToken exception handling in Lexicon...
============================================================

Test 1: Single-element tuple (wrong number of items)
FAILED: Got TypeError instead of InvalidToken
  TypeError message: InvalidToken.__init__() missing 1 required positional argument: 'message'
  This happens because InvalidToken is raised with wrong arguments

------------------------------------------------------------

Test 2: Non-RE pattern (string instead of RE)
FAILED: Got TypeError instead of InvalidToken
  TypeError message: InvalidToken.__init__() missing 1 required positional argument: 'message'
  This happens because InvalidToken is raised with wrong arguments

============================================================

Conclusion: The bug is confirmed. InvalidToken exceptions are raised
with only 1 argument (message) instead of the required 2 arguments
(token_number, message), causing TypeError instead of proper validation errors.

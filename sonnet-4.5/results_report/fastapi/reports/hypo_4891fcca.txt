Traceback (most recent call last):
  File "/home/npc/miniconda/lib/python3.13/typing.py", line 1035, in __init__
    code = compile(arg_to_compile, '<string>', 'eval')
  File "<string>", line 1
    and
    ^^^
SyntaxError: invalid syntax

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/17/hypo.py", line 12, in test_get_typed_annotation_handles_keywords
    result = get_typed_annotation(type_str, {})
  File "/home/npc/miniconda/lib/python3.13/site-packages/fastapi/dependencies/utils.py", line 249, in get_typed_annotation
    annotation = ForwardRef(annotation)
  File "/home/npc/miniconda/lib/python3.13/typing.py", line 1037, in __init__
    raise SyntaxError(f"Forward reference must be an expression -- got {arg!r}")
SyntaxError: Forward reference must be an expression -- got 'and'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/17/hypo.py", line 20, in <module>
    test_get_typed_annotation_handles_keywords()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/npc/pbt/agentic-pbt/worker_/17/hypo.py", line 7, in test_get_typed_annotation_handles_keywords
    @given(
    
  File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 2124, in wrapped_test
    raise the_error_hypothesis_found
  File "/home/npc/pbt/agentic-pbt/worker_/17/hypo.py", line 16, in test_get_typed_annotation_handles_keywords
    assert False, f"SyntaxError should not be raised for valid identifier '{type_str}'"
           ^^^^^
AssertionError: SyntaxError should not be raised for valid identifier 'and'
Falsifying example: test_get_typed_annotation_handles_keywords(
    type_str='and',
)

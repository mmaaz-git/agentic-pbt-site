  + Exception Group Traceback (most recent call last):
  |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 25, in <module>
  |     test_sorted_columns_divisions_are_sorted()
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 5, in test_sorted_columns_divisions_are_sorted
  |     st.fixed_dictionaries({
  |                ^^^
  |   File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 2124, in wrapped_test
  |     raise the_error_hypothesis_found
  | ExceptionGroup: Hypothesis found 4 distinct failures. (4 sub-exceptions)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 20, in test_sorted_columns_divisions_are_sorted
    |     result = parquet_core.sorted_columns(statistics)
    |   File "/home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py", line 421, in sorted_columns
    |     if not all(
    |            ~~~^
    |         "min" in s["columns"][i] and "max" in s["columns"][i] for s in statistics
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |     ):
    |     ^
    |   File "/home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py", line 422, in <genexpr>
    |     "min" in s["columns"][i] and "max" in s["columns"][i] for s in statistics
    |              ~~~~~~~~~~~~^^^
    | IndexError: list index out of range
    | Falsifying example: test_sorted_columns_divisions_are_sorted(
    |     statistics=[{'columns': [{'name': '0', 'min': None, 'max': None},
    |        {'name': '0', 'min': None, 'max': None}]},
    |      {'columns': [{'name': '0', 'min': None, 'max': None}]}],
    | )
    +---------------- 2 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 20, in test_sorted_columns_divisions_are_sorted
    |     result = parquet_core.sorted_columns(statistics)
    |   File "/home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py", line 433, in sorted_columns
    |     if c["min"] >= max:
    |        ^^^^^^^^^^^^^^^
    | TypeError: '>=' not supported between instances of 'int' and 'NoneType'
    | Falsifying example: test_sorted_columns_divisions_are_sorted(
    |     statistics=[{'columns': [{'name': '0', 'min': None, 'max': None}]},
    |      {'columns': [{'name': '0', 'min': 0, 'max': None}]}],
    | )
    | Explanation:
    |     These lines were always and only run by failing examples:
    |         /home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py:433
    +---------------- 3 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 20, in test_sorted_columns_divisions_are_sorted
    |     result = parquet_core.sorted_columns(statistics)
    |   File "/home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py", line 442, in sorted_columns
    |     assert divisions == sorted(divisions)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | AssertionError
    | Falsifying example: test_sorted_columns_divisions_are_sorted(
    |     statistics=[{'columns': [{'name': '0', 'min': 0, 'max': -1}]}],
    | )
    +---------------- 4 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/12/hypo.py", line 20, in test_sorted_columns_divisions_are_sorted
    |     result = parquet_core.sorted_columns(statistics)
    |   File "/home/npc/miniconda/lib/python3.13/site-packages/dask/dataframe/io/parquet/core.py", line 442, in sorted_columns
    |     assert divisions == sorted(divisions)
    |                         ~~~~~~^^^^^^^^^^^
    | TypeError: '<' not supported between instances of 'NoneType' and 'int'
    | Falsifying example: test_sorted_columns_divisions_are_sorted(
    |     statistics=[{'columns': [{'name': '0', 'min': 0, 'max': None}]}],
    | )
    +------------------------------------

Traceback (most recent call last):
  File "/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py", line 496, in __new__
    return get_async_backend().create_capacity_limiter(total_tokens)
           ~~~~~~~~~~~~~~~~~^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_eventloop.py", line 156, in get_async_backend
    asynclib_name = sniffio.current_async_library()
  File "/home/npc/miniconda/lib/python3.13/site-packages/sniffio/_impl.py", line 93, in current_async_library
    raise AsyncLibraryNotFoundError(
        "unknown async library, or not in async context"
    )
sniffio._impl.AsyncLibraryNotFoundError: unknown async library, or not in async context

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/npc/pbt/agentic-pbt/worker_/52/hypo.py", line 11, in <module>
    test_capacity_limiter_accepts_all_infinity_representations()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/npc/pbt/agentic-pbt/worker_/52/hypo.py", line 6, in test_capacity_limiter_accepts_all_infinity_representations
    def test_capacity_limiter_accepts_all_infinity_representations(inf_value):
                   ^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 2124, in wrapped_test
    raise the_error_hypothesis_found
  File "/home/npc/pbt/agentic-pbt/worker_/52/hypo.py", line 7, in test_capacity_limiter_accepts_all_infinity_representations
    limiter = CapacityLimiter(inf_value)
  File "/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py", line 498, in __new__
    return CapacityLimiterAdapter(total_tokens)
  File "/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py", line 614, in __init__
    self.total_tokens = total_tokens
    ^^^^^^^^^^^^^^^^^
  File "/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py", line 646, in total_tokens
    raise TypeError("total_tokens must be an int or math.inf")
TypeError: total_tokens must be an int or math.inf
Falsifying example: test_capacity_limiter_accepts_all_infinity_representations(
    inf_value=inf,
)

/home/npc/pbt/agentic-pbt/worker_/6/repo.py:47: DeprecationWarning: `NBitBase` is deprecated and will be removed from numpy.typing in the future. Use `@typing.overload` or a `TypeVar` with a scalar-type as upper bound, instead. (deprecated in NumPy 2.3)
  print(f"NBitBase object from __getattr__: {npt.__getattr__('NBitBase')}")
/home/npc/pbt/agentic-pbt/worker_/6/repo.py:48: DeprecationWarning: `NBitBase` is deprecated and will be removed from numpy.typing in the future. Use `@typing.overload` or a `TypeVar` with a scalar-type as upper bound, instead. (deprecated in NumPy 2.3)
  print(f"They are the same object: {npt.NBitBase is npt.__getattr__('NBitBase')}")
Testing NBitBase deprecation warning...

Test 1: Direct access to npt.NBitBase
Warnings captured: 0
BUG CONFIRMED: No deprecation warning was raised when accessing NBitBase!

==================================================

Test 2: Manual __getattr__ call (to prove the warning IS defined)
Warnings captured: 1
Warning message: `NBitBase` is deprecated and will be removed from numpy.typing in the future. Use `@typing.overload` or a `TypeVar` with a scalar-type as upper bound, instead. (deprecated in NumPy 2.3)

==================================================

Test 3: Checking module namespace
'NBitBase' in npt.__dict__: True
'NBitBase' in dir(npt): True

==================================================

Test 4: Understanding Python's attribute lookup order
When accessing npt.NBitBase, Python:
1. First checks npt.__dict__ (module globals)
2. Only calls __getattr__ if not found in __dict__

Since NBitBase IS in __dict__, __getattr__ is never called!
NBitBase object from direct access: <class 'numpy.typing.NBitBase'>
NBitBase object from __getattr__: <class 'numpy.typing.NBitBase'>
They are the same object: True

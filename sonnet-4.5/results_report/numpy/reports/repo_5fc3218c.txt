/home/npc/miniconda/lib/python3.13/site-packages/numpy/f2py/symbolic.py:1514: ExprWarning: fromstring: treating 'ArithOp.DIV' as symbol (original=ArithOp.DIV(x, y))
  ewarn(
Original expression: ArithOp.DIV(x, y)
Type of e1: <class 'numpy.f2py.symbolic.Expr'>
e1.op: Op.APPLY
e1.data: (<ArithOp.DIV: 6>, (Expr(Op.SYMBOL, 'x'), Expr(Op.SYMBOL, 'y')), {})

tostring() outputs by language:
  Fortran: ArithOp.DIV(x, y)
  Python:  ArithOp.DIV(x, y)
  C:       x / y

Attempting to re-parse Fortran output: "ArithOp.DIV(x, y)"
Re-parsed expression: ArithOp.DIV(x, y)
Type of e2: <class 'numpy.f2py.symbolic.Expr'>
e2.op: Op.APPLY
e2.data: (Expr(Op.SYMBOL, 'ArithOp.DIV'), (Expr(Op.SYMBOL, 'x'), Expr(Op.SYMBOL, 'y')), {})
Are they equal? False
FAILURE: Round-trip failed!
  e1.data[0]: ArithOp.DIV, type: <enum 'ArithOp'>
  e2.data[0]: ArithOp.DIV, type: <class 'numpy.f2py.symbolic.Expr'>

Attempting to re-parse Python output: "ArithOp.DIV(x, y)"
Re-parsed expression: ArithOp.DIV(x, y)
Are they equal? False
FAILURE: Round-trip failed for Python mode!

Attempting to re-parse C output: "x / y"
Re-parsed expression: ArithOp.DIV(x, y)
Are they equal? True
SUCCESS: Round-trip works in C mode!

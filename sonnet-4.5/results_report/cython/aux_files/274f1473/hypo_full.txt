============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.4.1, pluggy-1.5.0 -- /home/npc/miniconda/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default'
rootdir: /home/npc/pbt/agentic-pbt/worker_/40
plugins: anyio-4.9.0, hypothesis-6.139.1, asyncio-1.2.0, langsmith-0.4.29
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 1 item

hypo.py::test_gdb_version_regex_bug FAILED                               [100%]

=================================== FAILURES ===================================
__________________________ test_gdb_version_regex_bug __________________________

    @given(
>       st.integers(min_value=0, max_value=99),
                   ^^^
        st.integers(min_value=0, max_value=99),
        st.integers(min_value=0, max_value=99),
        st.integers(min_value=0, max_value=99),
    )

hypo.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py:1613: in _raise_to_user
    raise the_error_hypothesis_found
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ubuntu_major = 12, ubuntu_minor = 1, gdb_major = 7, gdb_minor = 2

    @given(
        st.integers(min_value=0, max_value=99),
        st.integers(min_value=0, max_value=99),
        st.integers(min_value=0, max_value=99),
        st.integers(min_value=0, max_value=99),
    )
    @example(ubuntu_major=12, ubuntu_minor=1, gdb_major=7, gdb_minor=2)
    @settings(max_examples=1000)
    def test_gdb_version_regex_bug(ubuntu_major, ubuntu_minor, gdb_major, gdb_minor):
        """Test that GDB version regex incorrectly matches package version instead of actual version."""
        # Only test cases where the versions differ
        assume(ubuntu_major != gdb_major or ubuntu_minor != gdb_minor)
    
        # The regex from Cython.Debugger.Tests.TestLibCython.test_gdb() line 42
        regex = r"GNU gdb [^\d]*(\d+)\.(\d+)"
    
        # Format typical of Ubuntu/Debian GDB packages
        test_input = f"GNU gdb (Ubuntu {ubuntu_major}.{ubuntu_minor}-0ubuntu1~22.04) {gdb_major}.{gdb_minor}"
    
        match = re.match(regex, test_input)
        assert match is not None, f"Regex should match string: {test_input}"
    
        groups = tuple(map(int, match.groups()))
    
        # The bug: regex matches Ubuntu package version instead of actual GDB version
>       assert groups == (gdb_major, gdb_minor), \
            f"Regex matched Ubuntu version {groups} instead of GDB version ({gdb_major}, {gdb_minor})"
E       AssertionError: Regex matched Ubuntu version (12, 1) instead of GDB version (7, 2)
E       assert (12, 1) == (7, 2)
E         
E         At index 0 diff: 12 != 7
E         
E         Full diff:
E           (
E         -     7,
E         -     2,...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show
E       Falsifying explicit example: test_gdb_version_regex_bug(
E           ubuntu_major=12,
E           ubuntu_minor=1,
E           gdb_major=7,
E           gdb_minor=2,
E       )

hypo.py:33: AssertionError
=========================== short test summary info ============================
FAILED hypo.py::test_gdb_version_regex_bug - AssertionError: Regex matched Ub...
============================== 1 failed in 0.14s ===============================

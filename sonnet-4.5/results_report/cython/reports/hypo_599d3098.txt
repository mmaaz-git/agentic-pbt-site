============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.4.1, pluggy-1.5.0 -- /home/npc/miniconda/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default'
rootdir: /home/npc/pbt/agentic-pbt/worker_/40
plugins: anyio-4.9.0, hypothesis-6.139.1, asyncio-1.2.0, langsmith-0.4.29
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 1 item

hypo.py::test_get_slot_error_type FAILED                                 [100%]

=================================== FAILURES ===================================
___________________________ test_get_slot_error_type ___________________________

slot_name = '0'

    @given(st.text(min_size=1, max_size=30))
    def test_get_slot_error_type(slot_name):
        try:
>           get_slot_by_name(slot_name, {})

hypo.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

slot_name = '0', compiler_directives = {}

    def get_slot_by_name(slot_name, compiler_directives):
        # For now, only search the type struct, no referenced sub-structs.
        for slot in get_slot_table(compiler_directives).slot_table:
            if slot.slot_name == slot_name:
                return slot
>       assert False, "Slot not found: %s" % slot_name
               ^^^^^
E       AssertionError: Slot not found: 0

/home/npc/miniconda/lib/python3.13/site-packages/Cython/Compiler/TypeSlots.py:792: AssertionError

During handling of the above exception, another exception occurred:

    @given(st.text(min_size=1, max_size=30))
>   def test_get_slot_error_type(slot_name):
                   ^^^

hypo.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

slot_name = '0'

    @given(st.text(min_size=1, max_size=30))
    def test_get_slot_error_type(slot_name):
        try:
            get_slot_by_name(slot_name, {})
        except AssertionError:
>           pytest.fail("Bug: AssertionError instead of proper exception")
E           Failed: Bug: AssertionError instead of proper exception
E           Falsifying example: test_get_slot_error_type(
E               slot_name='0',  # or any other generated value
E           )

hypo.py:14: Failed
=========================== short test summary info ============================
FAILED hypo.py::test_get_slot_error_type - Failed: Bug: AssertionError instea...
============================== 1 failed in 1.74s ===============================

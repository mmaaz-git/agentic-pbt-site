Input: -DA=0
Expected: ('A', '0')
Actual:   ('A', '')
Input: -DFOO=bar
Expected: ('FOO', 'bar')
Actual:   ('FOO', 'ar')
  + Exception Group Traceback (most recent call last):
  |   File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 45, in <module>
  |     test_define_macro_value_parsing()
  |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  |   File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 10, in test_define_macro_value_parsing
  |     st.text(min_size=1, max_size=20, alphabet=st.characters(min_codepoint=65, max_codepoint=90)),
  |                ^^^
  |   File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 2062, in wrapped_test
  |     _raise_to_user(errors, state.settings, [], " in explicit examples")
  |     ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/home/npc/miniconda/lib/python3.13/site-packages/hypothesis/core.py", line 1613, in _raise_to_user
  |     raise the_error_hypothesis_found
  | ExceptionGroup: Hypothesis found 2 distinct failures in explicit examples. (2 sub-exceptions)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 38, in test_define_macro_value_parsing
    |     assert actual_value == macro_value, f"Macro value mismatch: expected '{macro_value}', got '{actual_value}'"
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | AssertionError: Macro value mismatch: expected '0', got ''
    | Falsifying explicit example: test_define_macro_value_parsing(
    |     macro_name='A',
    |     macro_value='0',
    | )
    +---------------- 2 ----------------
    | Traceback (most recent call last):
    |   File "/home/npc/pbt/agentic-pbt/worker_/11/hypo.py", line 38, in test_define_macro_value_parsing
    |     assert actual_value == macro_value, f"Macro value mismatch: expected '{macro_value}', got '{actual_value}'"
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | AssertionError: Macro value mismatch: expected 'bar', got 'ar'
    | Falsifying explicit example: test_define_macro_value_parsing(
    |     macro_name='FOO',
    |     macro_value='bar',
    | )
    +------------------------------------

Testing is_valid_tag with strings that should be rejected:
============================================================
Input: '.0'
  Regular string: is_valid_tag('.0') = True
  EncodedString:  is_valid_tag(EncodedString('.0')) = False
  ⚠️  INCONSISTENCY: Regular string returns True, EncodedString returns False

Input: '.1'
  Regular string: is_valid_tag('.1') = True
  EncodedString:  is_valid_tag(EncodedString('.1')) = False
  ⚠️  INCONSISTENCY: Regular string returns True, EncodedString returns False

Input: '.123'
  Regular string: is_valid_tag('.123') = True
  EncodedString:  is_valid_tag(EncodedString('.123')) = False
  ⚠️  INCONSISTENCY: Regular string returns True, EncodedString returns False

Input: '.999'
  Regular string: is_valid_tag('.999') = True
  EncodedString:  is_valid_tag(EncodedString('.999')) = False
  ⚠️  INCONSISTENCY: Regular string returns True, EncodedString returns False

Input: '.0000'
  Regular string: is_valid_tag('.0000') = True
  EncodedString:  is_valid_tag(EncodedString('.0000')) = False
  ⚠️  INCONSISTENCY: Regular string returns True, EncodedString returns False

============================================================
Testing edge cases that should return True:
============================================================
Input: '.a'
  Regular string: True
  EncodedString:  True

Input: '.1a'
  Regular string: True
  EncodedString:  True

Input: '0.'
  Regular string: True
  EncodedString:  True

Input: 'normal_name'
  Regular string: True
  EncodedString:  True

Input: '_private'
  Regular string: True
  EncodedString:  True

Input: ''
  Regular string: True
  EncodedString:  True


## Documentation Analysis

### Starlette Documentation
The Starlette documentation for CORSMiddleware:
- Does NOT specify how whitespace in `allow_headers` should be handled
- Does NOT mention whether headers should be trimmed or normalized
- Shows only simple examples without whitespace edge cases
- Documents that `allow_headers` accepts a list of header names that will be allowed in CORS requests

### HTTP and CORS Specifications

1. **RFC 7230 (HTTP/1.1)**:
   - Header field names are tokens that CANNOT contain whitespace
   - "No whitespace is allowed between the header field-name and colon"
   - Header field values should have leading/trailing whitespace trimmed
   - Servers MUST reject requests with whitespace in header names

2. **WHATWG Fetch Specification**:
   - Headers should be normalized by removing leading and trailing HTTP whitespace bytes
   - Header names are compared using "byte-case-insensitive" matching
   - Standard practice is to normalize headers

3. **MDN Documentation (Access-Control-Request-Headers)**:
   - Headers should be comma-separated, lowercase, sorted, and unique
   - No explicit mention of whitespace handling, but examples show no spaces

### Analysis of Documentation Implications

1. **Expected Behavior**:
   - Based on HTTP specifications, header names should NEVER contain whitespace
   - The middleware should either:
     a) Strip whitespace from configured headers (defensive programming)
     b) Reject/warn about invalid header names with whitespace at configuration time

2. **Current Behavior vs. Documentation**:
   - The current implementation silently accepts headers with whitespace in configuration
   - It then fails to match properly formatted headers from clients
   - This creates a confusing situation not covered by documentation

3. **Documentation Gap**:
   - Starlette docs don't specify whitespace handling
   - However, allowing whitespace in header names violates HTTP specifications
   - The middleware should follow HTTP standards implicitly

### Conclusion
While the Starlette documentation doesn't explicitly state how whitespace should be handled, the HTTP specifications are clear that header names cannot contain whitespace. The current behavior of accepting whitespace in configuration but not handling it consistently is problematic and violates the principle of least surprise. The middleware should normalize headers consistently to avoid this issue.
Documentation Review for CORSMiddleware
========================================

## Starlette Documentation

The official Starlette documentation for CORSMiddleware states:
- `allow_headers` parameter accepts a sequence of headers, with default value of empty list `[]`
- Can be set to `['*']` to allow all headers
- The middleware is "restrictive by default" and requires explicit configuration
- When `allow_credentials` is True, `allow_headers` cannot be `['*']`
- Always allows safelisted headers: Accept, Accept-Language, Content-Language, and Content-Type

The documentation does NOT specify:
- How whitespace in header names should be handled
- Whether header names are normalized (trimmed, lowercased, etc.)
- The exact matching algorithm for comparing allowed vs requested headers

## HTTP and CORS Specifications

### RFC 7230 (HTTP/1.1)
- Header field names are case-insensitive
- "No whitespace is allowed between the header field-name and colon"
- Server MUST reject requests with whitespace between field-name and colon

### MDN Documentation on Access-Control-Request-Headers
- Should be a "sorted list of unique, comma-separated, lowercase" header names
- Does not explicitly specify whether spaces around commas are allowed or how to handle them

### Key Finding
The HTTP specification is clear that header field names themselves should NOT contain whitespace. However, the specifications don't explicitly address:
1. Whether whitespace is allowed in the comma-separated list of header names in Access-Control-Request-Headers
2. How implementations should handle header names with leading/trailing whitespace when they are provided as configuration

## Conclusion

The documentation does not explicitly specify how the CORSMiddleware should handle whitespace in header names when:
1. Configuring the `allow_headers` parameter
2. Processing the `Access-Control-Request-Headers` header value

Since header field names in HTTP should not contain whitespace according to RFC 7230, it would be reasonable for an implementation to either:
- Reject header names with whitespace entirely
- Normalize (trim) whitespace from header names during configuration and comparison
- Be consistent in how it processes headers throughout the middleware

The current implementation is inconsistent - it preserves whitespace during configuration but strips it during validation, leading to unexpected behavior.
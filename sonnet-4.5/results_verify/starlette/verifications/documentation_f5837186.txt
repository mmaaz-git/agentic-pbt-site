DOCUMENTATION ANALYSIS
======================

1. STARLETTE DOCUMENTATION
--------------------------
The official Starlette documentation for CORSMiddleware (https://www.starlette.io/middleware/#corsmiddleware):
- Shows how to configure allow_origins with a list of strings
- Examples show clean URLs like 'https://example.org' without spaces
- NO mention of whitespace handling or normalization for origins
- NO explicit requirement that origins must be trimmed or that whitespace will be handled

2. RFC 6454 - THE ORIGIN HEADER SPECIFICATION
----------------------------------------------
According to RFC 6454:
- Origin header syntax: scheme "://" host [ ":" port ]
- Multiple origins can be separated by a single SP (space) character
- The RFC defines the serialized format as precise with no leading/trailing whitespace
- Origin values sent by browsers follow this strict format without extraneous whitespace

3. CORS SPECIFICATION (WHATWG Fetch)
-------------------------------------
The Fetch specification and MDN documentation:
- Show origin examples as clean URLs without whitespace
- No indication that origins should contain whitespace
- Browser implementations send origin headers without leading/trailing spaces

4. CONSISTENCY WITHIN STARLETTE
--------------------------------
Looking at the CORSMiddleware code:
- Line 67: allow_headers are normalized with .lower()
- Line 58: Headers are also sorted and use set operations
- Line 129: Headers are stripped with .strip()
- Line 65: allow_origins are NOT normalized at all

This shows inconsistent behavior within the same middleware class.

5. USER EXPECTATIONS
--------------------
Based on common practices:
- Configuration values often come from environment variables or config files
- These sources may inadvertently include whitespace from formatting
- Users would reasonably expect the middleware to handle minor formatting differences
- The fact that headers ARE normalized sets a precedent that the middleware handles such issues

6. DOCUMENTATION GAPS
---------------------
The documentation does not:
- Specify that origin values must be exact matches without whitespace
- Warn about whitespace sensitivity
- Explain that origins are treated differently from headers (which are normalized)
- Provide guidance on origin format requirements

CONCLUSION
----------
While the documentation doesn't explicitly promise whitespace normalization, it also doesn't warn against it. The inconsistency with how headers are handled (normalized) versus origins (not normalized) suggests this is an oversight rather than intentional design. The lack of any documentation about this sensitivity combined with the practical issues it causes suggests this behavior should either be fixed or clearly documented.
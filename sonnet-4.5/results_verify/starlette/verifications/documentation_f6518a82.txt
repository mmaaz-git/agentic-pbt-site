# Documentation Analysis

## Starlette Documentation

The Starlette documentation for CORSMiddleware states:
- The middleware handles CORS preflight requests (OPTIONS with specific headers)
- The `allow_headers` parameter specifies which HTTP request headers are supported (defaults to `[]`)
- Always allows `Accept`, `Accept-Language`, `Content-Language`, and `Content-Type` headers by default
- Default settings are described as "restrictive"

**Key finding**: The documentation does not specify how the middleware should handle empty or malformed Access-Control-Request-Headers values.

## CORS Specification Research

### MDN Documentation
The MDN documentation only provides basic syntax: "A sorted list of unique, comma-separated, lowercase HTTP headers that are included in the request." It does not specify handling of empty values or trailing commas.

### W3C/WHATWG Fetch Specification
The current CORS specification has moved to the WHATWG Fetch specification. After reviewing it, there is no explicit guidance on how to handle:
- Empty Access-Control-Request-Headers values
- Headers containing only commas
- Headers with trailing commas

### RFC 9110 (HTTP Semantics)
RFC 9110 provides general guidance on comma-separated lists in HTTP headers:
- Recipients should parse protocol elements "defensively"
- Implementations should be tolerant of variations in list parsing
- "HTTP does not define specific error handling mechanisms except when they have a direct impact on security"

This suggests that implementations should be lenient and handle edge cases gracefully rather than rejecting them.

## Documentation Gap Analysis

1. **No explicit specification**: Neither CORS specifications nor Starlette documentation explicitly state how to handle empty or malformed header lists.

2. **General HTTP principles suggest leniency**: RFC 9110 recommends defensive parsing and tolerance for variations.

3. **Common web practice**: Most web servers and middleware handle these cases gracefully:
   - Empty headers are treated as "no headers requested"
   - Trailing commas are ignored
   - Multiple consecutive commas are treated as separators with empty items filtered out

## Conclusion

The documentation does not explicitly forbid the current behavior, but it also doesn't mandate it. However, HTTP specifications lean toward defensive, lenient parsing. The current implementation's strict rejection of empty values appears to be more restrictive than necessary and goes against the general principle of being liberal in what you accept.

Since the documentation doesn't specify this behavior either way, and general HTTP principles suggest leniency, the current strict behavior appears to be an implementation choice rather than a specification requirement.
DOCUMENTATION FINDINGS FOR STARLETTE FLOATCONVERTOR

After examining the Starlette source code and available documentation:

1. SOURCE CODE EXAMINATION:
The FloatConvertor class in starlette/convertors.py is a simple implementation with:
- A regex pattern: r"[0-9]+(\.[0-9]+)?" that accepts integers or decimal numbers with any number of decimal places
- A convert() method that converts string to float using Python's float() function
- A to_string() method that formats floats using "%0.20f" with trailing zeros stripped

2. DOCUMENTED PURPOSE:
The convertors are used in Starlette's routing system to handle path parameters. When a route like "/items/{item_id:float}" is defined, the FloatConvertor:
- Matches the regex pattern against URL segments
- Converts matched strings to Python floats via convert()
- Converts floats back to strings via to_string() when generating URLs

3. ROUND-TRIP PROPERTY:
There is NO explicit documentation stating that convertors must support round-trip conversion (i.e., that convert(to_string(convert(s))) == convert(s)). The code shows that to_string() is used when generating URLs from route parameters, but there's no documented requirement for perfect round-trip behavior.

4. DESIGN CONSTRAINTS:
The to_string() implementation shows clear design decisions:
- Uses "%0.20f" formatting (20 decimal places max)
- Strips trailing zeros and decimal points for cleaner URLs
- Validates that values are non-negative, not NaN, and not infinite

5. SIMILAR PATTERNS:
Looking at other convertors:
- IntegerConvertor also doesn't guarantee perfect round-trip for all inputs (rejects negative integers)
- StringConvertor validates no path separators
- These suggest convertors are designed with URL-safety constraints, not mathematical precision

CONCLUSION:
There is no documentation that explicitly requires or guarantees round-trip conversion properties for FloatConvertor. The implementation shows a deliberate choice to limit precision to 20 decimal places, likely for practical URL formatting reasons.
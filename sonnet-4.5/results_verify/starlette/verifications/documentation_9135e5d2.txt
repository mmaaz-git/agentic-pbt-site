# Documentation Analysis for CORSMiddleware Whitespace Handling

## Starlette Documentation

The Starlette documentation for CORSMiddleware is minimal regarding whitespace handling:
- The `allow_headers` parameter accepts a list of strings representing allowed headers
- No explicit mention of whitespace handling or normalization
- No guidance on whether headers should be trimmed or how whitespace is handled

## HTTP and CORS Specifications

### RFC 7230 (HTTP/1.1)
- Header field names MUST NOT contain whitespace
- No whitespace is allowed between the header field-name and colon
- Field values MAY have optional whitespace (OWS) before and after, which should be trimmed by parsers
- Header names are case-insensitive

### CORS Specification
- Access-Control-Request-Headers contains a comma-separated list of header names
- The specification allows optional whitespace around commas in comma-separated lists
- However, practical implementations show that browsers can be inconsistent with whitespace handling

### Best Practices
Based on specifications and real-world implementations:
1. Header names themselves should never contain whitespace
2. When parsing comma-separated lists, whitespace around commas should be handled gracefully
3. Header name comparisons should be case-insensitive

## Analysis of Current Behavior

The current CORSMiddleware implementation:
1. **Configuration Side**: Preserves whitespace in configured headers (only lowercases them)
2. **Request Side**: Strips whitespace from incoming header names before comparison

This creates an inconsistency that violates the principle of defensive programming.

## Expected Behavior

Based on specifications and best practices:
1. **Header names should not contain whitespace** - This is a fundamental HTTP requirement
2. **Middleware should be defensive** - It should normalize input to prevent configuration errors
3. **Consistency is key** - Whatever normalization is applied should be consistent between configuration and request handling

## Documentation Gap

The Starlette documentation does not specify:
- How whitespace in header configurations is handled
- Whether header names are normalized (beyond lowercasing)
- Best practices for header configuration

This lack of specification means the current behavior is technically "undefined" from a documentation perspective. However, the inconsistent handling (preserving whitespace in config but stripping in requests) is clearly problematic and unexpected.

## Conclusion

While the documentation doesn't explicitly state how whitespace should be handled, the current behavior:
1. Allows invalid header names (with whitespace) to be configured
2. Creates an inconsistent comparison that will always fail
3. Violates the principle of least surprise

The middleware should either:
- Strip whitespace from both configuration and requests (recommended)
- Reject headers with whitespace at configuration time with a clear error
- Document the current behavior if it's intentional (unlikely given it creates unusable configurations)
DOCUMENTATION ANALYSIS
======================

1. HTTP SPECIFICATION (RFC 7233):

   According to RFC 7233 (HTTP/1.1 Range Requests):

   a) SERVERS MAY COALESCE OVERLAPPING RANGES:
      "When multiple ranges are requested, a server MAY coalesce any of the ranges that overlap,
      or that are separated by a gap that is smaller than the overhead of sending multiple parts,
      regardless of the order in which the corresponding byte-range-spec appeared in the received
      Range header field."

   b) SECURITY CONSIDERATIONS:
      "Servers ought to ignore, coalesce, or reject egregious range requests, such as requests
      for more than two overlapping ranges or for many small ranges in a single set, particularly
      when the ranges are requested out of order for no apparent reason."

   c) CLIENT EXPECTATIONS:
      "A client that receives a multipart response MUST inspect the Content-Range header field
      present in each body part in order to determine which range is contained in that body part;
      a client cannot rely on receiving the same ranges that it requested, nor the same order
      that it requested."

2. STARLETTE IMPLEMENTATION:

   a) The _parse_range_header function has a "# Merge ranges" comment at line 492, clearly
      indicating the INTENT to merge overlapping ranges.

   b) The function contains logic specifically designed to merge overlapping ranges (lines 494-506).

   c) There is no documentation in the function itself, but the code structure and comments
      indicate merging is the intended behavior.

3. EXPECTED BEHAVIOR:

   Based on RFC 7233 and the code's clear intent to merge ranges:
   - Overlapping ranges SHOULD be coalesced/merged
   - The returned list should contain non-overlapping, sorted ranges
   - The current implementation TRIES to do this but has a bug in the algorithm

4. KEY FINDING:

   The code's behavior (attempting to merge but failing in certain cases) does NOT match:
   - The RFC specification (which allows and encourages merging)
   - The code's own intent (as evidenced by the "# Merge ranges" comment)
   - The expected invariant that returned ranges should be non-overlapping

CONCLUSION: The documentation (RFC 7233) and code intent both support merging overlapping ranges.
The current implementation has a bug that prevents proper merging in certain cases, violating
both the specification and the code's intended behavior.
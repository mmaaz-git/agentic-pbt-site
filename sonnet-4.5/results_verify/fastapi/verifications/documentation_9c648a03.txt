DOCUMENTATION ANALYSIS
======================

FASTAPI DOCUMENTATION FINDINGS:
-------------------------------
1. The FastAPI documentation at https://fastapi.tiangolo.com/tutorial/handling-errors/ does NOT explicitly state:
   - Which status codes are valid or invalid
   - Whether custom/non-standard status codes are supported
   - That only standard HTTP status codes work without a detail parameter

2. The documentation shows examples using common status codes (404, 400, etc.) but doesn't indicate any restrictions.

3. The HTTPException docstring in the code says:
   - "HTTP status code to send to the client" for the status_code parameter
   - No mention of restrictions to standard codes only

4. The type annotation is `status_code: int`, suggesting any integer is acceptable.

STARLETTE DOCUMENTATION:
------------------------
FastAPI's HTTPException inherits from Starlette's HTTPException without overriding the __init__ method,
so Starlette's behavior is directly inherited. Starlette's implementation assumes standard HTTP status
codes when detail is None.

HTTP SPECIFICATION:
------------------
According to HTTP RFCs:
- Standard status codes are defined (100-599 range)
- Custom status codes ARE allowed within the valid ranges
- 599 is within the valid server error range (500-599)
- Non-standard codes like 104 are technically allowed but not standardized

DOCUMENTATION GAPS:
------------------
1. Neither FastAPI nor Starlette documentation mentions that:
   - Non-standard status codes require a detail parameter
   - Omitting detail only works for standard HTTP status codes
   - The API behavior is inconsistent based on whether detail is provided

2. The type signature (status_code: int) is misleading as it suggests any integer works equally well.

3. Users would reasonably expect one of these behaviors:
   - ALL status codes work without detail (perhaps with a generic message)
   - ONLY standard codes are accepted (type checking/validation)
   - Clear documentation about the limitation

The current implementation creates a surprising edge case that is not documented.
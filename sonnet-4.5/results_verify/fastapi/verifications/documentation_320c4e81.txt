## Documentation Analysis for get_swagger_ui_html

### Function Documentation

The `get_swagger_ui_html` function documentation states:
- Purpose: "Generate and return the HTML that loads Swagger UI for the interactive API docs (normally served at `/docs`)."
- `oauth2_redirect_url` parameter: "The OAuth2 redirect URL, it is normally automatically handled by FastAPI."
- The function is for overriding default behavior when needed

### Security Documentation Findings

1. **No Explicit Security Warning**: The function documentation does not warn about the need to escape or sanitize the `oauth2_redirect_url` parameter when injecting it into JavaScript/HTML context.

2. **FastAPI Security Best Practices**: General FastAPI security documentation emphasizes:
   - Input validation and sanitization to prevent XSS attacks
   - Proper escaping of user-generated content
   - Using standard libraries like `html.escape()` or specialized libraries
   - Template engines like Jinja2 automatically escape variables

3. **Common Security Standards**: Industry-standard security practices require:
   - All user-controlled or external input must be properly escaped when embedded in HTML/JavaScript
   - Special characters like quotes, backslashes, and angle brackets must be encoded
   - JavaScript string literals require JavaScript-specific escaping, not just HTML escaping

4. **Inconsistency in Implementation**: The code shows inconsistent security practices:
   - Line 136: `swagger_ui_parameters` values are properly escaped using `json.dumps()`
   - Line 139: `oauth2_redirect_url` is directly interpolated without escaping
   - This inconsistency suggests an oversight rather than intentional design

5. **OAuth2 Security Context**: While `oauth2_redirect_url` is described as "normally automatically handled by FastAPI," this doesn't exempt it from security requirements when manually provided.

### Documentation Gap

The documentation does not:
- Specify that `oauth2_redirect_url` must be a safe, properly formatted URL
- Warn developers about potential XSS risks when using untrusted input
- Mention that the parameter is directly embedded in JavaScript without escaping
- Provide security guidelines for using this function with user-controlled input

### Conclusion

While the documentation doesn't explicitly promise that the function will escape the `oauth2_redirect_url` parameter, the lack of escaping violates:
1. General web security best practices
2. FastAPI's own stated security principles about XSS prevention
3. The consistent pattern used elsewhere in the same function (line 136)
4. The reasonable expectation that a web framework would not create XSS vulnerabilities

The documentation's silence on security requirements does not excuse the XSS vulnerability. This is a security bug, not a documentation issue.
## Documentation Analysis for get_typed_annotation

### FastAPI Documentation
The `get_typed_annotation` function is an internal utility function in FastAPI's `fastapi/dependencies/utils.py` module. There is no public API documentation for this function as it is considered an internal implementation detail. The function is not mentioned in FastAPI's public documentation at https://fastapi.tiangolo.com/.

### Function Purpose (from source code analysis)
The function is designed to:
1. Handle string annotations that may be forward references
2. Convert string annotations to ForwardRef objects
3. Evaluate ForwardRef objects to get the actual type

### Current Implementation
```python
def get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:
    if isinstance(annotation, str):
        annotation = ForwardRef(annotation)
        annotation = evaluate_forwardref(annotation, globalns, globalns)
    return annotation
```

### Python Typing Documentation
According to Python's typing module documentation and PEP 484:

1. **Forward References**: String annotations are used for forward references when a type is not yet defined. The string must be a valid Python expression that can be evaluated.

2. **ForwardRef Requirements**: The ForwardRef class from Python's typing module requires that the string passed to it must be a valid Python expression. From the Python source code, ForwardRef attempts to compile the string using `compile(arg, '<string>', 'eval')`.

3. **Valid Expressions**: The string must be compilable as an expression in eval mode. Python keywords like 'if', 'class', 'def', etc. are NOT valid expressions - they are statements or keywords that cannot be evaluated.

### Key Documentation Points
1. There is no FastAPI documentation stating that keyword annotations should be supported
2. Python's typing module explicitly requires ForwardRef strings to be valid expressions
3. The error comes from Python's standard library, not FastAPI code
4. Python allows string annotations with any content syntactically (e.g., `def f(x: "if"): pass`), but these are not meant to be evaluated as ForwardRefs

### Documentation Gap
While FastAPI doesn't document this limitation, it's inheriting the behavior from Python's standard typing module. The error message "Forward reference must be an expression" comes directly from Python's typing.ForwardRef, not from FastAPI code.
DOCUMENTATION FINDINGS FOR fastapi.dependencies.utils.get_path_param_names

## Function Implementation
The function `get_path_param_names` is defined in `fastapi/utils.py` (line 59-60):
```python
def get_path_param_names(path: str) -> Set[str]:
    return set(re.findall("{(.*?)}", path))
```

## Function Documentation
- No explicit documentation or docstring exists for this internal utility function
- The function is not documented in the official FastAPI API reference
- It's an internal utility function used by FastAPI to extract parameter names from path templates

## FastAPI Path Parameter Documentation
From the official FastAPI tutorial on path parameters:
- The documentation demonstrates path parameters using standard Python variable naming conventions (e.g., item_id, model_name)
- No explicit specifications about valid characters or restrictions on whitespace in path parameter names
- Examples show only conventional Python identifiers being used as path parameter names
- Emphasis is on type safety, data validation, and automatic documentation

## OpenAPI Specification (v3.1.0)
The OpenAPI specification provides limited guidance:
- Parameter names MUST correspond to template expressions within the path field
- Path parameter values MUST NOT contain unescaped generic syntax characters: forward slashes (/), question marks (?), hashes (#)
- The specification doesn't explicitly list all allowed characters in parameter names themselves
- The specification implies path parameters should follow URL template conventions

## Key Observation
Neither FastAPI documentation nor OpenAPI specification explicitly defines what characters are valid in path parameter NAMES (the part between curly braces). The examples shown universally use conventional identifiers without whitespace. The fact that path parameters are matched to Python function parameters strongly suggests they should follow Python identifier rules, which explicitly prohibit whitespace characters including newlines.

## Conclusion on Documentation
The documentation does not specify the expected behavior when whitespace characters (spaces, tabs, newlines) are used in path parameter names. This is an undefined edge case where the current implementation happens to accept spaces and tabs but not newlines due to the regex pattern used.
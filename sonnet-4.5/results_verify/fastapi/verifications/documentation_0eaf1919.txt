## Documentation Analysis for CORSMiddleware

### Official Documentation
The Starlette documentation for CORSMiddleware (https://www.starlette.io/middleware/#corsmiddleware) provides the following information about the `allow_headers` parameter:

1. **Default value**: Empty list `[]`
2. **Purpose**: Specifies which headers are permitted for cross-origin requests
3. **Special value**: Can be set to `['*']` to allow all headers
4. **Automatic inclusions**: The middleware always allows `Accept`, `Accept-Language`, `Content-Language`, and `Content-Type` headers (safelisted headers)

### Key Observations
1. **No mention of sorting**: The documentation does NOT specify that headers should be maintained in any particular order, sorted or otherwise.
2. **No mention of case sensitivity**: The documentation does NOT specify how header names should be handled regarding case (upper/lower).
3. **No specified behavior for header storage**: There is no documentation about how headers are stored internally or what format they should be in.

### Source Code Analysis
Looking at the actual implementation in `/home/npc/miniconda/lib/python3.13/site-packages/starlette/middleware/cors.py`:

1. Line 58: `allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))` - Headers are sorted
2. Line 60: The sorted headers are used to construct the "Access-Control-Allow-Headers" response header as a comma-joined string
3. Line 67: `self.allow_headers = [h.lower() for h in allow_headers]` - Headers are lowercased for internal storage
4. Line 128-130: During preflight request validation, incoming headers are lowercased and compared against `self.allow_headers`

### Conclusion
The documentation does not specify that:
- Headers should be stored in sorted order
- Headers should be lowercase
- The internal representation should maintain any particular order

The sorting appears to be an internal implementation detail used solely for constructing the "Access-Control-Allow-Headers" response header (line 60), not for the internal storage. The internal storage (`self.allow_headers`) is used for validation purposes (line 129) where order is irrelevant.
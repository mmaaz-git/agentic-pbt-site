TRIAGE ANALYSIS
===============

CONSIDERING EACH CATEGORIZATION:

BUG (Valid Bug Report)
-----------------------
Arguments FOR:
- The API is inconsistent: HTTPException(104) fails but HTTPException(104, "msg") works
- The type signature accepts int but crashes on many integer values
- No documentation warns about this limitation
- Users might legitimately use custom status codes (e.g., 599 for custom errors)
- The error message "104 is not a valid HTTPStatus" is misleading - it IS valid for HTTP, just not in Python's enum
- The behavior creates a surprising edge case that breaks the principle of least surprise

Arguments AGAINST:
- The underlying issue is in Starlette, not FastAPI itself
- Standard practice is to use standard HTTP status codes
- Workaround exists (always provide detail)

INVALID (Incorrect Report)
--------------------------
Arguments FOR:
- None - the bug clearly exists and reproduces exactly as described

Arguments AGAINST:
- The report accurately describes a real issue
- The inconsistent behavior is demonstrable
- The type signature suggests broader support than actually exists

WONTFIX (Trivial/Uninteresting)
--------------------------------
Arguments FOR:
- Using non-standard status codes is relatively rare
- Easy workaround exists (provide a detail parameter)
- The fix would need to be in Starlette, not FastAPI

Arguments AGAINST:
- The inconsistency is confusing and undocumented
- Custom status codes are valid per HTTP specs
- The fix is simple and would improve API consistency
- Silent failures or confusing errors waste developer time

FEATURE_REQUEST (New Functionality)
------------------------------------
Arguments FOR:
- Supporting non-standard codes without detail could be seen as a new feature
- Current behavior might be considered "working as designed" for standard codes

Arguments AGAINST:
- The type signature already claims to accept any int
- This is fixing inconsistent behavior, not adding new functionality
- The partial support (works with detail) suggests full support was intended

DOCUMENTATION_FIX (Documentation Issue)
----------------------------------------
Arguments FOR:
- The main issue is that the limitation isn't documented
- Adding documentation about requiring detail for non-standard codes would help
- The behavior itself might be acceptable if properly documented

Arguments AGAINST:
- The code behavior is genuinely inconsistent and surprising
- Documentation alone doesn't fix the API inconsistency
- Users reasonably expect consistent behavior regardless of status code

FINAL ASSESSMENT:
-----------------
This is a genuine BUG. The API exhibits inconsistent behavior that:
1. Contradicts the type signature (accepts int but fails on many ints)
2. Creates a surprising edge case (works with detail, fails without)
3. Is not documented anywhere
4. Could be easily fixed to provide consistent behavior

While it could be argued this is a DOCUMENTATION_FIX (just document the limitation), the inconsistent behavior itself is problematic enough to warrant being classified as a bug. The fact that HTTPException(104, None) explicitly fails while HTTPException(104, "text") works shows this is not intentional design but rather an oversight in handling the default case.
REPRODUCTION REPORT
===================

I have successfully reproduced the bug described in the report. Here's what I found:

1. Bug Reproduction:
   - The basic reproduction test confirms that when `terms_of_service=""` (empty string) is passed to `get_openapi()`, the field "termsOfService" is NOT included in the output.
   - When `terms_of_service=None` is passed, the field is also not included (as expected).
   - When `terms_of_service="https://example.com/terms"` (non-empty string) is passed, the field IS included.

2. Property-Based Test:
   - The hypothesis test fails with the exact error described: "termsOfService missing when terms_of_service=''"
   - The test correctly identifies that empty strings are being filtered out incorrectly.

3. Code Analysis:
   - Looking at the source code (fastapi/openapi/utils.py, line 498), the issue is clear:
     ```python
     if terms_of_service:
         info["termsOfService"] = terms_of_service
     ```
   - This uses Python's truthiness check, which evaluates empty strings as False.
   - The correct check should be: `if terms_of_service is not None:`

4. Broader Pattern:
   - The same bug pattern exists for other fields:
     * `summary` (line 494): Also filters out empty strings
     * `description` (line 496): Also filters out empty strings
     * `contact` (line 500): Filters out empty dicts
     * `license_info` (line 502): Filters out empty dicts

5. Impact:
   - The bug prevents users from explicitly setting empty values in the OpenAPI specification.
   - This removes the semantic distinction between "field not provided" (None) and "field explicitly empty" ("").
   - This affects API documentation generation and could impact tools that consume the OpenAPI specification.

The bug report is accurate and the reproduction steps work exactly as described.
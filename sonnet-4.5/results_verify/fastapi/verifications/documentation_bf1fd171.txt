DOCUMENTATION FINDINGS FOR FASTAPI OPENAPI DOCS FUNCTIONS

1. OFFICIAL FASTAPI DOCUMENTATION FINDINGS:
   - The FastAPI reference documentation for get_swagger_ui_html and get_redoc_html functions does NOT mention any security considerations regarding HTML/JavaScript escaping
   - The documentation describes these functions as generating HTML for interactive API documentation
   - The functions are described as accepting various URL parameters (openapi_url, title, swagger_js_url, etc.) for customization
   - No warnings are given about potential injection vulnerabilities when using user-provided input

2. PARAMETER DOCUMENTATION:
   - title: Described as "The HTML <title> content, normally shown in the browser tab"
   - openapi_url: "The OpenAPI URL that Swagger UI should load and use"
   - swagger_js_url, swagger_css_url, swagger_favicon_url: URLs for loading external resources
   - oauth2_redirect_url: "The OAuth2 redirect URL"
   - All parameters are documented as strings without mention of escaping requirements

3. INTENDED USE CASE:
   - Documentation states: "You would only call this function yourself if you needed to override some parts"
   - Primary use case is customizing documentation UI with different resource URLs
   - The functions generate complete HTML pages served as responses

4. SECURITY CONSIDERATIONS IN DOCUMENTATION:
   - The search results and documentation focus on authentication/authorization for protecting documentation endpoints
   - Common advice is to disable documentation in production (docs_url=None, redoc_url=None)
   - NO MENTION of HTML/JavaScript injection vulnerabilities
   - NO MENTION that parameters need to be escaped or sanitized
   - NO WARNING that user input should not be directly passed to these functions

5. SOURCE CODE EXAMINATION:
   - Lines 121-123: title parameter is directly interpolated into HTML: <title>{title}</title>
   - Line 132: openapi_url is directly interpolated into JavaScript: url: '{openapi_url}'
   - Line 139: oauth2_redirect_url is directly interpolated: oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}'
   - Lines 121, 122, 128: CSS, favicon, and JS URLs are directly interpolated into href/src attributes
   - Lines 223, 233, 248, 249: Similar unescaped interpolations in get_redoc_html
   - The code uses f-strings for direct interpolation without any HTML or JavaScript escaping

6. COMPARISON WITH BEST PRACTICES:
   - The functions DO use json.dumps() for swagger_ui_parameters (line 136) and init_oauth (line 150)
   - This shows awareness of proper JSON encoding for some parameters
   - However, critical parameters like title and URLs are not escaped

CONCLUSION:
The documentation does not specify that these functions should handle malicious input safely. There are no warnings about injection vulnerabilities, no mention of escaping requirements, and no security guidelines for using these functions with user-provided input. The intended use case appears to be for developers to customize their documentation with trusted values, not to accept arbitrary user input.
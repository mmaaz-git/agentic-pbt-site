## Documentation Analysis for deep_dict_update

### Function Location
The `deep_dict_update` function is located in `/fastapi/utils.py` and is imported and used in `/fastapi/openapi/utils.py`.

### Function Definition
The function has NO docstring or documentation. The function signature is:
```python
def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:
```

### Current Implementation Behavior (from code inspection)
The function implements three distinct behaviors based on data type:
1. **Nested dictionaries**: Recursively merged (lines 189-194)
2. **Lists**: Concatenated using `+` operator (lines 195-200)
3. **All other types**: Overwritten/replaced (lines 201-202)

### Documentation Findings
1. **No official documentation found**: Neither the FastAPI reference documentation nor the source code contains any docstring or comments explaining the intended behavior of this function.

2. **No specification of idempotence**: There is no documentation stating whether this function should be idempotent or not.

3. **No specification of list handling**: The documentation does not specify whether lists should be concatenated, merged, or replaced.

4. **Internal utility function**: This appears to be an internal utility function used primarily in OpenAPI schema generation (based on its usage in openapi/utils.py at lines 406 and 416).

5. **Usage context**: The function is used in two places in openapi/utils.py:
   - Line 406: `deep_dict_update(additional_schema, additional_field_schema)`
   - Line 416: `deep_dict_update(openapi_response, process_response)`
   Both usages are for merging OpenAPI schema responses.

### Key Observations
- The function name suggests it performs a "deep update" of dictionaries, which typically means recursively merging nested structures.
- There is NO documentation specifying the expected behavior for lists.
- There is NO documentation about idempotence requirements.
- The function is not part of the public API (not documented in FastAPI's public documentation).
- This is an internal utility function with no formal specification of behavior.

### Conclusion on Documentation
The lack of any documentation means we cannot definitively say what the "correct" behavior should be. The current implementation is the de facto specification. Any assertion about what the function "should" do (beyond what it currently does) is speculation without documented requirements.
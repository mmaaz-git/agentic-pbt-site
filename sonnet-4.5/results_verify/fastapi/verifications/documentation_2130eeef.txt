## Documentation Analysis

### Python __repr__ Convention
According to the official Python documentation (https://docs.python.org/3/reference/datamodel.html#object.__repr__):

1. **Primary Purpose**: The `__repr__` method should compute the "official" string representation of an object.

2. **Key Convention**: "If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value."

3. **Requirements**:
   - Must return a string object
   - Should be information-rich and unambiguous
   - Primarily used for debugging

4. **Best Practice**: When it's not possible to return a valid Python expression, the repr should still return something meaningful and syntactically sensible.

### Starlette/FastAPI Documentation
After extensive searching:

1. **Official Starlette Middleware Documentation**: The official documentation at https://www.starlette.io/middleware/ does NOT specify any requirements or expectations for the `__repr__` method of the Middleware class.

2. **No Format Specification**: There is no documented specification for how the repr should format callables without __name__ attributes.

3. **Implementation Details Not Documented**: The documentation focuses on how to use middleware but doesn't document the internal representation methods.

4. **Release Notes**: Found mention that "__repr__ for route classes" was implemented in issue #1864, but no specification of expected behavior.

### Key Finding
**The behavior is NOT explicitly documented**, meaning:
- There's no documented contract about what format __repr__ should return
- There's no specification about handling callables without __name__
- The expected behavior must be inferred from Python conventions

### Implications
Since the documentation doesn't specify the exact format of __repr__, we must rely on:
1. Python's general conventions for __repr__ methods
2. Common sense expectations (no syntactically invalid output)
3. Existing test cases in the codebase (which show `Middleware(CustomMiddleware)` format)

The bug violates Python's general convention that __repr__ should not produce syntactically invalid Python code, even though Starlette doesn't explicitly document this requirement.
Documentation Analysis for CORSMiddleware Header Handling

1. Starlette Documentation:
   - The official Starlette documentation (https://www.starlette.io/middleware/#corsmiddleware) describes the `allow_headers` parameter as accepting a list of headers to allow.
   - The documentation states that certain headers are always allowed: "Accept", "Accept-Language", "Content-Language", and "Content-Type".
   - The documentation does NOT specify whether headers should be treated as case-sensitive or case-insensitive.
   - The documentation does NOT specify the internal representation or ordering of headers.

2. HTTP Standard (RFC 7230):
   - Section 3.2 of RFC 7230 explicitly states: "Each header field consists of a case-insensitive field name followed by a colon..."
   - This means HTTP header names MUST be treated as case-insensitive according to the standard.
   - "Content-Type", "content-type", and "CONTENT-TYPE" should all be treated as the same header.

3. Implementation Details:
   - The Starlette source code (cors.py) does handle header case-insensitivity for validation purposes.
   - Line 128-129: Incoming headers are lowercased before comparison: `for header in [h.lower() for h in requested_headers.split(",")]:`
   - Line 67: The stored headers are lowercased: `self.allow_headers = [h.lower() for h in allow_headers]`
   - Line 58: Headers are sorted BEFORE lowercasing, which causes the reported ordering issue.

4. Key Finding:
   The documentation does not specify:
   - The exact internal representation format of `allow_headers`
   - Whether two middleware instances with case-different headers should have identical internal state
   - The ordering of headers in the internal representation

The documentation is silent on implementation details about internal state representation, focusing only on the functional behavior of allowing/disallowing headers.
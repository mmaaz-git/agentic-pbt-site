# Documentation Analysis

## FastAPI Documentation Review

### Official FastAPI Documentation
The FastAPI documentation for `get_swagger_ui_html` and `swagger_ui_parameters`:

1. **Purpose**: The parameter is documented as "Configuration parameters for Swagger UI" that allows customizing the Swagger UI interface.

2. **Expected Input**: The documentation states it accepts a dictionary of configuration parameters, with examples showing legitimate configuration options like `{"syntaxHighlight": False}`.

3. **Processing**: The documentation explicitly states that FastAPI "converts the configurations to **JSON** to make them compatible with JavaScript."

4. **Security Considerations**: The FastAPI documentation does NOT mention:
   - Any HTML escaping requirements for parameter values
   - Security warnings about HTML/script injection
   - Restrictions on what content can be included in parameter values
   - That values containing `</script>` tags could break the HTML context

### Swagger UI Documentation
The official Swagger UI configuration documentation:
- Lists various parameter types (strings, booleans, numbers, arrays, functions, objects)
- Mentions escaping requirements for environment variables but not for HTML context
- Does not explicitly prohibit HTML or script tags in parameter values
- The deprecated `useUnsafeMarkdown` parameter suggests some awareness of HTML security concerns

### Security Context from Web Search
Industry-wide research reveals:
1. **Known Vulnerability Pattern**: XSS through Swagger UI is a well-documented vulnerability class
2. **OWASP Guidance**: Recommends escaping `</script>` when embedding JSON in HTML script tags
3. **Historical Issues**: Swagger UI versions 3.14.1-3.38.0 had DOM XSS vulnerabilities
4. **Common Attack Vector**: HTML injection through configuration parameters is a known attack pattern

## Documentation Gaps

The documentation is incomplete regarding security:

1. **Missing Security Warnings**: No warning that arbitrary user data in `swagger_ui_parameters` could lead to XSS
2. **No Input Validation Guidance**: No mention of sanitizing or escaping requirements
3. **Assumed Safe Context**: The documentation assumes parameters will only contain safe configuration values
4. **HTML Context Not Addressed**: The docs discuss JSON conversion but not HTML embedding context

## Expected vs. Actual Behavior

**Expected (based on documentation)**: Parameters should be safely converted to JSON and embedded in the JavaScript configuration.

**Actual**: Parameters are converted to JSON but not escaped for HTML context, allowing `</script>` tags to break out of the script element.

## Conclusion

The documentation does not specify that HTML/script injection should be prevented, nor does it warn about this security risk. However, given that:
1. This is a well-known XSS vulnerability pattern
2. The function generates HTML for browser consumption
3. The purpose is to configure Swagger UI, not to inject arbitrary HTML/JavaScript

The lack of HTML escaping appears to be an oversight rather than intentional behavior. The documentation's silence on this security issue does not make the vulnerability acceptable - it represents a documentation gap about a real security flaw.
## Documentation Analysis

### OAuth2 RFC 6749 Specification

According to RFC 6749 Section 3.3:

1. **Scope Token Format**:
   - Defined as: `scope-token = 1*( %x21 / %x23-5B / %x5D-7E )`
   - This means scope tokens can ONLY contain:
     - Printable ASCII characters EXCEPT space (0x20) and backslash (0x5C)
     - Specifically excludes ALL whitespace characters

2. **Multiple Scopes**:
   - "The value of the scope parameter is expressed as a list of space-delimited, case-sensitive strings"
   - Only regular space (U+0020) is used as delimiter

3. **Key Finding**:
   - **Unicode whitespace characters are NOT valid in OAuth2 scope names per RFC 6749**
   - The spec explicitly excludes even regular spaces from scope names

### FastAPI Documentation

1. **Internal Documentation** (oauth2.py docstrings):
   - Line 101-117: Shows example scopes like "items:read", "users:read"
   - Line 254-271: Same examples repeated
   - Line 635: States scopes are "separated by spaces, as defined in the OAuth2 specification"
   - No mention of validating scope characters

2. **Public Documentation**:
   - FastAPI docs show examples with simple alphanumeric scopes
   - No explicit validation of scope characters mentioned
   - Documentation doesn't state that Unicode whitespace is forbidden

### Key Observations

1. **Per OAuth2 Spec**: Scopes containing Unicode whitespace (like `'\x85'`) are INVALID
   - The RFC explicitly forbids any whitespace in scope names
   - Only regular spaces (U+0020) separate multiple scopes

2. **FastAPI Implementation**:
   - Does NOT validate scope names against RFC requirements
   - Accepts any string as a scope name
   - The inconsistent split/join is a bug, but...
   - The real issue is accepting invalid scope names in the first place

3. **Documentation Gap**:
   - FastAPI doesn't document that it allows non-RFC-compliant scope names
   - Users might expect RFC compliance but get permissive behavior

### Conclusion

While the split/join inconsistency is technically a bug in FastAPI's code, the root issue is that FastAPI accepts scope names that violate the OAuth2 RFC 6749 specification. Scope names containing ANY whitespace (Unicode or otherwise) are explicitly forbidden by the standard.
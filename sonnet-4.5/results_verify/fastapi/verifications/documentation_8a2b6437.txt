# Documentation Analysis

## FastAPI Documentation

The FastAPI documentation explicitly states:
- "Sending a body with a GET request has an undefined behavior in the specifications"
- It IS supported by FastAPI "only for very complex/extreme use cases"
- The docs warn that interactive docs with Swagger UI won't show body documentation for GET
- The recommendation is to use POST, PUT, DELETE, or PATCH when sending a request body

This shows FastAPI intentionally allows GET/HEAD with body parameters at the application level, even though it's not recommended.

## OpenAPI 3.0 Specification

The OpenAPI 3.0.3 specification clearly states:
- "The requestBody is only supported in HTTP methods where the HTTP 1.1 specification RFC7231 has explicitly defined semantics for request bodies"
- "In other cases where the HTTP spec is vague, requestBody SHALL be ignored by consumers"

OpenAPI 3.0 does NOT allow requestBody for GET and HEAD methods.

Note: OpenAPI 3.1 relaxed this slightly, where requestBody is "permitted but SHOULD be avoided" for these methods.

## HTTP 1.1 Specification (RFC 7231)

RFC 7231 explicitly states for both GET (section 4.3.1) and HEAD (section 4.3.2):
- "A payload within a GET/HEAD request message has no defined semantics"
- "sending a payload body on a GET/HEAD request might cause some existing implementations to reject the request"

## Key Conflict

There's a clear conflict between:
1. **FastAPI's implementation**: Allows GET/HEAD with Body parameters (intentionally, as documented)
2. **OpenAPI 3.0 specification**: Explicitly forbids requestBody for GET/HEAD methods
3. **FastAPI's OpenAPI generation**: Generates invalid OpenAPI schemas by including requestBody for GET/HEAD

The bug is that FastAPI generates OpenAPI schemas that violate the OpenAPI 3.0 specification. While FastAPI may choose to support GET/HEAD with bodies at the application level, it should not generate invalid OpenAPI schemas that claim to follow the OpenAPI 3.0 specification.
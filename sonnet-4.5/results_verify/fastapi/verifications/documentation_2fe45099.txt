## Documentation Analysis for FastAPI Query Parameter Default Values

### Official Documentation Findings

1. **FastAPI Documentation on Query Parameters:**
   - The official FastAPI documentation shows that query parameters can have default values
   - Default values can be of various basic types (int, str, bool, None)
   - Default values can also be lists or more complex types
   - Documentation states: "When you declare a default value for non-path parameters, then it is not required"

2. **No Explicit Mention of Deepcopy Requirements:**
   - The official FastAPI documentation does NOT explicitly state that default values must be deepcopyable
   - There is no warning or requirement mentioned that custom objects used as defaults must support deepcopy
   - The documentation doesn't discuss any restrictions on what types of objects can be used as default values

3. **Pydantic Integration:**
   - FastAPI uses Pydantic for data validation and serialization
   - Pydantic documentation indicates it performs "smart_deepcopy" on non-hashable default values
   - This behavior is an implementation detail, not a documented requirement for users

4. **Mutable Defaults Handling:**
   - The deepcopy behavior exists to protect against Python's mutable default argument problem
   - This is a defensive programming practice to prevent shared mutable state between requests
   - However, this implementation detail is not exposed as a requirement in the documentation

### What the Documentation Does NOT Say

The documentation does NOT:
- Require that default values must be deepcopyable
- Warn users that uncopyable objects (like locks, database connections, singletons) cannot be used as defaults
- Explain that the framework will attempt to deepcopy default values
- Provide guidance on how to handle uncopyable default values

### Conclusion

The requirement that default values must be deepcopyable is an undocumented implementation detail. Users could reasonably expect to use any valid Python object as a default value, including objects that intentionally prevent deepcopy (like singletons, locks, or database connections). The documentation does not set this expectation or requirement.
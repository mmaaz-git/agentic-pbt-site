# Documentation Analysis Report

## FastAPI OpenAPI Models Documentation

### Schema Class Definition
The `Schema` class in `fastapi.openapi.models` is designed to represent OpenAPI/JSON Schema objects. The class follows the OpenAPI 3.1.0 specification which adopts JSON Schema 2020-12.

### Field Alias Convention
The `ref` field is defined with an alias `$ref` because:
1. The OpenAPI specification uses `$ref` as the JSON key for references
2. Python doesn't allow `$` in variable names, so the field must be named `ref` in Python
3. The alias maps the Python field name to the JSON/OpenAPI field name

### Pydantic Alias Behavior
According to Pydantic documentation:
- By default, `populate_by_name=False`, meaning fields with aliases can only be populated using the alias during validation
- When `populate_by_name=True`, fields can be populated by either their field name or alias
- This is a deliberate Pydantic design choice to prevent ambiguity in field population

### OpenAPI Specification
The OpenAPI 3.1.0 specification states that `$ref` is used for referencing components. The specification doesn't dictate how programming language implementations should handle field access.

### FastAPI Documentation Findings
1. FastAPI documentation doesn't explicitly document how to create or access Schema objects directly
2. Most examples show Schema objects being generated automatically by FastAPI
3. There's no documentation stating that `Schema(ref='value')` shouldn't work

### Expected User Behavior
Based on common Python conventions:
1. If a constructor accepts a parameter, the corresponding attribute should be accessible
2. Users expect `Schema(ref='value').ref` to return 'value', not None
3. The current behavior violates the principle of least surprise

### Documentation Gaps
No documentation was found that:
- Warns users about this limitation
- Explains that field names can't be used when aliases are present
- Recommends using the alias form `{'$ref': 'value'}` instead
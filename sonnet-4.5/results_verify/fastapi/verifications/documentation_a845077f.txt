## Documentation Analysis

### RFC 7235 Specification

According to RFC 7235 (HTTP/1.1 Authentication), the Authorization header format is:

```
credentials = auth-scheme [ 1*SP ( token68 / #auth-param ) ]
```

**Key Points:**
1. `1*SP` means "one or more space characters" (ABNF notation)
2. The RFC **explicitly allows multiple spaces** between auth-scheme and credentials
3. This is not ambiguous - the specification uses `1*SP` not just `SP`

### What This Means

The RFC states that these are all valid:
- `"Bearer token123"` (1 space)
- `"Bearer  token123"` (2 spaces)
- `"Bearer   token123"` (3 spaces)

And they should all be treated as equivalent, with:
- scheme = `"Bearer"`
- param/token = `"token123"` (without leading spaces)

### FastAPI Documentation

FastAPI's documentation does not explicitly document the `get_authorization_scheme_param` function's behavior regarding multiple spaces. The function appears to be an internal utility, but it's used by public security classes.

### Current Implementation vs Specification

The current FastAPI implementation:
- Uses `partition(" ")` which splits on the first space only
- Does NOT strip additional spaces from the param
- This violates RFC 7235 which allows `1*SP` (one or more spaces)

### Conclusion

The bug report correctly identifies a violation of RFC 7235. The standard explicitly allows multiple spaces between the scheme and credentials, and these should be normalized. The current implementation treats extra spaces as part of the credential value, which is incorrect according to the specification.

This is not a case of "unspecified behavior" - RFC 7235 is clear that `1*SP` means one or more spaces are allowed and should be treated equivalently.
## Documentation Analysis

### FastAPI Documentation
The FastAPI documentation does not provide specific details about how the `get_authorization_scheme_param` function handles whitespace in authorization headers. The function is an internal utility function that's not directly documented in the public API reference. The security documentation focuses on the high-level security classes (HTTPBearer, HTTPBasic, etc.) but does not specify the parsing behavior for edge cases like leading whitespace.

### RFC 7230 HTTP/1.1 Specification
The bug report correctly references RFC 7230. Specifically, in Section 3.2.4, the RFC states:

"A field value might be preceded and/or followed by optional whitespace (OWS); a single SP preceding the field-value is preferred for consistent readability by humans. The field value does not include any leading or trailing whitespace: OWS occurring before the first non-whitespace octet of the field value or after the last non-whitespace octet of the field value ought to be excluded by parsers when extracting the field value from a header field."

This clearly indicates that HTTP parsers SHOULD strip leading and trailing whitespace from header field values. The word "ought" in RFC terminology is equivalent to "SHOULD" - a strong recommendation that may be ignored only with good reason.

### Expected Behavior Based on Standards
According to HTTP standards, when parsing an Authorization header like " Bearer token123" (with a leading space), a compliant HTTP implementation should:
1. Strip the leading whitespace
2. Parse the result as "Bearer token123"
3. Extract scheme="Bearer" and credentials="token123"

### Current Implementation
The current implementation in `fastapi.security.utils.get_authorization_scheme_param` does not strip whitespace before parsing. It directly uses `str.partition(" ")` on the raw header value, which causes the first space (even if it's leading whitespace) to be treated as the separator between scheme and credentials.
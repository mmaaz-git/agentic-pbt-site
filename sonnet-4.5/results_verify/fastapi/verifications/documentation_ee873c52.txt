## Documentation Analysis for decimal_encoder

### Function Documentation
The `decimal_encoder` function in FastAPI's encoders.py has the following documentation:

```python
def decimal_encoder(dec_value: Decimal) -> Union[int, float]:
    """
    Encodes a Decimal as int of there's no exponent, otherwise float

    This is useful when we use ConstrainedDecimal to represent Numeric(x,0)
    where a integer (but not int typed) is used. Encoding this as a float
    results in failed round-tripping between encode and parse.
    Our Id type is a prime example of this.

    >>> decimal_encoder(Decimal("1.0"))
    1.0

    >>> decimal_encoder(Decimal("1"))
    1
    """
```

Key observations:
1. The function documentation only describes behavior for normal decimal numbers
2. It shows examples with "1.0" and "1" - both finite, regular decimal values
3. The documentation makes no mention of special values like Infinity, -Infinity, or NaN
4. The docstring focuses on the use case of representing database Numeric(x,0) types
5. There is no explicit statement about what types of Decimal values are supported or not supported

### Python Decimal Documentation
According to Python's official documentation:
- Decimal can represent special values: Infinity, -Infinity, and NaN (both quiet and signaling)
- These are valid Decimal values that can be constructed with `Decimal('Infinity')`, `Decimal('-Infinity')`, `Decimal('NaN')`
- Methods like `is_infinite()` and `is_nan()` exist to check for these special values
- The `as_tuple()` method returns different values for special cases (though exact format not specified in detail)

### FastAPI Documentation
- The FastAPI documentation for encoders (https://fastapi.tiangolo.com/tutorial/encoder/) does not mention the `decimal_encoder` function at all
- The documentation discusses `jsonable_encoder()` but doesn't provide details about Decimal handling
- There's no specification about how special decimal values should be handled

### Conclusion
The documentation for `decimal_encoder` is incomplete - it neither explicitly supports nor explicitly excludes special Decimal values. The function appears to be designed for normal numeric decimals used in database contexts, but the documentation doesn't clearly state that special values are out of scope.
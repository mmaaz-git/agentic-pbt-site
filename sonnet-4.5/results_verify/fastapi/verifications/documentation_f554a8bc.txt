## Documentation Analysis for fastapi.utils.deep_dict_update

### Function Location and Implementation
The `deep_dict_update` function is located in `/fastapi/utils.py` at lines 187-203. It's an internal utility function with no docstring or comments explaining its intended behavior.

### Function Signature
```python
def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:
```

### Current Implementation
The function performs an in-place update of `main_dict` with values from `update_dict`:
1. For nested dictionaries: It recursively merges them (lines 189-194)
2. For lists: It concatenates them (lines 195-200)
3. For all other values: It replaces them (lines 201-202)

### Documentation Findings
1. **No public documentation**: The function has no docstring. There is no official FastAPI documentation describing this function's behavior or intended use.

2. **No specification of idempotence**: There is no documentation stating whether this function should be idempotent or not.

3. **Internal utility function**: This function is not part of FastAPI's public API. It's used internally in the OpenAPI schema generation code (`/fastapi/openapi/utils.py`).

4. **Usage context**: The function is used in OpenAPI schema generation to merge:
   - Additional field schemas
   - OpenAPI response definitions
   - Route-specific OpenAPI extras

5. **No explicit list concatenation documentation**: The behavior of concatenating lists is not documented anywhere. The function name "deep_dict_update" doesn't inherently suggest list concatenation.

### Comparison with Standard Python Behavior
- Python's `dict.update()` is idempotent - calling it multiple times with the same arguments produces the same result
- Python's `set.update()` is idempotent
- Most standard library update operations are idempotent by convention

### Key Observation
Since this is an internal utility function with no documentation specifying its behavior, the question becomes whether the current list concatenation behavior is:
1. An intentional design choice for OpenAPI schema merging
2. An implementation detail that happens to work for current use cases
3. A bug that violates expected behavior

The lack of documentation means we cannot definitively say the behavior is "wrong" based on documentation alone. However, the function name "update" strongly suggests idempotent behavior based on Python conventions.
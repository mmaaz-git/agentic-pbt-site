## Documentation Analysis for is_body_allowed_for_status_code

### Function Location and Purpose
The function `is_body_allowed_for_status_code` is located in `fastapi/utils.py` and is an internal utility function used by FastAPI to determine whether a response body is allowed for a given HTTP status code.

### Function Signature
```python
def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool
```

The function accepts:
- `int`: Standard HTTP status codes (e.g., 200, 404)
- `str`: Can be OpenAPI pattern strings ("default", "1XX", "2XX", "3XX", "4XX", "5XX") or numeric strings
- `None`: Treated as allowing body

### Implementation Details (from source code)
The function:
1. Returns `True` if status_code is `None`
2. Returns `True` for OpenAPI pattern strings: "default", "1XX", "2XX", "3XX", "4XX", "5XX"
3. For other inputs, converts to integer and checks if body is allowed
4. Returns `False` for status codes < 200 or status codes 204, 205, 304

### HTTP Specification Context
According to RFC specifications (RFC 2616, RFC 7231, RFC 9110):
- 1xx (Informational) responses MUST NOT include a message body
- 204 (No Content) MUST NOT include a message body
- 205 (Reset Content) MUST NOT include a message body (implied)
- 304 (Not Modified) MUST NOT include a message body
- All other status codes may include a body

### OpenAPI Context
The function references OpenAPI Specification 3.1.0, which allows pattern strings like "1XX", "2XX" etc. as valid response definitions. These are treated as allowing bodies since they represent ranges of status codes.

### Missing Documentation
There is no explicit public documentation for this function found in FastAPI's official documentation. The function appears to be an internal utility that is not meant to be directly used by users. The function lacks:
- Docstring explaining its purpose
- Documentation about what happens with invalid string inputs
- Clear specification of expected behavior for non-numeric, non-pattern strings

### Type Signature Implications
The type signature `Union[int, str, None]` is very broad and suggests the function should handle any string gracefully. However, there's no documentation specifying:
- What strings are valid beyond the pattern strings
- How invalid strings should be handled
- Whether ValueError is an expected exception for invalid strings
## Documentation Analysis for CORSMiddleware

### Starlette Documentation
The official Starlette documentation for CORSMiddleware states:
- `allow_headers` parameter accepts "A list of HTTP request headers that should be supported for cross-origin requests"
- Default value is an empty list `[]`
- Can be set to `['*']` to allow all headers
- The headers `Accept`, `Accept-Language`, `Content-Language` and `Content-Type` are always allowed for CORS requests (these are the SAFELISTED_HEADERS)
- No explicit mention of case sensitivity behavior for headers

### HTTP Specification (RFC 7230)
RFC 7230 Section 3.2 explicitly states:
"Each header field consists of a case-insensitive field name followed by a colon (":"), optional leading whitespace, the field value, and optional trailing whitespace."

This means HTTP header names are case-insensitive according to the HTTP specification.

### Implementation Details from Source Code
Looking at the source code (lines 58 and 67):
- Line 58: `allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))`
- Line 67: `self.allow_headers = [h.lower() for h in allow_headers]`

The code does lowercase headers after sorting, which suggests an intention to handle headers in a case-insensitive manner, consistent with the HTTP specification.

### Key Finding
The documentation does not explicitly specify how CORSMiddleware should handle header case sensitivity. However, given that:
1. HTTP headers are case-insensitive per RFC 7230
2. The code already lowercases headers (line 67), showing intent to handle them case-insensitively
3. The bug report demonstrates that the same header with different capitalizations produces different internal states

This appears to be an implementation inconsistency rather than documented behavior.
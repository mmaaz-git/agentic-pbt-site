## Bug Report Triage Analysis

### Consideration as BUG

**Arguments for BUG:**
1. The current implementation prevents legitimate use cases with international characters
2. RFC 7617 expects implementations to support Unicode characters through UTF-8 encoding
3. The RFC explicitly states that user-id must support "UsernameCasePreserved" profile and password must support "OpaqueString" profile, both of which include Unicode
4. Modern web applications commonly need to support international users with non-ASCII characters in credentials
5. The fix is straightforward and backwards-compatible (UTF-8 is a superset of ASCII)
6. Other major HTTP Basic auth implementations support UTF-8

### Consideration as INVALID

**Arguments against INVALID:**
1. The bug is real and reproducible
2. The RFC does describe UTF-8 as common practice
3. The implementation is more restrictive than necessary

**Conclusion:** Not INVALID - the bug is real and the implementation doesn't meet reasonable expectations.

### Consideration as WONTFIX

**Arguments for WONTFIX:**
1. RFC 7617 doesn't mandate UTF-8 as the default (leaves it undefined)
2. The RFC only requires UTF-8 when charset="UTF-8" is advertised

**Arguments against WONTFIX:**
1. This is not an obscure edge case - international character support is important
2. The limitation significantly impacts usability for non-English users
3. The fix doesn't break existing functionality

**Conclusion:** Not WONTFIX - this is a significant limitation affecting real users.

### Consideration as DOCUMENTATION_FIX

**Arguments for DOCUMENTATION_FIX:**
1. FastAPI documentation doesn't mention the ASCII-only limitation
2. Users might expect UTF-8 support based on modern standards
3. The RFC doesn't mandate UTF-8 as default

**Arguments against DOCUMENTATION_FIX:**
1. Simply documenting "only ASCII characters allowed" would be a poor user experience
2. The RFC expects implementations to support Unicode characters
3. The code behavior is unnecessarily restrictive

**Conclusion:** While documentation could be improved, the core issue is the code limitation.

### Consideration as FEATURE_REQUEST

**Arguments for FEATURE_REQUEST:**
1. UTF-8 support could be seen as an enhancement rather than a bug fix
2. The RFC doesn't mandate UTF-8 as the default encoding
3. Current code works correctly for ASCII characters

**Arguments against FEATURE_REQUEST:**
1. Supporting international characters in authentication is a basic expectation in 2025
2. The RFC profiles require Unicode support
3. This is fixing a limitation, not adding new functionality
4. Other implementations already support this

**Conclusion:** While technically arguable, this feels more like fixing a limitation than adding a feature.

### Final Assessment

This should be categorized as **BUG** because:

1. The implementation violates the spirit and requirements of RFC 7617 by not supporting the Unicode characters required by the UsernameCasePreserved and OpaqueString profiles
2. The limitation prevents legitimate use cases with international users
3. Modern web frameworks should support UTF-8 by default in 2025
4. The fix is simple, backwards-compatible, and aligns with common practice
5. The current behavior silently rejects valid credentials without clear indication why

The fact that RFC 7617 doesn't mandate UTF-8 as the absolute default is a technical detail, but the RFC clearly expects implementations to support Unicode characters, and UTF-8 is the standard way to do this on the modern web.
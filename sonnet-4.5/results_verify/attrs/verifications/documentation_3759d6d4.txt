## Documentation Analysis for attrs.converters.to_bool

### Official Documentation Review

I have examined both the source code docstring and the official attrs documentation for `to_bool`. Here are my findings:

1. **Source Code Documentation (lines 126-151)**:
   The docstring explicitly states:

   - Values mapping to `True`: `True`, `"true"` / `"t"`, `"yes"` / `"y"`, `"on"`, `"1"`, `1`
   - Values mapping to `False`: `False`, `"false"` / `"f"`, `"no"` / `"n"`, `"off"`, `"0"`, `0`
   - Raises `ValueError`: "For any other value"

2. **Online Documentation**:
   The official documentation at https://www.attrs.org/en/stable/api.html#converters confirms the same accepted values and explicitly states that a `ValueError` is raised "For any other value" not in the documented lists.

3. **Key Observations**:
   - **No mention of float values**: Neither `1.0` nor `0.0` are documented as accepted values
   - **Clear contract**: The documentation states "For any other value" a ValueError should be raised
   - **Integer values only**: The documentation explicitly lists `1` and `0` (integers), not their float equivalents

4. **Documentation Intent**:
   - The function is described as converting "boolean strings (for example, from environment variables)"
   - The primary use case appears to be converting string representations and integer flags to booleans
   - Float values are not mentioned anywhere in the documentation

5. **Documentation Completeness**:
   The documentation is clear and comprehensive about what should be accepted. It lists every accepted value explicitly and states that everything else should raise an error. There is no ambiguity that would suggest float values should be accepted.

### Conclusion

The documentation is clear and unambiguous: only the specifically listed values should be accepted, and all other values should raise a `ValueError`. The fact that `1.0` and `0.0` are accepted is therefore a violation of the documented contract. This is not a case of undefined behavior - the documentation explicitly states what should happen for values not in the list (raise ValueError).
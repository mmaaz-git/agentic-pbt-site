## Documentation Analysis

### 1. Official Documentation Review
The `asdict()` function documentation (docstring in _funcs.py lines 19-62) describes:

- **Purpose**: "Return the attrs attribute values of inst as a dict"
- **retain_collection_types parameter** (line 40-42): "Do not convert to list when encountering an attribute whose type is tuple or set. Only meaningful if recurse is True."
- **Version history**: retain_collection_types added in version 16.1.0

### 2. Namedtuple Handling Documentation
**Finding**: The documentation does NOT explicitly mention namedtuple handling at all. There is no documentation about:
- How namedtuples should be handled
- Whether namedtuples are considered regular tuples or special cases
- Expected behavior with retain_collection_types=True

### 3. Code Comments Reveal Intent
The source code contains implementation comments that show namedtuple handling IS intentional:
- Line 101-103: Explicit workaround for namedtuples in main asdict()
- Line 288-290: Same workaround in astuple() function
- Both have comments stating "Workaround for TypeError: cf.__new__() missing 1 required positional argument"

### 4. Consistency Analysis
The code shows clear intent to handle namedtuples:
- `asdict()` main function: HAS the workaround (lines 96-103)
- `astuple()` function: HAS the workaround (lines 283-290)
- `_asdict_anything()` helper: MISSING the workaround (lines 163-175)

This is an inconsistency in implementation, not a documentation issue.

### 5. Expected Behavior
Based on the existing workarounds in two places:
1. The library clearly intends to support namedtuples
2. When `retain_collection_types=True`, namedtuples should be preserved as namedtuples
3. The workaround uses `cf(*items)` instead of `cf(items)` to handle namedtuple constructor requirements

### Conclusion
The documentation doesn't specify namedtuple behavior, but the code clearly shows intentional support through existing workarounds. The bug is a missing workaround in one helper function, not a documentation or specification issue. The function should behave consistently across all code paths.
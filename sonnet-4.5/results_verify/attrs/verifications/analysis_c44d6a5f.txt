BUG TRIAGE ANALYSIS
===================

## Evaluation Against Each Category

### 1. BUG (Valid Bug Report)
**Arguments FOR:**
- The function silently produces incorrect results with generators
- Generators are valid Python iterables that should work like other iterables
- The fix is trivial (one line: `what = tuple(what)`)
- Silent data loss is a serious issue - no error, just wrong results
- The behavior is inconsistent: works with lists/tuples but not generators

**Arguments AGAINST:**
- It's a private function (underscore prefix)
- Not documented to support generators
- Public API (include/exclude) works correctly

### 2. INVALID
**Arguments FOR:**
- Private function with no contract about input types
- Not part of the public API
- Python convention: underscore means "use at your own risk"
- No documentation promises generator support

**Arguments AGAINST:**
- The function accepts "what" which implies any iterable
- Silent failure is worse than explicit failure
- Generators are standard Python iterables
- The bug causes actual incorrect behavior, not just an exception

### 3. WONTFIX
**Arguments FOR:**
- Private/internal function that users shouldn't call directly
- Public API (include/exclude) works correctly
- Low impact - only affects direct calls to private function
- Could be considered "misuse" of internal API

**Arguments AGAINST:**
- Easy one-line fix
- Silent data corruption is serious
- Function is importable and callable
- Fix improves robustness without breaking anything

### 4. FEATURE_REQUEST
**Arguments FOR:**
- Adding generator support could be seen as a new feature
- Function never explicitly supported generators

**Arguments AGAINST:**
- This is fixing broken behavior, not adding new functionality
- Function already attempts to work with the input, just incorrectly

### 5. DOCUMENTATION_FIX
**Arguments FOR:**
- Could document that _split_what doesn't support generators
- Could add warning about internal function usage

**Arguments AGAINST:**
- The code behavior is wrong, not just the documentation
- Silent data loss is a code bug, not a documentation issue

## Key Considerations

1. **Severity**: Silent data loss/corruption is serious - the function returns wrong results without any error
2. **Private vs Public**: While _split_what is private, it's still importable and callable
3. **Python Philosophy**: "We're all consenting adults" - private functions should still behave correctly
4. **Fix Simplicity**: The fix is trivial and non-breaking
5. **Generator Usage**: Generators are standard Python - a function accepting iterables should handle them
6. **User Impact**: Limited to direct calls to private function, but those calls silently fail

## Final Assessment

This is a **BUG** because:

1. **Silent Data Corruption**: The function silently produces incorrect results, which is worse than raising an exception
2. **Inconsistent Behavior**: Works with some iterables (lists, tuples) but not others (generators)
3. **Reasonable Expectation**: Any function accepting an iterable should handle all standard iterable types
4. **Easy Fix**: The one-line fix (`what = tuple(what)`) is trivial and non-breaking
5. **Principle of Least Surprise**: Developers expect consistent behavior across iterable types

While the function is private (underscore prefix), it's still accessible and should behave correctly when called. The Python philosophy of "we're all consenting adults" means private functions should still have predictable, correct behavior. Silent data loss is particularly problematic because it's harder to debug than an explicit error.

The fact that the public API works correctly doesn't excuse the private function's incorrect behavior, especially when the fix is so simple.
Bug Reproduction Report
=======================

I have successfully reproduced the bug as described in the report.

1. Property-based test reproduction:
   - The Hypothesis test correctly identifies that `converters.to_bool(0.0)` returns `False` instead of raising `ValueError`
   - The test fails on the first example with `val=0.0`
   - This confirms the bug exists

2. Simple example reproduction:
   - `converters.to_bool(0.0)` returns `False`
   - `converters.to_bool(1.0)` returns `True`
   - Both should raise `ValueError` according to the documentation
   - Other float values like 0.5, 1.5, 2.0, -1.0 correctly raise `ValueError`

3. Root cause verification:
   - Python's `in` operator uses equality checking (`==`)
   - `0.0 == 0` evaluates to `True` in Python
   - `1.0 == 1` evaluates to `True` in Python
   - Therefore `0.0 in (0,)` and `1.0 in (1,)` both return `True`
   - This causes the undocumented float values 0.0 and 1.0 to be accepted

The bug is real and reproducible. The function accepts float values 0.0 and 1.0 when the documentation explicitly lists only integers 0 and 1 as valid numeric inputs.
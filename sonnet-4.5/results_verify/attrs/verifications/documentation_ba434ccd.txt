## Documentation Analysis

### Official attrs Documentation

1. **attrs.evolve() Documentation**:
   - States: "Create a new instance, based on the first positional argument with *changes* applied"
   - Returns: "A copy of inst with *changes* incorporated"
   - The documentation tip mentions that Python 3.13+ users can use `copy.replace` instead
   - **Key Finding**: The documentation does NOT explicitly specify how converters should behave for unchanged fields

2. **Converter Documentation**:
   - Converters transform input values during initialization and (optionally) on setting
   - With `@attrs.define`, converters run on both initialization and attribute setting
   - Converters run before validators
   - **Key Finding**: No explicit requirement that converters be idempotent
   - **Key Finding**: No documentation about converter behavior during `evolve()`

3. **Expected Behavior Not Documented**:
   - The documentation doesn't state whether `evolve()` should:
     - Skip converters for unchanged fields
     - Re-run converters for all fields
     - Preserve already-converted values
   - There's no guidance on whether converters should be designed to be idempotent

### GitHub Issues and Community Context

1. **Issue #1126**: "Evolve converts/validates again not changed fields"
   - This is an OPEN issue from April 2023
   - Labeled as a "Feature" request, not a bug
   - Indicates that the current behavior (re-running converters) is known to the maintainers
   - The fact it's labeled as "Feature" suggests this might be working as designed

2. **Python 3.13 copy.replace() Behavior**:
   - My testing shows `copy.replace()` exhibits the same behavior as `attrs.evolve()`
   - Both re-run converters on unchanged fields
   - This consistency suggests the behavior might be intentional

### Documentation Gaps

The documentation lacks clarity on:
1. Whether converters should be idempotent
2. How `evolve()` interacts with converters
3. Best practices for writing converters that work safely with `evolve()`
4. Whether the current behavior is intentional or a design oversight

### Conclusion

The documentation does not explicitly specify how `evolve()` should handle converters for unchanged fields. The behavior is neither documented as correct nor incorrect. This creates ambiguity about whether the current implementation is a bug or working as intended. The existence of GitHub issue #1126 labeled as a "Feature" request suggests the maintainers view changing this behavior as an enhancement rather than a bug fix.
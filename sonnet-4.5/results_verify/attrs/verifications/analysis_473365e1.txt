# Bug Triage Analysis

## Consideration for Each Category

### BUG (Valid Bug Report)

**Arguments FOR classifying as BUG:**

1. **Inconsistency with not_() validator**: The `not_()` validator in the same module explicitly limits exception catching to `(ValueError, TypeError)` by default, showing that attrs has an established pattern of NOT catching all exceptions.

2. **Violates Python best practices**: Python's general philosophy is that programming errors should propagate for debugging. Catching `Exception` broadly is discouraged (as evidenced by the suppressed linting warnings in the code).

3. **Makes debugging impossible**: When a validator has a programming error (undefined variable, typo in attribute name, etc.), developers get no feedback that their code is broken. This is objectively harmful to development.

4. **Documentation doesn't specify this behavior**: The documentation doesn't say "all exceptions from validators will be caught." Users would reasonably expect programming errors to propagate.

5. **Real-world impact**: This affects any custom validator that might have bugs during development. It makes the development experience worse without providing any documented benefit.

**Arguments AGAINST classifying as BUG:**
- The code has explicit linting suppressions (`# noqa: BLE001, PERF203, S112`), suggesting this was intentional
- It has worked this way since v24.1.0 without other complaints

### INVALID

**Arguments FOR classifying as INVALID:**
- The code explicitly catches `Exception` with linting warnings suppressed, suggesting this was a deliberate design choice
- The documentation doesn't promise that programming errors will propagate

**Arguments AGAINST classifying as INVALID:**
- The behavior is objectively harmful for debugging
- It's inconsistent with the `not_()` validator's approach
- Just because behavior isn't documented doesn't mean any behavior is acceptable

### WONTFIX

**Arguments FOR classifying as WONTFIX:**
- Changing this could be a breaking change if anyone relies on the current behavior
- The linting suppressions suggest someone explicitly wanted this behavior

**Arguments AGAINST classifying as WONTFIX:**
- This is not an obscure edge case - it affects all custom validators with bugs
- The impact on debugging is significant, not trivial

### DOCUMENTATION_FIX

**Arguments FOR classifying as DOCUMENTATION_FIX:**
- The documentation could be updated to warn that ALL exceptions are caught, including programming errors
- This would at least make the behavior explicit

**Arguments AGAINST classifying as DOCUMENTATION_FIX:**
- The behavior itself is problematic, not just the documentation
- Documenting bad behavior doesn't make it good

### FEATURE_REQUEST

**Arguments FOR classifying as FEATURE_REQUEST:**
- Could frame this as requesting a new `exc_types` parameter like `not_()` has
- This would allow users to control which exceptions are caught

**Arguments AGAINST classifying as FEATURE_REQUEST:**
- This is fixing broken behavior, not adding new functionality
- The current behavior prevents proper debugging, which is a bug

## Conclusion

This should be classified as **BUG** because:

1. **Clear inconsistency**: The `not_()` validator in the same module demonstrates that attrs knows how to properly limit exception catching to validation errors only.

2. **Violates reasonable expectations**: No reasonable developer expects their programming errors to be silently swallowed. This violates the principle of least surprise.

3. **Significant negative impact**: This makes debugging custom validators nearly impossible, which is a serious problem for development.

4. **Not documented behavior**: The documentation doesn't specify that all exceptions will be caught, so users have no warning about this behavior.

5. **Against Python best practices**: Catching all exceptions is widely considered bad practice in Python unless explicitly needed and documented.
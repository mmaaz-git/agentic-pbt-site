## Bug Report Triage Analysis

### Evaluation for each category:

#### BUG (Valid Bug Report)
**Arguments FOR:**
- The function violates Python's principle of least surprise by mutating input parameters without documentation
- The mutation is clearly unintentional - it serves no useful purpose and can cause subtle bugs
- The public API (`read_orc`) already defends against this in some cases, showing awareness of the issue
- The proposed fix is simple and correct
- Mutation of input parameters without documentation is widely considered a bug in Python code
- The issue could affect code that directly calls `_read_orc` or future refactorings

**Arguments AGAINST:**
- The function is private/internal (starts with underscore), so direct usage is discouraged
- The public API already works around this issue in the main use case

#### INVALID
**Arguments FOR:**
- The function is private/internal and not meant for direct use
- Could argue that private functions have no contracts

**Arguments AGAINST:**
- Even private functions should follow good practices
- The mutation serves no purpose and is clearly unintentional
- Other parts of the codebase could legitimately use this private function
- The bug is real and reproducible

#### WONTFIX
**Arguments FOR:**
- The function is private/internal, so the impact is limited
- The public API already handles this correctly
- Very unlikely to affect real users who use the public API

**Arguments AGAINST:**
- The fix is trivial (one line change)
- Leaving known bugs unfixed can cause future issues
- Good software engineering practice suggests fixing even internal bugs

#### DOCUMENTATION_FIX
**Arguments FOR:**
- Could document that the function mutates the columns parameter

**Arguments AGAINST:**
- The mutation is clearly unintentional, not a design choice
- Documenting bad behavior instead of fixing it would be poor practice
- The fix is simpler than documentation

#### FEATURE_REQUEST
**Arguments FOR:**
- Could frame it as "add support for non-mutating behavior"

**Arguments AGAINST:**
- This is fixing incorrect behavior, not adding new functionality
- Non-mutation is the expected default behavior in Python

### Final Assessment:

This is a **BUG**. The function unintentionally mutates its input parameter, which violates Python conventions and good programming practices. While the impact is limited because it's a private function and the public API works around it, the behavior is still incorrect and should be fixed. The proposed fix is correct and minimal.

Key factors:
1. The mutation serves no useful purpose (it's not like the caller needs the mutated list)
2. The mutation is inconsistent with how the public API handles columns
3. The fix is trivial and correct
4. Python convention strongly discourages unmotivated parameter mutation
5. Even though it's a private function, it could be used internally elsewhere or in future code
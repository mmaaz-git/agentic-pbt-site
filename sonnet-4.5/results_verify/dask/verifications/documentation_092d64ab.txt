## Documentation Analysis

### Function Docstring
The `read_block` function's docstring explicitly documents that the `length` parameter can be `None`:

```
length: int
    Number of bytes to read, read through end of file if None
```

This is unambiguous - the documentation states that when `length=None`, the function should "read through end of file".

### Implementation Comments
The source code contains a TODO comment that acknowledges this documented behavior is not implemented:
```python
# TODO: allow length to be None and read to the end of the file?
assert length is not None
```

### API Inconsistency
The function behaves differently depending on whether a delimiter is provided:
1. When `delimiter` is provided and `length=None`: Works correctly, reads to end of file
2. When `delimiter` is not provided and `length=None`: Raises AssertionError

This creates an inconsistent API where the same parameter value (`length=None`) has different behaviors based on another parameter.

### Documentation vs Implementation
The documentation makes a clear contract with the user:
- The parameter type says `length: int` but also documents that None is acceptable
- The description explicitly states the behavior when `length=None`
- There are no warnings or notes indicating this is not supported

The implementation directly contradicts this documentation with an assertion that prevents the documented behavior.

### External Documentation
While I couldn't find extensive external documentation, the fsspec source confirms this is the intended API, and the function is widely used across the Dask ecosystem with this documented interface.

### Conclusion
This is a clear case where the documentation promises a feature that the implementation explicitly blocks. The TODO comment shows the developers are aware of this gap but haven't resolved it. Users following the documentation will encounter unexpected failures.
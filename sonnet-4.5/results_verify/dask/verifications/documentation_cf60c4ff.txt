## Documentation Analysis for Django SQLite LPAD/RPAD Functions

### Django Documentation
- Django's official documentation for LPAD/RPAD functions does not explicitly specify the behavior when negative length values are provided
- The documentation only provides basic usage examples and mentions that RPad is "similar to LPad, but pads on the right side"
- No specific mention of edge cases like negative lengths, zero lengths, or NULL handling

### PostgreSQL Documentation
- According to PostgreSQL documentation and examples, when LPAD/RPAD is given a negative length, it returns an empty string
- Amazon Redshift documentation (which follows PostgreSQL standards) explicitly states: "If length is zero or a negative number, the result of the function is an empty string"
- This behavior is consistent across PostgreSQL versions

### MySQL/MariaDB Documentation
- MySQL and MariaDB handle negative lengths differently from PostgreSQL
- According to MariaDB documentation: "If the length argument is negative, the function returns NULL"
- This applies to both LPAD and RPAD functions
- For zero length, MySQL/MariaDB returns an empty string (or NULL in Oracle mode from MariaDB 10.3.6)

### SQLite Documentation
- SQLite does not have built-in LPAD/RPAD functions
- Django implements these functions as custom SQLite functions in _sqlite_lpad and _sqlite_rpad
- The implementation is Django's attempt to provide SQLite compatibility with these SQL functions

### Key Finding
There is no clear Django documentation specifying what behavior Django's SQLite implementation should follow for negative lengths. The bug report claims Django should follow PostgreSQL's behavior (return empty string), but:
1. Different databases handle this differently (PostgreSQL returns empty string, MySQL returns NULL)
2. Django's documentation doesn't specify which standard to follow
3. This appears to be an implementation detail that was never explicitly documented
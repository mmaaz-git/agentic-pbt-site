REPRODUCTION ANALYSIS
=====================

I have successfully reproduced the behavior described in the bug report.

Test Results:
-------------
1. Simple case (n=2 with 2 partitions):
   - Input DataFrame: index=[10, 11], data={'a': [1, 2]}
   - Dask result index: [0, 0]
   - Pandas result index: [0, 1]
   - Confirmed: The indices differ

2. Hypothesis test (n=1 to 30):
   - n=1: PASS (only 1 element, fits in first partition)
   - n=2 and above: FAIL when split across partitions
   - Pattern observed: Each partition resets its index starting from 0
   - Example n=10: Result [0, 1, 2, 3, 4, 0, 1, 2, 3, 4] instead of [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Behavior Confirmed:
------------------
The behavior described in the bug report is accurate:
- Dask's reset_index() does create duplicate index values when data spans multiple partitions
- Each partition independently resets its index starting from 0
- This results in non-unique index values in the final DataFrame
- The behavior differs from pandas, which creates a sequential RangeIndex [0, 1, 2, ..., n-1]

The code runs without errors and produces the exact output described in the bug report.
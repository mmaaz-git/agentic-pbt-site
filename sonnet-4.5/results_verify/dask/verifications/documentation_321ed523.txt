## Documentation Analysis

### Available Documentation

1. **Class Docstring**: The LRU class has a minimal docstring:
   - "Limited size mapping, evicting the least recently looked-up key when full"
   - This describes the basic purpose but doesn't specify behavior for updates vs. insertions

2. **Method Documentation**: The `__setitem__` method has no docstring or documentation

3. **External Documentation**: No specific documentation found in Dask's official docs for this internal utility class

### LRU Cache Standard Behavior

Based on standard LRU cache semantics (Wikipedia and common implementations):

1. **LRU Definition**: A cache that discards the least recently used items first when capacity is reached
2. **Access Pattern**: When an item is accessed (read or written), it becomes the "most recently used"
3. **Update vs. Insert**:
   - Updating an existing key should NOT trigger eviction
   - Only inserting a NEW key into a full cache should trigger eviction
4. **Standard Practice**: Most LRU implementations (including Python's functools.lru_cache) do not evict when updating existing keys

### Documentation Gaps

The current documentation does not specify:
1. Whether updating an existing key should trigger eviction
2. The exact semantics of "when full" - does this apply to updates or only new insertions?
3. The expected behavior for key updates in terms of LRU ordering

### Interpretation

Given the lack of explicit documentation about update behavior, we must rely on:
1. **Standard LRU semantics**: Updates should not cause eviction
2. **The docstring phrase "when full"**: This typically means when adding would exceed capacity, not when updating at capacity
3. **Common sense**: Evicting and re-adding the same key is inefficient and unexpected

### Conclusion

The documentation is insufficient to definitively specify the expected behavior, but based on standard LRU cache conventions and the principle of least surprise, the current implementation appears to deviate from expected behavior. The bug report correctly identifies an inefficiency where updates unnecessarily trigger eviction and reinsertion.
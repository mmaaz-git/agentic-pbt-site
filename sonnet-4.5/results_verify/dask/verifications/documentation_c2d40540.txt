## Documentation Analysis for format_bytes

### 1. Source Code Documentation

The function's docstring in `/home/npc/miniconda/lib/python3.13/site-packages/dask/utils.py` (lines 1772-1789) contains:

```python
"""Format bytes as text

>>> from dask.utils import format_bytes
>>> format_bytes(1)
'1 B'
>>> format_bytes(1234)
'1.21 kiB'
>>> format_bytes(12345678)
'11.77 MiB'
>>> format_bytes(1234567890)
'1.15 GiB'
>>> format_bytes(1234567890000)
'1.12 TiB'
>>> format_bytes(1234567890000000)
'1.10 PiB'

For all values < 2**60, the output is always <= 10 characters.
"""
```

The key claim is on line 1788: **"For all values < 2**60, the output is always <= 10 characters."**

### 2. Official Online Documentation

The official Dask documentation at https://docs.dask.org confirms:
- The function signature: `dask.utils.format_bytes(n: int) → str`
- The same examples shown in the docstring
- The same guarantee: "For all values < 2**60, the output is always <= 10 characters"

### 3. Documentation Consistency

Both the inline docstring and the official documentation make the same explicit guarantee about output length. This is not an ambiguous statement or an example - it's a clear contract promise.

### 4. Purpose and Intent

The documentation indicates the function's purpose is to:
- Format byte values into human-readable strings
- Use binary units (kiB, MiB, GiB, TiB, PiB)
- Maintain consistent formatting with 2 decimal places
- Keep output concise (≤10 characters for values < 2^60)

### 5. Contract Violation

The documented guarantee is unambiguous and explicit. It's not merely describing typical behavior or providing guidelines - it's making a specific promise about the maximum output length for a defined range of inputs.

The fact that values like 1000 * 2^50 produce 11-character outputs directly violates this documented contract. This is not a case of:
- Undefined behavior
- Ambiguous documentation
- Implementation details
- Edge cases not covered by documentation

Instead, this is a clear violation of an explicitly stated guarantee in both the inline documentation and official documentation.
## Bug Reproduction Report

I have successfully reproduced the bug reported in the format_bytes function.

### Hypothesis Test
The Hypothesis test failed with the exact input reported: n = 1125894277343089729
The function returned '1000.00 PiB' which has length 11, violating the assertion that len(result) <= 10.

### Manual Testing
Confirmed the bug with the reported test case and additional edge cases:
- format_bytes(1125894277343089729) = '1000.00 PiB' (11 characters)
- format_bytes(1000 * 2**50) = '1000.00 PiB' (11 characters)
- format_bytes(1024 * 2**50 - 1) = '1024.00 PiB' (11 characters) [This is 2**60 - 1]

### Root Cause Analysis
The bug occurs when values are >= 1000 PiB (i.e., n >= 1000 * 2**50 ≈ 1.126e18).

The function uses the format string f"{n / k:.2f} {prefix}B" which:
- For values 0.00 - 9.99 PiB: produces strings like "9.99 PiB" (8 characters) ✓
- For values 10.00 - 99.99 PiB: produces strings like "99.99 PiB" (9 characters) ✓
- For values 100.00 - 999.99 PiB: produces strings like "999.99 PiB" (10 characters) ✓
- For values >= 1000.00 PiB: produces strings like "1000.00 PiB" (11+ characters) ✗

The docstring claims "For all values < 2**60, the output is always <= 10 characters."
Since 2**60 = 1024 PiB, values from 1000 PiB to 1024 PiB violate this guarantee.

### Verification
The bug is confirmed and reproducible. The function violates its documented contract for values in the range [1000 * 2**50, 2**60).
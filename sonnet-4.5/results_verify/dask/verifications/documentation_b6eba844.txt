## Documentation Analysis

### Function Documentation

The `_normalize_index_columns` function has minimal documentation:
- Docstring describes it as "Normalize user and file-provided column and index names"
- Parameters are documented with types but no behavioral descriptions
- Returns are listed but without specifying invariants or constraints
- No explicit mention of what happens with overlapping names

### Implicit Behavioral Contract

Based on the code analysis, there is an **implicit invariant** that column names and index names should not overlap:

1. **Line 347-348**: The code explicitly checks and raises an error when user-specified columns and indices overlap:
   ```python
   if set(column_names).intersection(index_names):
       raise ValueError("Specified index and column names must not intersect")
   ```

2. **Lines 336 and 341**: When only one parameter is user-specified, the code actively filters to prevent overlap:
   - Line 336: `column_names = [x for x in data_columns if x not in index_names]`
   - Line 341: `index_names = [x for x in data_index if x not in column_names]`

These behaviors strongly suggest the function intends to maintain the invariant that column and index names should be disjoint sets.

### Documentation Gaps

1. The docstring doesn't explicitly state that column and index names must not overlap
2. There's no documentation about what happens when data-provided names overlap
3. The error message "Specified index and column names must not intersect" only mentions "specified" (user-provided) names, not data-provided ones

### External Documentation

- Dask's public documentation on parquet doesn't mention `_normalize_index_columns` (it's a private function)
- No explicit rules about column/index overlap are documented in the public API
- The underscore prefix indicates this is an internal implementation detail

### Conclusion

While not explicitly documented, the function's implementation clearly shows an intent to prevent overlapping column and index names through:
1. Explicit validation when user specifies both
2. Filtering logic when user specifies only one
3. The error message mentioning non-intersection as a requirement

The lack of this check in the else block (lines 349-352) appears to be an oversight rather than intentional behavior, as it violates the pattern established in all other code paths.
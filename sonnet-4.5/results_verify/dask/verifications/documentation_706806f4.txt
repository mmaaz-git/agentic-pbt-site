## Documentation Analysis for sorted_columns

The `sorted_columns` function in `dask.dataframe.io.parquet.core` has the following documentation:

### Function Docstring
The function has a clear docstring that states:
- Purpose: "Find sorted columns given row-group statistics"
- Functionality: "This finds all columns that are sorted, along with the appropriate divisions for those columns. If the (optional) columns argument is used, the search will be restricted to the specified column set."
- Returns: "List of {'name': str, 'divisions': List[str]} dictionaries"

### Key Implementation Details from Source Code

1. The function expects statistics to be a list of dictionaries with a "columns" key
2. Each column in statistics should have "min" and "max" keys for the function to consider it
3. The function has a check at line 421-424 that skips columns if not all statistics have both "min" and "max" keys
4. The function builds divisions by tracking min/max values through row groups
5. There's an assertion at line 442: `assert divisions == sorted(divisions)`

### What the Documentation Does NOT Specify

The documentation does not explicitly state:
1. How the function should handle None values in min/max statistics
2. Whether None is a valid value for min/max fields
3. What type constraints exist on the min/max values (e.g., must they be comparable?)
4. Whether mixed types or None values are allowed in divisions

### Implicit Assumptions from Code

Looking at the implementation:
- Line 427: `success = c["min"] is not None` - suggests None values for min are expected and handled
- Line 430-432: Checks if min is None and sets success to False
- Line 433: `if c["min"] >= max:` - performs comparison between min and max values
- Line 441: `divisions.append(max)` - max value can be appended to divisions
- Line 442: `assert divisions == sorted(divisions)` - assumes all values in divisions are comparable

The code clearly expects that min/max values could be None, but the assertion at line 442 assumes all values in the divisions list are sortable/comparable, which creates a contradiction when None values are present.
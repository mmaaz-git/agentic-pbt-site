# Documentation Analysis

## Public API Documentation (read_orc)

The public `read_orc` function is documented in the docstring (lines 41-74 of core.py):
- **columns** parameter: "None or list(str) - Columns to load. If None, loads all."
- No mention of whether the columns list should be mutated or not
- No specification about side effects on input parameters

## Internal Function Documentation (_read_orc)

The `_read_orc` function (line 111) has:
- No docstring or documentation
- It's an internal function (prefixed with underscore)
- No explicit contract about parameter mutation

## Python Conventions and Best Practices

While not explicitly documented for this specific function, Python has strong conventions:
1. **Principle of Least Surprise**: Functions should not mutate their input parameters unless that's their explicit purpose
2. **Functional Programming Principles**: Side effects should be avoided unless necessary
3. **Python PEP 8 and Style Guides**: Generally discourage mutating input parameters without clear documentation

## Related Documentation

The public `read_orc` function (lines 97-98) shows defensive programming:
```python
if columns is not None and index in columns:
    columns = [col for col in columns if col != index]
```
This creates a NEW list, suggesting the intent is to NOT mutate the original.

## Documentation Gaps

1. Neither function explicitly documents whether input parameters may be mutated
2. The internal function lacks any documentation about its behavior
3. There's no warning that `_read_orc` mutates its inputs

## Conclusion

While the documentation doesn't explicitly state that the columns parameter should not be mutated, the lack of documentation about mutation combined with:
- Python's strong conventions against unexpected mutations
- The defensive programming in the public API that avoids passing the original list
- The principle that functions shouldn't have undocumented side effects

All suggest that the mutation is unintended behavior rather than a documented feature. The bug report's claim about violating the principle of no side effects is valid based on general Python best practices, even though the specific function documentation doesn't explicitly prohibit mutation.
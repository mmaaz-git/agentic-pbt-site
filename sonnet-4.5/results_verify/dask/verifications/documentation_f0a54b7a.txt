## Documentation Analysis

### Official Dask Documentation:

1. **read_orc documentation** (https://docs.dask.org/en/stable/generated/dask.dataframe.read_orc.html):
   - States for 'columns' parameter: "Columns to load. If None, loads all."
   - NO mention of parameter mutation or modification
   - NO documentation about internal _read_orc function
   - NO warning that the columns list will be modified

2. **Dask Development Guidelines** (https://docs.dask.org/en/stable/develop.html):
   - NO explicit guidelines about parameter mutation
   - NO specific conventions about private functions
   - NO coding standards about side effects
   - General emphasis on testing and code quality

### Python Conventions (PEP 8):

1. **Private Functions**:
   - Functions starting with underscore (_) are non-public/internal
   - "Non-public attributes are those that are not intended to be used by third parties"
   - No guarantees about stability or behavior of private functions

2. **Side Effects**:
   - PEP 8 suggests: "Try to keep the functional behavior side-effect free"
   - Caching is mentioned as generally acceptable, but unexpected mutation is not

3. **Principle of Least Surprise**:
   - Code should be readable and consistent
   - Unexpected behaviors should be avoided

### Analysis:

The function `_read_orc` is:
1. A private/internal function (starts with underscore)
2. Not documented in the public API
3. Called internally by the public `read_orc` function via `dd.from_map`

However, even for internal functions:
1. Parameter mutation is generally considered poor practice in Python
2. The mutation is NOT documented anywhere
3. The public `read_orc` function appears to work around this by filtering the index from columns before passing it (lines 97-98), suggesting awareness of the issue
4. The mutation violates the general principle of least surprise and side-effect-free functions

The lack of documentation about this mutation behavior, combined with Python's general conventions against unexpected side effects, suggests this is indeed problematic behavior rather than intentional design.
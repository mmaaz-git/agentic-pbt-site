DOCUMENTATION ANALYSIS
======================

SOURCE CODE DOCUMENTATION:
-------------------------
The key_split function is defined in dask/utils.py with an extensive docstring that includes:

1. Function Purpose:
   - "Split a key."
   - Extracts the first meaningful part of a dask task key for display purposes

2. Docstring Examples (lines 1950-1975):
   The docstring explicitly includes the following example:
   >>> key_split(b'hello-world-1')
   'hello-world'

   This CLEARLY demonstrates that bytes input is an intended and supported input type.

3. Other documented examples show the function handles:
   - Strings: 'x', 'x-1', 'hello-world-1'
   - Bytes: b'hello-world-1'
   - Tuples: ('x-2', 1)
   - None values
   - Module object strings
   - Hex strings

4. Implementation Details (lines 1978-1979):
   if type(s) is bytes:
       return key_split(s.decode())

   The code explicitly checks for bytes type and attempts to decode them.

EXTERNAL DOCUMENTATION:
-----------------------
- The function is used internally by Dask for visualization and optimization
- It's exposed through dask.widgets.FILTERS['key_split']
- Recent improvements have been made for caching and performance
- No external documentation specifies that only UTF-8 bytes are supported

KEY FINDINGS:
------------
1. The docstring EXPLICITLY shows bytes as a valid input type with the example b'hello-world-1'
2. There is NO documentation anywhere stating that only UTF-8 encoded bytes are supported
3. The function accepts bytes as a first-class input type (it has explicit type checking for bytes)
4. The implementation assumes all bytes can be decoded as UTF-8, which contradicts the general support for bytes

DOCUMENTATION IMPLICATIONS:
--------------------------
The documentation clearly indicates that bytes are a supported input type, but it fails to specify:
- That only UTF-8 encoded bytes are supported (if that was the intent)
- What happens with non-UTF-8 bytes
- Any error handling for invalid encodings

The bug report's claim that "the function accepting bytes as a documented input type" is CORRECT - the docstring explicitly shows bytes input in its examples.
BUG TRIAGE ANALYSIS
==================

I will analyze this bug report against each possible triage category:

## INVALID (Not Applicable)
Why it might be INVALID:
- PyArrow has known UTF-8 requirements that reject surrogates
- Surrogate characters are technically invalid UTF-8

Why it's NOT INVALID:
- The function documentation claims to accept ANY pandas DataFrame
- Pandas itself handles surrogate characters without issue
- No documented restrictions on string content in from_pandas()
- The crash is unexpected behavior from a user perspective

## WONTFIX (Not Applicable)
Why it might be WONTFIX:
- Surrogate characters are rare edge cases
- Could be considered an obscure Unicode issue

Why it's NOT WONTFIX:
- Real-world impact: corrupted UTF-8 from web scraping is common
- The crash is not graceful - it's a cryptic error
- A simple try/catch could handle this cleanly
- The workaround exists but is undocumented

## DOCUMENTATION_FIX (Possible but Insufficient)
Why it might be DOCUMENTATION_FIX:
- Could document the PyArrow string limitations
- Could mention the config workaround
- Could add a note about UTF-8 requirements

Why it's MORE than just documentation:
- The code should handle this error gracefully
- Users shouldn't need to know PyArrow internals
- The function violates its documented contract
- A valid pandas DataFrame should not crash the function

## FEATURE_REQUEST (Not Applicable)
Why it might be FEATURE_REQUEST:
- Could be seen as adding "support for invalid UTF-8"
- Handling surrogates could be a new feature

Why it's NOT FEATURE_REQUEST:
- This is fixing a crash, not adding new functionality
- The function already claims to support pandas DataFrames
- It's a regression from expected behavior

## BUG (Most Appropriate)
Why this IS a BUG:
1. **Contract Violation**: Function claims to accept pandas DataFrames but doesn't
2. **Unexpected Crash**: Valid pandas data causes unhandled exception
3. **Poor Error Message**: Cryptic UTF-8 error instead of helpful guidance
4. **Silent Feature**: PyArrow conversion happens automatically without user awareness
5. **Inconsistent Behavior**: Works with config disabled, fails with it enabled
6. **Real-world Impact**: Common in data from web scraping or legacy systems

## FINAL ASSESSMENT

This is clearly a **BUG** because:

1. The function violates its documented contract by not accepting all valid pandas DataFrames
2. It crashes with an unhelpful error message instead of handling the issue gracefully
3. The automatic PyArrow conversion is an implementation detail that shouldn't break user code
4. The suggested fixes (error handling or fallback) are reasonable and straightforward
5. This affects real-world use cases with corrupted or legacy data

The bug report correctly identifies:
- The exact location of the issue
- A valid reproducer
- The root cause (PyArrow UTF-8 validation)
- Reasonable fix options

RECOMMENDATION: Tag as BUG and implement one of the suggested fixes (preferably Option 1 with graceful error handling and user guidance).

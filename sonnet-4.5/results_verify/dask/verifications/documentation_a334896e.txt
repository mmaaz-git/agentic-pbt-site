DOCUMENTATION ANALYSIS

1. from_pandas() Function Documentation:
   - The function's docstring (accessed via help()) describes it as: "Construct a Dask DataFrame from a Pandas DataFrame"
   - It states it "splits an in-memory Pandas dataframe into several parts and constructs a dask.dataframe from those parts"
   - Parameters documented: data, npartitions, chunksize, sort
   - NO MENTION of dtype conversion or string handling
   - NO MENTION of the behavior changing string dtypes
   - NO WARNING about loss of round-trip property

2. Configuration Documentation:
   - The dask configuration documentation lists "dataframe.convert-string" with default value None
   - NO EXPLANATION of what this config does
   - NO DOCUMENTATION of its effect on string conversion

3. Source Code Analysis:
   - The conversion happens in `_meta` property of FromPandas class
   - When `pyarrow_strings_enabled()` returns True (the default), it calls `to_pyarrow_string()`
   - The `pyarrow_strings_enabled()` function checks config "dataframe.convert-string"
   - If config is None (the default), it returns True
   - This causes automatic conversion of object-dtype strings to pyarrow strings

4. Critical Documentation Gap:
   - The behavior is UNDOCUMENTED in the from_pandas docstring
   - The config option is UNDOCUMENTED in the configuration reference
   - Users have no way to know this conversion will happen
   - The round-trip expectation (from_pandas().compute() returns equivalent DataFrame) is violated without warning

Conclusion: This is an undocumented behavior that silently modifies data types in a way that breaks reasonable user expectations. The documentation does not mention this conversion anywhere accessible to users.
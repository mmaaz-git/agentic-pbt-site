## Documentation Analysis for _DNF.extract_pq_filters

### Summary
The `extract_pq_filters` method is an internal, undocumented utility function in Dask's parquet module. It is not part of the public API and has no explicit documentation.

### Key Findings

1. **No Public Documentation**:
   - The method has no docstring (`__doc__` returns `None`)
   - It is not mentioned in Dask's public documentation
   - Web searches for "extract_pq_filters" yield no official documentation
   - The method is prefixed with underscore in a class that's also prefixed with underscore (`_DNF`), indicating it's internal

2. **Purpose Inferred from Code**:
   - The method is part of the `_DNF` class (Disjunctive Normal Form) for managing filters
   - It extracts Parquet-compatible filters from expression predicates
   - Used for predicate pushdown optimization in Parquet file reading

3. **Usage Context**:
   The method is called in two places within the same file:
   - Line 727: To check if filter passthrough is available
   - Line 748: To actually extract filters for predicate pushdown

   These calls happen during query optimization to push filters down to the Parquet reader level for better performance.

4. **Expected Behavior**:
   Based on the code structure and context:
   - Should handle comparison predicates (LE, GE, LT, GT, EQ, NE)
   - Should handle both normal comparisons (`column > 5`) and reversed comparisons (`5 > column`)
   - Should handle logical operations (And, Or) by recursively extracting filters
   - Returns a `_DNF` object containing the extracted filters

5. **Implementation Intent**:
   The code clearly shows two branches intended to handle:
   - Normal comparisons: where the column is on the left (lines 1665-1673)
   - Reversed comparisons: where the value is on the left (lines 1674-1685)

   The second branch includes operator flipping logic to convert reversed comparisons to normal form.

### Documentation Status
Since this is an internal implementation detail:
- There is no specification that this code must handle reversed comparisons
- However, the code structure clearly shows it was intended to handle them
- The bug prevents the intended functionality from working

### Conclusion
While there is no formal documentation specifying the behavior of `extract_pq_filters`, the code itself clearly shows the intent to handle both normal and reversed comparison predicates. The dead code branch with operator flipping logic demonstrates that handling reversed comparisons was a design goal that is currently broken due to the logical error.
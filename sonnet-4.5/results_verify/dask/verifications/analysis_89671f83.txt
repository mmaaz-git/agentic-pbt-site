# Bug Triage Analysis

## Considering Each Category

### 1. BUG (Valid Bug Report)
**Arguments FOR:**
- The round-trip property is broken: `read_orc(to_orc(df, write_index=True))` != `df`
- There is clear inconsistency with Parquet format which handles this correctly
- The default behavior (`write_index=True`) creates an expectation that indices will be preserved
- Users have no way to know they need to manually specify `index='__index_level_0__'` when reading
- The behavior violates the principle of least surprise
- The implementation already saves the index data, it just doesn't restore it automatically

**Arguments AGAINST:**
- The documentation doesn't explicitly promise round-trip preservation
- ORC format itself may not support metadata about indices like Parquet does
- The index data is technically preserved (as a column), just not automatically restored

### 2. FEATURE_REQUEST
**Arguments FOR:**
- Could be viewed as requesting a new feature: automatic index detection/restoration
- The current implementation technically works if you know to specify the index parameter
- Could be seen as asking for enhancement to match Parquet's behavior

**Arguments AGAINST:**
- This is about fixing broken behavior, not adding new functionality
- The feature (index preservation) already partially exists with `write_index=True`
- Users expect round-trip to work with defaults, especially when `write_index` defaults to `True`

### 3. DOCUMENTATION_FIX
**Arguments FOR:**
- The documentation could be updated to explain the current behavior
- Could add examples showing how to properly preserve indices with ORC
- Could document that users must specify `index='__index_level_0__'` when reading

**Arguments AGAINST:**
- Documenting a workaround doesn't fix the underlying issue
- The behavior itself is problematic and inconsistent with Parquet
- Users shouldn't need special knowledge for basic round-trip operations

### 4. WONTFIX
**Arguments FOR:**
- ORC format limitations might make this technically challenging
- Users can work around it by specifying the index parameter

**Arguments AGAINST:**
- The issue significantly impacts usability
- There's a clear inconsistency with Parquet that should be addressed
- The fix is technically feasible (as shown in the bug report's proposed solution)
- This is not an obscure edge case but a fundamental use case

### 5. INVALID
**Arguments FOR:**
- The documentation doesn't explicitly promise automatic index restoration
- The behavior could be considered "as designed"

**Arguments AGAINST:**
- The bug is real and reproducible
- The behavior is clearly problematic and unexpected
- The inconsistency with Parquet shows this isn't intended behavior
- Default `write_index=True` creates a strong expectation of preservation

## Conclusion

This is a **BUG** that should be fixed.

Key reasons:
1. **Violated expectations**: When `write_index` defaults to `True`, users reasonably expect indices to be preserved in round-trips
2. **Inconsistency**: Parquet handles this correctly, creating an inconsistency in Dask's I/O operations
3. **Data integrity**: Index information is part of the DataFrame structure and should be preserved
4. **Feasible fix**: The proposed solution in the bug report is technically sound and implementable
5. **Not an edge case**: Round-trip operations are fundamental to data processing workflows

While updating documentation could help, the core issue is the behavior itself. The fact that the index data is saved but not restored suggests an incomplete implementation rather than a design choice.
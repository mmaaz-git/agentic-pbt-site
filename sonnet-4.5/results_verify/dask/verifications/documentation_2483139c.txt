DOCUMENTATION ANALYSIS
======================

## normalize_slice Function Documentation

### 1. Official Function Docstring
The function has minimal documentation:
```python
def normalize_slice(idx, dim):
    """Normalize slices to canonical form

    Parameters
    ----------
    idx: slice or other index
    dim: dimension length

    Examples
    --------
    >>> normalize_slice(slice(0, 10, 1), 10)
    slice(None, None, None)
    """
```

The docstring only provides:
- A brief description: "Normalize slices to canonical form"
- Parameter descriptions
- One simple example showing optimization of a full slice

The documentation does NOT specify:
- What "canonical form" means
- How empty slices should be handled
- Expected behavior for negative indices or negative steps
- Whether it should maintain semantic equivalence with the original slice

### 2. External Documentation
The Dask documentation (docs.dask.org) does not provide detailed information about normalize_slice:
- The function is not mentioned in the public API documentation
- The array slicing documentation focuses on chunk handling rather than slice normalization
- No specification exists for empty slice handling

### 3. GitHub Issue History
Found existing GitHub issue #10555 (still open):
- Reports the exact same bug with empty slices and negative steps
- Confirms this is unexpected behavior that deviates from NumPy
- Suggests the function should maintain NumPy-compatible behavior
- Issue has been tagged as "needs attention" but remains unresolved

### 4. Python Slicing Semantics
Python's official documentation and PEP specifications establish that:
- Slices where start equals stop should always be empty
- This behavior is consistent across Python lists, NumPy arrays, and other sequence types
- The indices() method correctly returns the normalized indices, but further manipulation breaks semantics

### 5. Implicit Contract
While not explicitly documented, normalize_slice appears to be an internal utility function that should:
- Preserve the semantic meaning of slices (same elements selected)
- Optimize slice representation (e.g., slice(0, 10, 1) -> slice(None, None, None))
- Maintain compatibility with NumPy slicing behavior

## Conclusion
The documentation does not explicitly specify how empty slices should be handled. However, given that:
1. Dask arrays are meant to be NumPy-compatible
2. The function's purpose is normalization, not semantic change
3. An open GitHub issue confirms this is considered a bug
4. Python's slicing semantics are well-established

The current behavior violates the implicit contract that normalize_slice should preserve slice semantics while only changing the representation for optimization purposes.
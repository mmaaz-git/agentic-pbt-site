REPRODUCTION OF BUG REPORT: numpy.fft.hfft ValueError on Single-Element Arrays

1. HYPOTHESIS TEST REPRODUCTION:
The property-based test from the bug report was executed successfully and found the exact failing case mentioned:
- Input: array([0.+0.j])
- Error: ValueError: Invalid number of FFT data points (0) specified.

The test also found that arrays with 2+ elements work correctly, showing the issue is specific to single-element arrays.

2. SIMPLE EXAMPLE REPRODUCTION:
The simple example from the bug report was tested:
- Input: np.array([1.0+0.j])
- Result: ValueError: Invalid number of FFT data points (0) specified.

This confirms the bug as described.

3. WORKAROUND VERIFICATION:
When specifying n explicitly, hfft works correctly:
- np.fft.hfft(np.array([1.0+0.j]), n=1) returns array([1.])

4. COMPARISON WITH OTHER FFT FUNCTIONS:
Testing single-element arrays across FFT functions:
- np.fft.fft: Works correctly, returns [5.+0.j]
- np.fft.ifft: Works correctly, returns [5.+0.j]
- np.fft.rfft: Works correctly, returns [5.+0.j]
- np.fft.irfft: FAILS with same error (n=0)
- np.fft.hfft: FAILS with error (n=0)
- np.fft.ihfft: Works correctly with real input, returns [5.-0.j]

5. ROOT CAUSE ANALYSIS:
The default n calculation in hfft (line 626 of _pocketfft.py):
    n = (a.shape[axis] - 1) * 2

For a single-element array:
    n = (1 - 1) * 2 = 0

This produces n=0, which is invalid for FFT operations.

6. INVERSE RELATIONSHIP VERIFICATION:
For multi-element arrays, the inverse relationship works:
- ihfft(hfft([1+0j, 2+0j])) correctly returns [1-0j, 2-0j]

However, the relationship is broken for single-element arrays since hfft fails while ihfft succeeds.

CONCLUSION: The bug is confirmed and reproducible as described in the report.
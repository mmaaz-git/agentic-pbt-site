REPRODUCTION OF BUG REPORT: NumPy Unicode String Null Character Truncation
==========================================================================

## Test Environment
- Python 3.13
- NumPy version (confirmed via testing)

## Hypothesis Test Reproduction
The Hypothesis test from the bug report was reproduced successfully:
- Test: Checking that numpy.char.upper preserves string length
- Result: FAILS with input '\x00'
- Error: AssertionError - upper changed length from 1 to 0

## Manual Reproduction Results

### Test 1: Basic numpy.array string conversion
Input:  '\x00' (length=1)
Output: '' (length=0)
✗ REPRODUCED - Single null character completely removed

Input:  'abc\x00' (length=4)
Output: 'abc' (length=3)
✗ REPRODUCED - Trailing null character truncated

Input:  '\x00abc' (length=4)
Output: '\x00abc' (length=4)
✓ Leading null preserved when followed by other characters

Input:  'a\x00b' (length=3)
Output: 'a\x00b' (length=3)
✓ Embedded null preserved

### Test 2: numpy.char.upper function
Same pattern observed:
- '\x00' → '' (length 1→0)
- 'abc\x00' → 'ABC' (length 4→3)
- '\x00abc' → '\x00ABC' (preserved)
- 'a\x00b' → 'A\x00B' (preserved)

### Test 3: Python standard string behavior (for comparison)
Python's str.upper() correctly preserves all null characters:
- '\x00'.upper() → '\x00' (length preserved)
- 'abc\x00'.upper() → 'ABC\x00' (length preserved)

## Summary of Findings
The bug report is ACCURATE and REPRODUCIBLE:

1. NumPy strips trailing null characters from Unicode strings
2. This happens both in numpy.array() and numpy.char functions
3. The behavior is inconsistent - embedded nulls are preserved, only trailing nulls are removed
4. This differs from Python's standard string behavior which preserves all null characters
5. Data loss occurs silently without warning or error

The bug manifests exactly as described in the report, affecting both array creation and string manipulation functions.
Documentation Analysis: numpy.strings upper/lower Functions
============================================================

NumPy Documentation States:
---------------------------

numpy.strings.upper:
- "Calls str.upper element-wise"
- Description: "Return an array with the elements converted to uppercase"
- Should work with StringDType, bytes_, or str_ dtype arrays
- Returns ndarray with same dtype as input

numpy.strings.lower:
- "Calls str.lower element-wise"
- Description: "Return an array with the elements converted to lowercase"
- Should work with StringDType, bytes_, or str_ dtype arrays
- Returns ndarray with same dtype as input

Python str.upper/lower Documentation:
--------------------------------------
- str.upper(): "Return a copy of the string with all the cased characters converted to uppercase"
- str.lower(): "Return a copy of the string with all the cased characters converted to lowercase"
- Both follow Unicode Standard section 3.13 'Default Case Folding'
- No explicit mention of null character handling, but the methods should return a copy of the string

Critical Documentation Claim:
-----------------------------
NumPy's documentation explicitly states that these functions "Call str.upper/lower element-wise".
This is a clear contract that the NumPy functions should behave identically to Python's
string methods when applied to individual elements.

Expected Behavior Based on Documentation:
-----------------------------------------
1. Since NumPy claims to call Python's str methods element-wise, the output should match
   exactly what Python's str.upper() and str.lower() produce.

2. Python's str.upper('\x00') returns '\x00' (unchanged, as null is not a cased character)

3. Therefore, NumPy's strings.upper(np.array(['\x00'])) should return np.array(['\x00'])

4. The documentation makes no exception for null characters or any special handling

Conclusion:
-----------
The documentation clearly establishes that NumPy's string functions should produce identical
results to Python's string methods. The current behavior where null-only strings become
empty strings violates this documented contract. This is not undefined behavior - the
documentation explicitly defines the expected behavior as matching Python's str methods.
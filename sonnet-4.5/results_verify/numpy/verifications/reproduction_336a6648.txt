BUG REPRODUCTION REPORT
=======================

The bug report is accurate and has been successfully reproduced.

## Hypothesis Test Results

The provided Hypothesis test immediately fails with a RecursionError when given any list of integers. The test attempts to call cumsum() on a SparseArray of integers, which results in maximum recursion depth exceeded.

## Manual Test Results

1. **Integer SparseArray with explicit fill_value=0**: RecursionError
   - Created array successfully: SparseArray([1, 2, 3], fill_value=0)
   - Calling cumsum() causes immediate RecursionError

2. **Integer SparseArray with default fill_value**: RecursionError
   - Default fill_value for integer arrays is 0
   - Same RecursionError occurs

3. **Float SparseArray with default fill_value**: SUCCESS
   - Default fill_value for float arrays is NaN
   - cumsum() works correctly, returning [1.0, 3.0, 6.0] as expected

4. **Single element [0] test**: RecursionError
   - Even with a single element, the recursion occurs

5. **Comparison with numpy**: numpy.cumsum([1, 2, 3]) correctly returns [1, 3, 6]

## Source Code Verification

Examined the actual source code at /home/npc/miniconda/lib/python3.13/site-packages/pandas/core/arrays/sparse/array.py

Line 1550 contains the exact problematic code identified in the bug report:
```python
if not self._null_fill_value:
    return SparseArray(self.to_dense()).cumsum()
```

The bug mechanism is exactly as described:
1. When fill_value is not null (e.g., 0 for integers), `_null_fill_value` is False
2. The code calls `self.to_dense()` to get a dense numpy array
3. It wraps this in `SparseArray(...)` creating a new sparse array with the same fill_value=0
4. It calls `.cumsum()` on this new array, which has the same `_null_fill_value=False`
5. This triggers the same code path infinitely, causing recursion

## Key Findings

- The bug is 100% reproducible and occurs exactly as described
- It affects all integer SparseArrays (default fill_value=0)
- It does NOT affect float SparseArrays (default fill_value=NaN)
- The root cause is the recursive call pattern in line 1550
- The expected behavior would be to return a cumulative sum like numpy does
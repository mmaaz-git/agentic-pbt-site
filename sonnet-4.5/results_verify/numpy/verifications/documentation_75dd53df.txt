DOCUMENTATION ANALYSIS FOR numpy.linalg.eig
============================================

Based on my review of the official numpy documentation for numpy.linalg.eig:

1. **Function Purpose**: The documentation clearly states that numpy.linalg.eig "Computes the eigenvalues and right eigenvectors of a square matrix."

2. **Mathematical Definition**: The documentation explicitly states that the function should satisfy the equation:
   `a @ eigenvectors[:,i] = eigenvalues[i] * eigenvectors[:,i]`

   This is the fundamental eigenvalue equation that defines what eigenvalues and eigenvectors are.

3. **Return Format**: The function returns a tuple (eigenvalues, eigenvectors), not a namedtuple with attributes as the bug report incorrectly states. The bug report's code uses `result.eigenvalues` and `result.eigenvectors` which would not work with the actual numpy API.

4. **Numerical Considerations**: The documentation mentions:
   - Uses LAPACK's `_geev` routines
   - May raise `LinAlgError` if eigenvalue computation does not converge
   - Mentions "potential round-off errors in numerical computations"
   - Eigenvectors are normalized to unit length

5. **Tolerances and Accuracy**: The documentation does NOT specify:
   - What tolerance levels are acceptable for the eigenvalue equation
   - How to handle matrices with extreme value ranges
   - Specific behavior for matrices with values near machine epsilon
   - Any warnings about mixing values of vastly different scales

6. **Key Observation**: The documentation makes it absolutely clear that the eigenvalue equation `A @ v = λ * v` must be satisfied. There is no mention of this being approximate or subject to tolerance - it is stated as a mathematical fact that the function computes.

CONCLUSION: The documentation clearly states that numpy.linalg.eig should return eigenvalues and eigenvectors that satisfy the eigenvalue equation. The reported case where `A @ v = [0, 1, 0]` while `λ * v = [0, 0, 0]` appears to violate this fundamental requirement.
## Documentation Analysis for numpy.strings.partition

### Official Documentation Review

**NumPy Documentation States:**
- "If the separator is not found, the first item of the tuple will contain the whole string, and the second and third ones will be the empty string."
- The function should behave like Python's `str.partition()`

**Python str.partition Documentation:**
- When separator is not found: returns `(string, '', '')`
- This is the standard behavior that users would expect

### Key Finding: No Documentation About Dtype Truncation

The documentation does NOT mention:
1. That separators will be truncated to match the input array's dtype
2. Any special behavior when separator length exceeds input dtype capacity
3. Any warnings about dtype mismatches or silent truncation

### Expected vs Actual Behavior

**Expected (per documentation):**
- When separator '00' is not found in '0', should return `('0', '', '')`
- The function should search for the exact separator provided

**Actual behavior:**
- Separator '00' is silently truncated to '0' (to match input dtype <U1)
- The truncated separator '0' IS found in the input '0'
- Returns `('', '0', '')` - which is incorrect

### Conclusion

The documentation clearly states the function should behave like Python's `str.partition()`, which would never truncate the separator. The silent truncation violates the documented behavior and user expectations. There is no documentation suggesting that separators will be modified based on input dtype, making this an undocumented deviation from the expected behavior.
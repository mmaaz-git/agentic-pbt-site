Documentation Findings for numpy.char Case Conversion Functions
================================================================

I reviewed the official NumPy documentation for the following functions:
- numpy.char.upper()
- numpy.char.lower()
- numpy.char.swapcase()

Key Documentation Claims:
-------------------------
1. numpy.char.upper(): "Return an array with the elements converted to uppercase. Calls str.upper element-wise."

2. numpy.char.lower(): "Return an array with the elements converted to lowercase. Call str.lower element-wise."

3. numpy.char.swapcase(): "Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa." and "Calls Python's str.swapcase() method element-wise"

Important Observations:
-----------------------
1. The documentation explicitly states these functions call Python's built-in str methods (str.upper, str.lower, str.swapcase) element-wise on the array elements.

2. Python's built-in str methods DO expand certain Unicode characters when case-converting:
   - 'ß'.upper() returns 'SS' (one character becomes two)
   - 'ﬁ'.upper() returns 'FI' (ligature expands)
   - 'İ'.lower() returns 'i̇' (Turkish capital I with dot becomes i with combining dot above)

3. The documentation does NOT mention any limitations about:
   - Fixed-width string storage
   - Truncation of results
   - Special handling of expanding Unicode mappings
   - Differences from Python's str methods for certain characters

4. The documentation examples only show simple ASCII character conversions that don't expand.

5. NumPy string arrays use fixed-width dtypes (e.g., '<U1' for single Unicode character), which inherently cannot accommodate strings that expand beyond their allocated size.

Conclusion from Documentation:
------------------------------
The documentation creates a clear expectation that these functions behave identically to Python's str methods applied element-wise. There is NO documented exception or warning about Unicode characters that expand during case conversion. Users reading the documentation would reasonably expect full compatibility with Python's str methods.
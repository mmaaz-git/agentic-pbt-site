Documentation Findings for numpy.char.lower
============================================

1. Official numpy.char.lower Documentation:
   - States: "Return an array with the elements converted to lowercase. Call str.lower element-wise."
   - Parameters: Input array with StringDType, bytes_, or str_ dtype
   - Returns: Output array of StringDType, bytes_ or str_ dtype, matching input type
   - No explicit mention of Unicode expansion handling
   - No warning about potential truncation when characters expand

2. Module Status and Recommendations:
   - numpy.char is marked as LEGACY and will no longer receive updates
   - May be removed in future NumPy versions
   - Documentation recommends using numpy.strings instead
   - Both numpy.char.lower and numpy.strings.lower exhibit the same behavior

3. NumPy String Dtype Behavior:
   - NumPy uses fixed-width string dtypes (e.g., <U1, <U5)
   - These are explicitly documented as "fixed-width" data types
   - The width must be specified in advance to accommodate the longest sequence
   - Documentation shows that when a shorter dtype is specified, strings get truncated
   - Example from docs: np.array(["hello", "world!"], dtype="U5") truncates "world!" to "world"

4. Key Documentation Gap:
   - The documentation says numpy.char.lower "calls str.lower element-wise"
   - This implies the function should behave identically to Python's str.lower()
   - However, there is NO mention that the output maintains the input array's dtype
   - There is NO warning about potential data loss when Unicode normalization expands character count
   - The documentation does not specify whether dtype should be preserved or expanded

5. Related Functionality:
   - The documentation doesn't compare behavior with other string operations (add, multiply) mentioned in the bug report
   - No guidance on how to handle Unicode characters that expand during case conversion

Conclusion:
The documentation is ambiguous. It claims to call str.lower element-wise but doesn't clarify that the fixed-width dtype is preserved, potentially causing truncation. This is a documentation gap at minimum.
## Bug Triage Analysis

### Considering BUG:
**Arguments for BUG:**
- The function returns INT64_MIN (-9223372036854775808) which is clearly incorrect
- This is not a meaningful value for "number of failures before n successes"
- The newer Generator API correctly validates and raises an error
- The documentation says p=0 is allowed but the function produces garbage
- This is a data corruption issue - users get nonsensical values

**Arguments against BUG:**
- None - this is clearly incorrect behavior

### Considering INVALID:
**Arguments for INVALID:**
- Could argue p=0 is mathematically nonsensical for this distribution

**Arguments against INVALID:**
- The documentation explicitly states p can be 0 (inclusive range [0,1])
- The function accepts the value without error
- Returns garbage instead of failing gracefully
- The newer API shows this should be validated

### Considering WONTFIX:
**Arguments for WONTFIX:**
- Could argue this is legacy API and users should migrate to Generator
- Edge case that may not affect many users

**Arguments against WONTFIX:**
- This returns incorrect data silently (INT64_MIN)
- Data corruption is serious even if rare
- Simple fix to add validation
- Legacy API is still widely used

### Considering DOCUMENTATION_FIX:
**Arguments for DOCUMENTATION_FIX:**
- Documentation incorrectly states p=0 is allowed
- Could update docs to say p must be > 0

**Arguments against DOCUMENTATION_FIX:**
- The code behavior is wrong - returning INT64_MIN is a bug
- Just fixing docs leaves the data corruption issue
- The newer API shows proper behavior is to validate and raise error

### Considering FEATURE_REQUEST:
**Arguments for FEATURE_REQUEST:**
- Could frame as "add validation for p=0"

**Arguments against FEATURE_REQUEST:**
- This is fixing broken behavior, not adding new functionality
- The function already exists but produces wrong output
- Data corruption is a bug, not missing feature

## Conclusion:
This is clearly a **BUG**. The function returns garbage values (INT64_MIN) when p=0, which represents data corruption. While p=0 is mathematically invalid, the function should either:
1. Raise a ValueError (like Generator API does)
2. Return infinity or a special value
3. At minimum, not return INT64_MIN

The fact that the documentation allows p=0 but the function returns nonsense makes this a code bug, not just a documentation issue.
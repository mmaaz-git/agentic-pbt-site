# Documentation Analysis

## Available Documentation

### 1. Module Docstring
The numpy.f2py.symbolic module is described as handling "Fortran/C symbolic expressions" with a focus on arithmetic operations including:
- Addition (+)
- Subtraction (-)
- Multiplication (*)
- Division (Fortran / is Python //, Fortran // is concatenate)
- Exponentiation (**)

The module explicitly mentions support for both Fortran and C expressions.

### 2. Function Documentation

**fromstring(s, language=Language.C)**
- Creates an expression from a string
- Described as a "lazy" parser - only arithmetic operations are resolved
- Non-arithmetic operations are treated as symbols
- Default language: C

**Expr.tostring(parent_precedence=Precedence.NONE, language=Language.Fortran)**
- Returns a string representation of Expr
- Default language: Fortran

### 3. Key Documentation Findings

1. **No Round-Trip Guarantee Documented**:
   - The documentation does NOT explicitly promise that `fromstring(str(expr)) == expr`
   - There is no documentation stating that round-tripping should work
   - No documentation mentions that the default languages should match

2. **Language Support**:
   - The module explicitly supports multiple languages (C, Fortran, Python)
   - Different languages have different operator conventions
   - C doesn't use `**` for exponentiation (uses pow() function instead)
   - Fortran uses `**` for exponentiation

3. **Default Language Inconsistency**:
   - `fromstring()` defaults to C
   - `tostring()` defaults to Fortran
   - This inconsistency is not documented as intentional or explained

## Documentation Gaps

1. The documentation doesn't explain:
   - Why the default languages differ between the two functions
   - Whether round-tripping is expected to work
   - How users should handle language differences
   - That C mode doesn't support `**` operator

2. Missing usage examples showing proper language handling

3. No warning about the default language mismatch

## Conclusion

The documentation does not guarantee round-trip behavior. The different default languages appear to be by design (C for parsing, Fortran for output), possibly because:
- F2PY is primarily for Fortran interfacing
- Input might come from C code but output is typically for Fortran
- Historical reasons in the F2PY tool evolution

However, the lack of documentation about this behavior and its implications is problematic. Users would reasonably expect these functions to work together seamlessly with their defaults.
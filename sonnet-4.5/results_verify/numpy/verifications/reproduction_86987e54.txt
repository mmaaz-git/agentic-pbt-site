## Bug Reproduction Report

I have successfully reproduced the reported bug in numpy.rec.format_parser.

### Test Results:

1. **Hypothesis Test**: The test confirmed that when integer field names are passed, an AttributeError is raised instead of a more helpful TypeError or ValueError.
   - Input: int_names=[0]
   - Result: "AttributeError: 'int' object has no attribute 'strip'"

2. **Simple Reproducer**:
   - Code: `numpy.rec.format_parser(['i4', 'i4'], [0, 1], [])`
   - Result: AttributeError: 'int' object has no attribute 'strip'
   - Traceback shows the error occurs at line 159 in records.py when trying to call .strip() on integers

### Stack Trace Analysis:
The error occurs in the _setfieldnames method at line 159:
```python
self._names = [n.strip() for n in names[:self._nfields]]
```

The code assumes all elements in the names list are strings and calls .strip() on them without validation.

### Comparison with numpy.dtype:
I tested how numpy.dtype handles similar invalid input:
- When given integer field names, numpy.dtype raises clear errors:
  - "TypeError: First element of field tuple is neither a tuple nor str"
  - "ValueError: field names must be strings"
- This confirms the inconsistency mentioned in the bug report.

The bug is confirmed: format_parser crashes with an unhelpful AttributeError when it should provide a clear input validation error.
## Documentation Analysis

### Official Documentation Review:

1. **numpy.rec.format_parser docstring** (from help() and online docs):
   - States explicitly: "names : str or list/tuple of str"
   - The documentation is clear that names must be strings
   - Examples show only string names: ['col1', 'col2', 'col3']
   - Empty list is allowed for auto-generated names

2. **Parameter Requirements**:
   - The documentation explicitly requires that the 'names' parameter be:
     - A string (comma-separated names), OR
     - A list/tuple of strings
   - No mention of accepting integers or other types
   - The documentation contract is violated when integers are passed

3. **Error Handling Expectations**:
   - While the documentation doesn't specify what error should be raised for invalid input, it's reasonable to expect:
     - Input validation for documented parameter types
     - Clear error messages when contracts are violated
     - Consistency with similar numpy functions

4. **Comparison with numpy.dtype**:
   - numpy.dtype has similar requirements for field names
   - numpy.dtype properly validates and raises clear errors:
     - "ValueError: field names must be strings"
     - This sets a precedent for how numpy should handle this case

### Conclusion:
The documentation clearly states that names must be strings. When non-string values are provided, the function should validate this input and raise an appropriate error (TypeError or ValueError) with a clear message, not crash with an implementation-detail AttributeError.
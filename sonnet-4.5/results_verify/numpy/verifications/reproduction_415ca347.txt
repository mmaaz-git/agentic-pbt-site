## Bug Reproduction Report

I have successfully reproduced the bug reported for numpy.lcm.

### Hypothesis Test Reproduction

The property-based test using Hypothesis found the exact failing case reported:
- Input values: a=3036988439, b=3037012561
- The test fails because the product of GCD and LCM does not equal a*b due to integer overflow
- RuntimeWarning is raised for overflow in scalar multiply

### Manual Test Reproduction

Running the manual test case confirms the bug:
- np.lcm(3036988439, 3037012561) returns: -9223372036854769337 (negative!)
- Python's math.lcm(3036988439, 3037012561) returns: 9223372036854782279 (correct positive value)
- The numpy result is negative due to int64 overflow

### Key Observations

1. The LCM function returns a negative value for two positive integers, which is mathematically incorrect
2. The overflow happens silently - no error is raised, just a negative result is returned
3. Python's built-in math.lcm handles the same inputs correctly using arbitrary precision
4. The mathematical property GCD(a,b) * LCM(a,b) = a * b is violated due to the overflow
5. The correct LCM value (9223372036854782279) exceeds np.iinfo(np.int64).max (9223372036854775807)

### Effect of the Bug

This is a silent failure that violates mathematical correctness. Users expecting the LCM of positive integers to be positive will get incorrect results without any warning or error. This could lead to downstream errors in calculations that depend on the LCM being correct and positive.
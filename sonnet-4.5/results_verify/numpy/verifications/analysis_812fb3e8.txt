## Bug Report Triage Analysis

### Consideration for BUG (Valid Bug)

**Arguments FOR classifying as BUG:**
1. **Valid input fails**: rfft accepts single-element arrays and produces valid output, but irfft crashes on that valid output
2. **Inconsistent API behavior**: Every other array size works with the default n parameter calculation, except size 1
3. **Confusing error message**: Users never requested n=0; the error comes from internal calculation
4. **Round-trip expectation**: There's a reasonable expectation that rfft->irfft should work for all valid inputs
5. **Simple fix available**: The proposed fix (using max(1, 2*(m-1))) maintains backward compatibility while fixing the edge case
6. **Mathematical consistency**: A 1-element FFT is mathematically valid and should round-trip

**Arguments AGAINST:**
- The behavior matches the documented formula exactly (2*(m-1))
- Users can work around it by explicitly passing n=1

### Consideration for INVALID

**Arguments FOR classifying as INVALID:**
1. The code behaves exactly as documented - the formula 2*(m-1) is explicit in the docs
2. The documentation already states that n should be specified for proper round-tripping

**Arguments AGAINST:**
- The documented formula itself has a bug (produces invalid n=0)
- Just because behavior matches documentation doesn't mean it's correct
- Other FFT libraries handle this case gracefully

### Consideration for WONTFIX

**Arguments FOR classifying as WONTFIX:**
1. Single-element FFTs are extremely rare edge cases
2. Easy workaround exists (pass n=1 explicitly)
3. The error message, while confusing, does indicate the problem

**Arguments AGAINST:**
- This isn't obscure - it's a basic edge case that should be handled
- The fix is trivial and doesn't break anything
- FFT operations should be robust for all valid inputs

### Consideration for DOCUMENTATION_FIX

**Arguments FOR classifying as DOCUMENTATION_FIX:**
1. The documentation could warn about the single-element edge case
2. Could explicitly state that n must be provided for single-element arrays

**Arguments AGAINST:**
- The issue is in the code logic, not just documentation
- Documenting a bug doesn't make it not a bug
- The natural expectation is that it should just work

### Consideration for FEATURE_REQUEST

**Arguments FOR classifying as FEATURE_REQUEST:**
1. Could be viewed as requesting new behavior for edge case handling

**Arguments AGAINST:**
- This is fixing broken behavior, not adding new functionality
- The function already claims to be the inverse of rfft
- Single-element arrays are valid inputs that should work

## Conclusion

This is a **BUG**. While the behavior matches the documentation, the documented formula itself contains a mathematical edge case that produces an invalid result (n=0) for a valid input (single-element array). The fact that rfft accepts single-element arrays but irfft cannot process their output without explicit parameters represents an API inconsistency. The proposed fix is minimal, maintains backward compatibility, and makes the FFT operations more robust.
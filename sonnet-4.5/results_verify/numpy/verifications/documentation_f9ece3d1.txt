Documentation Analysis
======================

## NumPy Documentation

### numpy.strings.endswith
- Documentation states: "Returns a boolean array which is `True` where the string element in `a` ends with `suffix`, otherwise `False`"
- References: "See Also: str.endswith"
- The documentation explicitly references Python's str.endswith, suggesting it should behave similarly
- No special handling for null characters or empty strings is documented

### numpy.strings.rfind
- Documentation states: "For each element, return the highest index in the string where substring `sub` is found"
- Returns -1 when substring is not found (demonstrated in the documentation example)
- References: "See Also: str.rfind"
- The documentation explicitly states it should behave like Python's str.rfind

## Python Documentation

### str.endswith
- Returns True if the string ends with the specified suffix, False otherwise
- For an empty string, it cannot end with any character (including '\x00')

### str.rfind
- Returns the highest index where substring is found
- Returns -1 on failure (when substring is not found)
- An empty string cannot contain any substring, so should return -1

## Key Findings

1. **Explicit Python Compatibility**: Both NumPy functions explicitly reference their Python counterparts in the "See Also" sections, establishing that they should follow Python's string semantics.

2. **rfind Behavior Documented**: The NumPy documentation clearly states rfind should return -1 when the substring is not found, which is consistent with Python's behavior.

3. **No Special Cases Documented**: Neither NumPy function documents any special handling for null characters that would justify deviating from Python's behavior.

4. **Semantic Consistency Expected**: The documentation indicates these are element-wise applications of the corresponding Python string methods, meaning they should produce the same results as calling the Python methods on individual strings.

## Conclusion

The documentation strongly supports that NumPy's string functions should match Python's string semantics. The current behavior where:
- endswith([''], '\x00') returns True (should be False)
- rfind([''], '\x00') returns 0 (should be -1)

...violates the documented expectation that these functions behave like their Python counterparts.
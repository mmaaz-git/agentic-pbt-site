BUG REPRODUCTION REPORT
=======================

The bug report has been successfully reproduced and verified.

## Hypothesis Test Reproduction

The Hypothesis test failed as expected with the exact input specified in the bug report:
- Failing input: records=[(0, '\x00')]
- The test asserts that r.text[i] == expected_text
- When the input contains a null character '\x00', the assertion fails because the null character is not preserved

## Manual Test Case Reproduction

All manual test cases produced the exact outputs described in the bug report:

1. Input: '\x00'    → Output: ''       (null character truncated)
2. Input: 'a\x00'   → Output: 'a'      (trailing null truncated)
3. Input: '\x00b'   → Output: '\x00b'  (embedded null preserved)
4. Input: 'a\x00b'  → Output: 'a\x00b' (embedded null preserved)

## Key Findings

1. **The bug affects both numpy.rec.fromrecords AND numpy.array**: Testing confirmed that this is not specific to fromrecords but is a fundamental issue in NumPy's string handling.

2. **Pattern confirmed**: Trailing null characters are consistently truncated while embedded null characters (those followed by other characters) are preserved.

3. **Data corruption verified**: The length of strings changes when they contain trailing nulls:
   - '\x00' (length 1) becomes '' (length 0)
   - 'a\x00' (length 2) becomes 'a' (length 1)

4. **NumPy Unicode dtype issue**: The issue occurs with NumPy's Unicode string dtype (<U#) where trailing null characters are being treated as C-style string terminators.

## Effect

This bug causes silent data corruption when processing strings containing trailing null characters. The data is altered without any warning or error, which could lead to serious issues in applications that rely on exact string preservation (e.g., binary data encoded as strings, certain file formats, protocol implementations).
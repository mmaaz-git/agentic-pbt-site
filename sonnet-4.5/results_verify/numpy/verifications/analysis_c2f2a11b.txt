## Triage Analysis

### Consideration as INVALID
**Arguments against:**
- The documentation explicitly states a specific behavior: "If the input `a` contains an imaginary part, it is silently discarded."
- This is not ambiguous or open to interpretation
- The function name "rfft" (Real FFT) does not inherently mean it cannot accept complex input - it means the input signal is expected to be real-valued, but handling complex arrays by using only their real part would be a reasonable convenience feature
- The documentation creates a clear contract that users would reasonably rely upon

**Why this is NOT invalid:** The documentation makes an unambiguous claim about behavior that is demonstrably false.

### Consideration as WONTFIX
**Arguments for:**
- One could argue that passing complex numbers to a "real FFT" function is an edge case
- The error message is clear about what went wrong
- Users can easily work around this by explicitly taking the real part before calling rfft

**Arguments against:**
- The documentation explicitly promises this functionality
- This is not an obscure edge case - converting complex arrays to real is a common operation in signal processing
- The discrepancy between documentation and implementation can cause production failures for code that relies on the documented behavior

**Why this is NOT wontfix:** The documentation creates an explicit contract that users may depend upon. This is not a trivial edge case.

### Consideration as DOCUMENTATION_FIX
**Strong arguments for:**
- The underlying ufuncs (`rfft_n_even`, `rfft_n_odd`) fundamentally do not support complex input types
- Adding support for complex input would require changes to low-level C code, not just Python wrapper
- The current implementation behavior (rejecting complex input) is reasonable for a "real FFT" function
- The simplest fix is to update the documentation to match the actual behavior
- The documentation appears to be wrong, not the implementation

**Arguments against:**
- Some users may have written code expecting the documented behavior
- The documentation has been consistent across multiple versions

**This COULD be a documentation fix:** The implementation's behavior is reasonable, and the documentation appears to be incorrect.

### Consideration as FEATURE_REQUEST
**Arguments for:**
- Adding support for silently discarding imaginary parts would be a new feature
- The current implementation has never supported this
- It would require new code to extract the real part before passing to the ufunc

**Arguments against:**
- The documentation already claims this feature exists
- Users aren't asking for something new - they expect existing documented behavior

**Why this is NOT a feature request:** The documentation already promises this functionality; it's not a new request.

### Consideration as BUG
**Arguments for:**
- There is a clear contract violation between documentation and implementation
- The documentation is unambiguous about the expected behavior
- Users writing code based on the documentation will experience runtime failures
- The documentation appears in both the source code and official online documentation

**Arguments against:**
- The underlying implementation uses ufuncs that fundamentally don't support complex types
- A "real FFT" function rejecting complex input is arguably correct behavior
- The fix would be more naturally a documentation update than a code change

**This COULD be a bug:** There's a clear discrepancy between documented and actual behavior.

### Final Assessment
This is a clear case where the documentation and implementation disagree. The key question is: which one represents the intended behavior?

Given that:
1. The underlying ufuncs have never supported complex input
2. The function is specifically for "real" FFT
3. The TypeError message indicates this is by design, not an oversight
4. Fixing the documentation is simpler and less risky than changing behavior

This should be categorized as **DOCUMENTATION_FIX** - the documentation incorrectly describes a feature that was never implemented and likely was never intended to be implemented. The documentation should be updated to reflect that complex input is not supported.
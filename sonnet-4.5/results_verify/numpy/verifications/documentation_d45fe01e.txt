DOCUMENTATION ANALYSIS
======================

1. Official Documentation for numpy.ctypeslib.ndpointer:

The documentation states:
- "shape : tuple of ints, optional - Array shape."
- When restrictions are not satisfied, "a TypeError is raised"
- The function is used to "describe an ndarray in restypes and argtypes specifications"
- "Several restrictions can be specified, which are verified upon calling the ctypes function"

2. What the Documentation DOES Say:
- The shape parameter should be a "tuple of ints"
- The shape is used as a restriction that is "verified upon calling the ctypes function"
- If the array doesn't satisfy restrictions, TypeError is raised

3. What the Documentation DOES NOT Say:
- No explicit statement about validation of the shape parameter at creation time
- No mention of what constitutes a valid shape value
- No specification that negative integers are invalid
- No mention that shape values must be non-negative

4. Implicit Expectations:
- The term "Array shape" implies NumPy array shapes, which cannot be negative
- Since NumPy arrays cannot have negative dimensions (as verified by np.zeros((-1, 3)) raising ValueError),
  it's reasonable to expect that ndpointer shapes should follow the same constraint
- The purpose is to verify arrays against the shape, but negative shapes can never be satisfied

5. Comparison with NumPy Behavior:
- NumPy's array creation functions explicitly reject negative dimensions
- NumPy's documentation for array shapes consistently uses non-negative integers
- The reshape function uses -1 as a special value to infer dimension, but this is explicitly documented

6. Documentation Gap:
The documentation does not explicitly state that shape dimensions must be non-negative, but this
is a reasonable expectation given:
- NumPy arrays cannot have negative shapes
- The purpose of ndpointer is to validate NumPy arrays
- A negative shape constraint can never be satisfied by any valid NumPy array

Conclusion: While not explicitly documented, the expectation that shape dimensions should be
non-negative is reasonable and aligned with NumPy's overall behavior. The lack of validation
creates a situation where impossible-to-satisfy constraints can be specified, leading to
confusing error messages.
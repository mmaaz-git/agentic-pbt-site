REPRODUCTION REPORT
===================

I successfully reproduced the bug reported in numpy.ma.allclose. The bug report accurately describes an asymmetry issue.

## Test Results

1. **Simple Reproduction Test**: CONFIRMED
   - Test code: `ma.allclose(x, y)` where x = [inf] unmasked, y = [0.] masked
   - Result: `allclose(x, y) = True`, but `allclose(y, x) = False`
   - This confirms the asymmetry described in the bug report

2. **Property-Based Test with Hypothesis**: CONFIRMED
   - The property test found multiple cases where symmetry is violated
   - Most failures involve arrays containing infinity values with different masking patterns
   - The test correctly identifies that `allclose(x, y) != allclose(y, x)` in certain cases

3. **Specific Infinity Behavior Testing**: CONFIRMED
   - When one array has unmasked infinity and the other has that position masked:
     - `ma.allclose([inf (unmasked)], [1.0 (masked)]) = True`
     - `ma.allclose([1.0 (masked)], [inf (unmasked)]) = False`
   - This confirms the asymmetric behavior with infinity and masked values

## Bug Effect

The bug causes `numpy.ma.allclose` to violate the mathematical property of symmetry in comparison operations. When comparing two masked arrays where:
- One array has an unmasked infinity value at position i
- The other array has position i masked
- `masked_equal=True` (the default)

The function returns different results depending on the order of arguments, which is unexpected behavior for a comparison function.

## Root Cause

The bug appears to be in the infinity checking logic around line 7950 of numpy/ma/core.py, where the combined mask is applied asymmetrically to only one array when checking for infinities, leading to different results based on argument order.
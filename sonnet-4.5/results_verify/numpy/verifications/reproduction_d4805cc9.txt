REPRODUCTION REPORT
==================

I have successfully reproduced the bug described in the report. The issue affects both numpy.strings.index and numpy.strings.rindex functions.

TEST RESULTS:
-------------

1. Basic Reproduction Test:
   - Input: arr = np.array(['0', '']), sub = '0'
   - find(arr, '0') returns: [0, -1] (correctly identifies '0' at index 0 in first element, -1 for second)
   - index(arr, '0') raises: ValueError: substring not found
   - rfind(arr, '0') returns: [0, -1] (same as find)
   - rindex(arr, '0') raises: ValueError: substring not found

   CONFIRMED: The bug exists as described.

2. Property-Based Testing with Hypothesis:
   - The test failed on the first generated example
   - Failure case: Array with two elements where only one contains the substring
   - This confirms the bug is not limited to the specific example but is a general issue

3. Extended Testing with Various Array Configurations:

   a) All elements contain substring:
      - arr = ['hello world', 'world peace', 'new world']
      - find() returns [6, 0, 4] - works correctly
      - index() returns [6, 0, 4] - works correctly

   b) No elements contain substring:
      - arr = ['hello', 'goodbye', 'welcome']
      - find() returns [-1, -1, -1] - works correctly
      - index() raises ValueError - works correctly

   c) Mixed case (some contain, some don't):
      - arr = ['hello world', 'goodbye', 'new world']
      - find() returns [6, -1, 4] - works correctly
      - index() raises ValueError - PROBLEMATIC BEHAVIOR

   d) Single element with substring:
      - arr = ['hello world']
      - Both find() and index() return [6] - works correctly

   e) Single element without substring:
      - arr = ['hello']
      - find() returns [-1] - works correctly
      - index() raises ValueError - works correctly

BEHAVIOR SUMMARY:
-----------------
The functions numpy.strings.index and numpy.strings.rindex raise a ValueError when ANY element in the input array doesn't contain the substring, even if other elements do contain it. This makes the functions unusable for vectorized operations on arrays with mixed results (where some elements contain the substring and others don't).

The behavior is consistent and reproducible across all test cases. The ValueError is raised at the entire array operation level, not at the element level, which breaks the expected vectorized behavior of NumPy functions.
## Reproduction Analysis for numpy.rec.fromarrays Bug

### Bug Reproduction
The bug can be reliably reproduced as reported:
```python
numpy.rec.fromarrays([], names='a')
```
Results in: `IndexError: list index out of range`

The error occurs at line 624 in records.py where the code tries to access `arrayList[0].shape` without checking if `arrayList` is empty.

### Test Results:

1. **Empty list with names**: FAILS with IndexError as reported
   - `numpy.rec.fromarrays([], names='a')` → IndexError

2. **Empty list with explicit shape**: Still FAILS
   - `numpy.rec.fromarrays([], names='a', shape=(0,))` → "Field index 0 out of range"
   - This shows that even providing shape doesn't help because the dtype construction fails

3. **Single empty array in list**: WORKS
   - `numpy.rec.fromarrays([np.array([])], names='a')` → Success, returns empty recarray with shape (0,)
   - This proves that empty arrays ARE supported, just not empty lists of arrays

4. **Multiple empty arrays**: WORKS
   - `numpy.rec.fromarrays([np.array([]), np.array([])], names='a,b')` → Success, returns empty recarray

5. **Similar functions have similar issues**:
   - `np.rec.fromrecords([])` → Also fails with IndexError
   - `np.rec.array([])` → Also fails with IndexError
   - This shows a pattern of not handling empty input lists across the rec module

6. **Other NumPy functions handle empty inputs differently**:
   - `np.array([])` → Works, returns empty array
   - `np.stack([])` → Raises clear ValueError: "need at least one array to stack"
   - `np.concatenate([])` → Raises clear ValueError: "need at least one array to concatenate"

### Key Findings:
- The bug is real and reproducible exactly as reported
- The function CAN handle empty arrays (when at least one array is in the list)
- The function CANNOT handle an empty list of arrays
- Similar rec module functions have the same issue
- Other NumPy functions either handle empty inputs or provide clear error messages
Documentation Analysis for numpy.random.dirichlet
==================================================

Official NumPy Documentation
----------------------------
The official NumPy documentation for numpy.random.dirichlet states:

1. Alpha Parameter Requirements:
   - "If any value in alpha is less than or equal to zero" raises ValueError
   - No upper bound is specified
   - No minimum threshold above zero is documented

2. Output Properties:
   - Explicitly states that samples must satisfy: "x_i > 0" (each component positive)
   - Explicitly states that samples must satisfy: "âˆ‘_{i=1}^k x_i = 1" (sum equals 1)
   - These are fundamental mathematical properties of the Dirichlet distribution

3. Numerical Stability:
   - NO warnings about numerical stability with small alpha values
   - NO documented minimum safe threshold
   - NO mention of potential NaN/Inf outputs

4. Legacy vs New API:
   - Documentation notes this is a legacy method
   - Recommends using Generator.dirichlet instead
   - Does NOT mention that the new API fixes numerical stability issues

Mathematical Definition
-----------------------
According to mathematical references (Wikipedia):
- The Dirichlet distribution requires all alpha_i > 0 (strictly positive)
- As alpha approaches 0, the distribution becomes increasingly "sparse"
- The distribution is mathematically well-defined for all positive alpha values

Historical Context
------------------
GitHub issues show this was a known problem:
- Issue #5851 (May 2015): First reported the NaN/Inf problem with small alpha
- Issue #24210 (2023): Continued reports of the same issue
- PR #14924: Implemented fix using stick-breaking algorithm for small alpha

The fix was supposedly included in NumPy 1.19.0, switching to a stick-breaking algorithm when max(alpha) < 0.1. However, this fix appears to only apply to the new Generator API, not the legacy function.

Documentation Gap
-----------------
The documentation fails to:
1. Warn users about numerical instability with small alpha values in the legacy API
2. Document that there's an effective minimum alpha threshold for numerical stability
3. Explain that the new Generator API has better numerical properties
4. Specify what happens when the function cannot produce valid samples

Conclusion
----------
The documentation correctly states the mathematical requirements (alpha > 0, outputs sum to 1), but fails to warn about the practical numerical limitations of the legacy implementation. The function accepts inputs that meet the documented requirements but produces outputs that violate the documented properties (NaN/Inf instead of valid probability vectors).
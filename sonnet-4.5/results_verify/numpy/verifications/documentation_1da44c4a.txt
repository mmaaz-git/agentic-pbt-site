DOCUMENTATION ANALYSIS
======================

NumPy Documentation Claims:
---------------------------
The official NumPy documentation for numpy.strings.replace states:
1. "Replaces occurrences of substring `old` with `new` in each element of input array"
2. "Performs element-wise string replacement"
3. "Matches Python's str.replace method functionality"

Python str.replace Behavior:
----------------------------
Python's str.replace() documentation states:
- "Return a copy of the string with all occurrences of substring old replaced by new"
- No restrictions on replacement length
- No special cases for when old equals the entire string

Tested Python Behavior:
----------------------
Python's str.replace correctly handles:
- '0'.replace('0', '00') → '00'
- 'a'.replace('a', 'aa') → 'aa'
- 'hello'.replace('hello', 'hellohello') → 'hellohello'

Documentation Violation:
------------------------
NumPy's documentation explicitly claims that numpy.strings.replace "matches Python's str.replace method functionality" and performs "element-wise string replacement." This is a clear promise that the function should behave identically to Python's str.replace for each element.

The bug report demonstrates that this promise is violated when:
1. The substring to replace equals the entire string
2. The replacement is longer than the original

In these cases, numpy.strings.replace returns the original string unchanged, while Python's str.replace returns the correctly replaced string.

Conclusion:
-----------
The documentation makes an explicit guarantee that numpy.strings.replace matches Python's str.replace behavior. The observed behavior directly violates this documented guarantee. There are no documented exceptions, limitations, or special cases that would justify this discrepancy.
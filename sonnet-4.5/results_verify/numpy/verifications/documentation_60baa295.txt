DOCUMENTATION FINDINGS FOR numpy.linalg.matrix_rank

1. FUNCTION PURPOSE AND ALGORITHM:
   - matrix_rank computes the rank of a matrix using Singular Value Decomposition (SVD)
   - Returns the number of singular values greater than a specified tolerance
   - Uses SVD to determine numerical rank, accounting for numerical imprecision

2. DEFAULT TOLERANCE CALCULATION:
   The documentation explicitly states the default tolerance is calculated as:
   tol = S.max() * max(M, N) * eps
   Where:
   - S.max() is the largest singular value
   - max(M, N) is the maximum of the matrix dimensions
   - eps is the machine epsilon for the data type (2.22e-16 for float64)

3. HANDLING OF EDGE CASES:
   - The documentation does NOT mention subnormal numbers specifically
   - The documentation does NOT mention any minimum tolerance threshold
   - The documentation does NOT warn about potential issues with very small matrix values
   - The documentation does NOT discuss what happens when S.max() is subnormal or zero

4. RELATIONSHIP TO MATHEMATICAL RANK:
   - The documentation mentions "numerical rank deficiency" detection
   - It notes that the threshold is chosen to match MATLAB's approach
   - The documentation emphasizes this is for detecting numerical rank, not exact mathematical rank

5. KEY OBSERVATIONS:
   - The default tolerance formula can produce tol=0 when S.max() is subnormal (< 2.22e-308)
   - This is because subnormal * normal_eps = 0 in floating point arithmetic
   - The documentation doesn't specify behavior for matrices with all subnormal values
   - There's no documented minimum tolerance to prevent tol=0

6. COMPARISON WITH MATHEMATICAL PROPERTIES:
   - Mathematically, a matrix with determinant 0 is singular and must have rank < n
   - The documentation doesn't explicitly guarantee this property will be preserved
   - The focus is on "numerical" rank rather than exact mathematical rank

CONCLUSION:
The documentation does not specify how matrix_rank should behave with subnormal values. The default tolerance formula as documented (S.max() * max(shape) * eps) will indeed produce 0 when all singular values are subnormal, which is the root cause of the reported behavior. The documentation neither guarantees nor disclaims proper handling of subnormal matrices.
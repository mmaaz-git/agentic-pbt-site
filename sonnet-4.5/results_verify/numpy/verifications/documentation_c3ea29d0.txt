## Documentation Analysis for numpy.ma.intersect1d

### Official Documentation

The numpy.ma.intersect1d documentation states explicitly:
- **"Masked values are considered equal one to the other."**
- "Returns the unique elements common to both arrays."
- "The output is always a masked array."

### Documentation Example
The provided example shows:
```python
x = np.ma.array([1, 3, 3, 3], mask=[0, 0, 0, 1])
y = np.ma.array([3, 1, 1, 1], mask=[0, 0, 0, 1])
np.ma.intersect1d(x, y)
# Result: masked_array(data=[1, 3, --], mask=[False, False, True])
```

This example shows a single masked value in the result when both inputs have masked values, which aligns with the stated behavior.

### Key Interpretation

The documentation phrase "Masked values are considered equal one to the other" has clear implications:
1. All masked values should be treated as identical, regardless of their underlying data
2. In set theory terms, all masked values represent the same element
3. An intersection of sets containing masked values should have at most one masked element

### Mathematical Consistency

From a set theory perspective:
- If set A contains {masked₁, masked₂, other_elements}
- And set B contains {masked₃, masked₄, other_elements}
- And all masked values are "equal to one another"
- Then A ∩ B should contain at most {masked, common_other_elements}

The current implementation returning multiple masked values violates this documented equality principle.

### Comparison with numpy.intersect1d

The regular numpy.intersect1d treats each value independently. The ma.intersect1d documentation specifically states masked values have special equality semantics, differentiating it from the regular version.

### Conclusion

The documentation is clear and unambiguous about the expected behavior. The implementation does not match the documented contract.
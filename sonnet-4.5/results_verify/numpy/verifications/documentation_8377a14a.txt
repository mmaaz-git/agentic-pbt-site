## Documentation Analysis for SparseArray Concatenation

### Documentation Search Results

1. **Official pandas API documentation**: No specific documentation found about how _concat_same_type handles different fill values. The method's docstring only states it "Concatenate multiple array of this dtype" without mentioning fill_value behavior.

2. **Pandas User Guide on Sparse Data**: The user guide describes SparseArrays but does not document concatenation behavior or what happens with different fill values.

3. **pandas.concat documentation**: The general concat function documentation does not address SparseArray-specific behavior or fill_value handling.

### Key Findings

1. **No Documentation of Current Behavior**: There is no documentation stating that concatenation should use only the first array's fill_value or that data loss is expected when arrays have different fill values.

2. **No Warning About Data Loss**: The documentation does not warn users that concatenating SparseArrays with different fill values can lead to data loss.

3. **Reasonable User Expectation**: Given the lack of documentation, a reasonable user would expect that concatenation preserves all data values, following the principle of least surprise. The expectation that `concat([a, b]).to_dense() == np.concatenate([a.to_dense(), b.to_dense()])` is entirely reasonable.

4. **Source Code Analysis**: The implementation in `/home/npc/miniconda/lib/python3.13/site-packages/pandas/core/arrays/sparse/array.py` shows:
   - Line 1183: `fill_value = to_concat[0].fill_value` - uses only the first array's fill_value
   - Line 1235: Returns new array with this single fill_value
   - No code to handle different fill values or convert values appropriately

### Conclusion

The lack of documentation about this behavior, combined with the silent data loss, strongly suggests this is unintended behavior rather than a documented limitation. Users have no way to know this will happen without reading the source code, and the behavior violates the principle of data integrity that users expect from pandas operations.
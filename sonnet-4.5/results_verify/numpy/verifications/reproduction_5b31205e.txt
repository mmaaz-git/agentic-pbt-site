## Reproduction Analysis

I have successfully reproduced the bug reported in numpy.random.geometric with small probability values.

### Test Results:

1. **Hypothesis Test Reproduction:**
   - Tested with p=1e-100
   - Result: All 10 generated values were -9223372036854775808 (INT64_MIN)
   - This confirms the test fails as the bug report states

2. **Manual Reproduction:**
   - Confirmed exact output matches the bug report:
     - p = 1e-100 returns -9223372036854775808
     - Bug is confirmed to exist

3. **Extended Testing:**
   I tested with various small probability values to understand the threshold:
   - p = 1e-10: Works correctly (returned 4692680512)
   - p = 1e-20: FAILS (returns -9223372036854775808)
   - p = 1e-30: FAILS (returns -9223372036854775808)
   - p = 1e-40: FAILS (returns -9223372036854775808)
   - p = 1e-50: FAILS (returns -9223372036854775808)
   - p = 1e-100: FAILS (returns -9223372036854775808)

### Key Findings:

1. The bug is 100% reproducible with the provided code
2. The threshold appears to be around p < 1e-10 to 1e-20
3. The function returns INT64_MIN (-9223372036854775808) which is clearly incorrect for a geometric distribution
4. The geometric distribution must return positive integers >= 1 by mathematical definition
5. The bug represents a silent data corruption issue - no error is raised, just invalid data returned

### Verification of Bug Effect:

The effect is severe:
- The function silently returns negative values when it should only return positive integers
- The value returned (-9223372036854775808) is the minimum value for int64, suggesting integer overflow
- This violates the fundamental mathematical property of the geometric distribution
- Users may not notice this in large datasets, leading to corrupted analyses
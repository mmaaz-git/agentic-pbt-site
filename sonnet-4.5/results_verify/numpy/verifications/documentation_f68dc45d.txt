Documentation Findings for numpy.ma compress_rows/compress_cols/compress_rowcols
================================================================================

1. OFFICIAL DOCUMENTATION:

compress_rows(a):
- Description: "Suppress whole rows of a 2-D array that contain masked values."
- Parameters: x must be a 2D array (MaskedArray)
- Returns: "compressed_array : ndarray" - described as "The compressed array"
- Equivalent to: np.ma.compress_rowcols(a, 0)

compress_cols(a):
- Description: "Suppress whole columns of a 2-D array that contain masked values."
- Parameters: x must be a 2D array (MaskedArray)
- Returns: "compressed_array : ndarray" - described as "The compressed array"
- Equivalent to: np.ma.compress_rowcols(a, 1)

compress_rowcols(x, axis=None):
- Description: "Suppress the rows and/or columns of a 2-D array that contain masked values."
- Parameters: x must be a 2D array; axis determines which dimensions to suppress
- Returns: "compressed_array : ndarray" - described as "The compressed array"

2. KEY OBSERVATIONS ABOUT DOCUMENTATION:

a) Return Type Specification:
   - All three functions document their return type as "ndarray"
   - The documentation describes it as "The compressed array"
   - There is NO specification about maintaining dimensionality
   - There is NO specification about what shape the result should have when all rows/columns are removed

b) Examples Provided:
   - All examples in the documentation show cases where some data remains after compression
   - No examples show what happens when ALL rows or ALL columns are masked
   - The examples return 2D arrays, but this is not explicitly guaranteed

c) Implementation Details Found:
   - All three functions ultimately call compress_nd()
   - compress_nd() at line 948 explicitly returns `nxarray([])` (equivalent to `np.array([])`) when all data is masked
   - This returns a 1D array with shape (0,) regardless of input dimensions

3. DOCUMENTATION GAPS:

The documentation does NOT specify:
- What dimensionality the output should have
- Whether the output must always be 2D
- What shape should be returned when all rows/columns are removed
- Whether the function should preserve the structure of the input array

4. COMPARISON WITH STANDARD NUMPY BEHAVIOR:

Regular numpy array slicing with empty indices DOES preserve dimensionality:
- np.array([[1,2],[3,4]])[np.array([], dtype=int)] returns shape (0, 2) - still 2D
- This suggests numpy's general convention is to preserve dimensionality

5. CONCLUSION:

The documentation is ambiguous about the expected behavior when all rows/columns are masked. It neither explicitly requires maintaining 2D structure nor explicitly allows returning 1D arrays. The term "compressed array" is vague and doesn't specify dimensionality requirements.
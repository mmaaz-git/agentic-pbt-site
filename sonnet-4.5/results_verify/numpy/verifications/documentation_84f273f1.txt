## Documentation Analysis for numpy.matrixlib.bmat

### Function Signature
```python
def bmat(obj, ldict=None, gdict=None):
```

### Official Documentation Review

1. **Parameter Documentation**:
   - `ldict` is documented as "optional" with description: "A dictionary that replaces local operands in current frame. Ignored if `obj` is not a string or `gdict` is None."
   - `gdict` is documented as "optional" with description: "A dictionary that replaces global operands in current frame. Ignored if `obj` is not a string."

2. **Key Documentation Statements**:
   - The function signature explicitly shows `ldict=None` as a default parameter
   - The documentation states ldict is "optional"
   - The documentation says ldict is "Ignored if `obj` is not a string or `gdict` is None"
   - This implies that when `gdict` is NOT None and obj IS a string, ldict should be usable

3. **Usage Examples in Documentation**:
   - All string-based examples in the documentation use frame locals/globals: `np.bmat('A,B; C,D')`
   - No examples show using `gdict` parameter alone
   - No examples show using `gdict` with `ldict`

### Documentation Intent vs Implementation

The documentation clearly intends for `ldict` to be optional:
1. It has a default value of `None` in the signature
2. It's marked as "optional" in the parameter documentation
3. There's no statement requiring `ldict` when `gdict` is provided

The documentation statement "Ignored if `obj` is not a string or `gdict` is None" describes when ldict is ignored, but doesn't say it's required when gdict is not None. The natural interpretation is that:
- When gdict is None: use frame locals/globals (ldict ignored)
- When gdict is not None: use gdict/ldict instead of frame variables

The implementation's crash when ldict=None and gdict is provided contradicts the documented optional nature of ldict.

### Conclusion
The documentation clearly indicates `ldict` should be optional, with a default of `None`. The crash when using `gdict` without `ldict` is inconsistent with the documented API. Users would reasonably expect to be able to provide `gdict` alone to override global variables while leaving locals as empty/unused.
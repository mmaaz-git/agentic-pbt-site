NUMPY CHAR DOCUMENTATION FINDINGS

1. numpy.char.upper() Documentation:
   - States: "Return an array with the elements converted to uppercase. Calls str.upper element-wise."
   - Claims to be a vectorized version of Python's str.upper()
   - No mention of special handling or limitations for null characters
   - No documentation about stripping null characters

2. numpy.char.lower() Documentation:
   - States: "Converts array elements to lowercase element-wise"
   - Similar claim to be vectorized Python str.lower()
   - No mention of null character handling

3. Python str.upper() and str.lower() Documentation:
   - Returns "a copy of the string with all the cased characters converted to uppercase/lowercase"
   - Based on Unicode Standard section 3.13
   - No specific mention of null character handling
   - In practice, Python preserves null characters: '\x00'.upper() returns '\x00'

4. Critical Finding - numpy.str_ Documentation:
   - Documentation explicitly states: "Strips trailing null codepoints"
   - Example provided: np.str_("abc\x00") returns 'abc'
   - This is a documented behavior of numpy.str_ type itself

5. Documentation Consistency Issue:
   - numpy.char operations claim to "call str.upper element-wise"
   - But the actual issue is that numpy.str_ type strips certain null characters
   - The bug report claims char.upper strips nulls, but testing shows it's the numpy array creation that strips leading/trailing nulls
   - Embedded nulls are preserved (e.g., 'abc\x00def' works correctly)

CONCLUSION:
The documentation for numpy.str_ explicitly states that it strips trailing null codepoints. This is not a limitation of numpy.char.upper/lower but of the numpy.str_ type itself. The behavior is documented for the string type, though not mentioned in the char operation documentation.
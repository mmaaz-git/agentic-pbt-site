# Documentation Analysis

## NumPy Documentation Claims

The numpy.char function documentation explicitly states that these functions call the corresponding Python str methods "element-wise":

1. **numpy.char.upper**: "Calls :meth:`str.upper` element-wise"
2. **numpy.char.lower**: "Call :meth:`str.lower` element-wise"
3. **numpy.char.capitalize**: "Calls :meth:`str.capitalize` element-wise"
4. **numpy.char.title**: "Calls :meth:`str.title` element-wise"
5. **numpy.char.swapcase**: "Calls :meth:`str.swapcase` element-wise"
6. **numpy.char.encode**: "Calls :meth:`str.encode` element-wise"

The strip functions (strip, lstrip, rstrip) don't explicitly state they call str methods, but they describe behavior that should match Python's standard string strip methods.

## Python str Method Behavior

Python's str methods are documented to work on Unicode strings and handle all valid Unicode characters. The documentation does not indicate that null characters should be treated specially or removed by transformation methods like upper(), lower(), etc.

Testing confirms Python's str methods preserve null characters:
- `'\x00'.upper()` returns `'\x00'`
- `'\x00'.lower()` returns `'\x00'`
- etc.

## Discrepancy Identified

The NumPy documentation claims these functions call Python's str methods "element-wise", which implies they should produce identical results for the same input. However:

1. **NumPy behavior**: `numpy.char.upper('\x00')` returns `''`
2. **Python behavior**: `str.upper('\x00')` returns `'\x00'`

This is a clear violation of the documented behavior.

## Special Considerations

1. The null character (`\x00`) is a valid Unicode character (U+0000, "NULL")
2. Python strings are Unicode and can contain null characters
3. There is no documentation in either NumPy or Python suggesting null characters should be stripped by string transformation methods
4. The numpy.char module is marked as "Legacy" but is still part of the stable API

## Conclusion

The documentation explicitly states that numpy.char functions call Python's str methods element-wise, creating a contract that the behavior should match. The actual implementation violates this documented contract by stripping null characters, which Python's str methods do not do.

This is not a case of unspecified behavior - the documentation makes a clear claim about calling str methods element-wise, which sets the expectation that the behavior should match Python's standard string methods.
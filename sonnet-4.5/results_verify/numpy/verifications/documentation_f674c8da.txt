DOCUMENTATION ANALYSIS
======================

## Official NumPy Documentation

The cast() method is documented as a classmethod with the following signature:
```python
@classmethod
Polynomial.cast(series, domain=None, window=None)
```

### Key Documentation Points:

1. **Method Type**: Explicitly marked as @classmethod in documentation and source code

2. **Purpose**: "Convert series to series of this class"
   - The series parameter is expected to be an instance of a polynomial series
   - Converts from one polynomial type to another (or same type with different domain/window)

3. **Parameters**:
   - `series`: The series instance to be converted (should be a polynomial instance)
   - `domain`: Optional domain endpoints
   - `window`: Optional window endpoints

4. **Implementation** (line 1191 in _polybase.py):
   ```python
   return series.convert(domain, cls, window)
   ```
   This expects `series` to be an instance with a `convert()` method

### Documentation Findings:

1. **No explicit mention** of whether cast() can be called on instances
   - Python allows classmethods to be called on instances
   - Documentation doesn't prohibit this usage
   - Documentation doesn't warn against instance method usage

2. **Related method**: The documentation mentions `convert()` as "similar instance method"
   - convert() is the instance method for conversions
   - cast() is the classmethod wrapper around convert()

3. **Expected behavior not specified**:
   - Documentation doesn't specify what happens when cast() is called as instance.cast()
   - No examples show the correct usage pattern
   - No warnings about incorrect usage

### Python Language Behavior:

In Python, classmethods CAN be called on instances:
- When you call instance.classmethod(), Python passes the class (not the instance) as the first argument
- This is standard Python behavior since at least Python 2.2

Example:
```python
class Foo:
    @classmethod
    def bar(cls, x):
        return (cls, x)

f = Foo()
# Both are valid:
Foo.bar(10)  # (Foo, 10)
f.bar(10)    # (Foo, 10)  - instance.bar() still passes Foo as cls
```

### Conclusion:

The documentation does NOT:
- Prohibit calling cast() as an instance method
- Warn that cast() must only be called as Polynomial.cast()
- Provide examples showing the correct usage pattern
- Explain what happens if called incorrectly

The current implementation breaks when cast() is called as an instance method, which is a valid Python pattern. The documentation doesn't specify this limitation, making this a legitimate bug rather than user error.
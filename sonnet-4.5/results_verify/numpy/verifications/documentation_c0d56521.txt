## Documentation Analysis

### Key Documentation Findings:

1. **numpy.str_ explicitly strips trailing nulls** (from numpy.str_ documentation):
   - Direct quote: "This type strips trailing null codepoints"
   - Example provided: `np.str_("abc\x00")` results in `'abc'`
   - This is DOCUMENTED BEHAVIOR, not a bug

2. **numpy.bytes_ also strips trailing nulls** (from numpy.bytes_ documentation):
   - Direct quote: "When used in arrays, this type strips trailing null bytes"
   - This is also DOCUMENTED BEHAVIOR

3. **Fixed-width string types and padding**:
   - U and S dtypes are fixed-width, requiring predetermined sizes
   - Strings shorter than the width are zero-padded
   - The documentation explicitly states: "NumPy cannot distinguish between intentional trailing nulls and padding nulls"
   - For precise null byte preservation, the documentation recommends using the unstructured void data type `V`

4. **numpy.strings.equal documentation**:
   - The function performs element-wise comparison
   - It's equivalent to the `==` operator for NumPy arrays
   - No special mention of null character handling (it just compares what it receives)
   - The function works correctly - it compares the values in the arrays as they are stored

5. **S dtype warning**:
   - Documentation specifically notes that `'S'` and `'a'` are "zero-terminated bytes" for backward compatibility with Python 2
   - This confirms that null-termination behavior is intentional

### Conclusion from Documentation:

The behavior described in the bug report is **explicitly documented** in multiple places:
- numpy.str_ documentation states it strips trailing null codepoints
- numpy.bytes_ documentation states it strips trailing null bytes when used in arrays
- The documentation acknowledges NumPy cannot distinguish between intentional trailing nulls and padding

This is not a bug in `numpy.strings.equal` - it's the documented behavior of NumPy's string storage. The function correctly compares the strings as they are stored in the arrays (with trailing nulls already stripped).

The bug report's complaint that `'a'` and `'a\x00'` are treated as equal is actually the intended, documented behavior of NumPy's traditional string dtypes. Users who need to preserve trailing nulls must use different data structures (like the new StringDType or void dtype).
## Documentation Analysis

### Official NumPy Documentation

1. **NBitBase Deprecation Status**:
   - Officially deprecated since NumPy 2.3
   - Documentation clearly states: "Deprecated since version 2.3: Use `@typing.overload` or a `TypeVar` with a scalar-type as upper bound, instead."

2. **NumPy 2.3.0 Release Notes**:
   - Confirms NBitBase deprecation
   - Explains the reason: Changes in NumPy 2.2.0 made float64 and complex128 concrete subtypes, breaking previous type-checking behavior
   - Provides migration path: Use typing.overload instead of NBitBase for type parameters

3. **Source Code Documentation**:
   - The __getattr__ function in numpy/typing/__init__.py contains explicit deprecation code (lines 173-184)
   - Comment indicates: "Deprecated in NumPy 2.3, 2025-05-01"
   - The deprecation warning message is clearly defined

4. **Expected Behavior**:
   - When NBitBase is deprecated, users SHOULD receive a DeprecationWarning
   - The documentation and release notes announce the deprecation but do not specify implementation details
   - The presence of deprecation code in __getattr__ strongly implies the intent to warn users

### Key Finding
The documentation clearly establishes that:
1. NBitBase IS deprecated as of NumPy 2.3
2. A deprecation warning SHOULD be shown to users
3. The code contains the machinery to show this warning
4. However, the implementation fails to trigger the warning due to the import structure

### Conclusion
The documentation supports the bug report. There is clear intent to deprecate NBitBase with a warning, as evidenced by both the documentation and the deprecation code in __getattr__. The failure to trigger this warning is an implementation bug, not a documentation issue.
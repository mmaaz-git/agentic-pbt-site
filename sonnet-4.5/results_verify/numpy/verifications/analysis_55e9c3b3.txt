## Bug Report Triage Analysis

### Evaluation for Each Category:

#### 1. INVALID
**Arguments Against:**
- The bug is real and reproducible
- The error occurs due to a documented formula producing an invalid result
- Most other FFT functions handle single-element arrays correctly
- The documentation doesn't state single-element arrays are unsupported

**Arguments For:**
- None - this is clearly a valid issue

#### 2. WONTFIX
**Arguments For:**
- Single-element FFTs might be considered an obscure edge case
- Users can work around it by specifying n explicitly
- The mathematical meaning of FFT on single element might be questionable

**Arguments Against:**
- This is not that obscure - single-element arrays are valid NumPy arrays
- Other FFT functions handle this case
- The workaround exists, showing the underlying algorithm supports it
- API consistency is important in NumPy

#### 3. DOCUMENTATION_FIX
**Arguments For:**
- The formula 2*(m-1) is documented correctly
- Could document that minimum input size is 2 elements
- Could add a warning about single-element arrays

**Arguments Against:**
- The code behavior is inconsistent with other FFT functions
- Documenting a limitation doesn't fix the inconsistency
- The error message is unhelpful and doesn't guide users

#### 4. FEATURE_REQUEST
**Arguments For:**
- Could be viewed as requesting new functionality (single-element support)
- The current behavior might be intentional

**Arguments Against:**
- Other FFT functions already support this
- This is fixing broken behavior, not adding new features
- The formula produces mathematically invalid input (n=0)

#### 5. BUG
**Arguments For:**
- Clear API inconsistency - most FFT functions work, hfft/irfft don't
- The documented default formula produces invalid values for valid inputs
- The error is cryptic and doesn't help users understand the issue
- The workaround (specifying n) shows the core algorithm supports this case
- No documentation indicates single-element arrays should fail
- The crash is due to a calculation bug, not intentional design

**Arguments Against:**
- None significant

### Analysis Summary:

This is a legitimate BUG for several reasons:

1. **API Inconsistency**: 4 out of 6 related FFT functions (fft, ifft, rfft, ihfft) handle single-element arrays correctly. Only hfft and irfft fail.

2. **Formula Bug**: The documented formula n = 2*(m-1) produces an invalid value (0) for valid input (single-element array). This is a mathematical edge case that wasn't properly handled.

3. **Unhelpful Error**: The error message "Invalid number of FFT data points (0)" doesn't help users understand that the issue is with single-element arrays.

4. **Supported by Implementation**: The fact that hfft([1.0], n=2) works proves the underlying algorithm can handle single-element arrays - it's just the default parameter calculation that's broken.

5. **No Documentation of Limitation**: There's no documentation stating that single-element arrays are unsupported or that n must be positive.

The proposed fix in the bug report is reasonable - either handle the edge case properly or provide a clear error message about minimum array size requirements.
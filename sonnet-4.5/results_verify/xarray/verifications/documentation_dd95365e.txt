DOCUMENTATION ANALYSIS
======================

FUNCTION SIGNATURE:
------------------
def collapsible_section(
    name, inline_details="", details="", n_items=None, enabled=True, collapsed=False
) -> str

DOCUMENTATION FINDINGS:
----------------------

1. No Formal Documentation:
   - The function has no docstring
   - No inline comments describing parameter expectations
   - No specification about valid ranges for n_items

2. Implicit Expectations from Usage:
   - All actual usages in the codebase pass n_items from len() calls
   - len() always returns non-negative integers (0 or positive)
   - Line 204: n_items = len(mapping)
   - Line 230: Called with n_items not specified (defaults to None)

3. Parameter Semantics:
   - n_items appears to represent a count of items
   - The parameter name itself ("n_items") strongly implies a count/number
   - Counts are semantically non-negative by definition

4. HTML Output Behavior:
   - When n_items is provided, it's displayed as "({n_items})"
   - Displaying "(-5)" makes no semantic sense for a count

5. Related Documentation:
   - XArray's HTML formatting documentation mentions collapsible sections
   - Documentation discusses max_items_collapse thresholds (e.g., 15, 25)
   - All references assume non-negative item counts

DOCUMENTATION GAPS:
------------------

1. No explicit statement that n_items must be non-negative
2. No validation or error handling for invalid inputs
3. No specification of what happens with invalid values

SEMANTIC INTERPRETATION:
-----------------------

Even without explicit documentation, the parameter name "n_items" (number of items)
and its usage context (displaying counts in UI) strongly implies:
- It should be a non-negative integer or None
- Negative values are semantically invalid
- The function should handle invalid inputs gracefully

CONCLUSION:
----------

While the documentation doesn't explicitly state that n_items must be non-negative,
the semantic meaning of "number of items" and all actual usage patterns in the
codebase make it clear that negative values are not intended or meaningful inputs.
The lack of input validation is a bug, not a feature.
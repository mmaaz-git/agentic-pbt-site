DOCUMENTATION FINDINGS FOR CombineKwargDefault

1. Python's Official Hash Contract (from Python Data Model documentation):
   - The official Python documentation states: "The only required property is that objects which compare equal have the same hash value"
   - The documentation also states that for mutable objects: "If a class defines mutable objects and implements an __eq__() method, it should not implement __hash__()"
   - The key requirement is that "hashable collections require that a key's hash value is immutable"
   - While not explicitly stated, the Python community consensus and all documentation examples show that an object's hash should remain constant during its lifetime

2. CombineKwargDefault Class Documentation:
   - There is NO public API documentation for the CombineKwargDefault class
   - It is located in xarray/util/deprecation_helpers.py, which suggests it's an internal utility
   - The only documentation is a brief docstring: "Object that handles deprecation cycle for kwarg default values. Similar to ReprObject"
   - The class is used internally by xarray for handling deprecation of keyword argument defaults
   - No documentation specifies that this object is intended to be used as a dict key or in sets
   - No documentation warns about hash instability

3. Usage Context:
   - The class is used internally in xarray's core modules (dataset.py, alignment.py, combine.py, etc.)
   - It is used primarily as default values for parameters that are undergoing deprecation
   - The class instances (_DATA_VARS_DEFAULT, _COORDS_DEFAULT, etc.) are created at module level

4. Key Design:
   - The class has a `_value` property that returns different values based on the global OPTIONS['use_new_combine_kwarg_defaults'] setting
   - The __hash__ method is implemented as `return hash(self._value)` which means the hash depends on the current global state
   - The __eq__ method also uses `_value` for comparison with other CombineKwargDefault objects

5. No Documentation States:
   - That the hash is expected to change
   - That objects should not be used in dicts/sets across OPTIONS changes
   - That this is intended behavior
   - Any warnings about using these objects as hashable keys

CONCLUSION: There is no documentation that suggests the current hash instability is intended behavior. The class violates standard Python conventions about hash stability without any documented justification or warnings.
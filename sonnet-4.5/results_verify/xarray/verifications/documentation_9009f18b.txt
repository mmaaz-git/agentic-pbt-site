## Documentation Analysis for AlwaysGreaterThan and AlwaysLessThan

### Code Comments
The only documentation found for these classes is in the source code comments:
1. Line 35-36 in xarray/core/dtypes.py: "# Equivalence to np.inf (-np.inf) for object-type"
2. Line 32-33 in xarray/namedarray/dtypes.py: "# Equivalence to np.inf (-np.inf) for object-type"

These comments indicate that:
- `AlwaysGreaterThan` (stored as `INF`) is intended to be equivalent to `np.inf` for object types
- `AlwaysLessThan` (stored as `NINF`) is intended to be equivalent to `-np.inf` for object types

### Usage Context
The classes are used in:
- `get_pos_infinity()` function returns `INF` for dtypes that aren't numeric
- `get_neg_infinity()` function returns `NINF` for dtypes that aren't numeric

### functools.total_ordering Requirements
According to Python documentation, @functools.total_ordering requires:
1. The class must define `__eq__()` method
2. The class must define one comparison method (`__lt__`, `__le__`, `__gt__`, or `__ge__`)
3. The decorator will automatically generate the rest of the comparison methods

### np.inf Behavior (Expected Equivalence)
Since the comments state these should be "Equivalence to np.inf (-np.inf)", let's note that:
- `np.inf > np.inf` returns False (irreflexivity)
- `np.inf == np.inf` returns True
- Only one of `a < b`, `a == b`, or `a > b` is true for any comparison (trichotomy)

### Documentation Gaps
There is NO explicit documentation that:
1. Specifies the exact behavior when comparing `AlwaysGreaterThan` with itself
2. States whether these classes should follow mathematical ordering axioms
3. Defines whether they should behave identically to np.inf in all respects
4. Specifies whether multiple instances should be considered equal

### Test Coverage
The existing test in test_dtypes.py (lines 82-86) only tests that:
- `INF > obj` for various objects (1.0, np.inf, "ab", 1.0+1.0j, True)
- `NINF < obj` for various objects

Notably, the test does NOT check:
- `INF > INF` behavior
- `NINF < NINF` behavior
- Behavior when comparing two different instances of the same class
- Whether trichotomy is satisfied

### Conclusion
While the comment suggests these classes should be "equivalent to np.inf", there is no formal documentation specifying:
1. Whether this equivalence extends to ALL comparison behaviors
2. Whether mathematical ordering axioms should be satisfied
3. The expected behavior for self-comparison

The implementation appears to prioritize being "always greater than" (or "always less than") literally, without exceptions for self-comparison, which differs from np.inf behavior.
Documentation Analysis
=====================

Code Documentation:
------------------
The xarray source code contains minimal documentation for these classes:
- Comment states: "# Equivalence to np.inf (-np.inf) for object-type"
- These are singleton instances: INF = AlwaysGreaterThan() and NINF = AlwaysLessThan()
- Used in get_pos_infinity() and get_neg_infinity() functions for object dtypes

The purpose is clear: these classes are meant to behave like positive and negative infinity for object-type arrays where np.inf cannot be used directly.

Python functools.total_ordering Documentation:
----------------------------------------------
From Python's official documentation:
- Requires defining one comparison method (__lt__, __le__, __gt__, or __ge__) plus __eq__
- The decorator "supplies the rest" of the comparison methods
- No explicit documentation of antisymmetry requirements, but this is implicit in "total ordering"

Total Ordering Mathematical Requirements:
-----------------------------------------
A total order must satisfy:
1. Antisymmetry: if a ≤ b and b ≤ a, then a = b
2. Transitivity: if a ≤ b and b ≤ c, then a ≤ c
3. Totality: either a ≤ b or b ≤ a (or both)

The current implementation violates antisymmetry: when a == b (both AlwaysGreaterThan instances), we have both a > b and b > a being true, which is mathematically impossible.

Expected Behavior for Infinity:
-------------------------------
Mathematical infinity should satisfy:
- ∞ == ∞ (two infinities are equal)
- ∞ > any finite value
- ∞ ≮ ∞ (infinity is not greater than itself)
- ∞ ≤ ∞ (infinity is less than or equal to itself)

The same applies to negative infinity with reversed comparisons.

Conclusion:
----------
While there is no explicit documentation stating how AlwaysGreaterThan/AlwaysLessThan should behave when compared to themselves, the mathematical properties of total ordering and infinity are well-established. The current implementation clearly violates these fundamental properties.
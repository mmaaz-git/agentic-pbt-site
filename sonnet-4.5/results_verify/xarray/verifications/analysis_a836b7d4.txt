## Bug Report Analysis

### Consideration for BUG (Valid Bug)
**Strong arguments for BUG:**
1. The function name "sum_where" clearly implies it should sum WHERE a condition is True
2. It contradicts the established NumPy convention for the 'where' parameter
3. The current implementation is objectively backwards - it sums where the condition is False
4. This creates a confusing API that will trip up any developer who uses it directly
5. The bug report provides a clear, reproducible test case that demonstrates the issue
6. The inverted logic is compensated for in nansum by passing an inverted mask ("two wrongs make a right"), which is fragile and confusing code

### Consideration for INVALID
**Possible arguments for INVALID:**
1. sum_where is not documented and may not be intended as a public API
2. It could be argued that this is an internal function with its own semantics

**Counter-arguments:**
- Even internal functions should follow logical naming conventions
- The function is importable and usable, making it de facto public
- The name strongly implies NumPy-like behavior

### Consideration for WONTFIX
**Possible arguments for WONTFIX:**
1. The function works correctly in its only known use case (nansum)
2. Fixing it requires coordinating changes in multiple places
3. It's an internal function that most users won't encounter

**Counter-arguments:**
- The current state is a maintenance hazard
- Future developers may use sum_where expecting NumPy-like behavior
- The fix is straightforward and improves code clarity

### Consideration for FEATURE_REQUEST
**Not applicable** - This is clearly a bug, not a request for new functionality. The function already exists but behaves incorrectly.

### Consideration for DOCUMENTATION_FIX
**Possible arguments for DOCUMENTATION_FIX:**
1. One could document that sum_where has inverted logic compared to NumPy

**Counter-arguments:**
- This would be documenting a bug rather than fixing it
- The function name itself is misleading and can't be fixed with documentation
- It's better to fix the logic than to document counterintuitive behavior

### Conclusion
This is a **BUG**. The function has inverted conditional logic that:
1. Contradicts its name
2. Violates the principle of least surprise
3. Deviates from established NumPy conventions
4. Creates fragile, confusing code (the "two wrongs make a right" pattern in nansum)

The bug should be fixed to maintain code quality and prevent future errors. The fact that it currently "works" in nansum through compensating errors is not a reason to leave incorrect code in place.
## Documentation Analysis for OrderedSet.discard()

### Python's MutableSet Contract

From Python's collections.abc source code (_collections_abc.py), the MutableSet abstract base class defines:

1. **discard(value)**:
   - Docstring: "Remove an element. Do not raise an exception if absent."
   - This is an abstract method that MUST be implemented by subclasses
   - The contract explicitly states NO exception should be raised if element is absent

2. **remove(value)**:
   - Docstring: "Remove an element. If not a member, raise a KeyError."
   - Default implementation checks membership and raises KeyError if not present
   - Then calls discard(value) to actually remove the element

### Python's Built-in set Behavior

From Python's built-in set documentation:

1. **set.discard()**:
   - "Remove an element from a set if it is a member."
   - "Unlike set.remove(), the discard() method does not raise an exception when an element is missing from the set."

2. **set.remove()**:
   - "Remove an element from a set; it must be a member."
   - "If the element is not a member, raise a KeyError."

### xarray's OrderedSet Implementation

The OrderedSet class in xarray/core/utils.py:
- Explicitly inherits from MutableSet[T]
- Documentation states: "The API matches the builtin set"
- Current discard() implementation: `del self._d[value]`

### Contract Violation

The current implementation violates the MutableSet contract in a clear and unambiguous way:
1. MutableSet.discard() MUST NOT raise an exception when element is absent
2. OrderedSet.discard() DOES raise KeyError when element is absent
3. This breaks the Liskov Substitution Principle - OrderedSet cannot be used as a drop-in replacement for MutableSet

### Conclusion

The bug report is correct. The documentation and contract are absolutely clear:
- discard() must silently do nothing if the element doesn't exist
- Only remove() should raise KeyError for missing elements
- The current implementation violates this fundamental contract of the MutableSet ABC
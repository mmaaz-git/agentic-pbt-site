## Documentation Analysis

### CoordinateTransform Base Class Documentation

From the xarray source code (coordinate_transform.py), the CoordinateTransform abstract class defines:

1. **forward() method** (line 36-52): "Perform grid -> world coordinate transformation"
   - Input: Grid location(s) along each dimension (axis)
   - Output: World coordinate labels

2. **reverse() method** (line 54-68): "Perform world -> grid coordinate reverse transformation"
   - Input: World coordinate labels
   - Output: Grid relative location(s) along each dimension (axis)

The documentation clearly establishes that forward and reverse are meant to be inverse transformations:
- forward: grid positions → world coordinates
- reverse: world coordinates → grid positions

### RangeCoordinateTransform Implementation

RangeCoordinateTransform (line 16-18) is documented as:
"1-dimensional coordinate transform representing a simple bounded interval with evenly spaced, floating-point values."

The implementation calculates step as (stop - start) / size, which becomes 0 when start == stop.

### Expected Behavior

Based on the documentation, the forward/reverse methods should maintain the round-trip property:
- reverse(forward(positions)) should return the original positions
- forward(reverse(labels)) should return the original labels

When start == stop, this represents a valid coordinate transform where all grid positions map to the same constant coordinate value. The reverse transformation should still work, mapping that constant value back to valid grid positions.

### Conclusion

The documentation implicitly requires that forward and reverse be inverse operations. The bug violates this contract by returning NaN instead of valid positions when step=0, breaking the documented transformation semantics.
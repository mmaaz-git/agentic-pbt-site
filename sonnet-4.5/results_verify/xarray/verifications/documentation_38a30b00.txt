# Documentation Analysis

## xarray Documentation
The xarray.compat.dask_array_compat.reshape_blockwise function has minimal documentation:
- No docstring provided
- Function signature shows it accepts: x (array), shape (target shape), and optional chunks parameter
- No explicit documentation about expected behavior or limitations

## Implementation Details
The function is a compatibility wrapper that:
1. Checks if dask version >= 2024.08.2 is available
2. If yes, delegates to dask.array.reshape_blockwise
3. If no, falls back to x.reshape(shape)

## Usage in xarray
The function is used in xarray.compat.dask_array_ops.least_squares():
- Line 36: Reshapes rhs from (N, ...) to (N, prod(other_dims))
- Lines 65-68: Reshapes coeffs back to original shape
- Lines 70-72: Reshapes residuals to appropriate shape
- Comment on line 60-61 mentions: "Residuals here are (1, 1) but should be (K,) as rhs is (N, K)"
- References dask issue #6516

## Dask Documentation
- No detailed documentation found for reshape_blockwise in Dask's public API docs
- Testing confirms dask.array.reshape_blockwise (version 2025.9.1) exhibits the same bug:
  - reshape_blockwise((1,1), (1,)) returns shape (1,1) instead of (1,)
  - Regular arr.reshape((1,)) correctly returns shape (1,)

## Expected Behavior
Based on general reshape semantics:
- reshape_blockwise should behave similarly to numpy/dask's regular reshape
- Reshaping (1,1) to (1,) is a valid operation (flattening a 1x1 matrix to 1D array)
- The total number of elements remains the same (1 element)

## Conclusion
There is no documentation that explicitly states reshape_blockwise should NOT work for (1,1) -> (1,) transformations. The function name and usage context strongly suggest it should provide standard reshape functionality. The fact that the fallback path (x.reshape) works correctly further supports that this is unintended behavior, not a documented limitation.
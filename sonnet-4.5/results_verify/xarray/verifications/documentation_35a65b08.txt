## CSS var() Function Documentation Analysis

### W3C CSS Custom Properties Specification
According to the official W3C specification (https://www.w3.org/TR/css-variables-1/):

The var() function syntax is defined as:
```
var( <custom-property-name> [, <declaration-value>]? )
```

Key requirements:
1. The first argument must be a custom property name (starting with --)
2. The second argument is optional and represents a fallback value
3. **A comma IS REQUIRED to separate the custom property name from the fallback value**
4. The fallback can be any valid declaration value

### MDN Web Docs
The MDN documentation confirms:
```css
var(--custom-property-name, fallback-value)
```

The documentation explicitly shows that when providing a fallback value, it must be separated from the custom property name with a comma.

### Correct vs Incorrect Syntax

**Correct syntax examples from specs:**
- `var(--main-color)` - No fallback
- `var(--main-color, blue)` - With fallback
- `var(--main-color, rgba(0, 0, 0, 1))` - With RGBA fallback
- `var(--prop,)` - With empty fallback

**Incorrect syntax (as found in xarray):**
- `var(--pst-color-text-base rgba(0, 0, 0, 1))` - Missing comma before fallback

### CSS Parser Behavior
Without the comma:
1. The parser cannot distinguish between the end of the custom property name and the start of the fallback
2. The entire expression `--pst-color-text-base rgba(0, 0, 0, 1)` would be interpreted as a malformed custom property name
3. The var() function would fail to resolve correctly
4. Browsers may handle this inconsistently or ignore the rule entirely

### Conclusion
The documentation unambiguously requires a comma between the custom property name and fallback value in the var() function. The syntax on line 8 of the xarray CSS file violates the CSS specification. This is not a matter of interpretation or undocumented behavior - it's a clear violation of the CSS standard.
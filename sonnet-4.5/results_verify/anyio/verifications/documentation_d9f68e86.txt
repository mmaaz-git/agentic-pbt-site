## Documentation Analysis for DelimiterNotFound Exception

After thoroughly reviewing the anyio documentation and source code, here are my findings:

### Official Documentation
1. The DelimiterNotFound exception is listed in the anyio API reference but **has no detailed documentation** about its attributes or structure.

2. The docstring in the source code (anyio/_core/_exceptions.py) states:
   - "Raised during :meth:`~anyio.streams.buffered.BufferedByteReceiveStream.receive_until` if the maximum number of bytes has been read without the delimiter being found."

3. The exception is used in BufferedByteReceiveStream.receive_until() method with the following documented behavior:
   - Raises DelimiterNotFound "if the delimiter is not found within the bytes read up to the maximum allowed"
   - Takes parameters: delimiter (bytes) and max_bytes (int)

### Current Implementation
The DelimiterNotFound class implementation shows:
- It accepts a max_bytes parameter in __init__
- It uses max_bytes only to format an error message string
- It does NOT store max_bytes as an instance attribute
- It inherits directly from Exception with no additional attributes

### Precedent in Same File
The BrokenWorkerInterpreter exception in the same file (lines 26-42) demonstrates that preserving initialization parameters as attributes IS a pattern used in anyio:
- It stores self.excinfo = excinfo after calling super().__init__(msg)
- This shows that anyio exceptions can and do preserve structured data

### Documentation Gaps
The documentation does NOT specify:
- Whether the exception should have a max_bytes attribute
- Whether users should be able to programmatically access the limit value
- How users should handle or retry after this exception
- Whether the exception is intended only for human-readable error messages

The lack of documentation about exception attributes means this is unspecified behavior. The bug report assumes that the exception SHOULD preserve max_bytes as an attribute, but this is not explicitly documented anywhere.
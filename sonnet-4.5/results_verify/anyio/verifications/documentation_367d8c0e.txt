## Documentation Analysis for MultiListener

### Source Code Documentation
The MultiListener class has inline documentation in the source code at `/home/npc/miniconda/lib/python3.13/site-packages/anyio/streams/stapled.py:96-107`:

```python
"""
Combines multiple listeners into one, serving connections from all of them at once.

Any MultiListeners in the given collection of listeners will have their listeners
moved into this one.

Extra attributes are provided from each listener, with each successive listener
overriding any conflicting attributes from the previous one.

:param listeners: listeners to serve
:type listeners: Sequence[Listener[T_Stream]]
"""
```

### Key Documentation Point
The documentation explicitly states: **"Any MultiListeners in the given collection of listeners will have their listeners moved into this one."**

The word "moved" is critical here - it suggests a transfer operation rather than a copy operation. This is actually implemented through the destructive mutation in the code.

### External Documentation Search
I searched the official anyio documentation at:
- https://anyio.readthedocs.io - No specific documentation about MultiListener nesting behavior
- GitHub repository documentation - No additional details about the mutation behavior

### Documentation Interpretation
The documentation does indicate that nested MultiListeners will have their listeners "moved" into the parent MultiListener. The use of the word "moved" rather than "copied" or "added" could be interpreted as suggesting that the original MultiListener would no longer have those listeners after the operation. However:

1. The documentation doesn't explicitly state that the original MultiListener object will be mutated
2. The documentation doesn't warn users that passing a MultiListener to another MultiListener will empty the original
3. The term "moved" is ambiguous - it could mean conceptually moved (the listeners now belong to the new MultiListener) without necessarily implying destructive mutation of the source object

### Conclusion on Documentation
The documentation is ambiguous about whether the mutation is intentional. While it says listeners are "moved," it doesn't clearly state that this involves destructively modifying the input MultiListener objects. Most Python developers would expect that creating a new object would not mutate its constructor arguments unless very explicitly documented.
BUG REPRODUCTION REPORT
======================

I have successfully reproduced the reported bug in anyio's CapacityLimiter.total_tokens setter.

Test Results:
-------------

1. Hypothesis Property Test:
   - Running the provided test with floats between 1.0 and 100.0 (non-integers) consistently fails
   - Error: TypeError: total_tokens must be an int or math.inf
   - Example failing value: 1.5

2. Manual Reproduction:
   - Setting total_tokens = 5 (integer) → Works correctly
   - Setting total_tokens = math.inf → Works correctly
   - Setting total_tokens = 2.5 (float) → Raises TypeError

Exact Error Message:
-------------------
TypeError: total_tokens must be an int or math.inf

Source Code Verification:
------------------------
Confirmed the implementation at /home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py:

- Line 527: Base class defines setter with type annotation: def total_tokens(self, value: float) -> None
- Line 644-646: CapacityLimiterAdapter implementation checks:
  if not isinstance(value, int) and value is not math.inf:
      raise TypeError("total_tokens must be an int or math.inf")

This confirms a mismatch between:
- The type annotation which promises to accept float
- The runtime validation which rejects non-integer floats (except math.inf)

The bug report is accurate - there is a type contract violation where the setter's type annotation accepts float but the implementation rejects valid float values.
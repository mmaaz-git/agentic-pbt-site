## Reproduction Results

I successfully reproduced the issue described in the bug report using both the provided test cases.

### Test 1: Simple Reproduction Script
The provided reproduction script works correctly and produces the exact output claimed:
```
Exception args: ('The delimiter was not found among the first 10 bytes',)
args[0] type: <class 'str'>
Has max_bytes attr: False
Exception attributes: ['add_note', 'args', 'with_traceback']
Cannot access max_bytes: 'DelimiterNotFound' object has no attribute 'max_bytes'
```

This confirms:
- The exception only stores a formatted string message
- The exception does NOT have a max_bytes attribute
- Attempting to access e.max_bytes raises AttributeError

### Test 2: Hypothesis Property-Based Test
The hypothesis test fails immediately with the first generated test case:
```
Falsifying example: test_delimiter_not_found_preserves_max_bytes(
    data=b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
    delimiter=b'\x01',
    max_bytes=1,
)
```

The test correctly demonstrates that:
- DelimiterNotFound is raised when delimiter is not found within max_bytes
- The exception does NOT have a max_bytes attribute
- The assertion `hasattr(exc, 'max_bytes')` fails

### Technical Accuracy
The bug report is technically accurate in its claims:
1. The exception accepts max_bytes but doesn't preserve it
2. The value is only used to format an error message
3. Users cannot programmatically access the original max_bytes value
4. The exception args only contains the formatted string

### Comparison with Other Exceptions
The bug report correctly notes that BrokenWorkerInterpreter in the same file preserves its excinfo parameter as an attribute (self.excinfo = excinfo), showing this is an established pattern in anyio's exception handling.
DOCUMENTATION ANALYSIS
======================

Public Documentation Review:
---------------------------

1. Official anyio documentation (https://anyio.readthedocs.io):
   - The API reference shows that total_tokens has type annotation: float
   - The synchronization guide provides examples using integer values (e.g., CapacityLimiter(2))
   - No explicit statement about whether float values are accepted or rejected
   - No mention that only integers and math.inf are allowed

2. Source Code Documentation:
   - Docstring for total_tokens property (line 513-523):
     "The total number of tokens available for borrowing."
     "This is a read-write property."
     Version note: "Changed in 3.0: The property is now writable."
   - No mention of type restrictions beyond the type annotation

3. Type Annotations in Code:
   - Base class CapacityLimiter.__new__(cls, total_tokens: float) - accepts float
   - Base class total_tokens setter: def total_tokens(self, value: float) -> None
   - CapacityLimiterAdapter.__init__(self, total_tokens: float) - accepts float
   - Property getter returns float: def total_tokens(self) -> float
   - available_tokens also returns float: def available_tokens(self) -> float

Key Finding:
-----------
The documentation and type annotations consistently indicate that float values should be accepted:
- All type annotations use 'float' not 'int | float' or 'int'
- The getter returns float type
- Related properties (available_tokens) also use float
- No documentation warns about integer-only restriction

The implementation's rejection of non-integer floats appears to contradict both:
1. The explicit type annotations throughout the codebase
2. The absence of any documented restrictions

This strongly suggests the implementation is incorrectly restrictive compared to the documented contract.
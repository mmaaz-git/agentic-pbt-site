## Documentation Analysis for MultiListener

I examined the source code and attempted to find official documentation for the MultiListener class in anyio.streams.stapled module. Here's what I found:

### Source Code Documentation (Docstring)

The MultiListener class has a docstring that states:

```
Combines multiple listeners into one, serving connections from all of them at once.

Any MultiListeners in the given collection of listeners will have their listeners moved into this one.

Extra attributes are provided from each listener, with each successive listener overriding any conflicting attributes from the previous one.

:param listeners: listeners to serve
:type listeners: Sequence[Listener[T_Stream]]
```

### Key Finding

The docstring explicitly states: "Any MultiListeners in the given collection of listeners will have their listeners **moved** into this one."

The word "moved" is critical here. It suggests that the listeners are transferred from the nested MultiListener to the new one, which could reasonably imply that the original nested MultiListener would lose its listeners. This is consistent with move semantics in other programming languages where ownership is transferred.

### Official External Documentation

I attempted to access the official anyio documentation at anyio.readthedocs.io but could not find specific documentation about the MultiListener class behavior beyond what's in the source code docstring.

### Interpretation

The documentation does mention "moved" but doesn't explicitly clarify whether this means:
1. The nested MultiListener becomes unusable (destructive move)
2. The listeners are copied (non-destructive)

The use of the word "moved" rather than "copied" or "extracted" suggests that the destructive behavior might be intentional. However, this is ambiguous and could benefit from clearer documentation about the side effects on the original MultiListener objects.
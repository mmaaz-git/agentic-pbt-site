## Documentation Analysis for CapacityLimiter

### Official Documentation Review

I reviewed the official anyio documentation at:
1. API Reference (https://anyio.readthedocs.io/en/stable/api.html)
2. Synchronization Guide (https://anyio.readthedocs.io/en/stable/synchronization.html)

### Key Findings

1. **Type Declaration in Documentation**:
   - The API reference shows `total_tokens` as a property of type `float`
   - This aligns with the type annotations in the source code

2. **Lack of Specificity**:
   - The documentation does NOT explicitly state that only integers and math.inf are allowed
   - The documentation does NOT mention any restrictions on float values
   - No warning that non-integer floats will raise TypeError

3. **Examples**:
   - All examples in the documentation use integer values (e.g., `CapacityLimiter(2)`)
   - However, examples alone don't constitute a specification

4. **Property Documentation**:
   - The docstring for `total_tokens` property (lines 514-519) states:
     "The total number of tokens available for borrowing."
   - It mentions that the property is read-write and describes behavior when increased
   - It does NOT specify type constraints beyond the annotation

### Documentation Assessment

The documentation is **incomplete and misleading**:

1. **Type annotations suggest float is valid**: Both in the API docs and source code
2. **No explicit restrictions documented**: Neither the API reference nor the user guide mentions the integer/inf-only constraint
3. **Runtime behavior contradicts type hints**: The validation logic is stricter than what the documentation implies

### Conclusion

The documentation fails to accurately describe the actual constraints of the `total_tokens` parameter. A user following the type hints and documentation would reasonably expect any positive float value to work, but the implementation rejects non-integer floats.

This is either:
1. A bug in the implementation (too restrictive validation)
2. A documentation bug (incorrect type annotations and missing constraints)

Given that the type annotations are part of the public API contract, and there's no documented reason why fractional tokens wouldn't make sense conceptually, this appears to be an implementation bug rather than a documentation issue.
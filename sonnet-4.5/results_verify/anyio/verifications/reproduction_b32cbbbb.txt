## Bug Reproduction Analysis

I have successfully reproduced the bug described in the report.

### Test Results:

1. **Float values (1.0, 5.5, 0.0)**: All raised `ValueError: max_buffer_size must be either an integer or math.inf`
2. **Integer value (1)**: Successfully created stream
3. **math.inf**: Successfully created stream

### Hypothesis Test:
The hypothesis test failed as expected with the error:
```
ValueError: max_buffer_size must be either an integer or math.inf
Falsifying example: test_create_memory_object_stream_accepts_floats(max_buffer=1.0)
```

### Source Code Verification:
I examined the source code at `/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_streams.py`:

- Line 37: Function signature declares `max_buffer_size: float = 0`
- Lines 39-40: Implementation explicitly rejects non-integer values except `math.inf`:
  ```python
  if max_buffer_size != math.inf and not isinstance(max_buffer_size, int):
      raise ValueError("max_buffer_size must be either an integer or math.inf")
  ```

### Confirmation:
The bug report is accurate. There is a clear mismatch between:
1. The type annotation that declares the parameter as `float`
2. The implementation that only accepts `int` or `math.inf`

This violates the type contract - users who follow the type hints would expect any float value to be accepted, but the function rejects valid float values like 1.0, 5.5, or 0.0.
## Documentation Analysis for anyio.abc._sockets._SocketProvider

After reviewing the anyio documentation and source code, I found the following:

1. **No explicit documentation about caching behavior**: The official anyio documentation does not specify whether socket attributes like `local_address`, `remote_address`, `local_port`, or `remote_port` should be cached or dynamically fetched on each access.

2. **Documentation in source code (docstrings)**: The SocketAttribute class documentation in lines 105-136 of _sockets.py only describes WHAT each attribute represents, not HOW they should behave:
   - `local_address`: "the local address the underlying socket is connected to"
   - `remote_address`: "the remote address the underlying socket is connected to"
   - `local_port`: "for IP based sockets, the local port the underlying socket is bound to"
   - `remote_port`: "for IP based sockets, the remote port the underlying socket is connected to"

3. **No performance guarantees**: There is no documentation stating that these attributes should have consistent performance characteristics or caching behavior.

4. **No design rationale found**: Neither the GitHub repository nor the official documentation provides any design rationale for why local and remote attributes should behave differently regarding caching.

5. **Implementation detail**: The current implementation appears to be an internal implementation detail rather than a documented API contract. The `extra_attributes` property returns callables that are invoked when the attribute is accessed, but there's no documentation about whether these callables should cache values or fetch them dynamically.

**Key finding**: The documentation does not specify the expected caching behavior, making this an undocumented implementation detail rather than a violation of documented behavior.
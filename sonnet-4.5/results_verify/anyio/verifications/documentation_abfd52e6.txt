## Documentation Analysis for anyio.sleep_until()

### Function Documentation
The anyio.sleep_until() function is documented in the API reference as:

```python
async def sleep_until(deadline: float) -> None:
    """
    Pause the current task until the given time.

    :param deadline: the absolute time to wake up at (according to the internal
        monotonic clock of the event loop)
    """
```

### Key Documentation Findings:

1. **Parameter Type**: The function expects a `float` parameter representing an absolute time according to the event loop's monotonic clock.

2. **No Special Value Handling Documentation**: The documentation does NOT specify:
   - What happens with NaN values
   - What happens with infinity values
   - Any input validation requirements
   - Expected error conditions

3. **Implementation Details**: The actual implementation (lines 112-113 of _eventloop.py):
   ```python
   now = current_time()
   await sleep(max(deadline - now, 0))
   ```
   This delegates to the underlying backend's `sleep()` function after calculating delay.

4. **Related Documentation**:
   - sleep_forever() is implemented as `sleep(math.inf)`, suggesting infinity is a supported value for sleep
   - No documentation explicitly forbids or requires handling of NaN values

5. **Backend Delegation**: anyio.sleep_until() ultimately delegates to the backend's sleep implementation:
   - For asyncio backend: calls asyncio.sleep()
   - For trio backend: calls trio.sleep()

### Documentation Gaps:
The documentation does not specify:
- Whether NaN is a valid input
- What error should be raised for invalid inputs
- Whether input validation is expected

### Conclusion:
The documentation is incomplete regarding special float values like NaN. The behavior with NaN is undefined according to the documentation, making this potentially a documentation issue rather than a code bug, especially since the underlying asyncio.sleep() in Python 3.13 already validates and rejects NaN values.
## Documentation Analysis for FileReadStream.receive()

After reviewing the available documentation, here are my findings:

1. **Anyio Documentation**: The anyio documentation does not provide specific details about the behavior of negative values for the `max_bytes` parameter in `FileReadStream.receive()`. The documentation only shows basic usage examples of FileReadStream without discussing parameter constraints or edge cases.

2. **Abstract Base Class Documentation**: Looking at the ByteReceiveStream abstract base class that FileReadStream inherits from, the docstring states:
   - "Receive at most `max_bytes` bytes from the peer."
   - The parameter is described as "maximum number of bytes to receive"
   - The default value is 65536
   - There is no mention of what happens with negative values

3. **Python's file.read() Documentation**: Since FileReadStream.receive() internally calls Python's file.read() method, Python's documentation is relevant. According to Python docs:
   - When read() is called with a negative value or -1, it reads "as much as possible" or "all bytes until EOF"
   - This is documented behavior for Python's file objects

4. **Semantic Expectations**: The parameter name `max_bytes` strongly implies it sets a maximum limit on bytes to receive. The word "max" suggests an upper bound constraint. A negative value for a "maximum" doesn't make semantic sense.

5. **No Explicit Contract**: The documentation does not explicitly state:
   - Whether negative values are allowed
   - What the behavior should be for negative values
   - Whether there should be validation of the parameter

The documentation is incomplete regarding the handling of negative values for max_bytes. It doesn't explicitly forbid them, nor does it specify the expected behavior when they are provided.
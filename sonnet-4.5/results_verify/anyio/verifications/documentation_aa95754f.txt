DOCUMENTATION ANALYSIS
======================

## AnyIO Documentation Review

1. **Source Code Docstring** (anyio/_core/_synchronization.py:306)
   - States: "Notify exactly n listeners."
   - This is an absolute statement with no qualifications

2. **Official AnyIO Documentation** (anyio.readthedocs.io)
   - The online documentation does not provide detailed behavioral specifications
   - No explicit statement about what happens when n > number of waiters
   - Examples show typical usage but don't cover edge cases

## Comparison with Python Standard Library

1. **threading.Condition.notify(n)**
   - Documentation clearly states: "Wake up at most n threads"
   - Acknowledges the edge case explicitly
   - The phrase "at most" correctly describes the behavior

2. **asyncio.Condition.notify(n)**
   - Documentation states: "This method wakes up n of the tasks waiting for the condition variable; if fewer than n are waiting, they are all awoken."
   - Explicitly describes the edge case behavior
   - Clear about the "at most n" semantics

## Analysis of Documentation Standards

Both Python's threading and asyncio modules correctly document this edge case:
- threading uses "at most n"
- asyncio explicitly states "if fewer than n are waiting, they are all awoken"

AnyIO's docstring uses "exactly n" which is:
1. Inconsistent with Python standard library conventions
2. Factually incorrect given the implementation
3. Creates a false contract that cannot be fulfilled when waiters < n

## Conclusion

The documentation issue is clear:
- The docstring promises "exactly n" notifications
- The implementation provides "at most n" notifications
- This is a documentation bug, not a code bug
- The implementation follows the same pattern as Python's standard library
- The docstring should be updated to match standard library conventions
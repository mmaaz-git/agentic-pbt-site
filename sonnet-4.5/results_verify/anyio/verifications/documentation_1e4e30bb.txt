DOCUMENTATION ANALYSIS FOR MultiListener

1. Official Documentation:
The official AnyIO documentation provides minimal information about MultiListener. It only shows the basic class signature with methods like serve(), aclose(), and the extra_attributes property. There is NO documentation about how MultiListener handles nested MultiListener objects or whether it should flatten them.

2. Source Code Documentation (Docstring):
The class docstring in stapled.py (lines 96-107) states:
"Combines multiple listeners into one, serving connections from all of them at once.

Any MultiListeners in the given collection of listeners will have their listeners moved into this one.

Extra attributes are provided from each listener, with each successive listener overriding any conflicting attributes from the previous one."

CRITICAL FINDING: The docstring explicitly states "Any MultiListeners in the given collection of listeners will have their listeners MOVED into this one" (emphasis added). The word "moved" strongly implies a transfer of ownership, suggesting the listeners are being relocated from one object to another.

3. Implementation Details:
The __post_init__ method (lines 111-120) implements the flattening behavior. When it encounters a nested MultiListener, it:
- Extends the new listener list with the nested MultiListener's listeners
- Calls `del listener.listeners[:]` to clear the nested MultiListener's list
- The comment `# type: ignore[attr-defined]` suggests awareness of type system issues

4. Semantic Analysis:
The documentation uses the word "moved" rather than "copied" or "referenced". In programming contexts, "move" typically implies transferring ownership and invalidating the source. This is consistent with the implementation that clears the original listener list.

5. No Specification of Non-Mutation:
Neither the documentation nor the API specification indicates that nested MultiListener objects should remain unchanged after being passed to another MultiListener constructor. There is no promise of immutability or non-destructive behavior.

CONCLUSION: The documentation actually SUPPORTS the current behavior. The word "moved" in the docstring suggests that the listeners are being relocated, not copied, which aligns with the destructive mutation observed in the code.
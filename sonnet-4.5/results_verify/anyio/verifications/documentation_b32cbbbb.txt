## Documentation Analysis

### Function Docstring
The docstring in the source code (lines 19-34 of `/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_streams.py`) states:

```
:param max_buffer_size: number of items held in the buffer until ``send()`` starts blocking
```

The docstring describes `max_buffer_size` as "number of items" but does not specify the type requirements. It doesn't explicitly state whether floats are allowed or not.

### Type Annotation
The function signature explicitly declares:
```python
def __new__(cls, max_buffer_size: float = 0, item_type: object = None)
```

This type annotation `float` is a clear declaration that the parameter accepts floating-point values.

### Python Typing Standards
In Python's typing system:
- `float` type annotation means the parameter should accept any float value
- `int` and `float` are distinct types in Python
- If a function wants to accept both int and float, it should use `Union[int, float]` or `int | float` (Python 3.10+)
- Type checkers like mypy would expect any float value to be valid for a parameter annotated as `float`

### Key Finding
The documentation (docstring) is ambiguous about type requirements, but the type annotation is explicit. The type annotation `float` creates a contract that the function will accept float values. The implementation violates this contract by rejecting most float values.

### Buffer Size Semantics
"Number of items" logically implies an integer count. However:
1. The type annotation explicitly uses `float` not `int`
2. The implementation accepts `math.inf` (which is a float) as a special case for unlimited buffer
3. The default value is `0` (an int) but the type is declared as `float`

This suggests either:
- The type annotation is incorrect (should be `Union[int, float]` or just `int`)
- The implementation is incorrect (should accept and convert floats)
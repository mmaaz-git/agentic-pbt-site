## Documentation Analysis

### Official Documentation Review

1. **Online Documentation (anyio.readthedocs.io)**
   - The online API documentation for MultiListener is minimal
   - It lists the methods (aclose, serve, extra_attributes) but provides no details about the behavior with nested MultiListeners
   - No explicit mention of whether input arguments are modified

2. **Docstring in Source Code**
   - Located at lines 96-107 in /home/npc/miniconda/lib/python3.13/site-packages/anyio/streams/stapled.py
   - Key statement: "Any MultiListeners in the given collection of listeners will have their listeners **moved** into this one." (lines 99-100)
   - The word "moved" is significant but ambiguous

### Documentation Interpretation

The docstring uses the word "moved" which could be interpreted in two ways:

1. **Weak interpretation**: "moved" means the listeners are copied/transferred logically to the parent MultiListener
2. **Strong interpretation**: "moved" means the listeners are physically moved (removed from source, added to destination)

The actual implementation follows the strong interpretation - it literally moves the listeners by:
- Extending the parent list with the nested listener's items (line 115)
- Then clearing the nested listener's list (line 116)

### Documentation Gaps

1. **Ambiguity**: The documentation does not explicitly state that nested MultiListener objects will be mutated/cleared
2. **Side effects not documented**: There's no warning that passing a MultiListener will render it empty/unusable
3. **No examples**: No code examples showing this behavior or warning about retaining references

### Principle of Least Surprise

Standard Python conventions and user expectations:
- Constructor arguments are typically not modified unless explicitly documented
- The word "moved" in documentation doesn't typically imply destructive modification of input
- Python's dataclass behavior generally preserves input arguments unchanged
- Most Python APIs that perform "moving" operations (like list.extend()) don't clear the source

### Conclusion

While the docstring mentions "moved", this is insufficient documentation for such a surprising and destructive side effect. The documentation should either:
1. Explicitly warn that nested MultiListeners will be cleared/emptied
2. Or the behavior should be changed to not mutate input arguments

The current documentation is inadequate for users to predict that their MultiListener objects will be mutated when passed as constructor arguments.
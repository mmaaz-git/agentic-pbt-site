DOCUMENTATION ANALYSIS FOR _validate_socket
============================================

Function Location: anyio.abc._sockets._validate_socket (lines 36-102)

Documentation Status:
--------------------
The _validate_socket function is an INTERNAL/PRIVATE function (indicated by the leading underscore). There is no public documentation for this function in the AnyIO API documentation. The function has no docstring.

Function Purpose (from code analysis):
--------------------------------------
The function validates and prepares a socket for use by anyio's socket wrappers. It:
1. Accepts either a socket object or file descriptor
2. Validates socket type and address family
3. Optionally checks if socket is connected (require_connected parameter)
4. Optionally checks if socket is bound (require_bound parameter)
5. Sets the socket to non-blocking mode
6. Returns the validated socket object

Usage Context:
-------------
This internal function is used by various public socket wrapper classes:
- SocketStream.from_socket() - requires connected socket
- UNIXSocketStream.from_socket() - requires connected socket
- SocketListener.from_socket() - requires bound socket
- UDPSocket.from_socket() - requires bound socket
- ConnectedUDPSocket.from_socket() - requires connected socket
- UNIXDatagramSocket.from_socket() - no connection/binding requirement
- ConnectedUNIXDatagramSocket.from_socket() - requires connected socket

Error Handling Design (from code):
----------------------------------
The function handles OSError from socket.socket(fileno=fd) as follows:
- If errno == ENOTSOCK: raises ValueError("the file descriptor does not refer to a socket")
- Else if require_connected=True: raises ValueError("the socket must be connected")
- Else if require_bound=True: raises ValueError("the socket must be bound to a local address")
- Otherwise: re-raises the original OSError

No Documentation Found For:
--------------------------
- What specific errors should be raised for invalid file descriptors
- How to handle OSErrors other than ENOTSOCK
- Whether error messages should distinguish between different failure modes
- The rationale for converting OSErrors to ValueErrors based on require_* flags

Key Observation:
---------------
Since this is an internal/private function (prefixed with underscore), there are no documented contracts or specifications for its error handling behavior. The function is not part of the public API, and its behavior is implementation-defined rather than specification-defined.
## Documentation Analysis

### Current Documentation
The function's docstring states:
```
:param max_buffer_size: number of items held in the buffer until ``send()`` starts blocking
```

### Key Observations

1. **No explicit type requirement in docstring**: The documentation only says "number of items" without specifying that it must be an integer. The word "number" could reasonably include both integers and floats.

2. **Type annotation says float**: The function signature explicitly declares `max_buffer_size: float = 0`, which is a clear promise that float values are acceptable.

3. **Error message is clear but contradicts type hint**: The runtime error message "max_buffer_size must be either an integer or math.inf" is explicit about what's allowed, but this directly contradicts the type annotation.

4. **No external specification**: This is an internal implementation detail of anyio, not implementing an external standard or RFC that would define the behavior.

### Documentation Interpretation

From a user's perspective:
- The type annotation `float` is part of the API contract and suggests any float value should work
- The docstring doesn't contradict this - "number of items" doesn't explicitly mean "integer number of items"
- A user following type hints (as encouraged by modern Python practices) would reasonably expect `2.5` to be valid

### Semantic Consideration

While "number of items in a buffer" semantically suggests an integer (you can't have 2.5 items), the type system explicitly says float. Moreover, math.inf is accepted, which also doesn't make semantic sense as a buffer size but is allowed as a special value meaning "unlimited".

### Conclusion

The documentation (via type annotations) promises float support, but the implementation rejects most float values. This is not a case of unspecified behavior - the type annotation explicitly specifies the behavior as accepting floats.
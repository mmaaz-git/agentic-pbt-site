DOCUMENTATION FINDINGS FOR _validate_socket FUNCTION
=====================================================

1. FUNCTION LOCATION AND PURPOSE
The _validate_socket function is located in anyio/abc/_sockets.py. It is a private/internal function (indicated by the leading underscore) that validates socket objects or file descriptors before they are used by anyio.

2. DOCUMENTATION STATUS
- The function is NOT documented in anyio's public API documentation
- It is an internal/private function not intended for direct user consumption
- No official documentation exists describing its expected behavior for edge cases
- The function has no docstring describing its intended behavior

3. FUNCTION SIGNATURE
```python
def _validate_socket(
    sock_or_fd: socket.socket | int,
    sock_type: socket.SocketKind,
    addr_family: socket.AddressFamily = socket.AF_UNSPEC,
    *,
    require_connected: bool = False,
    require_bound: bool = False,
) -> socket.socket
```

4. DOCUMENTED BEHAVIOR (from code inspection)
The function:
- Accepts either a socket object or an integer file descriptor
- Validates that the socket type matches the expected type
- Validates that the address family matches if specified
- Optionally checks if the socket is connected (when require_connected=True)
- Optionally checks if the socket is bound (when require_bound=True)
- Returns a non-blocking socket object
- Raises ValueError for various validation failures

5. ERROR HANDLING DOCUMENTED BEHAVIOR
From the code, when given an integer file descriptor:
- Tries to create a socket from the file descriptor
- If OSError occurs with errno == ENOTSOCK: raises "file descriptor does not refer to a socket"
- If OSError occurs and require_connected=True: raises "the socket must be connected"
- If OSError occurs and require_bound=True: raises "the socket must be bound to a local address"
- Otherwise re-raises the original OSError

6. LACK OF SPECIFICATION
The documentation does not specify:
- What should happen when a file descriptor is closed/invalid (errno.EBADF)
- Whether the error messages should distinguish between "can't create socket" vs "socket not connected"
- The rationale for assuming non-ENOTSOCK errors mean connection/binding issues

7. RELATED DOCUMENTATION
The Python socket module documentation (https://docs.python.org/3/library/socket.html) states that socket.socket(fileno=fd) can raise OSError for various reasons including bad file descriptors, but doesn't specify exact error handling requirements.

CONCLUSION
Since this is an internal/private function with no public documentation, there is no documented contract about how it should behave with invalid/closed file descriptors. The error messages are implementation details that are not specified by any documentation.
## Bug Reproduction Report

I have successfully reproduced the bug described in the report. The issue is confirmed.

### Test Results:

1. **Basic reproduction test**:
   - Confirmed that `float('inf') == math.inf` returns True (they are equal values)
   - Confirmed that `float('inf') is math.inf` returns False (they are different objects)
   - Creating CapacityLimiter with `float('inf')` raises: `TypeError: total_tokens must be an int or math.inf`
   - Creating CapacityLimiter with `math.inf` works successfully

2. **Hypothesis test**:
   - The test failed as expected when given `float('inf')` as input
   - The error message confirms: `TypeError: total_tokens must be an int or math.inf`

3. **Source code examination**:
   - Located the bug at line 645 in `/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_synchronization.py`
   - Confirmed the code uses identity comparison: `value is not math.inf`
   - This rejects any infinity value that isn't the exact `math.inf` object

### Effect of the Bug:

The bug prevents users from using valid infinity representations other than the specific `math.inf` object. Since `float('inf')`, `float('infinity')`, and `math.inf` all represent the same mathematical value and compare equal, this is unnecessarily restrictive. Users might obtain infinity values from various sources (parsing strings, calculations, etc.) that produce `float('inf')` rather than `math.inf`, and these valid values are incorrectly rejected.
Documentation Findings for anyio.create_memory_object_stream
=============================================================

## Official Documentation

From the anyio documentation and the built-in help, the function is documented as:

```
create_memory_object_stream(max_buffer_size: float = 0, item_type: object = None)
```

The documentation states:
- **Parameter**: `max_buffer_size: float` - "number of items held in the buffer until send() starts blocking"
- The type annotation explicitly declares the parameter as `float`
- The documentation mentions that you can set the buffer size to "a value of your choosing"
- It specifically mentions that "It is also possible to have an unbounded buffer by passing math.inf"
- There is NO mention that only integers (and math.inf) are accepted

## Source Code Analysis

Looking at the actual implementation in `/home/npc/miniconda/lib/python3.13/site-packages/anyio/_core/_streams.py`:

1. The function signature at line 37 declares: `max_buffer_size: float = 0`
2. The validation at line 39 enforces: `if max_buffer_size != math.inf and not isinstance(max_buffer_size, int)`
3. This raises a ValueError with message: "max_buffer_size must be either an integer or math.inf"

## Documentation vs Implementation Mismatch

The documentation has several issues:

1. **Type annotation mismatch**: The type annotation says `float` but the runtime only accepts `int` or `math.inf`
2. **No warning in docstring**: The docstring doesn't mention the integer-only restriction
3. **Misleading type hint**: Users relying on type hints would expect any float to work

## What the Documentation DOESN'T Say

The documentation does NOT specify:
- That only integer values are accepted (besides math.inf)
- That float values like 5.5, 0.5, or even 1.0 will be rejected
- Any rationale for why floating-point buffer sizes are not allowed

## Conclusion from Documentation Review

The documentation clearly indicates through its type annotation that `float` values should be accepted, but provides no warning that only integer floats (which are actually type `int` in Python) or `math.inf` are valid. This is a clear mismatch between the documented interface (via type annotations) and the actual runtime behavior.
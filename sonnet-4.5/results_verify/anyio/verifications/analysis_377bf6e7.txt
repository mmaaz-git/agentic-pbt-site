# Triage Analysis

## BUG - Why this should be classified as a valid bug:
1. **Clear Type Contract Violation**: The type annotation `float` is an explicit API contract that promises to accept any float value. The runtime rejection of valid floats like 1.5 or 2.5 violates this contract.
2. **Static vs Runtime Mismatch**: Code that passes static type checking (mypy, pyright) fails at runtime, which is the definition of a type annotation bug.
3. **User Impact**: Developers using type hints for API understanding will write code that unexpectedly fails.
4. **Not Implementation Detail**: Type annotations are part of the public API, not internal implementation.
5. **Reasonable Expectation**: A capacity of 1.5 tokens is conceptually valid - there's no inherent reason why fractional capacities couldn't work.

## WONTFIX - Why it might be considered wontfix:
1. **Practical Usage**: In practice, most users probably use integer values for token counts.
2. **Easy Workaround**: Users can simply use int() to convert their floats.
3. **Existing Behavior**: This might be long-standing behavior that changing could break existing code.

## INVALID - Why it might be considered invalid:
1. **Documentation Mentions Constraint**: Some documentation text does mention "(can be an integer or math.inf)" though ambiguously.
2. **Semantic Argument**: One could argue tokens are inherently discrete units that shouldn't be fractional.
(However, this is weak since math.inf is allowed, which isn't discrete)

## DOCUMENTATION_FIX - Why it might be a documentation issue:
1. **Type Annotation is Wrong**: The type annotation could be considered documentation that needs fixing.
2. **Ambiguous Documentation**: The text "(can be an integer or math.inf)" is unclear whether it's exhaustive or just examples.
3. **Missing Error Documentation**: The TypeError isn't documented.
4. **Easy Fix**: Changing the type annotation to `Union[int, float]` with clear documentation would resolve this.

## FEATURE_REQUEST - Why it might be a feature request:
1. **New Functionality**: Supporting fractional tokens could be seen as a new feature.
2. **Current Design**: The current design might intentionally restrict to integers for implementation reasons.

## Assessment

This is clearly **not INVALID** because:
- The type annotation explicitly promises float support
- The runtime behavior contradicts this promise
- Users relying on type hints will encounter unexpected errors

This is clearly **not WONTFIX** because:
- Type annotations are part of the API contract
- The mismatch between static and runtime types is a serious issue in typed Python
- The fix is straightforward (update type annotation or validation)

This is clearly **not FEATURE_REQUEST** because:
- The bug report isn't asking for new functionality
- It's pointing out an inconsistency in existing behavior
- The type annotation already claims to support float

The choice is between **BUG** and **DOCUMENTATION_FIX**.

Given that:
1. Type annotations are considered part of the API contract in modern Python
2. The type system mismatch causes real issues for users of type checkers
3. The fix involves either changing code OR documentation to align them
4. The report correctly identifies a contract violation

This should be classified as **BUG** because the type annotation makes an explicit promise that the implementation doesn't keep. While it could be fixed by updating documentation (type annotations), it's fundamentally a bug in the API contract consistency.
## Documentation Analysis for Cython.Tempita Template.substitute

### Source Documentation
The module docstring in _tempita.py provides basic documentation about the templating language. The key statement about the substitute method is:

"Then (like ``string.Template``) you can call the ``tmpl.substitute(**kw)`` method to make a substitution (or ``tmpl.substitute(a_dict)``)."

### Method Documentation
The substitute() method itself has NO docstring. There is no explicit documentation about:
1. Whether the input dictionary is modified
2. What keys might be added to the namespace
3. Side effects of the method

### Code Behavior Analysis
Looking at lines 169-191 of the substitute method:
- Line 182: `ns = kw` - This creates an alias, not a copy
- Line 183: `ns['__template_name__'] = self.name` - This directly adds a key to the namespace
- Line 185: `ns.update(self.namespace)` - This further modifies the namespace

### Comparison with string.Template
The documentation mentions it's "like string.Template", so I checked Python's string.Template behavior. Python's string.Template.substitute() does NOT mutate the input dictionary - it creates its own internal mapping without modifying the input.

### Key Finding
The documentation does NOT specify that:
1. The input dictionary will be mutated
2. A '__template_name__' key will be added
3. The namespace will be updated with additional keys

The documentation only mentions that you can call substitute with keyword arguments or a dictionary, but doesn't document the side effect of mutation. This is an undocumented behavior that violates the principle of least surprise, especially since the comparison is made to string.Template which does not mutate its inputs.
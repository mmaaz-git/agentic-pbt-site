## Bug Reproduction Analysis

### Summary
The bug report has been successfully reproduced. When all values in an array are masked (indicating all values should be treated as NA/missing), the `sum()` and `prod()` functions incorrectly return their identity elements (0 for sum, 1 for prod) instead of returning NA.

### Reproduction Results

1. **Property-Based Test**: The hypothesis test fails immediately on the first example, confirming that `sum()` returns 0 and `prod()` returns 1 when all values are masked, instead of returning NA.

2. **Manual Reproduction**: Using the provided example with array [5, 10, 15] and all values masked:
   - `sum()` returns: 0 (incorrect - should be NA)
   - `prod()` returns: 1 (incorrect - should be NA)
   - `min()` returns: <NA> (correct)
   - `max()` returns: <NA> (correct)

### Root Cause Analysis
After examining the source code at `/home/npc/miniconda/lib/python3.13/site-packages/pandas/core/array_algos/masked_reductions.py`:

1. The `_reductions` function (used by `sum` and `prod`) at line 69 uses:
   ```python
   return func(values, where=~mask, axis=axis, **kwargs)
   ```
   When all values are masked, `~mask` is all False, causing numpy's `sum` to return 0 and `prod` to return 1 (their identity elements).

2. In contrast, `_minmax` (used by `min` and `max`) at lines 128-133 explicitly checks for empty subsets:
   ```python
   subset = values[~mask]
   if subset.size:
       return func(subset, axis=axis)
   else:
       return libmissing.NA
   ```

3. Other reduction functions like `mean`, `var`, and `std` explicitly check `mask.all()` and return NA when all values are masked (lines 163, 176, 194).

### Conclusion
The bug is confirmed and reproducible. The `sum()` and `prod()` functions behave inconsistently with other reduction operations when handling fully masked arrays.
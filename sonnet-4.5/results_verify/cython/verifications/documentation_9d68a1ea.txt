## Documentation Analysis

### Class Docstring Documentation

The Scanner class docstring (Scanners.py, lines 18-47) explicitly documents:
```
Methods:
  ...
  begin(state_name)
    Causes scanner to change state.

  produce(value [, text])
    Causes return of a token value to the caller of the Scanner.
```

This documentation is also visible via Python's help() function, confirming it's part of the public API contract.

### Implementation Documentation

1. **Python Source (Scanners.py)**:
   - `begin()` method at line 331: "Set the current state of the scanner to the named state."
   - `produce()` method at line 337: Detailed docstring explaining token queueing behavior

2. **Cython Declaration (Scanners.pxd)**:
   - Line 45: `cdef inline begin(self, state)`
   - Line 46: `cdef inline produce(self, value, text = *)`
   - The `cdef inline` declaration makes these C-level only, not Python-accessible

### External Documentation References

1. **Historical Plex Documentation** (from web search):
   - Confirms `begin()` is intended for state management in lexical analysis
   - Confirms `produce()` replaced `yield()` when yield became a Python keyword
   - Both methods are described as essential for sophisticated lexical analyzers

2. **API Dependencies**:
   - The Begin action class (Actions.py) explicitly depends on scanner.begin() being available
   - Begin is documented as a public Plex action for state transitions
   - The action's perform() method calls token_stream.begin() at line 82

### Documentation Consistency

The documentation is consistent across multiple sources:
1. Class docstring promises these methods exist
2. Method implementations have proper docstrings
3. Begin action documentation assumes begin() is available
4. External references confirm these are intended public methods

### Conclusion

The documentation clearly indicates that `begin()` and `produce()` should be publicly accessible methods of the Scanner class. The current implementation violates this documented contract by making them `cdef inline` (C-only) methods. This is not a documentation error but an implementation bug where the compiled Cython version doesn't match the documented API.
## Bug Reproduction Summary

I have successfully reproduced the bug reported in Cython.Tempita._looper.loop_pos.even.

### Reproduction Steps:
1. Created a test script that imports the looper from Cython.Tempita._looper
2. Created a sequence [10, 20] and passed it through looper
3. Examined the types returned by both `odd` and `even` properties

### Confirmed Behavior:
- The `odd` property returns a bool type (True or False)
- The `even` property returns an int type (0 or 1)

### Test Results:
For index 0 (first item):
- odd: True (type: bool)
- even: 0 (type: int)

For index 1 (second item):
- odd: False (type: bool)
- even: 1 (type: int)

### Code Analysis:
Looking at the source code in _looper.py:
- Lines 98-100: `odd` returns `not self.pos % 2` which evaluates to a bool
- Lines 102-104: `even` returns `self.pos % 2` which evaluates to an int (0 or 1)

The bug report is accurate. There is indeed a type inconsistency where:
- `odd` property correctly returns a boolean type
- `even` property returns an integer type (0 or 1) instead of boolean
- Other similar properties like `first` and `last` return boolean types

This inconsistency could cause issues with:
1. Type checkers that expect both properties to return bool
2. Code using identity checks (is True, is False)
3. Consistency expectations in template logic
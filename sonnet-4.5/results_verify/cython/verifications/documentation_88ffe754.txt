## Documentation Analysis

### Available Documentation
The Cython.Tempita module has minimal documentation:
1. Module docstring describes basic usage: "Then (like ``string.Template``) you can call the ``tmpl.substitute(**kw)`` method to make a substitution (or ``tmpl.substitute(a_dict)``)"
2. No docstring for the substitute() method itself
3. No explicit documentation about whether substitute() should or should not mutate input dictionaries

### Comparison with Python's string.Template
The module documentation explicitly compares Tempita to Python's string.Template. Testing shows:
- Python's string.Template.substitute() does NOT mutate the input dictionary
- string.Template preserves the original dict without any modifications
- This establishes the expected behavior for template substitution methods

### Internal Code Patterns
The codebase itself shows awareness of the mutation issue:
- Line 215 in _interpret_inherit() uses `ns = ns.copy()` to avoid mutations
- This indicates the developers understand that copying is needed to prevent side effects
- The same protection is missing from the main substitute() method

### Documentation Verdict
While there is no explicit documentation stating "substitute() should not mutate input dictionaries", this is:
1. Standard behavior for similar methods (string.Template)
2. A fundamental principle in programming (functions shouldn't have unexpected side effects)
3. Already handled correctly in other parts of the same codebase (_interpret_inherit)

The lack of documentation about mutation behavior doesn't make this acceptable - it's an implementation bug, not a documentation issue.
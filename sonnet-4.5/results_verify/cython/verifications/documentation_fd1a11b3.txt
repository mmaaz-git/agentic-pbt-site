# Documentation Analysis for Cython.Tempita

## Module Documentation
The module docstring in `_tempita.py` states:
- "If there are syntax errors ``TemplateError`` will be raised."
- The Template class takes a name parameter "(for errors)"
- Templates support substitution with `tmpl.substitute(**kw)` method

## TemplateError Class Documentation
The TemplateError class (lines 54-70) is explicitly designed to include position information:
```python
class TemplateError(Exception):
    """Exception raised while parsing a template"""

    def __init__(self, message, position, name=None):
        # ...

    def __str__(self):
        msg = ' '.join(self.args)
        if self.position:
            msg = '%s at line %s column %s' % (
                msg, self.position[0], self.position[1])
        if self.name:
            msg += ' in %s' % self.name
        return msg
```

This shows the expected format for ALL template-related errors should include:
- Error message
- Line number
- Column number
- Template name (if provided)

## External Documentation
From Tempita documentation (pyrocore and github sources):
1. Error messages should include position information:
   - Example: "NameError: name 'name' is not defined at line 1 column 6 in file tmpl"

2. The documentation explicitly shows that when errors occur, they should include:
   - The error type and message
   - "at line X column Y"
   - "in file [template_name]" if a name was provided

3. No distinction is made between different exception types - the documentation examples show NameError with position info, implying ALL exceptions should have this format.

## Code Implementation vs Documentation
The `_add_line_info` method (lines 373-378) is designed to add position information to ANY error message:
```python
def _add_line_info(self, msg, pos):
    msg = "%s at line %s column %s" % (
        msg, pos[0], pos[1])
    if self.name:
        msg += " in file %s" % self.name
    return msg
```

## Conclusion
The documentation and code design clearly indicate that ALL exceptions raised during template evaluation should include position information. There is no documented reason why SyntaxError should be treated differently from other exception types. The TemplateError class design and the _add_line_info method both demonstrate that position information is an expected part of error reporting in this module.

The current behavior where SyntaxError lacks position information while NameError, ValueError, TypeError etc. have it is inconsistent with:
1. The documented examples showing errors with position info
2. The TemplateError class design that always includes position
3. The existence of _add_line_info method meant to be used for all errors
4. User expectations for debugging template issues
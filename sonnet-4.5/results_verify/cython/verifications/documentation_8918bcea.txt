DOCUMENTATION FINDINGS FOR pyximport.handle_special_build

1. MODULE DOCSTRING DOCUMENTATION (lines 17-28 of pyximport.py):
The module docstring explicitly documents that .pyxbld files can define EITHER make_ext, make_setup_args, OR BOTH:

"""
A custom distutils.core.Extension instance and setup() args
(Distribution) for for the build can be defined by a <modulename>.pyxbld
file like:

# examplemod.pyxbld
def make_ext(modname, pyxfilename):
    from distutils.extension import Extension
    return Extension(name = modname,
                     sources=[pyxfilename, 'hello.c'],
                     include_dirs=['/myinclude'] )
def make_setup_args():
    return dict(script_args=["--compiler=mingw32"])
"""

The example shows both functions, but the text says "A custom distutils.core.Extension instance AND setup() args" using "and" which could mean both together or separately. However, the code structure and the fact that the example shows them as separate functions suggests they are independent options.

2. CODE IMPLEMENTATION EVIDENCE (lines 110-133):
- Line 120-123: make_ext is OPTIONAL - checked with getattr(mod,'make_ext',None)
- Line 124-128: make_setup_args is OPTIONAL - checked with getattr(mod,'make_setup_args',None)
- Line 129-130: The assertion "assert ext or setup_args" explicitly allows for EITHER to exist
  This assertion would pass if only setup_args exists (ext=None, setup_args={...})
- The comment says "neither make_ext nor make_setup_args" confirming they are alternatives

3. EXTERNAL DOCUMENTATION:
From web search and GitHub examples, .pyxbld files are shown with various configurations:
- Some examples show only make_ext
- Some examples show only make_setup_args (for compiler flags)
- Some examples show both

4. FUNCTION PURPOSE:
The handle_special_build function is meant to handle special build configurations through .pyxbld files. The function returns a tuple (ext, setup_args) where:
- ext: a distutils Extension object (or None if not defined)
- setup_args: a dict of setup arguments (or {} if not defined)

5. DOCUMENTED BEHAVIOR:
Based on the assertion at line 129-130, the documented and expected behavior is:
- At least one of make_ext or make_setup_args must be defined
- It's valid to have only make_setup_args without make_ext
- It's valid to have only make_ext without make_setup_args
- It's valid to have both

CONCLUSION:
The documentation (both in docstrings and in code logic) clearly indicates that defining only make_setup_args() without make_ext() in a .pyxbld file is a VALID and SUPPORTED configuration. The assertion at line 129-130 explicitly checks for "ext or setup_args", allowing ext to be None when only setup_args is provided.
DOCUMENTATION ANALYSIS FOR pyximport.install()

DOCUMENTATION SOURCES REVIEWED
==============================
1. Inline docstring in pyximport.py (lines 372-419)
2. Module-level docstring in pyximport.py (lines 1-46)
3. Official Cython documentation (via web search)
4. Source code implementation (lines 434-449)

KEY FINDINGS ABOUT EXPECTED BEHAVIOR
====================================

1. Multiple Calls to install():
   - The documentation does NOT explicitly state what should happen when install() is called multiple times
   - However, the code implementation clearly INTENDS to prevent duplicates:
     * Line 434: has_py_importer, has_pyx_importer = _have_importers()
     * Line 437: if pyimport and not has_py_importer:
     * Line 444: if pyximport and not has_pyx_importer:
   - The use of "not has_py_importer" and "not has_pyx_importer" demonstrates clear intent to avoid adding duplicate importers

2. Purpose of _have_importers():
   - This helper function exists solely to detect existing importers
   - Its return values are used to prevent duplicate installations
   - The function name itself implies it should detect what importers are present

3. Documentation Gaps:
   - The docstring does not mention behavior for multiple install() calls
   - No explicit warning against calling install() multiple times
   - No documentation of the _have_importers() function (it's internal)

4. pyimport Parameter:
   - Documented as "experimental" and "use at your own risk"
   - Warns it will "heavily slow down your imports"
   - No mention that multiple calls might add duplicate importers

IMPLICIT BEHAVIORAL CONTRACT
===========================
While not explicitly documented, the code structure makes it clear that:
1. install() should be idempotent for the same parameters
2. Multiple calls should not add duplicate importers
3. The _have_importers() function is responsible for detecting existing importers

The bug violates this implicit contract due to the logic error in _have_importers().

DOCUMENTATION VERDICT
====================
This is NOT a documentation issue. The code clearly intends to prevent duplicates through its
use of conditional checks (if ... and not has_importer). The bug is a logic error in the
implementation of _have_importers() that prevents it from correctly detecting existing
PyImportMetaFinder instances.

The documentation could be improved to explicitly state the idempotent behavior, but the
current implementation bug is not due to any ambiguity in the documentation - it's a clear
deviation from the intended behavior evident in the code structure.
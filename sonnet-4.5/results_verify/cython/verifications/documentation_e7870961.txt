# Documentation Analysis for parse_signature

## Function Purpose
The `parse_signature` function is an internal utility in Cython's Tempita templating engine that parses function signatures from template `{{def}}` statements.

## Expected Behavior
Based on the code structure and usage context:

1. **Input**: A function signature string like "name" or "name, greeting" or "name='default'"
2. **Output**: A 4-tuple containing:
   - List of positional argument names
   - Variable positional argument name (*args)
   - Variable keyword argument name (**kwargs)
   - Dictionary of default values

## Documentation Findings

### Official Tempita Documentation
- The Tempita documentation (found on GitHub) shows that `{{def}}` blocks can have arguments
- Example: `{{def sidebar(name)}}` demonstrates functions can take parameters
- Functions should be callable with arguments like `{{greet('World')}}`
- No specific documentation exists for the `parse_signature` function itself (it's an internal implementation detail)

### Source Code Analysis
- The function is not documented with a docstring
- No comments explicitly state the expected behavior for edge cases
- The implementation suggests it should handle all valid Python function signatures
- The code uses Python's tokenize module to parse signatures

## Critical Observation
**There is NO documentation stating that parse_signature should fail on single arguments without defaults.**

The expected behavior, based on:
1. Python function signature conventions
2. Tempita template examples showing functions with arguments
3. The function's purpose (parsing function signatures)

Is that `parse_signature("name")` should return `(['name'], None, None, {})`, not `([], None, None, {})`.

## Documentation Gaps
- No explicit specification for how NEWLINE tokens should be handled
- No unit tests documenting expected behavior for single arguments
- No documentation explaining why single arguments without defaults would be invalid

## Conclusion
The lack of documentation suggesting that single arguments should fail, combined with:
- The obvious purpose of the function (parse signatures)
- Examples showing functions with arguments working
- The fact that it works with defaults but not without

Strongly indicates this is a BUG, not intended behavior. A function that parses signatures should parse ALL valid signatures, including the simplest case of a single argument.
DOCUMENTATION REVIEW FOR build_hex_version

=== Function Documentation ===
The function's docstring states:
"Parse and translate public version identifier like '4.3a1' into the readable hex
representation '0x040300A1' (like PY_VERSION_HEX)."

It references PEP 440 for public version identifiers.

=== PY_VERSION_HEX Format Specification ===
Python's PY_VERSION_HEX is a well-defined 32-bit integer format:
- Bits 31-24 (Byte 1): Major version (8 bits, 0-255)
- Bits 23-16 (Byte 2): Minor version (8 bits, 0-255)
- Bits 15-8 (Byte 3): Micro version (8 bits, 0-255)
- Bits 7-4: Release level (4 bits: 0xA=alpha, 0xB=beta, 0xC=rc, 0xF=final)
- Bits 3-0: Release serial (4 bits, 0-15)

Key constraint: In Python's actual implementation, the release serial is limited to 0-15
(4 bits), NOT 0-255 as the Cython implementation assumes.

=== PEP 440 Specification ===
PEP 440 defines public version identifiers but does NOT specify:
- Maximum values for version components
- That components must fit in 8 bits
- Any relationship to PY_VERSION_HEX format

It only requires version components be "non-negative integers represented as sequences
of ASCII digits."

=== Documentation Gaps ===
1. The function documentation does not specify:
   - Maximum allowed values for version components
   - That it must produce valid 32-bit values
   - Constraints on prerelease serial numbers
   - That the output should match Python's PY_VERSION_HEX constraints

2. The implementation misunderstands PY_VERSION_HEX format:
   - Incorrectly allows serial numbers up to 255 (should be 0-15)
   - Combines release level and serial in a way incompatible with Python's format
   - Doesn't validate that components fit in their allocated bit ranges

=== Critical Discrepancy ===
The Cython implementation allocates a full byte for release+serial (0x00-0xFF), while
Python's PY_VERSION_HEX format splits this byte into 4 bits each for level and serial.

This is a fundamental misunderstanding of the target format, not just a missing validation.
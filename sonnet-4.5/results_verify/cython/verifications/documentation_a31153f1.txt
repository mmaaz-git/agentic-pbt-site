## Documentation Analysis for cython-directives Option

### Findings

1. **No explicit documentation for string format**:
   - The Cython documentation does not explicitly document how the `--cython-directives` command-line option should be formatted when passed to `python setup.py build_ext`
   - The option is defined in the source code as accepting a string value, but there's no documentation about the expected string format

2. **Implicit expectations from code**:
   - The source code shows that `cython_directives` is expected to be a dictionary in `build_extension()` (line 107)
   - The `finalize_options()` method only handles the None case, converting it to an empty dict
   - There is NO code that parses a string value into a dictionary format

3. **Related functionality**:
   - The `cython` command-line tool uses the `-X` flag with format like `-X boundscheck=True`
   - In setup.py files, directives are passed as dictionaries: `compiler_directives={'boundscheck': False}`
   - The `cython-include-dirs` option (similar string option) IS properly parsed from string to list in `finalize_options()`

4. **User expectations**:
   - Given that this is a command-line option defined in `user_options`, users would reasonably expect to be able to use it
   - The format `--cython-directives="boundscheck=True,wraparound=False"` is intuitive and follows patterns from other tools
   - The option name itself suggests it should accept directive settings

5. **Comparison with similar options**:
   - `cython-include-dirs`: Properly handled - parsed from string to list in `finalize_options()` (lines 74-76)
   - `cython-directives`: NOT handled - remains as string, causing crash later

### Conclusion

The lack of string-to-dict parsing for `cython_directives` in `finalize_options()` appears to be an implementation oversight rather than intentional design. The option is exposed to users via command-line but doesn't work when actually used, which constitutes a bug rather than a documentation issue.
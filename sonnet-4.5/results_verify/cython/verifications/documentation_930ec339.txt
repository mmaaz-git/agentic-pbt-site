# Documentation Analysis

## Documentation Found

### 1. In-Source Documentation (_tempita.py lines 20-24)
The source code documentation states:
- "The Template class takes the template string and the name of the template (for errors) and a **default namespace**."
- "Then (like `string.Template`) you can call the `tmpl.substitute(**kw)` method to make a substitution"
- Key phrase: "**default namespace**" - implies namespace should provide default values

### 2. Comparison with string.Template
The documentation explicitly references Python's `string.Template` as a behavioral model:
- Python's string.Template has clear precedence: keyword arguments override mapping arguments
- Documentation states: "When both mapping and kwds are given and there are duplicates, the placeholders from kwds take precedence"
- This establishes the expected behavior pattern

### 3. External Documentation (Tempita Project)
While the original Tempita documentation doesn't explicitly state precedence rules, it shows examples where:
- Namespace provides utility functions (e.g., `upper` function)
- Substitute provides runtime data values
- The pattern implies namespace should not override runtime values

### 4. Semantic Expectations
The term "default namespace" has established meaning in programming:
- "Default" universally means "used when no other value is provided"
- Runtime arguments should override defaults (standard pattern across languages/libraries)

## Documentation Clarity Issues

While the documentation could be more explicit about precedence, the existing documentation is sufficient to establish expected behavior:

1. **"default namespace"** - The word "default" has clear semantic meaning
2. **Reference to string.Template** - Establishes behavioral expectations
3. **Common programming conventions** - Default values are overridden by runtime values

## Conclusion

The documentation, while not explicitly stating precedence rules, provides enough context through:
- Use of the term "default"
- Reference to string.Template behavior
- Standard programming conventions

These factors together establish that substitute() arguments should override namespace values, making the current behavior incorrect according to the documented intent.
## Bug Report Analysis

### BUG - Arguments For
1. **Violates fundamental principle**: Functions should not have unexpected side effects on their arguments
2. **Inconsistent with similar APIs**: Python's string.Template.substitute() does not mutate input dictionaries
3. **Inconsistent within codebase**: The same module's _interpret_inherit() method uses ns.copy() to avoid mutation
4. **Causes real problems**: Can lead to subtle bugs when dictionaries are reused across multiple template substitutions
5. **Simple fix available**: Adding .copy() would fix the issue without breaking functionality

### INVALID - Arguments Against
1. No explicit documentation says the method shouldn't mutate dictionaries
2. The behavior has existed for a long time without being fixed

**Verdict**: These are weak arguments. Lack of documentation doesn't justify unexpected side effects.

### WONTFIX - Arguments For
1. Might be considered low priority if few users have complained
2. Could potentially break existing code that relies on the mutation

**Verdict**: Breaking code that relies on undocumented side effects is acceptable for fixing bugs.

### DOCUMENTATION_FIX - Arguments For
1. Could document that the method mutates input dictionaries as a "feature"
2. Would at least warn users about the behavior

**Verdict**: This would be accepting a bug as intended behavior, which is inappropriate for side effects.

### FEATURE_REQUEST - Arguments For
1. Could frame it as requesting a new non-mutating version of substitute()

**Verdict**: This is fixing a bug, not adding a feature. The current behavior is incorrect.

## Final Assessment
This is a **BUG**. The substitute() method should not mutate input dictionaries. This violates:
- The principle of least surprise
- Standard behavior of similar template substitution methods
- The module's own internal patterns (as seen in _interpret_inherit)

The fix is simple and correct: copy the input dictionary before modifying it.
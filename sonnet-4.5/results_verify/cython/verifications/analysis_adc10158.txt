## INVALID Considerations
**Why it might be INVALID:**
The function never explicitly promises to return unique results. There is no documentation, docstring, or specification stating that `extended_iglob` should eliminate duplicates from brace expansion patterns. The function is working as coded - it expands `{py,pyx,py}` to three separate calls and yields all results. Users who write patterns with duplicate alternatives are arguably misusing the feature, and it's their responsibility to avoid duplicates in the pattern or handle them in the calling code.

**Why it might not be INVALID:**
The function already implements duplicate prevention for recursive globs, suggesting that unique results are part of the intended behavior. The inconsistency between how recursive globs and brace expansion handle duplicates is confusing and could be considered a genuine bug rather than undefined behavior.

## WONTFIX Considerations
**Why it might be WONTFIX:**
This is an edge case that would rarely occur in practice. Who would intentionally write `{py,pyx,py}` with duplicate alternatives? The overhead of checking for duplicates in all brace expansions might not be worth it for such an uncommon scenario. The current behavior doesn't cause crashes or data corruption, just inefficiency, and calling code can easily deduplicate if needed.

**Why it might not be WONTFIX:**
The fix is trivial (just move the `seen` set to the top of the function) and would make the function behavior more consistent and predictable. The performance impact of duplicate checking would be minimal, and it would prevent potential issues in build systems where processing files multiple times could cause problems.

## DOCUMENTATION_FIX Considerations
**Why it might be DOCUMENTATION_FIX:**
Since there's no documentation specifying the function's behavior regarding duplicates, one could argue that the code is correct and we just need to document that brace expansion may return duplicates while recursive globs won't. This would clarify the behavior without changing any code, making it explicit that users should handle duplicates themselves when using brace expansion.

**Why it might not be DOCUMENTATION_FIX:**
The inconsistent behavior between different features of the same function is counterintuitive and likely not the intended design. Documenting this quirk would be admitting to a design flaw rather than fixing the underlying issue. Most users would expect consistent duplicate handling across all pattern types.

## FEATURE_REQUEST Considerations
**Why it might be FEATURE_REQUEST:**
Adding duplicate prevention to brace expansion could be seen as a new feature rather than a bug fix, since the current implementation never claimed to prevent duplicates in brace patterns. This would be an enhancement to make the function more robust and user-friendly, similar to how the recursive glob feature was enhanced with duplicate prevention.

**Why it might not be FEATURE_REQUEST:**
The recursive glob already has duplicate prevention, so this isn't really a new feature but rather extending existing functionality consistently across all pattern types. The bug report correctly identifies this as a logic bug - the inconsistency in duplicate handling - rather than requesting something entirely new.

## BUG Considerations
**Why it might be BUG:**
There's a clear logical inconsistency in the function: recursive globs prevent duplicates while brace expansion doesn't. This inconsistency is unexpected and could cause issues in real-world usage. The function already recognizes that duplicates are problematic (hence the `seen` set for recursive globs), but fails to apply this logic consistently. The fix is straightforward and would make the function more predictable and reliable.

**Why it might not be BUG:**
Without explicit documentation stating that the function should return unique results, this behavior could be considered implementation-defined. The function works exactly as coded, and patterns with duplicate alternatives are arguably user error. Many glob implementations don't guarantee uniqueness, and the Python standard library's glob doesn't handle brace expansion at all, so there's no clear standard to violate.

## Overall consideration
After careful analysis, this appears to be an edge case that falls somewhere between WONTFIX and INVALID. The function is working as implemented, with no documentation promising unique results for brace expansion patterns. The example pattern `{py,pyx,py}` with duplicate alternatives is contrived and unlikely to occur in real usage - it's essentially user error to specify the same alternative twice.

While the inconsistency with recursive glob's duplicate prevention is notable, it's not necessarily wrong. Recursive globs need duplicate prevention because the same file can be discovered through multiple directory traversal paths, which is a natural consequence of the algorithm. Brace expansion duplicates, on the other hand, only occur when users explicitly write duplicate alternatives, which is easily avoidable.

The impact is minimal - at worst, files get processed multiple times, which is inefficient but not incorrect. Build systems that use this function likely have their own duplicate handling or wouldn't generate patterns with duplicate alternatives in the first place. Given that this is an edge case with minimal impact and no clear violation of documented behavior, this should be closed as INVALID or at most WONTFIX.
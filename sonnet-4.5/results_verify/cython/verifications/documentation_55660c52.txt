## Documentation Analysis for Tempita Inherit Feature

### What the Documentation Says

1. **Main module docstring (_tempita.py)**:
   - Lists supported template features including expressions, if/elif/else, for loops, Python code blocks, default variables, and comments
   - Does NOT mention the inherit feature at all in the main documentation
   - The inherit feature is completely undocumented in the public API documentation

2. **No External Documentation Found**:
   - PyPI page has minimal information and refers to GitHub
   - GitHub repository link appears broken or moved
   - No README file exists in the Tempita module directory
   - No test files demonstrate inherit usage

### How Inherit Actually Works (from code analysis)

Based on the source code analysis:

1. **Syntax**: `{{inherit expression}}` where expression should evaluate to a template name
2. **Purpose**: Template inheritance - allows one template to inherit from another
3. **Requirements**:
   - Must provide a `get_template` function when creating the Template
   - The expression after "inherit" is evaluated to get the template name
   - The inherited template is then loaded and the current template's definitions are passed to it

4. **Implementation Details**:
   - Line 255-258: When inherit is encountered, it evaluates the expression and stores it in `defs['__inherit__']`
   - Line 186-190: After template interpretation, if inherit is found, `_interpret_inherit` is called
   - Line 204-217: The inherit mechanism loads the parent template and passes the current template's body and definitions

### Key Finding: Documentation Gap

**The inherit feature is completely undocumented in the public-facing documentation.**

This is significant because:
- Users have no official guidance on how to use this feature
- The expected syntax is not documented anywhere
- Error handling expectations are not documented
- There's no documentation stating that `{{inherit }}` (with only whitespace) should raise a specific error

### Relevance to Bug Report

The bug report assumes that `{{inherit }}` with only whitespace should raise a TemplateError, but:
1. There's NO documentation stating this should happen
2. The current behavior (treating it as an expression) is not explicitly wrong per documentation
3. Without documentation, it's unclear what the "correct" behavior should be

The lack of documentation means we cannot definitively say whether the current behavior is a bug or working as intended.
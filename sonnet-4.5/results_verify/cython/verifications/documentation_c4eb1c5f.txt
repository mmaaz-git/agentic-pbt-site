## Documentation Analysis

### Available Documentation

1. **Function Signature**: The sub() function has no docstring in the source code. Help(sub) only shows:
   - `sub(content, delimiters=None, **kw)`

2. **Source Code Comments**: The GitHub source contains a comment indicating:
   - "You can use `__name='tmpl.html'` to set the name of the template."

3. **External Documentation**: Based on web searches and the original Tempita documentation:
   - The __name parameter is documented as a way to set the template name for error reporting
   - The Template class takes the template string and the name of the template (for errors)
   - When syntax errors occur, having a meaningful name helps identify which template caused the error

### Documentation Intent

The documentation clearly indicates that __name serves a meta-purpose:
- It's for naming the template itself (for error messages)
- It's NOT documented as a template variable that should be accessible via {{__name}}

### Code Consistency

The code shows inconsistent handling of special parameters:
- `delimeters` (legacy parameter) is properly removed using pop(): `kw.pop('delimeters')`
- `__name` is extracted but not removed: `kw.get('__name')`

This inconsistency suggests the current behavior is unintentional.

### User Expectations

Based on the documentation and naming conventions:
1. The double underscore prefix (__name) follows Python's convention for special/internal attributes
2. Users would not expect a parameter prefixed with __ to be directly accessible in the template
3. The parameter is clearly documented as serving a meta-purpose (template naming), not as a template variable

### Conclusion

The documentation supports that this is a bug. The __name parameter is documented exclusively as a way to name the template for error reporting purposes, not as a template variable. The fact that it becomes accessible via {{__name}} in the template is undocumented behavior that contradicts the parameter's documented purpose.
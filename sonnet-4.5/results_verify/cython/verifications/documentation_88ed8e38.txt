## Documentation Analysis for find_spanning_type

### Publicly Available Documentation
I searched the official Cython documentation (https://cython.readthedocs.io/) and found no documentation about the `find_spanning_type` or `spanning_type` functions. These appear to be internal compiler functions not exposed to end users.

### Internal Code Documentation
The only documentation found is in the source code comments:

1. `find_spanning_type` in TypeInference.py (lines 516-530):
   - No documentation comment provided
   - Calls `PyrexTypes.spanning_type` internally
   - Has special handling for bint types and float types

2. `spanning_type` in PyrexTypes.py (lines 5473-5488):
   Comment states: "Return a type assignable from both type1 and type2, or py_object_type if no better type is found. Assumes that the code that calls this will try a coercion afterwards, which will fail if the types cannot actually coerce to a py_object_type."

3. `_spanning_type` in PyrexTypes.py (lines 5491-5520):
   - No documentation comment
   - Internal helper function that performs the actual type resolution logic
   - Contains the problematic assignability checks at lines 5502-5511

### Key Observations About Documentation

1. **No specification of commutativity**: The documentation does not explicitly state that `spanning_type` should be commutative. However, the phrase "a type assignable from both type1 and type2" naturally implies a symmetric operation - both types should be treated equally in determining the spanning type.

2. **Purpose is clear**: The function's purpose is to find a common type that can represent values from either input type. This is inherently a symmetric operation conceptually.

3. **ErrorType documentation**: The ErrorType class (line 4740) is documented as "Used to prevent propagation of error messages." Its `same_as_resolved_type` method unconditionally returns 1 (True), which is clearly intentional for error handling purposes.

4. **No explicit error handling specification**: There is no documentation about how `spanning_type` should behave when one of the types is an error type. The current behavior appears to be an unintended consequence of ErrorType's promiscuous `assignable_from` behavior rather than a deliberate design choice.

5. **Internal function**: This is an internal compiler function, not part of the public API, so the lack of external documentation is not unusual. However, the behavior should still be consistent and predictable for internal compiler operations.
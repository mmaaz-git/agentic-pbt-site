## Documentation Analysis for Cython.Tempita._looper.loop_pos.even

### Available Documentation:

1. **Inline Documentation in _looper.py**:
   - The module has a docstring explaining the general purpose of the looper
   - Example usage is provided showing how to use looper in templates
   - Individual properties have no type hints or docstrings specifying return types

2. **External Documentation**:
   - No official Cython documentation found specifically for Tempita's looper properties
   - The original Tempita project (from which this was derived) also lacks specific type documentation

### Key Findings:

1. **No Type Specifications**:
   - Neither the code nor documentation explicitly states what types odd/even should return
   - No type hints, docstrings, or comments specify expected return types
   - The module's docstring only shows usage examples, not type contracts

2. **Implicit Expectations from Context**:
   - The properties are named `odd` and `even` which semantically suggest boolean values
   - Similar properties `first` and `last` return boolean values (True/False)
   - The usage example in the docstring uses these in conditional contexts suggesting boolean nature

3. **Implementation Details**:
   - `odd` returns `not self.pos % 2` which produces a bool
   - `even` returns `self.pos % 2` which produces an int (0 or 1)
   - This inconsistency appears unintentional

### Conclusion:

The documentation does not explicitly specify return types for odd/even properties. However:
- The semantic meaning of the property names strongly suggests boolean values
- Parallel properties (first, last) return booleans
- The odd property already returns a boolean
- The inconsistency between odd (bool) and even (int) appears to be an implementation oversight rather than intentional design

The lack of explicit type documentation means this is not a violation of documented behavior, but it is a violation of reasonable expectations and consistency within the API.
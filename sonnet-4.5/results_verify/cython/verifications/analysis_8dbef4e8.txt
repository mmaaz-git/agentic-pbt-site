## Bug Report Triage Analysis

### Evaluation for Each Category:

#### 1. BUG (Valid bug that should be fixed)
**Arguments FOR:**
- The Lexicon documentation explicitly states that action values are "returned as the value of the token"
- All other patterns (Str, Any, Range, etc.) correctly return their action values
- The Eof pattern is listed alongside other patterns as a regular expression constructor
- No documentation indicates Eof should behave differently from other patterns
- The DFA correctly registers the Eof action (visible in debug output), but it's never used
- This violates the principle of least surprise - users expect consistent behavior across all patterns
- The bug prevents legitimate use cases like custom EOF tokens or EOF callbacks

**Arguments AGAINST:**
- The Scanner.read() docstring does say "Returns (None, '') on end of file"
- The current behavior has likely been this way for a long time

#### 2. INVALID (Incorrect bug report)
**Arguments FOR:**
- The Scanner documentation does state it returns (None, '') on EOF
- One could argue this is the documented behavior

**Arguments AGAINST:**
- The Scanner documentation doesn't explicitly say Eof patterns are ignored
- The Lexicon documentation creates a strong expectation that patterns with actions work
- The fact that Eof accepts an action parameter but ignores it is misleading API design

#### 3. WONTFIX (Trivial/uninteresting bug)
**Arguments FOR:**
- Workarounds exist (check for None return value)
- May not be commonly used functionality
- Changing this could break existing code that expects None at EOF

**Arguments AGAINST:**
- This is not a trivial issue - it's a fundamental inconsistency in the API
- It prevents useful functionality like distinguishing "no match" from "matched EOF"
- The bug makes part of the API (Eof pattern actions) completely non-functional

#### 4. FEATURE_REQUEST (Not currently supported)
**Arguments FOR:**
- One could argue that Eof pattern actions were never intended to work
- Could be seen as requesting new functionality

**Arguments AGAINST:**
- The API already accepts action values for Eof patterns
- The documentation implies this should work
- This is fixing broken existing functionality, not adding new features

#### 5. DOCUMENTATION_FIX (Documentation is wrong)
**Arguments FOR:**
- Could update documentation to clarify that Eof patterns always return None
- Would be the least disruptive fix

**Arguments AGAINST:**
- The current documentation correctly describes how patterns and actions should work
- The code is what's inconsistent with the documented pattern-action contract
- Documenting this exception would make the API more complex and inconsistent

### Conclusion:
This is clearly a **BUG**. The implementation violates the documented contract that pattern actions determine return values. The Eof pattern accepts an action parameter that is completely ignored, which is misleading API design. All other patterns honor their actions, making Eof an undocumented exception that violates the principle of consistent behavior.
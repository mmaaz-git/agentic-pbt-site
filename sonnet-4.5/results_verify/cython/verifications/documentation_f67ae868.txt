# Documentation Analysis

## Function Purpose
The `_have_importers()` function is an internal helper function in pyximport that checks whether PyImportMetaFinder and/or PyxImportMetaFinder are already installed in sys.meta_path. It returns a tuple (has_py_importer, has_pyx_importer).

## Documentation Found

### 1. Direct Function Documentation
The `_have_importers()` function itself has no docstring or inline documentation. It is a private function (indicated by the leading underscore).

### 2. Usage Context in install() Function
The function is used by `pyximport.install()` at line 434:
```python
has_py_importer, has_pyx_importer = _have_importers()
```

This is then used to conditionally install importers:
- Line 437-442: Only installs PyImportMetaFinder if `pyimport=True` and `not has_py_importer`
- Line 444-447: Only installs PyxImportMetaFinder if `pyximport=True` and `not has_pyx_importer`

### 3. Install Function Documentation
The `install()` function's docstring (lines 372-420) states:
- "Main entry point for pyxinstall. Call this to install the .pyx import hook in your meta-path for a single Python process."
- For the `pyimport` parameter: "You can pass pyimport=True to also install the .py import hook in your meta-path."

### 4. Expected Behavior
While the documentation doesn't explicitly state that `install()` should be idempotent, the implementation clearly intends for it to be:
1. The function checks for existing importers before installing new ones
2. It only installs if the importer is not already present (`not has_py_importer`, `not has_pyx_importer`)
3. This pattern is consistent with preventing duplicate importers in sys.meta_path

### 5. Implicit Contract
The code structure and usage pattern establish an implicit contract:
- `_have_importers()` must correctly detect all importer types to prevent duplicates
- The function's return values directly control whether new importers are installed
- If the detection fails, duplicate importers will be installed, violating the expected behavior

## Conclusion
While the documentation doesn't explicitly specify idempotence, the code's structure and implementation clearly demonstrate that:
1. The `install()` function is designed to avoid installing duplicate importers
2. The `_have_importers()` function is critical to this behavior
3. The bug prevents the intended idempotent behavior from working correctly

The bug violates the implicit contract established by the code's design pattern, even if not explicitly documented. The fact that the code checks for existing importers before installing new ones shows clear intent for idempotent behavior.
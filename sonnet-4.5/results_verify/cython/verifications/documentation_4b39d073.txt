Documentation Analysis for Cython.Distutils.old_build_ext
==========================================================

## Module Documentation

The module itself contains clear documentation at the top (lines 1-7):
- It implements a version of the Distutils 'build_ext' command for building Cython extension modules
- **CRITICAL:** Line 6 explicitly states: "Note that this module is deprecated. Use cythonize() instead."
- There is also commented-out code (lines 20-43) that would print a deprecation warning

## Option Precedence Documentation

After searching the official Cython documentation and examining the code:

1. **No explicit documentation found** about the precedence order between command-level and extension-level options for boolean flags in old_build_ext.

2. **Code comments suggest command-level should take precedence**:
   - Lines 205-209: "Setup create_list and cplus from the extension options if Cython.Distutils.extension.Extension is used, otherwise just use what was parsed from the command-line or the configuration file."
   - Lines 256-259: Comments indicate directives should "Start with the command line option" then "Add in any (unique) entries from the extension"
   - Lines 237-240: Similar pattern for include paths: "Start with the command line option" first

3. **General Python distutils convention**:
   - Standard Python distutils/setuptools convention is that command-line options override configuration file and per-extension options
   - This creates a hierarchy: command-line > setup.cfg > extension-specific

4. **Modern build_ext behavior**:
   - The modern (non-deprecated) build_ext.py has the same pattern with get_extension_attr (line 81)
   - Uses the same `or` operator pattern: `getattr(self, option_name) or getattr(extension, option_name, default)`

5. **Deprecation status**:
   - The module is officially deprecated with users directed to use cythonize() instead
   - GitHub issues (#3541) confirm old_build_ext doesn't properly handle dependencies
   - The deprecation was introduced around Cython 0.25.1 (2016)

## Boolean Option Semantics

The documentation does not specify whether boolean options should follow:
- "Command-level always wins" semantics (traditional precedence)
- "Any True wins" semantics (logical OR behavior)
- Some other precedence model

The lack of documentation about this specific behavior means the implementation defines the behavior, which is currently "Any True wins" due to the `or` operator.
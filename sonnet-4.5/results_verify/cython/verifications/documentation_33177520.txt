DOCUMENTATION ANALYSIS
======================

## Internal Documentation (in source code)
Location: /home/npc/pbt/agentic-pbt/envs/cython_env/lib/python3.13/site-packages/Cython/Tempita/_tempita.py
Lines 1030-1034

The function's docstring clearly states:
```
%prog [OPTIONS] TEMPLATE arg=value

Use py:arg=value to set a Python value; otherwise all values are
strings.
```

This explicitly documents that:
1. Arguments can be passed as "arg=value" (string values)
2. Arguments can be passed as "py:arg=value" (Python-evaluated values)
3. The py: prefix is meant to distinguish Python values from string values

## External Documentation
From Tempita documentation (GitHub and online sources):
- The py: prefix allows embedding Python code in templates
- Command-line usage: "Use py:arg=value to set a Python value"
- The prefix signals that the value should be eval()'d as Python code
- This allows passing integers, lists, booleans etc., not just strings

## Expected Behavior
Based on documentation, when processing "py:x=42":
1. The "py:" prefix should be detected
2. The prefix should be REMOVED from the variable name
3. The variable should be named "x"
4. The value "42" should be eval()'d to integer 42
5. Result: vars['x'] = 42

## Current Implementation vs Documentation
The current implementation (line 1073):
- Uses `name = name[:3]` which KEEPS only "py:"
- This violates the documented behavior
- Makes the feature completely non-functional
- All py: variables get named "py:" instead of their actual names

## Conclusion
The documentation unambiguously specifies that py: is a PREFIX to be removed, not the variable name itself. The current implementation directly contradicts the documented behavior, making this a clear BUG, not a documentation issue or undefined behavior.
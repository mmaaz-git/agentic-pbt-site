BUG TRIAGE ANALYSIS
====================

## Consideration for Each Category

### 1. BUG (Valid Bug Report)
**Arguments FOR:**
- The code explicitly tracks whether content is unicode via `self._unicode` flag
- Extensive infrastructure exists for bytes handling throughout the codebase
- The substitute() method has logic to handle both bytes and unicode
- The from_filename() method reads files in binary mode, expecting to handle bytes
- The crash is a clear implementation oversight - the lexer wasn't updated to match the rest of the codebase
- The proposed fix is straightforward and aligns with the existing architecture
- This prevents a legitimate use case (templating binary files) from working

**Arguments AGAINST:**
- Documentation doesn't explicitly promise bytes support
- Could argue it's an incomplete feature rather than a bug

### 2. INVALID (Incorrect Report)
**Arguments FOR:**
- Documentation doesn't explicitly state bytes are supported
- The module docstring only mentions "text substitution"

**Arguments AGAINST:**
- The code clearly attempts to support bytes with the `_unicode` flag
- Multiple code paths exist specifically for bytes handling
- The crash is due to an implementation error, not intentional rejection
- No validation explicitly rejects bytes input

### 3. WONTFIX (Trivial/Uninteresting)
**Arguments FOR:**
- Bytes templating might be considered an obscure use case
- Most users probably use string templates
- Workaround exists (decode bytes to string before templating)

**Arguments AGAINST:**
- The infrastructure for bytes support is already 90% implemented
- The fix is simple and low-risk
- Files are read in binary mode, suggesting bytes support is expected
- Not fixing leaves the codebase in an inconsistent state

### 4. FEATURE_REQUEST (New Functionality)
**Arguments FOR:**
- Documentation doesn't promise bytes support
- Could frame as "adding" bytes support rather than "fixing" it

**Arguments AGAINST:**
- The `_unicode` flag and associated logic already exist
- This isn't adding new functionality - it's completing existing functionality
- The code already tries to handle bytes, it just fails at one step
- from_filename() reads binary, expecting bytes to work

### 5. DOCUMENTATION_FIX
**Arguments FOR:**
- Could document that bytes aren't supported despite the code suggesting they are

**Arguments AGAINST:**
- The code clearly intends to support bytes
- Fixing the documentation to say "bytes not supported" would contradict the existing implementation
- The proper fix is to complete the implementation, not document its incompleteness

## Analysis Summary

The evidence overwhelmingly points to this being a **valid BUG**:

1. **Intent is Clear**: The `_unicode` flag's existence and the extensive bytes-handling code throughout the class demonstrate clear intent to support bytes

2. **Partial Implementation**: The feature is ~90% implemented - only the lexer lacks bytes support

3. **Not Edge Case**: Reading files in binary mode (line 155) shows bytes are an expected input type

4. **Simple Fix**: The proposed fix is minimal and follows the existing pattern

5. **Consistency**: Without this fix, the codebase is internally inconsistent - it tries to support bytes everywhere except in the lexer

6. **User Expectation**: When a Template accepts bytes without validation error and sets internal flags to handle them, users reasonably expect it to work

This is not a feature request because the feature already exists (incompletely). It's not a documentation issue because the code's intent is clear. It's not invalid because the crash is clearly unintended. It's not WONTFIX because the fix is simple and the use case is legitimate.

This is a straightforward implementation bug where one function (lex) wasn't updated to handle both types despite the rest of the codebase being prepared for it.
DOCUMENTATION FINDINGS FOR CYTHON.DISTUTILS.EXTENSION

After thoroughly searching for documentation about the Cython.Distutils.Extension class and its handling of pyrex_ vs cython_ parameters, I found the following:

1. SOURCE CODE DOCUMENTATION:
   - The only documentation in the source code is a brief comment on line 40: "Translate pyrex_X to cython_X for backwards compatibility."
   - There is NO documentation about what should happen when both pyrex_ and cython_ parameters are provided simultaneously
   - There is NO documented precedence rule for conflicting parameters

2. OFFICIAL CYTHON DOCUMENTATION:
   - The Cython documentation (docs.cython.org) mentions that Cython maintains backward compatibility with Pyrex
   - The documentation states "both projects make an effort at mutual compatibility"
   - However, there is NO specific documentation about how the Extension class handles simultaneous pyrex_ and cython_ parameters
   - The "Differences between Cython and Pyrex" page does not address this specific behavior

3. GITHUB REPOSITORY:
   - The Extension class code shows the translation mechanism but provides no documentation about expected behavior with conflicting parameters
   - No inline comments explain the intended precedence rules

4. IMPLICIT EXPECTATIONS:
   - While not explicitly documented, there is a reasonable expectation that:
     a) Explicit parameters should take precedence over backward-compatibility translations
     b) When a user explicitly provides both old (pyrex_) and new (cython_) forms, the new form should be honored
     c) Backward compatibility should not silently override explicit user choices

5. DOCUMENTATION GAP:
   - This is clearly an undocumented edge case
   - The lack of documentation about this specific scenario (both parameters provided) means the behavior is technically undefined
   - However, the current behavior (pyrex_ overriding explicit cython_) is counterintuitive and likely unintended
## Documentation Analysis

### Official Documentation Review

#### scipy.io.wavfile.write() Documentation:
- **Parameters**: data can be "1-D or 2-D NumPy array of either integer or float data-type"
- **Multi-channel**: "To write multiple-channels, use a 2-D array of shape (Nsamples, Nchannels)"
- **Implication**: The documentation suggests that (N, 1) is a valid way to write mono audio as a "single channel"

#### scipy.io.wavfile.read() Documentation:
- **Returns**: "data is 1-D for 1-channel WAV, or 2-D of shape (Nsamples, Nchannels) otherwise"
- **Explicit statement**: Mono audio (1 channel) always returns as 1-D array
- **Multi-channel**: Only 2+ channels return as 2-D arrays

### Documentation Assessment

1. **The behavior is documented**: The read() function explicitly states it returns 1-D arrays for mono audio. This is not a deviation from documented behavior.

2. **However, there's an inconsistency**: The write() function accepts 2-D arrays with shape (N, 1) for mono, but read() always returns 1-D for mono. This creates an asymmetry.

3. **Round-trip expectation**: While not explicitly documented, there's a reasonable expectation that:
   - write(file, data) followed by read(file) should preserve array shape
   - This expectation holds for all multi-channel cases but fails for mono

4. **Source code confirms intent**: The implementation in wavfile.py shows this is intentional:
   ```python
   if channels > 1:
       data = data.reshape(-1, channels)
   ```
   Only multi-channel (>1) data gets reshaped to 2D.

### Key Documentation Points

1. **Not a bug in terms of documentation compliance**: The functions behave exactly as documented.

2. **Design choice**: The decision to return mono as 1-D appears intentional to simplify the common case of mono audio.

3. **WAV format constraint**: The WAV file format itself doesn't distinguish between (N,) and (N, 1) for mono - it just stores mono as a single channel. The shape distinction is a NumPy/Python concern, not a WAV format concern.

4. **User expectation vs. design**: While users might expect shape preservation for consistency, the current design prioritizes returning the "simplest" representation for mono audio.

### Conclusion
The behavior is consistent with the documentation. The read() function is explicitly documented to return 1-D arrays for mono audio, regardless of how the data was written. This is a design choice, not an undocumented behavior.
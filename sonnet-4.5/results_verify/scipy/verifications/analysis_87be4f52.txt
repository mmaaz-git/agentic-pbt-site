TRIAGE ANALYSIS
===============

Analyzing the bug report against each possible categorization:

1. INVALID - Arguments Against:
   ✗ While the usage is incorrect, a segmentation fault is never acceptable
   ✗ Even incorrect API usage should not crash the Python interpreter
   ✗ The library should validate inputs and raise proper exceptions

   Arguments For:
   ✓ The bug report incorrectly claims Rotation.mean([r]) is valid API usage
   ✓ The documentation clearly shows mean() is an instance method, not class method
   ✓ The "expected behavior" in the report is based on incorrect assumptions

2. WONTFIX - Arguments Against:
   ✗ Segmentation faults are serious - they crash the entire Python process
   ✗ This is not an obscure edge case - users might reasonably try this usage
   ✗ The crash provides zero helpful feedback to users

   Arguments For:
   ✓ The usage pattern is fundamentally wrong
   ✓ There's a clear, documented correct way to use the method

3. FEATURE_REQUEST - Arguments Against:
   ✗ The bug report is not asking for new functionality
   ✗ A segfault is a bug, not a missing feature
   ✗ Basic input validation is not a "feature" - it's expected behavior

   Arguments For:
   ✓ Could reframe as: "Add support for Rotation.mean() as a class method"
   ✓ The user wants functionality that doesn't currently exist

4. DOCUMENTATION_FIX - Arguments Against:
   ✗ The documentation is actually correct about the method signature
   ✗ The segfault is a code bug, not a documentation issue
   ✗ Adding "don't do X or Python will crash" isn't a documentation fix

   Arguments For:
   ✓ Documentation could be clearer about instance vs class method usage
   ✓ Could add explicit warnings about incorrect usage patterns

5. BUG - Arguments Against:
   ✓ The root issue is user error - incorrect API usage
   ✓ The method works correctly when used as documented

   Arguments For:
   ✗ Segmentation faults are always bugs - no Python code should cause them
   ✗ Lack of input validation in C/Cython code is a bug
   ✗ Users should get helpful TypeErrors, not crashes
   ✗ Memory safety violations are serious security/stability issues
   ✗ The fix is straightforward - add input validation

RECOMMENDATION:
---------------
This should be categorized as BUG.

Reasoning:
1. Segmentation faults are ALWAYS bugs, regardless of the triggering input
2. Python libraries must handle all inputs gracefully, even incorrect ones
3. The C/Cython extension has a memory safety bug that needs fixing
4. While the usage is wrong, the crash is the actual bug that needs fixing
5. Proper behavior would be to raise TypeError or AttributeError

The fix should:
- Add input validation to prevent the segfault
- Raise a clear error message explaining correct usage
- NOT add the incorrectly assumed functionality

This is a clear case where "garbage in" should produce "error message out",
not "crash the interpreter". The segfault itself is the bug, not the lack
of support for the incorrect usage pattern.
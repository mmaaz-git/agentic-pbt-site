## Documentation Analysis for scipy.io.hb_write

### Official SciPy Documentation
The scipy.io.hb_write documentation states:
- Function writes sparse arrays/matrices to Harwell-Boeing format files
- Supports "assembled, non-symmetric, real matrices"
- No explicit mention of handling empty (zero non-zero elements) matrices
- No warnings or notes about edge cases with empty sparse matrices
- Example shows writing an identity matrix (which has non-zero elements)

### Harwell-Boeing Format Specification
Based on multiple sources reviewed:

1. **NIST Matrix Market**: The format specification describes sparse matrix storage but does not explicitly address matrices with zero non-zero elements.

2. **FSU Documentation**: The format tracks the "NNZERO" field (number of non-zero entries) but provides no explicit guidance on handling nnz=0 case.

3. **General Format Design**: The Harwell-Boeing format was designed for efficient storage of sparse matrices by only storing non-zero values and their positions. The format structure includes:
   - Header with matrix dimensions and number of non-zeros
   - Column pointers array
   - Row indices array (for non-zero elements)
   - Values array (for non-zero elements)

### Key Finding
Neither the SciPy documentation nor the Harwell-Boeing format specification explicitly states:
- Whether empty sparse matrices (nnz=0) are valid or invalid
- How such matrices should be handled
- Any minimum requirements for non-zero entries

### Comparison with Other Formats
The Matrix Market format (handled by mmwrite/mmread) explicitly supports empty sparse matrices, as demonstrated in testing. This suggests that supporting empty matrices is reasonable for sparse matrix I/O functions.

### Documentation Gap
The documentation does not specify the expected behavior for edge cases like empty sparse matrices. This is neither explicitly supported nor explicitly forbidden, creating ambiguity about whether this is a bug or unsupported usage.
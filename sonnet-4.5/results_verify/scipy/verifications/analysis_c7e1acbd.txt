TRIAGE ANALYSIS

Evaluating this bug report against each possible categorization:

1. INVALID - Why it might be invalid:
   - Documentation states "Qhull does not guarantee that each input point appears as a vertex"
   - Could argue numerical precision issues are expected in computational geometry

   Why it's NOT invalid:
   - The points ARE vertices (confirmed in tri.simplices)
   - The bruteforce algorithm finds them correctly
   - Individual queries find them correctly (only batch fails)
   - The inconsistency between batch and individual queries suggests a bug, not expected behavior

2. WONTFIX - Why it might be WONTFIX:
   - Could be considered an edge case with high-dimensional data (4D)
   - Workaround exists (use tol parameter or bruteforce)
   - Numerical precision at boundaries is inherently difficult

   Why it's NOT WONTFIX:
   - This is not an obscure edge case - finding vertices is fundamental
   - The issue occurs with reasonable inputs (8 points in 4D)
   - The inconsistency between batch/individual queries is not a precision limitation

3. DOCUMENTATION_FIX - Why it might be DOCUMENTATION_FIX:
   - Documentation could better explain the tolerance parameter
   - Could document that batch queries might need higher tolerance
   - Could warn about potential issues with vertices in high dimensions

   Why it's NOT just DOCUMENTATION_FIX:
   - The behavior is genuinely incorrect - vertices should be findable
   - The inconsistency between methods suggests a code bug
   - Users reasonably expect vertices to be "inside" the triangulation

4. FEATURE_REQUEST - Why it might be FEATURE_REQUEST:
   - Could request automatic vertex detection as a new feature
   - Could request adaptive tolerance adjustment

   Why it's NOT FEATURE_REQUEST:
   - This is not requesting new functionality
   - Finding vertices is expected existing functionality
   - The bruteforce and individual query methods work correctly

5. BUG - Why it IS a bug:
   - Clear inconsistency: batch queries fail while individual queries succeed for same points
   - Vertices of the triangulation should always be findable
   - The bruteforce algorithm correctly finds all vertices
   - The default algorithm's batch processing has a defect
   - The same query produces different results depending on how it's called
   - This violates the principle of least surprise

STRONGEST EVIDENCE FOR BUG:
1. The SAME point (e.g., point 6) returns:
   - -1 when queried in batch with default algorithm
   - Valid simplex (8) when queried individually with default algorithm
   - Valid simplex (1) when queried in batch with bruteforce

2. All points ARE confirmed vertices in the triangulation

3. The inconsistency is not about numerical precision at boundaries - it's about different code paths producing different results for identical inputs

This is a clear logic bug in the batch processing code path of the default algorithm.
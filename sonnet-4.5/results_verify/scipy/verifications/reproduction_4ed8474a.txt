## Bug Reproduction Analysis

I have successfully reproduced the bug described in the report. Both the Hypothesis-based property test and the manual test code confirm the issue.

### Hypothesis Test Results

The Hypothesis test consistently fails for even-length arrays where sum(x) == 0. The test passed for odd-length arrays but failed repeatedly for even-length arrays. Examples of failing cases:
- Array of length 2: [-0.5, 0.5] returned [0.0, -0.0] instead of the original
- Array of length 2: [-417839.5, 417839.5] returned [0.0, -0.0] instead of the original

### Manual Test Results

The manual test confirmed the pattern described in the bug report:
- All even-length arrays (2, 4, 6, 8, 10) FAILED the round-trip test
- All odd-length arrays (3, 5, 7, 9) PASSED the round-trip test

Specific examples:
1. Length 2 array [-1.0, 1.0] with sum = 0.0:
   - Expected: [-1.0, 1.0]
   - Got: [0.0, -0.0]
   - The array is completely zeroed out

2. Length 4 array [-2.0, -1.0, 1.0, 2.0] with sum = 0.0:
   - Expected: [-2.0, -1.0, 1.0, 2.0]
   - Got: [-1.5, -1.5, 1.5, 1.5]
   - The values are modified incorrectly

3. Length 6 array [-3.0, -2.0, -1.0, 1.0, 2.0, 3.0] with sum = 0.0:
   - Expected: [-3.0, -2.0, -1.0, 1.0, 2.0, 3.0]
   - Got: [-2.33..., -2.66..., -0.33..., 0.33..., 2.66..., 2.33...]
   - Again, values are corrupted

### Conclusion

The bug is confirmed and reproducible. The round-trip property `hilbert(ihilbert(x)) == x` documented for arrays where `sum(x) == 0` consistently fails for all even-length arrays, while working correctly for odd-length arrays. This directly contradicts the documentation which states this property should hold whenever sum(x) == 0, without mentioning any restriction on array length parity.
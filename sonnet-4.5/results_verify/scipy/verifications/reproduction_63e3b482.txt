REPRODUCTION ANALYSIS
====================

I successfully reproduced the bug reported in scipy.io.matlab.savemat with Unicode variable name encoding.

## Property-Based Test Results

Running the property-based test from the bug report showed that:
- The test correctly identifies when variable names contain non-Latin-1 characters
- Multiple test cases failed with UnicodeEncodeError when encountering characters beyond Latin-1 (code point > 255)
- Specific failing example: varname='Ā' (U+0100, Latin A with macron)
- The error occurs consistently for any Unicode character outside the Latin-1 range

## Minimal Example Results

The minimal reproduction code:
```python
import numpy as np
from io import BytesIO
import scipy.io.matlab as sio

data = {'Ā': np.array([[1.0]])}
f = BytesIO()
sio.savemat(f, data)
```

This code indeed raises the exact error described in the bug report:
```
UnicodeEncodeError: 'latin-1' codec can't encode character '\u0100' in position 0: ordinal not in range(256)
```

The stack trace shows the error occurs in:
- File: scipy/io/matlab/_mio5.py, line 901
- Function: put_variables
- Specific line: name.encode('latin1')

## Effect Confirmation

The bug report accurately describes:
1. The error type (UnicodeEncodeError)
2. The exact error message
3. The failing input (Unicode character U+0100)
4. The location in the code where it fails

The effect is exactly as reported - scipy.io.matlab.savemat crashes with a low-level codec error when given variable names containing non-Latin-1 Unicode characters, instead of providing a clear, actionable error message about variable name restrictions.
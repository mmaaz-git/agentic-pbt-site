DOCUMENTATION ANALYSIS
======================

I reviewed the official documentation for scipy.fft.rfft, scipy.fft.irfft, and related FFT specifications.

1. SCIPY.FFT.RFFT DOCUMENTATION:
   - Accepts real-valued input arrays of any size (no minimum size specified)
   - Returns complex array with length (n/2)+1 for even n, (n+1)/2 for odd n
   - No documented restrictions on single-element arrays
   - For a single-element array, should return a single complex value

2. SCIPY.FFT.IRFFT DOCUMENTATION:
   - Described as the inverse operation of rfft()
   - States: "Ensures irfft(rfft(x), len(x)) == x within numerical accuracy"
   - No documented minimum size requirements
   - No explicit mention of single-element array handling
   - Parameter n defaults to 2*(m-1) where m is input length
   - Documentation implies it should accept any valid rfft() output

3. NUMPY FFT COMPATIBILITY:
   - SciPy FFT is designed to be drop-in compatible with NumPy FFT
   - NumPy's documentation also doesn't specify minimum size requirements
   - No explicit prohibition against single-element transforms

4. MATHEMATICAL VALIDITY:
   - Single-point DFT is mathematically valid (trivial case where output equals input)
   - For N=1, DFT formula reduces to X₀ = x₀
   - The inverse should similarly return the original single value

5. KEY DOCUMENTATION FINDING:
   The documentation explicitly states that irfft() should ensure:
   "irfft(rfft(x), len(x)) == x"

   This is a clear promise in the documentation that the round-trip should work for
   any valid input x, with no size restrictions mentioned.

6. UNSPECIFIED BEHAVIOR:
   - Documentation does not specify that single-element arrays are unsupported
   - No minimum size requirements are documented
   - The failure on single-element arrays is undocumented behavior

CONCLUSION:
The documentation promises that irfft(rfft(x), len(x)) should equal x for any valid input,
without specifying size restrictions. The failure on single-element arrays violates this
documented guarantee, making this a legitimate bug rather than unspecified behavior.
DOCUMENTATION FINDINGS FOR SCIPY.SPARSE SCALAR MULTIPLICATION

After reviewing the scipy.sparse documentation, here are the key findings:

1. nnz Property Documentation:
   - The documentation explicitly states that nnz represents "Number of stored values, including explicit zeros"
   - This is an important distinction - nnz is NOT "number of nonzeros" but rather "number of stored values"
   - The property name "nnz" might suggest "number of nonzeros" but the documentation clarifies it includes explicit zeros

2. eliminate_zeros() Method:
   - The documentation states it "Remove[s] zero entries from the array/matrix"
   - It is an in-place operation that modifies the matrix directly
   - The method exists specifically to remove explicitly stored zeros from the sparse structure
   - The existence of this method implies that having explicit zeros in sparse matrices is expected behavior

3. Scalar Multiplication Behavior:
   - The documentation does NOT specify what should happen when multiplying by zero
   - There is no explicit statement that multiplication by zero should automatically eliminate zeros
   - The documentation mentions arithmetic operations are supported but doesn't detail zero-multiplication behavior

4. Sparse Matrix Design Philosophy:
   - The documentation acknowledges that sparse matrices can have "explicit zeros" vs "implicit zeros"
   - Explicit zeros are values that are stored in the data structure but have value 0
   - Implicit zeros are positions not stored in the sparse structure (assumed to be 0)
   - Some applications need to distinguish between explicit and implicit zeros (e.g., graph algorithms where 0 weight edge is different from no edge)

5. Format-Specific Behavior:
   - Different sparse formats (CSR, CSC, COO, DOK, LIL) may have different implementations
   - The documentation doesn't mandate uniform behavior across all formats for operations

CONCLUSION FROM DOCUMENTATION:
The documentation does not specify that scalar multiplication by zero should automatically eliminate zeros. In fact, the documentation explicitly acknowledges that nnz includes "explicit zeros" and provides a separate method (eliminate_zeros) to remove them if desired. This suggests that keeping explicit zeros after operations is intentional design behavior, not a bug.
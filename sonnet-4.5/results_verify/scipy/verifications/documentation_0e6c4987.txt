# Documentation Analysis for split_data_line

## Function Status
The function `split_data_line` is located in `scipy.io.arff._arffread` module. Key findings:

1. **Private Function**: The function name starts with underscore in the module path (`_arffread`), and is NOT listed in the module's `__all__` export list which only contains: `['MetaData', 'loadarff', 'ArffError', 'ParseArffError']`

2. **No Documentation**: The function has no docstring or formal documentation. The help() function returns only the function signature with no description.

3. **Not in Public API**: The function is not mentioned in the official SciPy documentation for the arff module. Only `loadarff` is documented as the public interface.

## Internal Usage
The function is used internally in three places within the same module:
1. Line 130: Parsing nominal attribute values from regex matches
2. Line 374: Parsing rows within relational attributes
3. Line 865: Main data parsing loop after skipping comments and empty lines

## Context from Usage
At line 862-865, the code shows:
```python
if r_comment.match(raw) or r_empty.match(raw):
    continue
row, dialect = split_data_line(raw, dialect)
```

This indicates that in the main parsing loop, empty lines are explicitly filtered out BEFORE calling `split_data_line`. The function is never intended to receive empty strings in normal operation.

## ARFF Specification
The ARFF format specification doesn't explicitly define behavior for empty data lines, but the implementation shows they are meant to be skipped before processing.

## Conclusion
`split_data_line` is an internal utility function, not part of the public API. It was designed with the assumption that empty lines would be filtered out before calling it, as evidenced by the code at line 862. However, since it's still accessible (Python doesn't enforce true privacy), it can be called directly, leading to the crash.
Documentation Analysis for scipy.special.inv_boxcox1p
======================================================

Official SciPy Documentation:
----------------------------
The official documentation for inv_boxcox1p clearly states:
1. **Purpose**: "Inverse of the boxcox1p transformation"
2. **Mathematical relationship**: The function computes x such that:
   - When λ ≠ 0: y = ((1+x)^λ - 1) / λ
   - When λ = 0: y = log(1+x)
3. **Example provided**: Shows round-trip property working correctly:
   >>> y = boxcox1p([1, 4, 10], 2.5)
   >>> inv_boxcox1p(y, 2.5)
   array([1., 4., 10.])

Key Documentation Findings:
--------------------------
1. **Inverse relationship is explicit**: The documentation explicitly states that inv_boxcox1p is the inverse of boxcox1p. This establishes a mathematical contract that inv_boxcox1p(boxcox1p(x, λ), λ) = x for all valid inputs.

2. **No numerical limitations mentioned**: The documentation does NOT mention any restrictions on lambda values beyond the mathematical definition. There are no warnings about:
   - Extremely small lambda values
   - Numerical precision issues
   - Cases where the inverse might not work correctly

3. **Special case handling**: The documentation explicitly describes how lambda=0 should be handled (using log formula), but does not mention any threshold or epsilon for "near-zero" values.

4. **Mathematical continuity**: The Box-Cox transformation (from Wikipedia) is designed to be "continuous at the point of singularity (λ = 0)", meaning the transformation should smoothly transition as lambda approaches zero.

Documentation Implications:
--------------------------
Given that:
- The documentation explicitly promises an inverse relationship
- No exceptions or limitations are documented for small lambda values
- The mathematical definition should hold for all valid lambda values
- The example in the documentation demonstrates the expected round-trip behavior

The bug violates the documented behavior. Users have a reasonable expectation based on the documentation that inv_boxcox1p will correctly invert boxcox1p for any lambda value, including extremely small ones.

The documentation does not provide any disclaimer that would suggest the observed behavior (returning input unchanged for small lambda) is expected or acceptable.
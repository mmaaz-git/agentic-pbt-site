DOCUMENTATION ANALYSIS
======================

## SciPy Documentation Review

The official SciPy documentation for scipy.io.savemat:
- Does NOT document any character encoding restrictions for variable names
- Does NOT mention that variable names must be Latin-1 encodable
- Does NOT specify that Unicode characters beyond Latin-1 are unsupported
- Only mentions restrictions for keys starting with '_' or digits
- Documents maximum field name length (31 or 63 characters)
- No mention of ASCII or Latin-1 encoding requirements

## MATLAB Variable Name Requirements

Based on official MATLAB documentation and community sources:
1. MATLAB variable names MUST:
   - Start with a letter (a-z, A-Z only)
   - Contain only letters (a-z, A-Z), digits (0-9), and underscores (_)
   - Be restricted to basic ASCII characters

2. MATLAB does NOT support:
   - Unicode characters in variable names
   - Latin-1 extended characters (À, Á, Â, etc.) in variable names
   - Any non-ASCII alphabetic characters in variable names

3. MATLAB's internal handling:
   - MATLAB internally uses UTF-16 for strings and display
   - BUT variable names are strictly limited to ASCII characters
   - This is a documented limitation of MATLAB itself

## Key Finding

There is a clear documentation gap in scipy.io.savemat:
- The function correctly enforces Latin-1 encoding (which is actually more permissive than MATLAB's ASCII-only requirement)
- However, this encoding requirement is UNDOCUMENTED in the SciPy documentation
- Users have no way to know from the documentation that Unicode variable names will fail

## Conclusion

The behavior (rejecting non-Latin-1 characters) is technically correct to maintain MATLAB compatibility, but:
1. The restriction is not documented in SciPy
2. The error message is unhelpful (low-level codec error vs. clear validation error)
3. MATLAB itself is even more restrictive (ASCII-only), so SciPy using Latin-1 is already somewhat lenient
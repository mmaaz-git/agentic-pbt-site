## Documentation Analysis for scipy.fft.irfft

### Official Documentation Summary

**scipy.fft.irfft function:**
- Purpose: Computes the inverse of the 1-D discrete Fourier Transform for real input, specifically the inverse of rfft()
- Signature: `scipy.fft.irfft(x, n=None, axis=-1, norm=None, overwrite_x=False, workers=None, *, plan=None)`

**Key Parameter - n:**
- The documentation explicitly states: "If not specified, defaults to `2*(m-1)` where `m` is input length"
- This parameter determines the output length and controls zero-padding/truncation
- The documentation notes that specifying `n` is required "to avoid losing information"

**scipy.fft.rfft function:**
- Purpose: Compute the 1-D discrete Fourier Transform for real input
- For a single-element input array of length 1, the output length is 1 (since for odd n, output length is (n+1)/2 = (1+1)/2 = 1)

### Critical Documentation Findings

1. **The default behavior is clearly documented**: The documentation explicitly states that when n is not given, it defaults to `2*(m-1)`. This is not ambiguous.

2. **No special case handling mentioned**: The documentation does not mention any special handling for single-element arrays or edge cases where the default calculation would result in n=0.

3. **No warnings about single-element arrays**: There are no warnings in the documentation that single-element arrays require special treatment or that the default calculation might fail for them.

4. **Round-trip expectation not explicitly promised**: While the functions are described as inverses, the documentation does not explicitly guarantee that `irfft(rfft(x))` will work for all valid inputs without specifying parameters.

5. **The error case is predictable from documentation**: Given the documented formula `2*(m-1)`, a user could mathematically determine that a single-element rfft output (m=1) would result in n=0, which is invalid.

### Documentation Gaps

The documentation could be clearer about:
- The fact that single-element arrays require explicit n=1 parameter
- That the default n calculation can result in invalid values for certain inputs
- Examples showing edge cases like single-element arrays
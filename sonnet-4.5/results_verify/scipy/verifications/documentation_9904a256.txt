DOCUMENTATION ANALYSIS
======================

## Official Documentation Review

The function's docstring (lines 39-174 in _geometric_slerp.py) explicitly states:

### Return Value Specification (lines 63-71):
```
Returns
-------
result : (t.size, D)
    An array of doubles containing the interpolated
    spherical path and including start and
    end when 0 and 1 t are used. The
    interpolated values should correspond to the
    same sort order provided in the t array. The result
    may be 1-dimensional if ``t`` is a float.
```

### Key Documentation Points:

1. **Explicit Promise**: Line 71 clearly states "The result may be 1-dimensional if t is a float"
   - This is an explicit contract that scalar t values should return 1D arrays
   - The current behavior violates this promise when start == end

2. **Parameter Requirements**:
   - t can be "float or (n_points,) 1D array-like" (line 53)
   - Both scalar and array inputs are explicitly supported

3. **No Special Case Documentation**:
   - The documentation does not mention any special behavior when start == end
   - Users would expect consistent return shapes regardless of whether points are identical

4. **Examples in Documentation**:
   - All examples show arrays with t_vals (e.g., np.linspace(0, 1, 4))
   - No examples demonstrate scalar t behavior, but the contract is clear

## External Documentation Verification

The SciPy online documentation confirms the same contract:
- States that results will be 1-dimensional when t is a float
- No exceptions mentioned for the case when start == end

## Conclusion

The documentation clearly establishes that scalar t values should produce 1-dimensional results. The current implementation violates this documented contract when start == end, making this a valid bug rather than undefined behavior or a documentation issue.
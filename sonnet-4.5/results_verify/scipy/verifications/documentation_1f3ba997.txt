# Documentation Analysis

## SciPy Documentation Review

### savemat Documentation
The `savemat` function documentation clearly states:
- Has a `oned_as` parameter with options 'row' or 'column' (default 'row')
- This parameter controls how 1D arrays are written: as row vectors or column vectors
- **Key finding**: Documentation explicitly says 1D arrays are written as vectors (implying 2D)
- **No warning** is provided about the fact that 1D arrays cannot be preserved as 1D

### loadmat Documentation
The `loadmat` function documentation:
- Has a `squeeze_me` parameter (default False) to "squeeze unit matrix dimensions"
- When True, removes dimensions of length 1
- **No explicit warning** that 1D arrays saved as 2D will remain 2D when loaded
- **No mention** that this is expected behavior due to MATLAB compatibility

## MATLAB Compatibility Investigation

### MATLAB's Array Model
Research reveals fundamental MATLAB behavior:
1. **MATLAB has no true 1D arrays** - all arrays are at least 2D
2. Even scalars in MATLAB are 1×1 matrices
3. Vectors in MATLAB are either:
   - Row vectors (1×n)
   - Column vectors (n×1)
4. This is a fundamental design choice in MATLAB

### Implications
The behavior of scipy.io.matlab converting 1D NumPy arrays to 2D is **consistent with MATLAB's design**. MATLAB .mat files cannot store true 1D arrays because MATLAB itself doesn't have that concept.

## Documentation Gaps

1. **Missing Critical Information**: Neither `savemat` nor `loadmat` documentation explicitly warns users that:
   - 1D NumPy arrays will become 2D due to MATLAB format limitations
   - Round-trip preservation of 1D array shape is impossible
   - This is expected behavior, not a bug

2. **Incomplete Workaround Documentation**: The `squeeze_me` parameter documentation doesn't mention:
   - It can partially restore 1D arrays for multi-element arrays
   - Single-element arrays become scalars, not 1D arrays

3. **Missing Cross-Reference**: No mention in either function's docs about the relationship between `oned_as` in savemat and `squeeze_me` in loadmat

## Conclusion
While the behavior is technically correct (matching MATLAB's array model), the documentation fails to adequately inform users about this fundamental limitation of the MATLAB format when working with NumPy arrays.
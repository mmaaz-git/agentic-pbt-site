Documentation Review for scipy.signal.deconvolve
=================================================

Official Documentation Findings:
--------------------------------
The scipy.signal.deconvolve function documentation states:
- Purpose: "Deconvolves divisor out of signal using inverse filtering"
- Contract: Returns quotient and remainder such that "signal = convolve(divisor, quotient) + remainder"
- Parameters: Both signal and divisor are described as (N,) array_like
- No explicit preconditions about divisor[0] being non-zero are documented
- No warnings about leading zeros in the divisor

Comparison with numpy.polydiv:
-------------------------------
The documentation mentions that numpy.polydiv "performs polynomial division (same operation, but also accepts poly1d objects)". However, numpy.polydiv:
- Does not explicitly document handling of leading zeros either
- In practice, produces inf/nan when dividing by a polynomial with leading zeros
- Does not raise an error, just produces mathematically undefined results

Mathematical Context:
--------------------
Polynomial division with a divisor having leading zeros is mathematically valid when interpreted correctly:
- [0, 1] represents the polynomial 0*x + 1 = 1 (a constant)
- Dividing by a constant is a well-defined operation
- The leading zero simply indicates the polynomial has lower degree than its array length suggests

Signal Processing Context:
--------------------------
The function uses lfilter internally (based on the error message), which requires a[0] != 0. This is a signal processing implementation constraint, not a mathematical requirement.

Documentation Gaps:
------------------
1. The documentation does not specify that divisor[0] must be non-zero
2. No mention of the internal use of lfilter and its constraints
3. No guidance on how to handle divisors with leading zeros
4. The relationship to polynomial division is mentioned but the differences in behavior are not explained

The error message itself says "BUG: filter coefficient a[0] == 0 not supported yet", which indicates the developers acknowledge this as a known limitation rather than intended behavior.
# Documentation Analysis

## SciPy Documentation Review

### Official Function Documentation
The SciPy documentation for `braycurtis` states:
- Formula: Σ|u_i - v_i| / Σ|u_i + v_i|
- Range: [0, 1] if all coordinates are positive
- **Critical Statement**: "is undefined if the inputs are of length zero"

### Documentation Interpretation Issues
1. The documentation states the function is "undefined if the inputs are of length zero" - but this is misleading:
   - The actual issue occurs when all values are zero, not when the length is zero
   - A vector of length zero would be an empty array, which is different from [0, 0, 0]
   - The function does accept arrays of any positive length, including length 1

2. The documentation does NOT explicitly address what should happen when:
   - Both input vectors contain only zeros (our bug case)
   - The denominator Σ|u_i + v_i| equals zero

## Mathematical Background

### Standard Bray-Curtis Definition
From ecological literature:
- Originally designed for ecological data (species counts)
- Formula: BC = Σ|u_i - v_i| / Σ|u_i + v_i|
- Assumes positive values (species abundances cannot be negative)
- Range: [0, 1] where 0 means identical composition

### Zero Vector Problem in Ecology
Research shows this is a known issue:
1. When both sites have no species (empty sites), the denominator becomes 0
2. This makes the dissimilarity undefined mathematically (0/0)
3. Ecologists have developed "zero-adjusted Bray-Curtis" methods to handle this

### Expected Behavior for Distance Metrics
For any proper distance/dissimilarity metric:
- d(x, x) = 0 for any vector x (identity property)
- This should include the zero vector

## Documentation vs. Implementation Gap

The current documentation is incomplete because:
1. It doesn't clarify behavior for all-zero vectors
2. The phrase "undefined if inputs are of length zero" is ambiguous and potentially incorrect
3. It doesn't match the actual behavior (returns NaN for all-zero vectors, not for zero-length)

## Conclusion

The documentation is insufficient to determine the intended behavior for all-zero vectors. While it mentions the function is "undefined" in certain cases, it incorrectly describes those cases as "inputs of length zero" rather than "inputs where the denominator becomes zero" or "all-zero vectors". This creates ambiguity about whether returning NaN for all-zero vectors is intentional or a bug.
DOCUMENTATION ANALYSIS
======================

OFFICIAL DOCUMENTATION REVIEW:
------------------------------

The scipy.signal.deconvolve documentation states:

1. Function Purpose:
   "Deconvolves divisor out of signal using inverse filtering"

2. Core Contract:
   "Returns the quotient and remainder such that:
   signal = convolve(divisor, quotient) + remainder"

3. Parameters:
   - signal: (N,) array_like - Signal data, typically a recorded signal
   - divisor: (N,) array_like - Divisor data, typically an impulse response or filter

4. No Restrictions Mentioned:
   - The documentation does NOT specify any restrictions on leading zeros
   - No warning about divisor[0] needing to be non-zero
   - No mention that certain polynomial representations are invalid

5. Related Function:
   The documentation explicitly references numpy.polydiv as performing "the same operation"

COMPARISON WITH numpy.polydiv:
------------------------------

numpy.polydiv (which the documentation says performs "the same operation"):
- Automatically normalizes polynomials by stripping leading zeros
- np.poly1d([0, 1]) is automatically converted to just [1]
- This is standard polynomial behavior

KEY FINDING:
-----------

The documentation establishes a mathematical contract: "signal = convolve(divisor, quotient) + remainder"

This contract should hold for ALL mathematically valid divisors, including:
- [0, 1] which represents the constant polynomial 1
- [0, 0, 1] which also represents the constant polynomial 1
- Any polynomial with leading zeros

The documentation makes no mention that leading zeros are unsupported or that divisor[0] must be non-zero. Users would reasonably expect the function to handle standard polynomial representations, especially since numpy.polydiv (referenced in the docs) handles them correctly.

CONCLUSION:
----------

The bug report's assumptions about expected behavior are correct based on the documentation. The function violates its documented contract by not handling mathematically valid polynomial divisors with leading zeros.
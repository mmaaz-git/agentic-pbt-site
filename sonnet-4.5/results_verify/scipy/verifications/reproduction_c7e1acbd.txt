REPRODUCTION OF BUG REPORT

I have successfully reproduced the bug described in the report. The issue is confirmed with the following findings:

1. HYPOTHESIS TEST REPRODUCTION:
   - Ran the property-based test with n_points=8, n_dims=4
   - Result: Test failed with 2 points not found by default algorithm
   - Default algorithm failed to find 2 points (indices 6 and 7)
   - Bruteforce algorithm found all points correctly

2. MINIMAL EXAMPLE REPRODUCTION:
   - With seed=0, created 8 random 4D points scaled by 100
   - Default algorithm results: [ 9  9  0  0 10 10 -1 -1]
   - Bruteforce algorithm results: [0 6 0 0 2 0 1 0]
   - Points 6 and 7 returned -1 (not found) with default algorithm
   - Points 6 and 7 are confirmed vertices (appear in tri.simplices)
   - Both points were correctly found by bruteforce algorithm

3. WORKAROUND VERIFICATION:
   - Using tol=1e-10 parameter fixes the issue
   - All 8 points are correctly found when tolerance is increased

4. ADDITIONAL DISCOVERY - BATCH VS INDIVIDUAL QUERIES:
   - When querying points individually, ALL points are found correctly even with default algorithm
   - Point 6 individually: found (returns simplex 8)
   - Point 7 individually: found (returns simplex 0)
   - The bug ONLY manifests when querying multiple points as a batch
   - This suggests the issue is in the batch processing logic, not the core simplex finding algorithm

5. VERTEX VERIFICATION:
   - Confirmed points 6 and 7 ARE vertices in the triangulation
   - No points are marked as coplanar (tri.coplanar is empty)
   - All 8 input points appear as vertices in the simplices

CONCLUSION: The bug is real and reproducible. The default algorithm incorrectly reports some vertices as being outside the triangulation when queried in batch mode, while the same vertices are found correctly when queried individually or with bruteforce=True.
## Documentation Findings for scipy.cluster.vq.whiten

### Official Documentation
The official SciPy documentation for scipy.cluster.vq.whiten states that the function:
- "Normalize a group of observations on a per feature basis"
- Rescales each feature dimension to have unit variance
- Returns an ndarray containing the input observations scaled by each column's standard deviation
- Is useful as a preprocessing step before k-means clustering

The online documentation does NOT specifically mention what happens with columns that have zero standard deviation.

### Source Code Documentation
The actual implementation in scipy/cluster/vq.py (lines 143-146) includes:
- A warning message that states: "Some columns have standard deviation zero. The values of these columns will not change."
- This warning is only shown when check_finite=True AND there are columns with exactly zero standard deviation

### Implementation Details
The code at line 141 checks for zero standard deviation using exact equality:
```python
zero_std_mask = std_dev == 0
```

When a column has std_dev == 0, the code at line 142 sets that std_dev to 1.0:
```python
std_dev = xpx.at(std_dev, zero_std_mask).set(1.0)
```

This ensures that division by zero doesn't occur, and the values remain unchanged (since dividing by 1.0 preserves the original value).

### Key Documentation Point
The function explicitly promises in its warning message that columns with zero standard deviation "will not change." This is a documented behavior of the function, even though it only appears as a runtime warning message rather than in the main docstring.

### What the Documentation Does NOT Say
The documentation does not specify:
- How "zero standard deviation" is determined (exact equality vs. tolerance)
- What happens with columns that have extremely small but non-zero standard deviations due to floating-point precision
- Any tolerance or epsilon value for determining if a column is constant
- How the function should handle numerical precision issues in the standard deviation calculation
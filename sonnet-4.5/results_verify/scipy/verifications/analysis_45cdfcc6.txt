BUG REPORT CATEGORIZATION ANALYSIS
===================================

I'll analyze this bug report against each possible categorization:

1. INVALID (Bug report is incorrect):
   WHY IT MIGHT BE INVALID:
   - Single-element FFTs are an edge case that might be considered trivial
   - The workaround exists (passing n=1 explicitly)

   WHY IT'S NOT INVALID:
   - The documentation promises irfft(rfft(x), len(x)) == x without size restrictions
   - rfft() accepts single-element arrays and returns valid output
   - The mathematical operation is well-defined (1-point DFT is valid)
   - The error message is misleading ("Invalid number of data points (0)")
   - The crash violates the documented round-trip guarantee

2. WONTFIX (Trivial/unimportant bug):
   WHY IT MIGHT BE WONTFIX:
   - Single-element FFTs are rare in practice
   - A workaround exists (passing n=1)
   - Could be considered an obscure edge case

   WHY IT'S NOT WONTFIX:
   - It's a clear violation of documented behavior
   - The fix is simple and non-invasive
   - It breaks the fundamental property of FFT round-tripping
   - The error occurs on valid mathematical operations
   - SciPy aims for mathematical correctness

3. FEATURE_REQUEST (New functionality):
   WHY IT MIGHT BE FEATURE_REQUEST:
   - Could argue that single-element support is a new feature

   WHY IT'S NOT FEATURE_REQUEST:
   - The documentation already promises this should work
   - rfft() already supports single-element arrays
   - This is fixing broken functionality, not adding new features
   - The mathematical operation is standard and well-defined

4. DOCUMENTATION_FIX (Documentation issue):
   WHY IT MIGHT BE DOCUMENTATION_FIX:
   - Could update docs to say single-element arrays aren't supported

   WHY IT'S NOT DOCUMENTATION_FIX:
   - The code is wrong, not the documentation
   - The documentation correctly describes the intended behavior
   - Changing docs would break the promise of round-trip compatibility
   - The fix to the code is straightforward

5. BUG (Valid bug report):
   WHY IT IS A BUG:
   - Violates documented guarantee: irfft(rfft(x), len(x)) == x
   - rfft() accepts single-element arrays but irfft() crashes on the output
   - The error is in the code logic (calculates n=0 incorrectly)
   - The mathematical operation is valid (1-point DFT/IDFT)
   - The fix is simple and addresses the root cause
   - The error message is misleading
   - Breaking symmetry between forward and inverse transforms
   - The workaround (n=1) proves the operation should work

ADDITIONAL CONSIDERATIONS:
- This is a math/scientific computing library where correctness matters
- The bug breaks a fundamental property of FFT transforms (invertibility)
- The proposed fix is minimal and targeted
- Similar libraries (NumPy) likely handle this case correctly
- Property-based testing revealed this issue, showing it affects correctness

CONCLUSION:
This is a legitimate BUG. The code fails to handle a mathematically valid case that
the documentation promises should work. The failure violates the fundamental round-trip
property of FFT transforms.
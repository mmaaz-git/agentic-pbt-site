Documentation Analysis
======================

1. Official scipy.io.savemat Documentation:

   The function docstring explicitly states:

   "Note that if this dict has a key starting with `_` or a sub-dict has a key
   starting with `_` or a digit, these key's items will not be saved in the
   mat file and `MatWriteWarning` will be issued."

   This documentation is clear and unambiguous:
   - Keys starting with underscore (_) should NOT be saved
   - Keys starting with a digit (0-9) should NOT be saved
   - A MatWriteWarning SHOULD be issued when such keys are encountered
   - This applies to BOTH top-level dictionary keys AND sub-dict keys

2. MATLAB Variable Naming Conventions:

   MATLAB has strict variable naming rules:
   - Variable names must start with a letter
   - Cannot start with a digit or underscore
   - This is a fundamental MATLAB restriction, not a scipy choice

   The scipy documentation correctly reflects this MATLAB requirement.

3. Consistency in Documentation:

   The documentation doesn't distinguish between top-level keys and struct field keys.
   It states "this dict has a key" OR "a sub-dict has a key", implying both levels
   should follow the same rules.

4. Implementation vs Documentation:

   The current implementation:
   - Correctly handles struct fields (line 486): checks for both _ and digits
   - Incorrectly handles top-level keys (line 884): only checks for _

   This is a clear case where the implementation does not match the documented behavior.

5. User Expectations:

   Users reading the documentation would reasonably expect:
   - Consistent behavior between top-level and nested keys
   - Warnings when invalid keys are encountered
   - Invalid keys to be silently dropped (with warning)

   The current behavior violates all three expectations for digit-prefixed top-level keys.

Conclusion: The documentation is correct and clear. The implementation fails to follow the documented behavior for top-level keys starting with digits.
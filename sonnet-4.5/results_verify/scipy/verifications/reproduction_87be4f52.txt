BUG REPRODUCTION REPORT
======================

1. REPRODUCTION STATUS: CONFIRMED

The bug report accurately describes a segmentation fault that occurs when calling
Rotation.mean() with a list containing a single Rotation object.

2. TEST RESULTS:

A) Basic Reproduction Test:
   - Code: Rotation.mean([r]) where r is a single Rotation object
   - Expected: Either return the rotation itself or raise a clear error
   - Actual: SEGMENTATION FAULT - Python interpreter crashes immediately
   - Result: BUG CONFIRMED

B) Hypothesis Property Test:
   - The provided Hypothesis test also crashes with segmentation fault
   - Even the simple case with q = [0.0, 0.0, 0.0, 1.0] causes immediate crash
   - Result: BUG CONFIRMED

C) Additional Testing Performed:
   - Rotation.mean([r1, r2]) with 2 rotations: SEGFAULT
   - Rotation.mean(single_rotation) without list: SEGFAULT
   - Multiple rotations as single object r.mean(): WORKS CORRECTLY
   - This shows the mean() method works when called on a Rotation instance
     containing multiple rotations, but crashes when used incorrectly

3. NATURE OF THE BUG:

The segmentation fault indicates a memory safety issue in the Cython/C extension code.
The crash happens immediately upon calling the method, suggesting the issue is in
parameter validation or initial processing of the input.

4. IMPACT:

- Severity: HIGH - Causes complete Python interpreter crash
- Reliability: 100% reproducible
- Data Loss Risk: Yes - unsaved work in Python session is lost

5. ROOT CAUSE:

Based on testing, the issue appears to be that Rotation.mean() is being called
incorrectly. The documentation and working examples show that mean() is an
INSTANCE METHOD meant to be called on a Rotation object containing multiple
rotations, not a CLASS METHOD accepting a list of Rotation objects.

However, the fact that it causes a segmentation fault rather than a proper
TypeError or AttributeError is the actual bug - the code should handle this
gracefully with proper error messages rather than crashing.
DOCUMENTATION ANALYSIS
======================

## 1. scipy.datasets.face() Official Documentation

The official documentation for scipy.datasets.face() from the SciPy website states:
- Parameters: `gray` (bool, optional) - If True, returns 8-bit grayscale image; if False (default), returns a color image
- Returns: ndarray representing an image of a raccoon face
- The documentation does NOT specify:
  - Which grayscale conversion formula is used
  - What weights are applied for RGB to grayscale conversion
  - Whether it follows any specific standard (ITU-R BT.709, BT.601, etc.)
  - Whether luminance should be preserved

The documentation is minimal and does not provide implementation details about the grayscale conversion algorithm.

## 2. Standard Grayscale Conversion Formulas

### ITU-R BT.709 (HDTV/Modern Standard):
- Formula: Y = 0.2126 × R + 0.7152 × G + 0.0722 × B
- Sum of weights: 0.2126 + 0.7152 + 0.0722 = 1.0000
- Used for: HDTV, modern computer graphics applications

### ITU-R BT.601 (SDTV/Legacy Standard):
- Formula: Y = 0.299 × R + 0.587 × G + 0.114 × B
- Sum of weights: 0.299 + 0.587 + 0.114 = 1.000
- Used for: Standard-definition television, traditional image processing

### Key Properties of Standard Conversions:
1. All standard RGB to grayscale conversion formulas have weights that sum to exactly 1.0
2. This ensures luminance preservation: pure white (255, 255, 255) converts to pure white (255)
3. The weights are derived from human spectral perception
4. These are internationally recognized standards (ITU = International Telecommunication Union)

## 3. Current scipy Implementation vs. Standards

scipy's current weights: [0.21, 0.71, 0.07]
- Sum: 0.99
- Does NOT match ITU-R BT.709: [0.2126, 0.7152, 0.0722]
- Does NOT match ITU-R BT.601: [0.299, 0.587, 0.114]
- Appears to be an approximation/typo of BT.709 weights

## 4. Documentation Implications

1. **Undocumented Behavior**: The documentation does not specify the grayscale conversion method, leaving it as implementation detail.

2. **Reasonable User Expectations**: While not explicitly documented, users would reasonably expect:
   - Standard grayscale conversion that preserves luminance
   - Consistency with established image processing standards
   - Pure white remaining pure white after conversion

3. **Common Practice**: All major image processing libraries (OpenCV, PIL/Pillow, scikit-image) use weights that sum to 1.0, following either BT.709 or BT.601 standards.

## Conclusion

The documentation does not explicitly promise standard grayscale conversion, but:
- The current implementation violates fundamental properties of grayscale conversion
- It does not follow any recognized standard
- The weights appear to be a typo/approximation of the BT.709 standard
- The behavior is counter to reasonable expectations and common practice in image processing
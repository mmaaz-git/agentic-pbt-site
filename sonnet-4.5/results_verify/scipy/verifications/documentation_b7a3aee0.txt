## Documentation Analysis for RotationSpline

### Official Documentation Review

From the scipy documentation at https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.RotationSpline.html:

1. **Purpose**: The RotationSpline class "Interpolate rotations with continuous angular rate and acceleration"

2. **Key Properties Stated**:
   - The rotation vectors between consecutive orientations are cubic functions of time
   - Provides continuous angular rate and acceleration
   - Based on the academic paper "Smooth Attitude Interpolation"

3. **Control Point Behavior**:
   - The documentation does NOT explicitly state "passes through control points"
   - However, it describes the `times` parameter as "Times of the known rotations"
   - The `rotations` parameter is described as "Rotations to perform the interpolation between"
   - The example shows evaluation at original control times

4. **Requirements on Times**:
   - "At least 2 times must be specified"
   - Times must match the number of rotations
   - No explicit restriction on time spacing uniformity
   - No warning about numerical issues with non-uniform spacing

### Scipy's Test Suite Evidence

The test file test_rotation_spline.py contains test_spline_properties() which explicitly verifies:
```python
assert_allclose(spline(times).as_euler('xyz', degrees=True), angles)
```

This test directly checks that the spline evaluates to the exact control rotations at control times.

### Mathematical Expectation

For any interpolation method (linear, cubic, spline, etc.), the fundamental property is that the interpolating function must pass through all control points. This is the definition of interpolation versus approximation. The scipy tests explicitly verify this property.

### Documentation Gap

The documentation does not:
- Explicitly state the fundamental interpolation property
- Warn about potential numerical instabilities with highly non-uniform time spacing
- Provide guidance on acceptable time spacing patterns

### Conclusion

While the documentation doesn't explicitly state "passes through control points," this is:
1. A fundamental property of interpolation that doesn't need explicit stating
2. Explicitly tested in scipy's own test suite
3. Implied by describing times/rotations as "known" points "to interpolate between"

The bug represents a failure to meet the implicit and tested contract of the RotationSpline class.
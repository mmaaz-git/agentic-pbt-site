TRIAGE ANALYSIS
===============

Evaluating against each possible categorization:

1. INVALID (Bug report is incorrect)
   Arguments AGAINST:
   - The bug is real and reproducible
   - The code returns objectively wrong results (96M SSR for exact data)
   - The optimizer CAN find the solution with proper initial estimates
   - The comment "# Eh." suggests developers knew this was incomplete
   Arguments FOR:
   - None. The bug clearly exists.

2. WONTFIX (Trivial/uninteresting)
   Arguments AGAINST:
   - This affects core scientific computing functionality
   - Exponential fitting is common in many scientific domains
   - Silent failure with huge errors is dangerous for research/production
   - The fix is straightforward (improve _exp_est function)
   Arguments FOR:
   - Users can work around by providing initial parameters
   - Only affects certain parameter ranges
   Assessment: NOT appropriate - this is a significant issue

3. FEATURE_REQUEST (Not currently supported)
   Arguments AGAINST:
   - The model claims to support automatic parameter estimation
   - Documentation example shows it working without initial parameters
   - The infrastructure exists (estimate function), just poorly implemented
   - Other models (linear, polynomial) have working estimation
   Arguments FOR:
   - Could argue "good" automatic estimation was never promised
   Assessment: NOT appropriate - the feature exists but is broken

4. DOCUMENTATION_FIX (Docs are wrong)
   Arguments AGAINST:
   - The documentation example is technically correct (it works)
   - The model definition and math are accurate
   Arguments FOR:
   - Documentation should warn about poor default estimation
   - Should advise users to provide initial parameters
   - Example gives false confidence by happening to work
   Assessment: Partially applicable but the code is the real problem

5. BUG (Valid bug report)
   Arguments FOR:
   - Function returns wildly incorrect results for valid inputs
   - The estimation function is clearly a placeholder ("# Eh.")
   - Fails silently, giving appearance of success
   - Affects reasonable use cases (not edge cases)
   - The optimizer works fine with proper initial values
   - Fix is straightforward and would improve functionality
   Arguments AGAINST:
   - Users can work around with initial parameters
   - Some parameter combinations happen to work

CONCLUSION:
This is clearly a BUG. The exponential model's automatic parameter estimation
is fundamentally broken, returning hardcoded [1., 1.] regardless of input data.
This causes the optimizer to converge to local minima with massive errors
(96M SSR for exact exponential data). The comment "# Eh." confirms this is
known incomplete code, not intentional behavior. The issue affects core
functionality that users reasonably expect to work based on the documentation.
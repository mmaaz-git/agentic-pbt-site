Bug Report Triage Analysis
==========================

Evaluation Against Each Category:
---------------------------------

1. INVALID (Incorrect bug report)
   Why it might be INVALID:
   - User might be misusing the API by combining incompatible settings
   - job=1 may not be intended for use with explicit models

   Why it's NOT INVALID:
   - The API accepts job=1 as a parameter without any warnings
   - Documentation doesn't state this combination is invalid
   - A segfault is NEVER acceptable behavior for a Python library
   - Even invalid input should raise a Python exception, not crash the interpreter

2. WONTFIX (Trivial/uninteresting)
   Why it might be WONTFIX:
   - Could be considered an edge case of incorrect API usage
   - Users should use set_job() method instead of raw job values

   Why it's NOT WONTFIX:
   - Segmentation faults are critical security/stability issues
   - This is not an obscure edge case - job is a documented parameter
   - Crashes can cause data loss and system instability
   - The fix is straightforward (input validation)

3. FEATURE_REQUEST (New functionality)
   Why it might be FEATURE_REQUEST:
   - Could request adding support for implicit ODR with explicit models
   - Could request auto-conversion between model types

   Why it's NOT FEATURE_REQUEST:
   - The issue is about preventing crashes, not adding new features
   - The current behavior is a bug, not a missing feature
   - Basic input validation is not a "feature"

4. DOCUMENTATION_FIX (Documentation issue)
   Why it might be DOCUMENTATION_FIX:
   - Documentation doesn't warn about this incompatibility
   - Could be fixed by documenting the constraint

   Why it's NOT ONLY DOCUMENTATION_FIX:
   - The code still crashes - documentation alone won't prevent segfaults
   - Python libraries should never segfault on any input
   - This requires both code fix AND documentation update

5. BUG (Valid bug report)
   Why it IS a BUG:
   - Causes Python interpreter to crash with segmentation fault
   - No input validation prevents the crash
   - API accepts the parameter but fails catastrophically
   - Violates Python's principle of raising exceptions for errors
   - Security risk - segfaults can be exploited
   - Data loss risk - crashes lose unsaved work
   - The proposed fix (input validation) is reasonable and necessary

Critical Factors:
----------------
1. SEGMENTATION FAULTS are always bugs in Python libraries
2. The scipy.odr module accepts job=1 without validation
3. The crash is reproducible and consistent
4. The fix is straightforward: validate model/fit_type compatibility
5. This violates the principle that Python code should raise exceptions, not crash

Severity Assessment:
-------------------
- High severity due to interpreter crash
- Affects data integrity and system stability
- Could be triggered accidentally by users exploring parameters
- No workaround except avoiding job=1 entirely

Conclusion:
-----------
This is clearly a BUG. Python libraries must NEVER cause segmentation faults for any input.
Even if the input combination is invalid, the library should raise a ValueError or similar
exception with a clear error message, not crash the Python interpreter. The code needs
input validation to check model/fit_type compatibility before calling the Fortran code.
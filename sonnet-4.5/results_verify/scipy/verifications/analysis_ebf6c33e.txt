# Bug Report Analysis

## Analysis for Each Possible Triage Category

### Could this be INVALID?
**Arguments Against INVALID:**
- The bug is real and reproducible
- There is a measurable performance impact (12,900x slower)
- The expectation that copy() preserves object state is reasonable
- The data after copy is identical, but the metadata is inconsistent

**Arguments For INVALID:**
- has_canonical_format is an undocumented internal attribute
- The documentation doesn't explicitly promise to preserve all internal state
- The copy still functions correctly from a data perspective

**Conclusion**: Not INVALID - the bug is real and affects performance significantly.

### Could this be WONTFIX?
**Arguments For WONTFIX:**
- It's an internal optimization flag, not a public API
- The attribute is undocumented
- Users can work around by calling sum_duplicates() again
- The matrix still works correctly, just slower

**Arguments Against WONTFIX:**
- The performance impact is severe (12,900x slowdown)
- This affects real-world usage patterns
- The fix is trivial (one line of code)
- It violates reasonable expectations about copy()

**Conclusion**: Not WONTFIX - the performance impact is too significant to ignore.

### Could this be FEATURE_REQUEST?
**Arguments For FEATURE_REQUEST:**
- Preserving optimization flags could be seen as a new feature
- The current behavior isn't explicitly wrong per documentation
- This is asking for enhanced copy semantics

**Arguments Against FEATURE_REQUEST:**
- This is fixing broken behavior, not adding new functionality
- copy() should already preserve all state
- The user isn't asking for new capabilities

**Conclusion**: Not FEATURE_REQUEST - this is fixing existing behavior, not adding features.

### Could this be DOCUMENTATION_FIX?
**Arguments For DOCUMENTATION_FIX:**
- has_canonical_format is undocumented
- The copy() semantics are underspecified
- Could document that copy() doesn't preserve optimization flags

**Arguments Against DOCUMENTATION_FIX:**
- The code behavior is objectively wrong
- Documenting bad behavior doesn't make it correct
- The performance impact makes this a real bug, not just a documentation issue

**Conclusion**: Not DOCUMENTATION_FIX - the code needs fixing, not the documentation.

### Should this be BUG?
**Strong Arguments For BUG:**
1. **Performance Regression**: Copying a matrix makes it 12,900x slower for subsequent operations
2. **State Inconsistency**: Two identical matrices have different internal state
3. **Violates Expectations**: copy() should create an identical object
4. **Easy Fix**: The solution is trivial and low-risk
5. **Real Impact**: This affects actual use cases where matrices are copied and then used
6. **Similar Patterns**: The code may already preserve has_sorted_indices (mentioned in bug report)

**No Strong Arguments Against BUG**

## Final Assessment

This is clearly a **BUG**. While has_canonical_format is an undocumented attribute, it has real performance implications. The copy() method creates a matrix with identical data but loses critical optimization state, causing severe performance degradation. The principle that copy() should preserve object state is fundamental, and the 12,900x performance penalty makes this a legitimate bug worth fixing.

The fix is simple, safe, and aligns with user expectations. This should be filed as a BUG.
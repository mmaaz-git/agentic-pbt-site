## Reproduction Analysis

I have successfully reproduced the bug described in the report. The issue is confirmed as follows:

### Hypothesis Test
The property-based test using Hypothesis immediately fails with the exact input mentioned in the bug report:
- Input: `u=array([False])`, `v=array([False])`
- The test fails because `math.isclose(d_uv, d_vu)` returns False when both d_uv and d_vu are NaN
- This confirms the symmetry property violation

### Direct Reproduction
Running the provided reproduction code confirms:
1. `dice([False], [False])` returns `nan` with a RuntimeWarning about "invalid value encountered in divide"
2. For comparison, `jaccard([False], [False])` correctly returns `0.0`
3. The NaN result breaks equality checking: `dice(u, v) == dice(v, u)` returns False (even though both are NaN)
4. The issue persists with larger all-False arrays: `dice([False, False, False], [False, False, False])` also returns NaN

### Root Cause
The issue occurs in the Dice formula implementation when both input arrays contain only False values:
- The formula calculates `(c_TF + c_FT) / (2*c_TT + c_TF + c_FT)`
- When all values are False: c_TT=0, c_TF=0, c_FT=0
- This results in 0/0, which produces NaN in NumPy

The bug report's description is accurate and the issue is reproducible exactly as described.
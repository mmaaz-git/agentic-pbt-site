TRIAGE ANALYSIS
===============

## Consideration for Each Category

### BUG (Valid Bug Report)
**Why it IS a bug:**
- The function explicitly documents that "The result may be 1-dimensional if t is a float" (line 71)
- This is a clear API contract that is violated when start == end
- The inconsistent behavior occurs for the same input types (scalar t)
- The normal code path correctly returns 1D arrays for scalar t (lines 231-234)
- This is not an edge case but a straightforward use case (interpolating when points are the same)
- The fix is simple and makes the behavior consistent

**Why it might NOT be a bug:**
- None - the documentation is explicit about expected behavior

### INVALID
**Why it might be INVALID:**
- It is NOT invalid because the documentation explicitly promises 1D output for scalar t
- The behavior is clearly specified, not undefined

**Why it is NOT INVALID:**
- The documentation explicitly states the expected behavior
- This is not a case of unspecified behavior

### WONTFIX
**Why it might be WONTFIX:**
- The case where start == end is somewhat degenerate (no interpolation needed)
- Some might argue returning the same point repeatedly is edge behavior

**Why it is NOT WONTFIX:**
- This is not an obscure edge case - checking if two points are the same is common
- The inconsistency affects basic API usage with scalar parameters
- The fix is trivial and improves API consistency
- This could break user code expecting consistent shapes

### DOCUMENTATION_FIX
**Why it might be DOCUMENTATION_FIX:**
- One could argue the docs should specify behavior when start == end

**Why it is NOT DOCUMENTATION_FIX:**
- The documentation already clearly states scalar t returns 1D arrays
- The code is wrong, not the documentation
- Changing docs to say "except when start == end" would be worse API design

### FEATURE_REQUEST
**Why it might be FEATURE_REQUEST:**
- None - this is fixing existing broken behavior, not adding new functionality

**Why it is NOT FEATURE_REQUEST:**
- The expected behavior is already documented
- This is a bug fix, not a new feature

## Severity Assessment

**Medium Severity** because:
- Clear violation of documented API contract
- Causes inconsistent return shapes for identical input types
- Could break downstream code expecting consistent shapes
- Not a crash or data corruption, but a shape inconsistency
- Has a simple, low-risk fix

## Recommendation

This should be categorized as **BUG**. The function violates its explicit documentation promise that scalar t values return 1-dimensional arrays. The bug occurs in a simple, common use case (when start and end points are identical) and produces inconsistent API behavior that could break user code.
## Reproduction of Bug Report

I have successfully reproduced the bug described in the report. Here are my findings:

### 1. Hypothesis Test Reproduction

The Hypothesis property-based test fails as expected when run. The test generates arrays of all False values and expects the dice dissimilarity to be 0.0, but instead it returns NaN.

```
Test failed with: AssertionError
Falsifying example: test_dice_all_zeros(n=1)
```

The test fails even for the simplest case where n=1, meaning arrays of size 1 with value [False].

### 2. Simple Example Reproduction

Running the simple example code confirms the bug:

```python
x = np.array([False, False, False])
y = np.array([False, False, False])
distance.dice(x, y)
```

Output:
- Returns: nan
- Expected: 0.0 (distance between identical arrays should be 0)
- Runtime warning: "invalid value encountered in divide" at line 1503

### 3. Comparison with Similar Functions

I verified that other similar boolean distance functions handle this case correctly:
- `jaccard([False, False, False], [False, False, False])` returns 0.0
- `hamming([False, False, False], [False, False, False])` returns 0.0
- `rogerstanimoto([False, False, False], [False, False, False])` returns 0.0

Only `dice` returns NaN for this case.

### 4. Root Cause

Looking at the source code (line 1503 in distance.py):
```python
return float((ntf + nft) / np.array(2.0 * ntt + ntf + nft))
```

When both arrays contain all False values:
- ntt (True-True count) = 0
- ntf (True-False count) = 0
- nft (False-True count) = 0

This results in 0/0, which produces NaN.

### Conclusion

The bug is confirmed and reproducible. The `dice` function returns NaN when computing the dissimilarity between two all-False boolean arrays, while it should return 0.0 for identical arrays (as all other similar distance functions do).
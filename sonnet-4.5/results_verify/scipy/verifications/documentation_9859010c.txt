## Documentation Analysis

### Official Documentation Review

I reviewed the scipy documentation for `Rotation.reduce()` method. The documentation states:

1. **Method Purpose**: "Reduce this rotation with the provided rotation groups" - transforms rotation `p` to `q = l * p * r` where `l` and `r` are chosen to minimize rotation magnitude.

2. **Parameter Types**:
   - `left`: "Rotation instance, optional"
   - `right`: "Rotation instance, optional"
   - Both default to None (identity rotation)

3. **Critical Finding**: The documentation says both `left` and `right` should be "Rotation instance" without specifying whether single or array rotations are supported differently.

### Key Documentation Observations:

1. **No distinction specified**: The documentation does NOT distinguish between single rotations and rotation arrays for the `left` and `right` parameters. It simply states "Rotation instance" which should logically include both types.

2. **Rotation class design**: In scipy, a Rotation object can be either:
   - A single rotation (`.single == True`, quaternion shape `(4,)`)
   - An array of rotations (`.single == False`, quaternion shape `(N, 4)`)
   Both are valid "Rotation instances" throughout the scipy.spatial.transform module.

3. **Consistency with other methods**: Other Rotation methods (like multiplication `*`) work seamlessly with both single and array rotations in any combination. This sets a precedent for expected behavior.

4. **No warnings or limitations**: The documentation contains no warnings that single rotations must be wrapped in arrays, nor any mention of this limitation.

### Documentation Implications:

Since the documentation:
- States parameters should be "Rotation instance" (which includes both single and array rotations)
- Does not specify any restrictions on mixing single/array types
- Does not warn about the need to wrap single rotations

Users would reasonably expect that `reduce()` should handle all valid Rotation instances consistently, including the single-single combination that currently fails. The current behavior violates the documented interface and the principle of least surprise established by other methods in the same class.
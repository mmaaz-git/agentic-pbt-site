DOCUMENTATION FINDINGS FOR scipy.differentiate.derivative

After reviewing the official scipy documentation and source code, here are my findings regarding the initial_step parameter:

1. OFFICIAL DOCUMENTATION DESCRIPTION:
   - Parameter name: initial_step
   - Type: float array_like
   - Default: 0.5
   - Description: "The (absolute) initial step size for the finite difference derivative approximation."

2. KEY DOCUMENTATION POINTS:
   - The documentation uses the term "(absolute)" in parentheses when describing initial_step
   - There is NO explicit statement that initial_step must be positive
   - There is NO explicit statement that initial_step cannot be zero or negative
   - The documentation doesn't specify what happens with invalid values

3. COMPARISON WITH OTHER PARAMETERS:
   - For step_factor, the documentation mentions: "The factor by which the step size is *reduced* in each iteration"
   - The input validation code checks that step_factor is non-negative (line 27-33 of _differentiate.py)
   - However, initial_step is NOT included in this validation check

4. IMPLEMENTATION DETAILS FROM SOURCE CODE:
   - The validation function _derivative_iv does NOT validate initial_step for positivity
   - Lines 44-47 just convert it to array and broadcast it
   - In the main algorithm (line 408), invalid initial_step values (<=0) are silently converted to NaN:
     `h0 = xpx.at(h0)[h0 <= 0].set(xp.nan)`
   - This causes the algorithm to fail with status -3 (non-finite value encountered)

5. USAGE EXAMPLES IN DOCUMENTATION:
   - All examples use positive values (default 0.5 or other positive numbers)
   - No examples demonstrate handling of zero or negative values

6. RELATED FUNCTIONS:
   - jacobian and hessian functions have similar initial_step parameters with similar descriptions
   - They likely have the same behavior with non-positive values

CONCLUSION:
The documentation does NOT explicitly state that initial_step must be positive. The word "(absolute)" in parentheses could be interpreted as a hint that it should be positive (since absolute values are non-negative), but this is not explicitly stated as a requirement. The documentation does not specify what happens when invalid values are provided.
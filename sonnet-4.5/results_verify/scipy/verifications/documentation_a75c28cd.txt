DOCUMENTATION FINDINGS FOR scipy.special.bdtri

Official Documentation from SciPy:
===================================

bdtri function:
- Description: "Inverse function to bdtr with respect to p. Finds the event probability p such that the sum of the terms 0 through k of the binomial probability density is equal to the given cumulative probability y."
- Parameters: k (number of successes, rounded down), n (number of events), y (cumulative probability)
- Returns: The event probability p such that bdtr(⌊k⌋, n, p) = y
- Implementation: Uses inverse beta integral function with relation: 1 - p = betaincinv(n - k, k + 1, y)

bdtr function:
- Description: "Binomial distribution cumulative distribution function. Sum of the terms 0 through floor(k) of the Binomial probability density."
- Mathematical formula: bdtr(k, n, p) = ∑(j=0 to ⌊k⌋) (n choose j) * p^j * (1-p)^(n-j)
- Parameters: k (number of successes, rounded down), n (number of events), p (probability of success)
- Returns: Probability of floor(k) or fewer successes in n independent events

Key Documentation Gaps:
=======================

1. NO CONSTRAINT DOCUMENTATION: The documentation for bdtri does NOT specify that k must be less than n. There is no mention of what happens when k >= n.

2. NO ERROR BEHAVIOR DOCUMENTATION: The documentation does not specify what the function returns when the inverse is mathematically undefined or non-unique.

3. NO EDGE CASE DOCUMENTATION: The documentation does not discuss the behavior when:
   - k = n (entire distribution summed, always equals 1.0)
   - k > n (mathematically undefined scenario)
   - y = 1.0 with k < n vs k >= n

4. INVERSE RELATIONSHIP: While the documentation states bdtri is the "inverse function to bdtr with respect to p", it doesn't clarify what happens when this inverse is non-unique or undefined.

Mathematical Context Not in Documentation:
==========================================

The binomial CDF bdtr(k, n, p) sums probabilities from 0 to k. When k >= n, this means summing all possible outcomes (0 through n), which mathematically MUST equal 1.0 regardless of the value of p. This makes the inverse problem ill-defined because:
- bdtr(n, n, 0.1) = 1.0
- bdtr(n, n, 0.5) = 1.0
- bdtr(n, n, 0.9) = 1.0

Therefore, bdtri(n, n, 1.0) has infinitely many valid solutions (any p in [0,1]), making the inverse undefined.

Conclusion:
===========
The documentation does NOT specify the k < n constraint that is mathematically necessary for bdtri to have a unique solution. The documentation also does not specify what the function should return when this constraint is violated.
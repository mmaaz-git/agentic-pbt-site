DOCUMENTATION FINDINGS FOR scipy.io.matlab.savemat

## SciPy Documentation Review

The official SciPy documentation for savemat (https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html) states:

1. Variable name restrictions mentioned:
   - Keys starting with an underscore (_) will NOT be saved and will issue a warning
   - Keys starting with a digit will NOT be saved
   - Maximum field name length is 31 characters (or 63 for MATLAB 7.6+)

2. NO mention of character encoding restrictions:
   - Documentation does not state that variable names must be ASCII or latin1-encodable
   - No warning about Unicode characters being unsupported
   - No mention of any character set limitations for dictionary keys

## MATLAB Documentation Review

From MATLAB's official documentation on variable names:

1. MATLAB variable naming rules:
   - Must start with a letter
   - Can contain letters, digits, and underscores
   - Case-sensitive
   - Maximum length determined by namelengthmax

2. Character encoding support for variable names:
   - Based on web search results and MATLAB community discussions:
   - MATLAB variable names are restricted to ASCII characters only
   - MATLAB does NOT support Unicode variable names (confirmed by multiple MATLAB Central discussions)
   - While MATLAB internally uses UTF-16 for string storage, variable names must be ASCII
   - No timeline exists for Unicode variable name support in MATLAB

## Implementation Review

Looking at the SciPy source code (_mio5.py):
- Line 896: Uses `name.encode('latin1')` without any error handling
- Line 901: Also uses `name.encode('latin1')` for the non-compressed path
- There IS validation for underscore-prefixed names with a helpful warning
- There is NO validation for encoding issues

## Key Documentation Gap

The SciPy documentation FAILS to mention that variable names must be encodable in latin1. This is a significant omission because:
1. Python 3 allows Unicode identifiers per PEP 3131
2. Users can legitimately create dictionaries with Unicode keys in Python
3. There's no way for users to know this limitation exists without encountering the error
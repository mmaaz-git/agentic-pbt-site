DOCUMENTATION FINDINGS FOR scipy.io.wavfile

Based on the official scipy documentation, here are the key findings:

1. scipy.io.wavfile.read() Documentation:
   - EXPLICITLY states: "Data is 1-D for 1-channel WAV, or 2-D of shape (Nsamples, Nchannels) otherwise"
   - This is clearly documented behavior, not an oversight
   - For multi-channel audio: Returns 2-D array with shape (Nsamples, Nchannels)
   - For single-channel audio: Returns 1-D array

2. scipy.io.wavfile.write() Documentation:
   - Accepts both 1-D and 2-D numpy arrays as input
   - For multi-channel audio: Expects 2-D array with shape (Nsamples, Nchannels)
   - For single-channel audio: Can accept either 1-D array OR 2-D array with shape (n, 1)

3. Round-Trip Behavior:
   - The documentation does NOT promise perfect round-trip shape preservation
   - The documentation does NOT state that write() and read() are symmetric in their shape handling
   - There is no explicit contract about preserving the exact input shape through a write-read cycle

4. Key Asymmetry:
   - write() is flexible: accepts both (n,) and (n, 1) for single-channel
   - read() is strict: always returns (n,) for single-channel
   - This asymmetry is DOCUMENTED behavior, not a bug

5. WAV File Format Context:
   - WAV files internally store channel count as metadata
   - Single-channel WAV files are fundamentally different from multi-channel files in the format
   - The choice to return 1-D arrays for single-channel is consistent with the underlying file format

CONCLUSION:
The behavior described in the bug report is EXPLICITLY DOCUMENTED. The documentation clearly states that read() returns 1-D arrays for single-channel audio and 2-D arrays for multi-channel audio. This is not an undocumented behavior or ambiguity - it is the specified behavior of the function.
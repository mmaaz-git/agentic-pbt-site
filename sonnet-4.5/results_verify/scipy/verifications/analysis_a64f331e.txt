Bug Triage Analysis for scipy.ndimage.sobel
============================================

## INVALID Considerations

**Why it might be INVALID:**
The documentation for scipy.ndimage.sobel does not explicitly state that constant images should return zero gradients. The function documentation only says it "calculates a Sobel filter" and "emphasizes edges" without specifying the exact mathematical behavior for edge cases like constant images with matching cval. One could argue that the current behavior is simply an implementation choice that wasn't explicitly documented to work differently, and users shouldn't assume mathematical purity in numerical implementations.

**Why it might not be INVALID:**
This is clearly not INVALID because the fundamental mathematical property of gradients is universally understood - the gradient of a constant function is zero. This is not an edge case or undefined behavior; it's a core mathematical truth. The manual convolution test proves that the correct mathematical result is achievable and expected. The fact that other modes (nearest, reflect, mirror, wrap) all return zero for constant images shows there's an inconsistency specific to mode='constant'.

## WONTFIX Considerations

**Why it might be WONTFIX:**
The bug only affects boundary pixels when using mode='constant' with a non-zero cval that matches the image values - a fairly specific scenario. Users can easily work around this by using mode='nearest' or other modes that work correctly. The issue has likely existed for a long time without causing major problems, suggesting it's not critical. Fixing it might break backward compatibility for code that depends on the current behavior.

**Why it might not be WONTFIX:**
This is a clear violation of mathematical correctness that affects a fundamental image processing operation. The Sobel operator is widely used for edge detection, and incorrect results on constant regions could lead to false edge detection in real applications. The bug affects all non-zero constant values, not just obscure edge cases. The workaround requires users to know about the bug and change their code, which shouldn't be necessary for mathematically well-defined operations.

## DOCUMENTATION_FIX Considerations

**Why it might be DOCUMENTATION_FIX:**
The documentation doesn't explicitly state how sobel should behave on constant images, nor does it clarify the interaction between mode='constant' and cval when they match image values. One could argue that documenting this as a "known limitation" or "implementation detail" would be sufficient. The documentation could be updated to warn users about this specific case and suggest using alternative modes.

**Why it might not be DOCUMENTATION_FIX:**
This is not a documentation issue because the mathematical behavior is wrong, not just poorly documented. No reasonable documentation would say "the gradient of a constant function equals the constant value at boundaries" - that's mathematically nonsensical. The issue is in the code implementation, not in how it's described. Documenting incorrect behavior doesn't make it correct.

## FEATURE_REQUEST Considerations

**Why it might be FEATURE_REQUEST:**
One could argue that "correct mathematical behavior for constant images with mode='constant'" is a new feature that hasn't been implemented yet. The current implementation might be considered the "basic" version, and proper handling of this edge case could be seen as an enhancement. Users requesting mathematically pure implementations could be asking for something beyond the original scope.

**Why it might not be FEATURE_REQUEST:**
This is definitely not a feature request because correct gradient computation is not a new feature - it's the core functionality of the Sobel operator. The function already claims to compute gradients, and computing them correctly is not an enhancement but a basic requirement. The fact that manual convolution gives the correct result shows this isn't about adding new functionality but fixing existing broken functionality.

## BUG Considerations

**Why it might be BUG:**
This is a clear bug because: (1) The mathematical definition of gradient is unambiguous - gradient of a constant is zero; (2) The implementation violates this fundamental property; (3) Manual convolution with the same Sobel kernels produces the correct all-zero result; (4) Other boundary modes (nearest, reflect, mirror, wrap) all correctly return zero; (5) The inconsistency is specifically in mode='constant' implementation; (6) This could cause real issues in image processing pipelines with false edge detection; (7) The bug is reproducible and consistent across different constant values and array sizes.

**Why it might not be BUG:**
The only argument against calling this a bug would be if the current behavior was intentionally designed this way for some reason, but there's no evidence of this. The documentation doesn't suggest any special behavior for constant images, and the mathematical incorrectness strongly indicates this is unintended behavior rather than a design choice.

## Overall Consideration

After thorough investigation, this is unequivocally a BUG. The scipy.ndimage.sobel function incorrectly computes non-zero gradients for constant images when using mode='constant' with cval matching the image value. This violates the fundamental mathematical property that the gradient of a constant function is zero everywhere.

The evidence is overwhelming: (1) Manual convolution with Sobel kernels correctly returns all zeros, proving the mathematical expectation; (2) All other boundary modes correctly return zero for constant images; (3) The bug is specific to the mode='constant' implementation; (4) The issue affects practical use cases in edge detection and gradient computation. This is not a documentation issue, undefined behavior, or feature request - it's a clear implementation error.

The function's current behavior cannot be justified mathematically or practically. When a user specifies mode='constant' with cval=5.0 for a constant 5.0 image, they're explicitly indicating that the padding should match the image, creating a uniform field. The gradient of this uniform field should be zero everywhere, not the constant value itself at boundaries. This is a textbook case of a valid bug report that should be filed and fixed.
## Documentation Analysis for scipy.spatial.distance.braycurtis

### Official SciPy Documentation

The SciPy documentation for `braycurtis` states:
- Mathematical formula: sum(|u_i - v_i|) / sum(|u_i + v_i|)
- Range: [0, 1] if all coordinates are positive
- **Key statement**: "is undefined if the inputs are of length zero"

Note: The documentation mentions "length zero" (empty arrays) but does NOT explicitly address the case of non-empty arrays containing all zeros.

### Mathematical Definition Research

1. **Wikipedia and academic sources** confirm the Bray-Curtis dissimilarity formula but do not provide explicit guidance for the all-zeros edge case.

2. **Implementation notes from other sources** indicate:
   - "The Bray-Curtis distance is undefined if the sum of all elements in x and y is zero, in which case we return NaN"
   - "If both objects are in the zero coordinates, the Bray curtis distance is undefined"

3. **Ecological context**: Bray-Curtis was designed for ecological data (species counts), where all-zero vectors represent sites with no species present. The mathematical interpretation in this context is ambiguous.

### Key Observations

1. **Documentation gap**: The SciPy documentation does not explicitly state what should happen when both vectors are all zeros (as opposed to empty). This is a documentation ambiguity.

2. **Mathematical ambiguity**: The 0/0 case is mathematically indeterminate. Different interpretations are possible:
   - Return NaN (current behavior - mathematically strict)
   - Return 0 (identity property - pragmatic choice)

3. **Precedent in SciPy**: The bug report mentions that `jaccard` was fixed in SciPy 1.2.0 to return 0 instead of NaN for similar edge cases. My testing confirms jaccard returns 0.0 for all-zero vectors.

4. **Identity property**: Distance/dissimilarity measures typically satisfy d(x,x) = 0 for all valid x. The current implementation violates this for all-zero vectors.

### Conclusion

The documentation does not explicitly specify the expected behavior for all-zero vectors, creating ambiguity. While the current NaN return is mathematically defensible (0/0 is undefined), it violates the expected identity property of distance measures and is inconsistent with how similar edge cases are handled in other SciPy distance functions like jaccard.
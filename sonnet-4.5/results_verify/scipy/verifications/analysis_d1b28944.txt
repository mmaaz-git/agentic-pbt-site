## INVALID Considerations
**Why it might be INVALID:**
The code never explicitly documents how it should behave when pooch is not installed when run as a script. One could argue that since this is an internal script (starts with underscore), any error is acceptable and users shouldn't be running it directly anyway. The documentation doesn't explicitly promise a specific error type.

**Why it might not be INVALID:**
The code clearly shows intentional error handling design with a specific ImportError message for missing pooch (lines 47-50). The script's own docstring explicitly states "Run: python _download_all.py <download_dir>", indicating it's meant to be run as a script. The developers clearly intended to provide helpful error messages but failed to account for the argparse default evaluation timing.

## WONTFIX Considerations
**Why it might be WONTFIX:**
This is an edge case that only affects users who try to run an internal script (_download_all.py) directly without having the optional dependency installed. Most users would use the public API scipy.datasets.download_all() which would handle this correctly. The script is primarily for packagers who would likely have pooch installed or know to install it.

**Why it might not be WONTFIX:**
The script is explicitly documented as a tool for packagers with the command "Run: python _download_all.py <download_dir>". It's specifically designed for situations where packagers need to pre-download files, potentially in restricted build environments. Getting a cryptic AttributeError instead of clear installation instructions defeats the purpose of the careful error handling already in the code.

## DOCUMENTATION_FIX Considerations
**Why it might be DOCUMENTATION_FIX:**
The documentation could be updated to explicitly state that pooch must be installed before running the script. The current documentation doesn't mention this prerequisite, leading users to encounter the error. Adding a note about installing pooch first would prevent the issue.

**Why it might not be DOCUMENTATION_FIX:**
The code already has logic to detect missing pooch and provide installation instructions (lines 47-50). The issue is not missing documentation but a timing bug in the code execution. The developers clearly intended the code to handle missing pooch gracefully with a helpful error message, so this is a code bug, not a documentation issue.

## FEATURE_REQUEST Considerations
**Why it might be FEATURE_REQUEST:**
One could argue that gracefully handling missing dependencies in command-line scripts is a new feature. The current implementation assumes pooch exists when setting up argparse, and adding support for running without it could be seen as an enhancement rather than a bug fix.

**Why it might not be FEATURE_REQUEST:**
The code already contains the logic to handle missing pooch (lines 47-50 with the ImportError). This isn't requesting new functionality but fixing existing error handling that doesn't work as intended due to a timing issue. The feature already exists; it just doesn't execute properly.

## BUG Considerations
**Why it might be BUG:**
The code contains explicit error handling for missing pooch (lines 47-50) that provides a helpful ImportError with installation instructions. However, due to Python's eager evaluation of default arguments in argparse, this error handling is bypassed, resulting in a cryptic AttributeError. The script is explicitly documented for standalone use with "Run: python _download_all.py", and the current behavior violates the clear intention of providing helpful error messages for missing dependencies.

**Why it might not be BUG:**
Very few users would encounter this issue since most would either use the public API or have pooch installed. The script starts with an underscore suggesting it's internal/private. One could argue that any behavior for internal scripts without proper dependencies is undefined.

## Overall consideration
This appears to be a clear bug in the code. The developers explicitly added error handling code (lines 47-50) to provide a helpful ImportError message when pooch is not installed, showing clear intent about how the code should behave. The script's docstring explicitly documents it for standalone use with "Run: python _download_all.py <download_dir>", indicating it's not just an internal implementation detail but a tool meant to be run directly by packagers.

The bug is a simple timing issue where Python evaluates the default argument `pooch.os_cache('scipy-data')` when creating the argument parser, before the error checking code in download_all() can execute. This causes users to see a cryptic AttributeError instead of the intended helpful ImportError with installation instructions. The proposed fix is minimal and correct, simply deferring the evaluation of pooch.os_cache() until after checking if pooch is available.

This is exactly the kind of bug that should be fixed: it has clear intended behavior that's not working due to a simple oversight, affects a documented use case, and has a straightforward fix that makes the code work as originally intended. The fact that the developers already wrote error handling code for this exact situation proves they wanted to handle it gracefully, making this a legitimate bug rather than undefined behavior.
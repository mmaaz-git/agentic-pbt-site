DOCUMENTATION ANALYSIS: scipy.stats.quantile

1. OFFICIAL DOCUMENTATION
The scipy.stats.quantile documentation states:

Parameters:
- p : array_like of float
  Probability or sequence of probabilities of the quantiles to compute.
  Values must be between 0 and 1 (inclusive).

The documentation says "array_like of float" which could be interpreted as requiring floating-point type, but:
- "array_like" is a NumPy convention that typically accepts any type convertible to array
- The phrase focuses on the mathematical nature (floating values) not the dtype requirement
- The documentation emphasizes the range (0 to 1 inclusive) not the type

2. INCONSISTENCY WITH NUMPY
NumPy's quantile and percentile functions have nearly identical documentation but accept integer p values:
- np.quantile accepts integer p values without issue
- np.percentile accepts integer p values (0, 100) without issue
Both are part of the same ecosystem and users expect consistent behavior

3. MATHEMATICAL DEFINITION
Quantiles are defined for any probability value p where 0 ≤ p ≤ 1. The mathematical definition makes no distinction between 0 (integer) and 0.0 (float) - they represent the same probability value.

4. DOCUMENTATION AMBIGUITY
The documentation does not explicitly state:
- That p must be a floating-point dtype (vs just a float value)
- That integer values like 0 or 1 will be rejected
- Any rationale for this restriction

The error message "p must have real floating dtype" is more specific than the documentation, suggesting this is an implementation detail rather than an intended API requirement.

5. USER EXPECTATIONS
Given that:
- The documentation emphasizes the value range (0 to 1) not the type
- NumPy functions accept integers
- Common use cases involve p=0 (minimum) and p=1 (maximum)
- Python users often use integer literals 0 and 1

Users would reasonably expect scipy.stats.quantile to accept integer p values that fall within the valid range.
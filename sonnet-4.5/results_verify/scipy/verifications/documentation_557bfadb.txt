# Documentation Analysis

## scipy.sparse.linalg.inv Documentation

The official documentation for `scipy.sparse.linalg.inv` states:

### Function Signature
`scipy.sparse.linalg.inv(A)`

### Parameters
- `A`: (M, M) sparse array - Square sparse matrix to be inverted

### Returns
- `Ainv`: **(M, M) sparse array** - Inverse of input sparse matrix

### Key Documentation Points
1. The return type is explicitly documented as "(M, M) sparse array"
2. The documentation makes no exceptions for special cases like 1×1 matrices
3. The function is described as computing "the inverse of a sparse matrix"
4. The function has been available since version 0.12.0
5. The documentation recommends using dense matrix inversion for non-sparse results

## scipy.sparse.linalg.spsolve Documentation

The documentation for `spsolve` (which `inv` uses internally) states:

### Returns Section
- If b is a vector: returns a vector of size A.shape[1]
- If b is a matrix: returns a matrix of size (A.shape[1], b.shape[1])

### Important Observations
1. The `spsolve` documentation does NOT specify whether the return value should be sparse or dense
2. The documentation does NOT explicitly state that sparse matrix input for b should result in sparse matrix output
3. However, the documentation does say it "assumes the solution matrix X is sparse"

## Documentation Contract Analysis

### For inv()
The documentation clearly states that `inv()` returns "(M, M) sparse arrays". This is an unambiguous contract that:
1. The return value must be a sparse array
2. The shape must be (M, M) - a 2D matrix, not a 1D array

### For spsolve()
The `spsolve` documentation is less clear about return types, but:
1. It mentions returning a "matrix" when b is a matrix
2. The general assumption is that sparse inputs should produce sparse outputs when solving sparse systems

## Conclusion

The bug violates the explicit documentation contract of `scipy.sparse.linalg.inv`:
1. The documentation promises "(M, M) sparse arrays" as the return type
2. For 1×1 inputs, the function returns a numpy.ndarray with shape (1,)
3. This is neither sparse nor (M, M) shaped

The documentation makes no exceptions for edge cases, so users have every right to expect consistent behavior regardless of matrix size. The current behavior for 1×1 matrices directly contradicts the documented API contract.
BUG REPRODUCTION REPORT
=====================

I have successfully reproduced the bug described in the report. The issue is that the documentation for scipy.optimize.cython_optimize._zeros functions is misleading and incomplete regarding the polynomial coefficient order.

REPRODUCTION RESULTS:

1. Hypothesis Test:
   - The provided Hypothesis test passes when run with the correct coefficient order
   - This confirms the function works correctly with ascending order coefficients (c0 + c1*x + c2*x^2 + c3*x^3)

2. Manual Reproduction:
   - When coefficients are passed in descending order (1, 0, 0, -2) for x^3 - 2 = 0:
     * Expected root: 1.2599210498948732 (cube root of 2)
     * Got: 0.0 (incorrect)

   - When coefficients are passed in ascending order (-2, 0, 0, 1) for the same polynomial:
     * Expected root: 1.2599210498948732
     * Got: 1.259921050820715 (correct, within numerical precision)

3. Additional Testing:
   - Tested with simpler polynomials to confirm behavior:
     * For 2x + 4 = 0: ascending order (4, 2, 0, 0) correctly finds root x = -2
     * For x^2 - 4 = 0: ascending order (-4, 0, 1, 0) correctly finds root x = 2

   - Tests confirm the function evaluates: c0 + c1*x + c2*x^2 + c3*x^3
   - This is NOT the standard mathematical convention where polynomials are written in descending order

EFFECT OF THE BUG:
- Users naturally expect to provide coefficients in descending order (standard mathematical notation)
- The current documentation only says "extra arguments of zero function" which is vague
- This leads to incorrect results when users pass coefficients in the wrong order
- The documentation mentions it's a "3rd order polynomial" but doesn't specify the form
- Silent failures occur - the function returns a value but it's solving the wrong equation
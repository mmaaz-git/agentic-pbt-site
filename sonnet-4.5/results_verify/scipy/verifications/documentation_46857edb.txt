Documentation Analysis
====================

## Official scipy.linalg.inv Documentation

From the official scipy.linalg.inv documentation (verified through help() and online docs):

### Function Signature
```python
inv(a, overwrite_a=False, check_finite=True)
```

### Key Documentation Statements

1. **Purpose**: "Compute the inverse of a matrix."

2. **Raises Section** (verbatim):
   ```
   Raises
   ------
   LinAlgError
       If `a` is singular.
   ValueError
       If `a` is not square, or not 2D.
   ```

3. **check_finite parameter**:
   - "Whether to check that the input matrix contains only finite numbers."
   - "Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs."
   - Note: This parameter is about INPUT validation, not output behavior

### Critical Documentation Points

1. **Unambiguous Promise**: The documentation explicitly states that LinAlgError will be raised "If `a` is singular" - no exceptions or caveats mentioned.

2. **No Numerical Precision Disclaimers**: The documentation does NOT include any warnings about:
   - Subnormal numbers
   - Numerical precision limits
   - Cases where singularity detection might fail
   - Possibility of returning Inf/NaN instead of raising an error

3. **Definition of Singular**: While the documentation doesn't explicitly define "singular", this is a well-established mathematical concept:
   - A matrix is singular if its determinant is zero
   - A matrix is singular if it doesn't have full rank
   - The test matrix clearly meets both criteria (det=0, rank=1 for a 2x2 matrix)

4. **check_finite Misunderstanding**: The check_finite parameter is about validating INPUT matrices for Inf/NaN, not about the behavior when the matrix is singular. Even with check_finite=True, the function fails to detect singularity.

## Conclusion

The documentation makes an unqualified promise that LinAlgError will be raised for singular matrices. There are no documented exceptions for:
- Matrices with subnormal values
- Numerical precision edge cases
- Cases where Inf might be returned instead

The behavior observed (returning Inf values) directly contradicts the documented API contract.
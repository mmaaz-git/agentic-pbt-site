Documentation Analysis for pandas.errors.AbstractMethodError

## Source Code Documentation (Docstring)

The docstring in the source code (pandas/errors/__init__.py lines 273-292) provides:

1. Purpose: "Raise this error instead of NotImplementedError for abstract methods."

2. Examples showing intended usage:
   - For classmethods: Pass cls with methodtype="classmethod"
     ```python
     @classmethod
     def classmethod(cls):
         raise pd.errors.AbstractMethodError(cls, methodtype="classmethod")
     ```

   - For instance methods: Pass self (with default methodtype="method")
     ```python
     def method(self):
         raise pd.errors.AbstractMethodError(self)
     ```

3. There's actually a documentation bug on line 291 - it says "This classmethod must be defined" when it should say "This method must be defined" for the instance method example.

## Online Documentation

The pandas API documentation confirms:
- Parameters: class_instance (the class or instance), methodtype (optional, defaults to "method")
- Shows the same usage pattern: pass cls for classmethods, self for instance methods

## Key Observations

1. **No explicit type specification**: The documentation does NOT explicitly state that class_instance MUST be a class when methodtype="classmethod". The parameter name "class_instance" is ambiguous - it could mean "class or instance".

2. **Examples show convention**: The examples consistently show passing cls for classmethods and self for instance methods, but this is shown as a usage pattern, not a requirement.

3. **No type hints**: The __init__ method has no type hints for class_instance parameter, only for methodtype (str) and return (None).

4. **Supported methodtypes**: The code validates that methodtype must be one of {"method", "classmethod", "staticmethod", "property"}.

5. **Implementation detail**: The __str__ method implementation assumes:
   - For methodtype="classmethod": class_instance is a class (accesses __name__ directly)
   - For all other methodtypes: class_instance is an instance (uses type(class_instance).__name__)

## Documentation Gap

The documentation does not explicitly specify the contract that:
- When methodtype="classmethod" or "staticmethod", class_instance MUST be a class object
- When methodtype="method" or "property", class_instance MUST be an instance object

This contract is only implied through the examples, not explicitly stated as a requirement.
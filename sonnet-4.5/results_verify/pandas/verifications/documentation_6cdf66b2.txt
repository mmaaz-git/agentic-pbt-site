Documentation findings for SparseArray.astype():

I examined the source code documentation for the `astype` method in `/home/npc/pbt/agentic-pbt/envs/pandas_env/lib/python3.13/site-packages/pandas/core/arrays/sparse/array.py` at lines 1240-1293.

The documentation explicitly states:
1. The `astype` method converts a SparseArray to a specified dtype
2. When using a SparseDtype, you can change both the dtype AND the fill_value
3. The documentation includes a specific example at lines 1287-1292 demonstrating this:
   - Starting array: [0, 0, 1, 2] with fill_value=0
   - After `astype(SparseDtype("float64", fill_value=0.0))`: [0.0, 0.0, 1.0, 2.0] with fill_value=0.0
   - The values are preserved (all zeros remain zeros, 1 remains 1, 2 remains 2)

This documented example directly contradicts what the bug report claims is happening. According to the documentation, when changing the fill_value, the actual values should be preserved. The example shows that when the original array has [0, 0, 1, 2] with fill_value=0 and is converted to float64 with fill_value=0.0, the result should still be [0.0, 0.0, 1.0, 2.0].

The bug report claims that when an array containing only fill_value elements (e.g., [0] with fill_value=0) is cast to a dtype with a different fill_value (e.g., fill_value=1), the actual values are lost and replaced with the new fill_value (becoming [1.0] instead of [0.0]).

If the bug report is accurate, this would be a clear violation of the documented behavior, as the documentation's own example shows that values should be preserved during astype operations, even when the fill_value changes.
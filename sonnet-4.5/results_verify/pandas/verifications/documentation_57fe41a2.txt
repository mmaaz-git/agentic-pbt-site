## Documentation Analysis

### Function Docstring
The function's docstring is clear and explicit about the exception behavior:

```python
def ensure_python_int(value: int | np.integer) -> int:
    """
    Ensure that a value is a python int.

    Parameters
    ----------
    value: int or numpy.integer

    Returns
    -------
    int

    Raises
    ------
    TypeError: if the value isn't an int or can't be converted to one.
    """
```

The docstring states that the function raises `TypeError` "if the value isn't an int or can't be converted to one." This is an unambiguous promise about the exception type.

### Key Documentation Points

1. **Clear Contract**: The docstring explicitly documents that `TypeError` should be raised when a value "can't be converted to one" (an int).

2. **Infinity Cannot Be Converted**: Float infinity (±∞) mathematically cannot be represented as an integer. Python's built-in `int()` function confirms this by raising `OverflowError` when attempting such conversion.

3. **No Exception Hierarchy Mentioned**: The documentation does not mention that other exceptions might be raised or that `OverflowError` is an acceptable alternative to `TypeError`.

4. **External Documentation**: I searched for external pandas documentation but could not find specific documentation for this internal utility function. The function appears to be primarily an internal utility, with its docstring serving as the authoritative documentation.

5. **Python's Behavior**: Python's standard behavior is to raise `OverflowError` for `int(float('inf'))`. However, the pandas function explicitly promises to wrap conversion failures as `TypeError`.

### Conclusion
The documentation (docstring) makes a clear promise: any value that "can't be converted" to an int should result in a `TypeError`. Since infinity cannot be converted to an integer, the function should raise `TypeError` according to its documented contract. The current behavior of raising `OverflowError` violates this documented contract.
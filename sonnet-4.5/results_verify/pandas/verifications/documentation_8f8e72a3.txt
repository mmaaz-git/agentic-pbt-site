DOCUMENTATION FINDINGS FOR KLEENE LOGIC FUNCTIONS

1. Function Location and Visibility:
   - The functions kleene_and, kleene_or, and kleene_xor are located in pandas/core/ops/mask_ops.py
   - They are importable from pandas.core.ops, but this is an internal module path
   - There is NO public API documentation for these functions on the pandas documentation website
   - These appear to be internal implementation functions, not part of the public pandas API

2. Docstring Documentation:
   Each function has clear docstring documentation that explicitly states:

   For kleene_and (lines 144-146):
   "left_mask, right_mask : ndarray, optional
       The masks. Only one of these may be None, which implies that
       the associated `left` or `right` value is a scalar."

   For kleene_or (lines 30-32):
   "left_mask, right_mask : ndarray, optional
       The masks. Only one of these may be None, which implies that
       the associated `left` or `right` value is a scalar."

   For kleene_xor (lines 94-96):
   "left_mask, right_mask : ndarray, optional
       The masks. Only one of these may be None, which implies that
       the associated `left` or `right` value is a scalar."

3. Critical Documentation Statement:
   All three functions explicitly document: "Only one of these may be None"
   This is a clear precondition that establishes the contract for these functions.

4. Purpose and Context:
   - These functions implement Kleene logic (three-valued logic with True, False, and NA/unknown)
   - They are designed to handle masked arrays where some values may be NA
   - The mask parameters indicate which values are NA/unknown
   - When one mask is None, it indicates that operand is a scalar (not an array)

5. Internal vs External API:
   - These functions are in pandas.core.ops, which is an internal module
   - The pandas.core namespace is generally considered internal implementation
   - No public pandas documentation references these functions
   - They appear to be helper functions for pandas' nullable boolean operations

6. Usage Pattern:
   The documented and intended usage is:
   - Array op Scalar: kleene_func(array, scalar, array_mask, None)
   - Scalar op Array: kleene_func(scalar, array, None, array_mask)
   - Array op Array: kleene_func(array1, array2, mask1, mask2)
   - NOT supported: kleene_func(scalar1, scalar2, None, None)

The documentation clearly establishes that both masks being None is not a supported use case.
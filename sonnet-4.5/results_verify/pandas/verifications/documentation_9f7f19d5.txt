## Documentation Analysis for CompatValidator

### Source Code Documentation
The module docstring at the beginning of function.py explains:
- The purpose is to handle compatibility with numpy libraries
- Validation is performed to ensure extra parameters passed correspond only to numpy signatures
- The module discourages users from relying on these parameters when calling pandas implementations

### Intended Behavior
Based on the source code and actual usage:

1. **Valid method values**: The code explicitly checks for three valid method values:
   - "args" - validates arguments only
   - "kwargs" - validates keyword arguments only
   - "both" - validates both args and kwargs
   - Any other value should raise ValueError

2. **Usage in codebase**: All CompatValidator instances in the codebase use one of these three valid values. No instances use invalid methods.

3. **No explicit documentation found for**:
   - What should happen when method is invalid
   - Whether validation should occur even with empty args/kwargs
   - The contract for consistency of validation behavior

### Key Observations

1. **The error message is explicit**: Line 92 raises `ValueError(f"invalid validation method '{method}'")`
   - This indicates invalid methods should always be rejected

2. **No documentation states empty inputs should skip validation**:
   - The early return for empty inputs appears to be an optimization
   - There's no indication this should bypass method validation

3. **Consistency expectation**:
   - Nothing in the documentation suggests validation behavior should differ based on input content
   - A validator configured with invalid parameters should fail consistently

### Conclusion
While there is no explicit documentation about how invalid method values should be handled, the code's error message and the principle of fail-fast validation strongly suggest that invalid method values should always be rejected, regardless of the input. The current behavior where validation is skipped for empty inputs appears to be an unintended consequence of an early return optimization.
## Documentation Analysis

### DataFrame Interchange Protocol Documentation
The Python dataframe interchange protocol (data-apis.org) specifies:
1. Multiple null representation types are supported including USE_SENTINEL
2. For sentinel values, the protocol should describe the sentinel value through describe_null()
3. The protocol "must allow the consumer to inspect the representation for missing values"
4. Sentinel values, bit masks, and boolean masks must be supported

### Pandas Documentation
1. pandas.api.interchange.from_dataframe() documentation does not explicitly specify how null values in categorical columns should be handled
2. No explicit documentation found stating that round-tripping must preserve all data perfectly
3. However, there is a general warning about "severe implementation issues" with the interchange protocol

### Implicit Expectations
1. The interchange protocol is designed for data exchange between libraries
2. Round-tripping (DataFrame -> interchange -> DataFrame) works correctly for numeric and string columns with nulls
3. Data interchange protocols generally have an implicit expectation of data fidelity
4. The function name "from_dataframe" implies it should reconstruct the dataframe faithfully

### Documentation Gap
The documentation does not explicitly state:
- How categorical nulls with sentinel values should be handled
- Whether perfect round-tripping is guaranteed
- What the expected behavior is for out-of-bounds category codes

### Conclusion
While the documentation doesn't explicitly guarantee perfect round-trip preservation of categorical nulls, the behavior is inconsistent with:
1. How other data types are handled (numeric and string preserve nulls)
2. The general purpose of an interchange protocol (data exchange without loss)
3. The existing implementation's intent (comment at line 251-252 acknowledges sentinel values exist)
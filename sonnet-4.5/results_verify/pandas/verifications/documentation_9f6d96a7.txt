Documentation Analysis for validate_argsort_with_ascending
==========================================================

1. Function Purpose (from source code docstring):
   - The function validate_argsort_with_ascending is designed to handle cases where 'Categorical.argsort'
     is called via the numpy library
   - In numpy's call pattern, the first parameter would be 'axis' (integer or None) instead of 'ascending' (boolean)
   - The function checks if 'ascending' parameter is actually an axis value (integer or None) and converts it

2. NumPy's argsort specification:
   - numpy.argsort accepts axis parameter with these valid values:
     * axis=-1 (default): sorts along the last axis
     * axis=None: flattens the array before sorting
     * axis=0, 1, etc.: sorts along specific axes
   - Official numpy documentation explicitly states that axis=None is valid and causes array flattening

3. Pandas Categorical.argsort specification:
   - Takes 'ascending' parameter (boolean, default True)
   - Takes 'kind' parameter for sorting algorithm
   - Documentation states it passes **kwargs through to numpy.argsort
   - No 'axis' parameter is documented in the pandas signature

4. Validation logic in pandas:
   - The function uses validate_argsort_kind which validates against ARGSORT_DEFAULTS_KIND
   - ARGSORT_DEFAULTS_KIND sets axis=-1 as the default
   - The validation (_check_for_default_values) rejects any non-default values
   - This means only axis=-1 is accepted, all other values (including None) are rejected

5. Key finding:
   - The function claims to handle numpy-style calls but rejects axis=None
   - NumPy explicitly supports axis=None as a valid parameter (causes flattening)
   - The validation logic only accepts the exact default value (-1)
   - This creates a mismatch between the stated purpose and actual behavior

6. Additional observation:
   - In the ARGSORT_DEFAULTS dictionary, "kind" is assigned twice (lines 138 and 140)
   - First assignment: "quicksort", second assignment: None
   - The second assignment overwrites the first, resulting in kind=None
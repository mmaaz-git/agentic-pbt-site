## Documentation Analysis for Cython.Plex.Scanner

### Documentation Found

1. **Rep() Function Documentation**:
   - "Rep(re) is an RE which matches zero or more repetitions of |re|."
   - Clearly states it matches ZERO or more, making it nullable (can match empty string)

2. **Opt() Function Documentation**:
   - "Opt(re) is an RE which matches either |re| or the empty string."
   - Explicitly states it can match empty string, making it nullable

3. **Scanner.read() Method Documentation**:
   - "Read the next lexical token from the stream and return a tuple (value, text)"
   - "Returns (None, '') on end of file"
   - No mention of behavior with nullable patterns or empty matches
   - No warning about infinite loops with Rep() or Opt()

4. **UnrecognizedInput Exception**:
   - Exists to signal when input cannot be recognized
   - Rep1() correctly uses this when it cannot match

### Documentation Gaps

1. **No Warning About Nullable Pattern Issues**:
   - Documentation does not warn that Rep() and Opt() can cause infinite loops
   - No guidance on handling patterns that match empty strings

2. **Expected Behavior Unclear**:
   - Documentation doesn't specify what should happen when a pattern matches empty string
   - No mention of whether scanner should advance or raise error

3. **Comparison with Standard Lexer Behavior**:
   - Most lexer implementations (like flex, re module) handle zero-width matches by:
     a) Detecting when no characters were consumed
     b) Either advancing by one character or raising an error
   - Cython.Plex documentation doesn't specify its approach

### Expected vs Actual Behavior

Based on standard lexer practices and the behavior of Rep1():

**Expected**: When a pattern matches empty string, the scanner should either:
1. Advance the input position by at least one character to prevent getting stuck
2. Raise UnrecognizedInput if it cannot make progress
3. Skip to the next pattern in the lexicon

**Actual**: Scanner repeatedly returns empty matches without advancing, causing infinite loop

### Conclusion

The documentation does not specify the expected behavior for nullable patterns, but the infinite loop is clearly unintended behavior that violates basic lexer principles. The fact that Rep1() handles similar cases correctly (by raising UnrecognizedInput) suggests that Rep() and Opt() should also handle edge cases properly rather than looping infinitely.
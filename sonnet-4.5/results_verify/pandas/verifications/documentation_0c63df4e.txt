## Documentation Analysis for ExtensionDtype.construct_from_string

### Source Code Documentation (pandas/core/dtypes/base.py)

The ExtensionDtype base class documentation shows:

1. **name property** (lines 191-198):
   - Defined as a `@property` decorator in the base class
   - Marked with `raise AbstractMethodError(self)` indicating subclasses must implement it
   - Documentation string states: "A string identifying the data type. Will be used for display in, e.g. Series.dtype"
   - The base class explicitly declares `name` as a property, not a class attribute

2. **construct_from_string method** (lines 238-292):
   - Is a classmethod that accepts a string parameter
   - Default implementation includes an assertion at line 289: `assert isinstance(cls.name, str), (cls, type(cls.name))`
   - This assertion assumes `cls.name` will return a string directly from the class
   - The method compares the input string to `cls.name` at line 290
   - Documentation says: "By default, in the abstract class, just the name of the type is expected"

3. **Abstract Methods Required**:
   - The class docstring (lines 55-60) lists required abstract methods: type, name, construct_array_type
   - `name` is listed as one of the abstract methods that "must be implemented by subclasses"

### External Documentation

1. **Pandas Official API Documentation**:
   - States that `name` is "A string identifying the data type"
   - Does not explicitly specify whether it should be implemented as a class attribute or property
   - No specific implementation requirements are given for how to implement `name`

2. **Pandas Development/Extending Documentation**:
   - Provides high-level guidance on creating ExtensionDtype
   - Does not provide explicit implementation details for `name`
   - Recommends referring to source code for full interface definition

### Key Contradiction

There is a clear contradiction in the implementation:
- The base class defines `name` as an abstract property with `@property` decorator
- The default `construct_from_string` implementation assumes `name` is a class attribute (not a property)
- When accessed via `cls.name` on a class with `name` as a property, it returns a property object, not the string value

### Documentation Gaps

The documentation does not:
- Specify that `name` must be a class attribute (not a property) for `construct_from_string` to work
- Explain the contradiction between the abstract property definition and the assertion
- Provide guidance on the correct way to implement `name` to be compatible with both requirements
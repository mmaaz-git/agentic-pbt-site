## Documentation Analysis for pandas.util.hash_array

### Official Documentation
The official pandas documentation for `hash_array` (pandas.util.hash_array) provides the following information:

**Function Purpose**: Given a 1d array, return an array of deterministic integers.

**Parameters**:
1. `vals`: ndarray or ExtensionArray - The input 1-dimensional array to be hashed
2. `encoding`: str, default 'utf8' - Encoding used for data and key when processing strings
3. `hash_key`: str, default '0123456789123456' - Hash key for string encoding
4. `categorize`: bool, default True - Whether to categorize object arrays before hashing (more efficient with duplicates)

**Return Value**: ndarray[np.uint64, ndim=1] - Hashed values with same length as input

**Key Documentation Observations**:
1. The documentation specifies that the default encoding is 'utf8' for string data
2. There is NO mention of how Unicode errors should be handled
3. There is NO specification about what happens with invalid UTF-8 sequences or surrogate characters
4. The documentation does not specify what exceptions may be raised
5. No error handling behavior is documented for encoding issues

### Source Code Analysis
Looking at the implementation in `_hash_ndarray` (lines 282-339):

1. The function has a try/except block at lines 325-331 that catches `TypeError` when calling `hash_object_array`
2. When a `TypeError` is caught, it falls back to converting values to strings first: `vals.astype(str).astype(object)`
3. The comment says "we have mixed types" suggesting this is for handling heterogeneous data
4. The `hash_object_array` function is imported from `pandas._libs.hashing` (a Cython module)
5. The encoding parameter is passed directly to `hash_object_array`

**Critical Finding**: The code only catches `TypeError`, not `UnicodeEncodeError`. The documentation does not specify behavior for Unicode encoding errors.

### Conclusion
The documentation is silent on:
- How Unicode encoding errors should be handled
- What exceptions the function may raise
- Specific behavior with invalid UTF-8 sequences or surrogate characters

This is a documentation gap - the function's behavior with problematic Unicode characters is unspecified.
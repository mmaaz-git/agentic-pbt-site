# Documentation Analysis for pandas.factorize and Big-Endian Support

## pandas.factorize Documentation

### Official Function Documentation
The pandas.factorize() function documentation states:
- Purpose: "Encode the object as an enumerated type or categorical variable"
- Parameters include values (1-D sequence), sort, use_na_sentinel, and size_hint
- Returns codes (integer ndarray) and uniques (ndarray/Index/Categorical)
- No explicit mention of byte order requirements or limitations

### Key Finding: No Byte Order Specification
The official factorize documentation does NOT specify:
- Requirements for native vs non-native byte order
- Limitations regarding big-endian arrays
- Any warnings about byte order compatibility

## pandas Byte Order Policy

### Official Position (from pandas documentation and GitHub issues)
1. **Explicit Statement**: pandas maintainers have stated "we don't support a non-native byteorder" (GitHub issue #17396)

2. **Documentation in FAQ/Gotchas**:
   - The pandas FAQ acknowledges byte-ordering issues exist
   - Common symptom: "ValueError: Big-endian buffer not supported on little-endian compiler"
   - Provides a workaround: Convert to native byte order before use
   ```python
   x = np.array(list(range(10)), ">i4")  # big endian
   newx = x.byteswap().view(x.dtype.newbyteorder())  # force native byteorder
   s = pd.Series(newx)
   ```

3. **Inconsistent Implementation**:
   - Some pandas functions (Series, DataFrame constructors) appear to work with big-endian arrays
   - Others (like factorize) fail with the error
   - The error often occurs during operations, not at construction time

## Documentation Gap Analysis

### What's Missing:
1. The factorize function documentation doesn't mention byte order limitations
2. No warning that factorize requires native byte order arrays
3. Inconsistency: While the general FAQ mentions byte order issues, individual function docs don't

### What's Unclear:
1. Why some pandas functions handle big-endian arrays while others don't
2. Whether the partial support for big-endian in some functions is intentional or accidental
3. Whether this is considered a bug to be fixed or a permanent limitation

## Conclusion
The documentation reveals that:
1. pandas officially does NOT support non-native byte order (per maintainer statements)
2. This limitation is documented in the FAQ/Gotchas section but NOT in individual function documentation
3. The factorize function documentation fails to mention this limitation
4. There's an acknowledged workaround (converting to native byte order)
5. The inconsistent behavior across pandas functions suggests either:
   - A documentation issue (should specify which functions require native byte order)
   - An implementation inconsistency (some functions accidentally support it)
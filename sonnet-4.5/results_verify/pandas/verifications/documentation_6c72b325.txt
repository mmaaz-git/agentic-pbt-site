DOCUMENTATION ANALYSIS
======================

1. OFFICIAL DOCSTRING
---------------------
The function's docstring (accessed via __doc__) explicitly states:

"Return a string label of the type of a scalar or list-like of values."

Parameters section:
"value : scalar, list, ndarray, or pandas type"

This unambiguously documents that the function should accept scalar values as input.

2. FUNCTION SIGNATURE
---------------------
Signature: (value: 'object', skipna: 'bool' = True) -> 'str'

The parameter is typed as 'object', which in Python means it should accept any type,
including scalars.

3. EXAMPLES IN DOCUMENTATION
-----------------------------
The docstring contains numerous examples, but notably:
- ALL examples use list inputs (e.g., [1, 2, 3], ['foo', 'bar'])
- NO examples demonstrate using scalar inputs directly
- This is a documentation inconsistency - if scalars are supported, there should be examples

4. ONLINE PANDAS DOCUMENTATION
-------------------------------
The official pandas documentation at pandas.pydata.org confirms:
- "Accepted Inputs: Scalar values, List-like objects, NumPy arrays, Pandas types"
- The function is meant to accept scalar values as a valid input type

5. PANDAS SCALAR DEFINITION
----------------------------
Using pandas.api.types.is_scalar(), I confirmed that pandas considers the following as scalars:
- int, float, bool, complex (Python built-ins): True
- None: True
- str, bytes: True
- numpy scalar types: True

This means the failing inputs are officially recognized as scalars by pandas itself.

6. RELATED PANDAS FUNCTIONS
----------------------------
The function is part of pandas.api.types module, which contains multiple utilities for
type checking and inference. The module's design philosophy appears to support both
scalar and collection inputs for type inference operations.

7. SEMANTIC EXPECTATIONS
-------------------------
The function name "infer_dtype" and its purpose ("Return a string label of the type")
strongly suggests it should work on individual values. It would be semantically
reasonable for users to expect:
- infer_dtype(5) -> "integer"
- infer_dtype(5.0) -> "floating"
- infer_dtype(True) -> "boolean"

CONCLUSION
----------
The documentation clearly and explicitly states that the function accepts scalar values.
The parameter is documented as "scalar, list, ndarray, or pandas type" with scalar
listed first. This is not ambiguous - the function is documented to accept scalars.
The fact that it crashes on common Python scalar types (int, float, bool, complex, None)
while working on other scalars (str, numpy scalars) represents a clear violation of the
documented API contract.
DOCUMENTATION ANALYSIS
======================

Documentation Sources Reviewed:
1. Official pandas API documentation for read_clipboard() and to_clipboard()
2. Source code docstrings in /home/npc/miniconda/lib/python3.13/site-packages/pandas/io/clipboards.py
3. Comments in the source code

Key Findings:

1. ENCODING PARAMETER IS UNDOCUMENTED
   - Neither function's docstring documents the 'encoding' parameter
   - read_clipboard docstring (lines 28-73): No mention of encoding parameter
   - to_clipboard docstring (lines 135-156): No mention of encoding parameter
   - Both functions accept encoding via **kwargs but this is not documented

2. EXCEPTION TYPES ARE NOT SPECIFIED
   - The docstrings do not specify what exceptions these functions raise
   - No documentation about what happens when invalid encoding is provided
   - The API documentation online also does not specify exceptions

3. UTF-8 RESTRICTION IS UNDOCUMENTED
   - Neither docstring mentions that only UTF-8 encoding is supported
   - This is only discoverable by reading the source code comments:
     - Line 76-77: "only utf-8 is valid for passed value because that's what clipboard supports"
     - Line 159: "testing if an invalid encoding is passed to clipboard"

4. BEHAVIOR IS IMPLEMENTED BUT NOT SPECIFIED
   - The functions clearly validate encoding parameters (lines 78-79, 160-161)
   - This validation is intentional based on code comments
   - However, this behavior is not part of the public API contract

Conclusion:
The encoding parameter exists but is completely undocumented. Users have no way to know:
- That an encoding parameter exists
- That only UTF-8 is supported
- What exceptions will be raised for invalid encodings

This lack of documentation makes it impossible to determine if the inconsistent exception types are a bug or intended behavior, as there is no specified contract for what should happen.
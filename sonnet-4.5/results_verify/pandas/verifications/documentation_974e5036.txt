Documentation Analysis for pandas.errors.AbstractMethodError

From examining the pandas documentation and source code:

1. The AbstractMethodError class is documented as an exception to "Raise this error instead of NotImplementedError for abstract methods."

2. The documentation provides examples showing two use cases:
   - Using with classmethod: methodtype="classmethod"
   - Using with regular method: default methodtype

3. The documentation does NOT explicitly specify:
   - All valid methodtype values
   - The exact error message format when an invalid methodtype is provided
   - Whether the error message should show valid values first or invalid values first

4. From the source code (lines 295-299), the implementation shows:
   - Valid methodtype values are: {"method", "classmethod", "staticmethod", "property"}
   - If methodtype is not in this set, a ValueError is raised
   - The current error message format is: f"methodtype must be one of {methodtype}, got {types} instead."

5. The documentation examples in the docstring (lines 279-291) show that the error correctly generates messages like "This classmethod must be defined in the concrete class Foo" but doesn't show what happens with invalid methodtypes.

6. There is no external specification (RFC, PEP, etc.) that defines how this error message should be formatted.

Conclusion: The documentation does not specify the exact error message format for invalid methodtype values. However, based on common Python error message patterns and user expectations, error messages typically follow the format "expected X, got Y" rather than "expected Y, got X".
# Documentation Analysis for SparseArray.cumsum()

## Source Code Documentation (from array.py)
The docstring in the source code states:
```
Cumulative sum of non-NA/null values.

When performing the cumulative summation, any non-NA/null values will
be skipped. The resulting SparseArray will preserve the locations of
NaN values, but the fill value will be `np.nan` regardless.
```

Key points from the documentation:
1. The method computes cumulative sum of non-NA/null values
2. NaN values are skipped during cumulation
3. The fill value in the result will be `np.nan` regardless of input

## Expected Behavior
According to the documentation, cumsum() should:
- Return a SparseArray with cumulative sums
- Handle arrays with any fill value (null or non-null)
- Always return results with NaN as the fill value

## Actual Implementation
The implementation has two code paths:
1. If `_null_fill_value = True` (e.g., NaN fill): Works correctly
2. If `_null_fill_value = False` (e.g., 0 fill): Attempts to convert to dense and back, causing infinite recursion

## Documentation Assessment
The documentation does NOT specify that cumsum() only works with null fill values. In fact, it explicitly states "the fill value will be `np.nan` regardless", implying it should handle any input fill value and convert it to NaN in the output.

The documentation clearly indicates that cumsum() should work for SparseArrays with any fill value, making the infinite recursion bug a violation of the documented behavior.

## Conclusion
The bug violates the documented behavior. The documentation promises that cumsum() will work and return a result with NaN fill value, but instead it crashes with infinite recursion for non-null fill values. This is a clear bug, not a documentation issue or missing feature.
## Documentation Analysis

### Code Context

The `included_files` method in Cython.Build.Dependencies.DependencyTree is responsible for finding all files that are included (via Cython's include directive) by a given source file. The method:

1. Parses dependencies to get the list of included files
2. For each include, attempts to locate the file
3. If found, recursively processes that file's includes
4. If not found and not in quiet mode, prints an error message

### Documentation Findings

While there is no explicit documentation specifying the exact format of the error message, the semantic meaning is clear from:

1. **The method's logic**: The code is trying to locate an `include` file that is referenced from a `filename`. The natural error message should indicate what cannot be found (the include) and where it was referenced from (the filename).

2. **The comment in the code** (line 531-532): "This is messy because included files are textually included, resolving cimports (but not includes) relative to the including file." This confirms that `filename` is the including file and `include` is what's being included.

3. **Standard error message conventions**: In compiler and build system error messages, the standard pattern is "Unable to locate [what] referenced from [where]" or "[where]: cannot find [what]". The current implementation violates this convention.

4. **Variable naming**: The variables are named `filename` (the source file doing the including) and `include` (the file being included). The error message should reflect this relationship accurately.

### Conclusion

While there is no explicit documentation stating the exact format of this error message, the semantic correctness of the message is obvious from the context and standard conventions. The current implementation produces a message that is semantically backwards and would confuse any user trying to debug missing include files.

The bug is not a documentation issue - the code's behavior is clearly incorrect based on:
- The logical flow of the code
- Standard error message conventions
- The semantic meaning of the operation being performed
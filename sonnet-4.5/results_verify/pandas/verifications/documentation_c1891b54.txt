## Documentation Analysis for pandas.api.types.union_categoricals

The official documentation clearly states that `union_categoricals` should "Combine list-like of Categorical-like, unioning categories." The key word here is "unioning" which has a specific mathematical meaning - the union of sets should include all unique elements from all input sets.

### Key Documentation Points:

1. **Primary Purpose**: The function explicitly states it unions categories. In set theory, a union operation preserves all unique elements from all input sets.

2. **Expected Behavior**: The documentation provides examples showing that when combining categoricals with different categories, "The new categories will be the union of the categories being combined."

3. **Category Preservation**: The examples demonstrate that all unique categories from input categoricals should appear in the result. For instance:
   - Input: `a = pd.Categorical(["b", "c"])` and `b = pd.Categorical(["a", "b"])`
   - Output categories: `['b', 'c', 'a']` - all three unique categories are preserved

4. **No Documented Exceptions**: The documentation does not mention any scenarios where categories should be silently dropped when combining multiple categoricals. The only documented exceptions are TypeError and ValueError for specific conditions (different dtypes, ordered conflicts, empty inputs).

5. **Data Integrity**: There is no documentation suggesting that values should be converted to NaN when their categories exist in the input categoricals. The function should preserve both the categories AND the values that map to those categories.

### What the Documentation Does NOT Say:

- There is no mention that categories with similar names (like 'b' and 'b\x00') should cause issues
- There is no documented limitation on combining 3+ categoricals
- There is no warning about potential data loss or NaN conversion for valid input categories
- There is no documented behavior where the order or number of inputs affects category preservation

### Conclusion from Documentation:

Based on the documentation, the function should preserve ALL unique categories from ALL input categoricals, maintaining a true set union operation. The observed behavior of dropping categories and converting values to NaN directly contradicts the documented purpose of "unioning categories."
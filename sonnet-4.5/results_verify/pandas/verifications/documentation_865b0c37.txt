## Documentation Analysis

### Official Documentation Review

I reviewed the pandas documentation for `remove_categories` from multiple sources:

1. **Method docstring** (from source code):
   - States: "Remove the specified categories"
   - Says removals must be in old categories
   - Values in removed categories become NaN
   - **No mention of reordering remaining categories**
   - **No specification of different behavior for ordered vs unordered**

2. **Online documentation** (pandas.pydata.org):
   - Describes removal of categories and setting values to NaN
   - Shows example: removing ['d', 'a'] from ['a', 'b', 'c', 'd'] results in ['b', 'c']
   - **No explicit mention of sorting or reordering behavior**
   - **No documentation about different behavior based on ordered flag**

3. **User Guide on Categorical Data**:
   - Explains that `ordered` parameter determines if categories have meaningful order
   - When `ordered=True`, enables comparison operations
   - When `ordered=False`, categories are unordered for comparison purposes
   - **Does not specify that unordered means categories should be sorted during operations**

### Key Documentation Gaps

1. The documentation never states that `remove_categories` will:
   - Sort the remaining categories alphabetically for unordered categoricals
   - Preserve insertion order only for ordered categoricals

2. The example in the docs shows `['b', 'c']` as result, which happens to be alphabetically sorted, but this could be coincidental or misleading since the original order was already alphabetical.

3. The documentation for the `ordered` parameter focuses on comparison/sorting operations, not on whether the category list itself maintains insertion order during mutations.

### Semantic Expectations

Based on the documentation and method name:
- "remove_categories" implies only removal, not reordering
- The ordered flag is documented as affecting comparison operations, not list mutations
- There's no reason to expect that unordered categoricals would have their category order modified

### Related Operations

Other category manipulation methods like `add_categories`, `rename_categories`, and `reorder_categories` are separate methods, suggesting that reordering is an explicit operation, not a side effect.

### Conclusion

The documentation does not specify or justify the current sorting behavior for unordered categoricals. A reasonable user would expect `remove_categories` to only remove categories, not reorder them, regardless of the `ordered` flag. The current behavior appears undocumented and unexpected.
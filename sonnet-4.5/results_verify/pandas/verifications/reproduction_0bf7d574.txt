REPRODUCTION REPORT
===================

I have successfully reproduced the bug described in the report.

## Property-Based Test Reproduction

The property-based test fails immediately when attempting to call `s.str.rsplit(sep, regex=False)`. The test correctly identifies that rsplit() does not accept a `regex` parameter, resulting in:

```
TypeError: StringMethods.rsplit() got an unexpected keyword argument 'regex'
```

This happens on the very first test case generated by Hypothesis.

## Direct Example Reproduction

The provided example code was also tested and confirmed the issue:

1. `s.str.split('-', regex=False)` works correctly and returns `['a', 'b', 'c']`
2. `s.str.rsplit('-', regex=False)` fails with a TypeError stating that `regex` is an unexpected keyword argument
3. `s.str.split('-', regex=True)` also works correctly, demonstrating that split() supports both regex=True and regex=False
4. `s.str.rsplit('-')` (without regex parameter) works correctly and returns `['a', 'b', 'c']`

## Verification of Method Signatures

Using Python's inspect module, I confirmed the actual signatures:
- `split()`: `(self, pat: 'str | re.Pattern | None' = None, *, n=-1, expand: 'bool' = False, regex: 'bool | None' = None)`
- `rsplit()`: `(self, pat=None, *, n=-1, expand: 'bool' = False)`

This confirms that split() has a `regex` parameter while rsplit() does not.

## Conclusion

The bug report is accurate. The rsplit() method lacks the regex parameter that is present in split(), creating an API inconsistency between these two related methods.
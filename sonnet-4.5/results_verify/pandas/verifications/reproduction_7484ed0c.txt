## Bug Reproduction Analysis

I successfully reproduced the bug described in the report. The issue occurs in the `size_to_pt` method of the `CSSResolver` class in pandas.io.formats.css.

### Reproduction Results

1. **Property-based test**: The test correctly identifies values with excessive trailing zeros. When testing with `pt_val=1.5`, the output is `1.500000pt` instead of the cleaner `1.5pt`.

2. **Direct reproduction examples**:
   - Input: `font-size: 1.5pt` → Output: `1.500000pt` (Expected: `1.5pt`)
   - Input: `margin: 10px` → Output: `7.500000pt` (Expected: `7.5pt`)
   - Input: `font-size: 3.75pt` → Output: `3.750000pt` (Expected: `3.75pt`)
   - Input: `font-size: 5pt` → Output: `5pt` (Correct - integers handled properly)
   - Input: `font-size: 0.5pt` → Output: `0.500000pt` (Expected: `0.5pt`)

### Root Cause

The issue is in line 384 of `/home/npc/miniconda/lib/python3.13/site-packages/pandas/io/formats/css.py`:

```python
size_fmt = f"{val:f}pt"
```

The `f` format specifier defaults to 6 decimal places, causing all non-integer values to display with 6 decimal places (e.g., `1.500000` instead of `1.5`).

### Impact

The bug produces mathematically correct but unnecessarily verbose CSS output. While the values are functionally equivalent, the excessive trailing zeros make the output harder to read and unnecessarily verbose, especially when inspecting styled DataFrame output in HTML or other formats.
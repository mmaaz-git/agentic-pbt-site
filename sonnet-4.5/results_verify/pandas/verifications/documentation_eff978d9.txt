## Documentation Analysis

### Official Documentation Review

1. **pandas.errors.AbstractMethodError Documentation**:
   - The official pandas documentation describes AbstractMethodError as a custom exception for abstract methods that must be implemented in concrete classes
   - It's recommended as a replacement for NotImplementedError
   - The documentation shows examples of proper usage but does not specify the exact format of ValueError messages for invalid methodtype parameters

2. **Source Code Documentation**:
   - The docstring in the source code (lines 273-292) shows examples of the main error message format
   - However, it does NOT document what happens when an invalid methodtype is passed
   - The examples only show successful usage with valid methodtypes

3. **Parameter Specification**:
   - The `methodtype` parameter accepts: "method", "classmethod", "staticmethod", or "property"
   - The code validates this input and raises ValueError for invalid values
   - The documentation does not explicitly specify the format of the ValueError message

### Key Finding

The documentation does not specify the exact format of the ValueError message when an invalid methodtype is provided. However, this is irrelevant because:

1. **Standard Error Message Convention**: Error messages universally follow the pattern "X must be one of [valid options], got [invalid input] instead" - this is a fundamental UX principle
2. **Common Sense**: An error message saying "methodtype must be one of invalid" is objectively wrong and misleading
3. **User Experience**: Error messages should help users fix their mistakes, not confuse them further

### Conclusion

While the documentation doesn't explicitly specify the ValueError format, the current implementation violates basic error message conventions and common sense. The swapped arguments create a nonsensical message that tells users the invalid value is what they should use, which is clearly incorrect regardless of documentation.
DOCUMENTATION FINDINGS FOR pandas.compat.numpy.function.CompatValidator

1. LACK OF PUBLIC DOCUMENTATION
- CompatValidator is NOT documented in the official pandas public API documentation
- It is part of pandas.compat.numpy.function module, which is in the pandas.compat namespace
- The pandas.compat module is explicitly marked as PRIVATE in the pandas documentation
- There is no official specification for how CompatValidator should behave

2. MODULE PURPOSE FROM SOURCE CODE DOCSTRING
From the module docstring:
"For compatibility with numpy libraries, pandas functions or methods have to
accept '*args' and '**kwargs' parameters to accommodate numpy arguments that
are not actually used or respected in the pandas implementation."

The module's purpose is to validate that extra parameters passed to pandas functions
match ONLY those in the numpy signature with their default values.

3. CLASS DOCUMENTATION
The CompatValidator class itself has NO docstring describing its behavior or contracts.
The __init__ and __call__ methods also lack docstrings specifying their behavior.

4. INFERRED PURPOSE FROM CODE
Based on code analysis:
- CompatValidator validates that extra arguments passed to pandas functions are compatible with numpy defaults
- It supports three validation methods: "args", "kwargs", or "both"
- The method parameter determines how validation is performed
- It's used internally by pandas to ensure numpy compatibility

5. VALIDATION METHOD PARAMETER
The code shows that the method parameter MUST be one of:
- "args" - validates positional arguments only
- "kwargs" - validates keyword arguments only
- "both" - validates both positional and keyword arguments
Any other value should raise ValueError("invalid validation method '{method}'")

6. NO SPECIFICATION FOR EMPTY ARGS/KWARGS BEHAVIOR
There is NO documentation or specification stating whether:
- Validation should occur when args and kwargs are empty
- The early return for empty args/kwargs is intentional or a bug
- Invalid methods should be accepted when there's nothing to validate

CONCLUSION:
The lack of documentation makes it impossible to determine from documentation alone whether
the current behavior (accepting invalid methods when args/kwargs are empty) is intended or not.
This is an internal, private API with no public documentation or specification.
## Bug Reproduction Results

### Test Environment
- pandas version: Tested on installed pandas in environment
- Python version: 3.13

### Bug Report Claims
The bug report claims that when `dtype=None` is passed and the array is non-numeric (e.g., string), the function incorrectly sets `dtype_given = True` on line 44, which should be `False`.

### Reproduction Test 1: Basic String Array
```python
arr = pd.array(['a', 'b', 'c'], dtype="string")
dtype, na_value = to_numpy_dtype_inference(arr, None, lib.no_default, False)
```
**Result:**
- dtype: None ✓ (matches bug report claim)
- na_value: <NA>
- The function indeed returns None as the dtype for string arrays

### Reproduction Test 2: Property-Based Test
The hypothesis test from the bug report fails as expected:
```python
@given(st.lists(st.text(min_size=1, max_size=10), min_size=1, max_size=100))
def test_to_numpy_dtype_inference_returns_dtype_for_string_arrays(values):
    arr = pd.array(values, dtype="string")
    dtype, na_value = to_numpy_dtype_inference(arr, None, lib.no_default, False)
    assert dtype is not None, "dtype should not be None for string arrays"
```
**Result:** Test fails on first example with values=['0']

### Code Path Analysis
For string arrays with dtype=None:
1. `dtype is None` → True
2. `is_numeric_dtype(arr.dtype)` → False (string is not numeric)
3. Goes to else branch (lines 43-44)
4. Sets `dtype_given = True`
5. dtype remains None throughout
6. Lines 58-62 check `if not dtype_given and hasna:` → condition is False because dtype_given=True
7. Function returns (None, <NA>)

### Comparison with Numeric Arrays
For numeric arrays with dtype=None:
```python
numeric_arr = pd.array([1, 2, 3], dtype="Int64")
dtype, na_value = to_numpy_dtype_inference(numeric_arr, None, lib.no_default, False)
```
**Result:**
- dtype: int64 (not None)
- na_value: <NA>
- The function correctly infers dtype for numeric arrays

### Analysis of dtype_given Variable
The `dtype_given` variable appears to track whether a dtype was explicitly provided by the caller:
- When dtype is explicitly provided (not None): dtype_given = True (correct)
- When dtype is None for numeric arrays: dtype_given = False (correct - dtype needs inference)
- When dtype is None for non-numeric arrays: dtype_given = True (questionable - no dtype was actually given)

### Caller Behavior
Both callers of this function in pandas codebase handle the None return:
- `masked.py`: `if dtype is None: dtype = object`
- This suggests callers are prepared for and expect None to be returned

### Technical Correctness of Bug Report
The bug report is technically correct in its analysis:
1. The function does return None for string arrays when dtype=None
2. Line 44 does set dtype_given = True when dtype is None and array is non-numeric
3. This prevents the fallback logic (lines 58-62) from running
4. The proposed fix (changing line 44 to dtype_given = False) would likely make the function behavior more consistent
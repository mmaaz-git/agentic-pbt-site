Bug Reproduction Report
=======================

## Summary
Successfully reproduced the bug as reported. When a pandas Series with float64 dtype containing whole number values (e.g., 1.0, 2.0, 3.0) is serialized to JSON and read back, the dtype is incorrectly inferred as int64.

## Reproduction Results

### Hypothesis Test
- Ran the property-based test with hypothesis as provided in the bug report
- Test FAILED on the first example with values like [0.0]
- Confirmed that dtype changes from float64 to int64 during round-trip
- The failure shows up consistently for float values that have no fractional part

### Manual Example Test
Running the provided example:
```
Original dtype: float64
JSON: {"name":null,"index":[0,1,2],"data":[1.0,2.0,3.0]}
Recovered dtype: int64
Dtypes match: False
```

Key observations:
1. The JSON output correctly includes decimal points (1.0, 2.0, 3.0)
2. The JSON clearly represents these as floating-point values
3. When read back, pandas incorrectly infers dtype as int64
4. The actual numeric values are preserved (1.0 â†’ 1), but the type is changed
5. This breaks the round-trip property

## Impact
This is a real bug that affects:
- Data type consistency in round-trip operations
- Type-dependent operations that may behave differently with int64 vs float64
- Silent data corruption where type information is lost

The bug is reproducible and affects all orient modes ('split', 'records', 'index') as shown by the hypothesis test.
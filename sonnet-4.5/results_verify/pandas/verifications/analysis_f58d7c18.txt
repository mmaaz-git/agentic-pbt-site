# Triage Analysis for SparseArray.nonzero Bug

## BUG (Most Likely)

**Why this should be classified as BUG:**
1. **Clear functional error**: The method returns objectively incorrect results when fill_value is nonzero
2. **Violates expected semantics**: A method named `nonzero()` should return indices of all nonzero elements, not just non-fill elements
3. **Breaks NumPy compatibility**: SparseArray is designed to work with NumPy operations, but nonzero() doesn't match NumPy's behavior
4. **Logic error in implementation**: The code clearly has a conceptual mistake - it filters for non-fill values instead of nonzero values
5. **Data correctness issue**: This could lead to incorrect data analysis and missed values in production code
6. **Reproducible and deterministic**: The bug occurs consistently with specific inputs

## INVALID (Unlikely)

**Why this might be INVALID:**
- Could argue: "Maybe the intent was to return non-fill indices, not nonzero indices"
- **Counter-argument**: The method is explicitly named `nonzero()`, not `non_fill()` or `sparse_indices()`

**Why this might be INVALID:**
- Could argue: "The method is undocumented, so any behavior is technically valid"
- **Counter-argument**: Method names have semantic meaning; `nonzero()` has established meaning from NumPy

## WONTFIX (Very Unlikely)

**Why this might be WONTFIX:**
- Could argue: "It's an edge case - who uses nonzero fill values in sparse arrays?"
- **Counter-argument**: Sparse arrays with nonzero fill values are valid and useful (e.g., mostly-1 matrices)

**Why this might be WONTFIX:**
- Could argue: "Performance optimization is more important than correctness for this edge case"
- **Counter-argument**: Correctness should never be sacrificed; the fix can still be optimized

## DOCUMENTATION_FIX (Unlikely)

**Why this might be DOCUMENTATION_FIX:**
- Could argue: "Add documentation saying nonzero() returns non-fill indices"
- **Counter-argument**: This would make the method name misleading and break principle of least surprise

**Why this might be DOCUMENTATION_FIX:**
- Could argue: "Document that nonzero() only works correctly when fill_value=0"
- **Counter-argument**: This is a limitation that should be fixed, not documented

## FEATURE_REQUEST (Very Unlikely)

**Why this might be FEATURE_REQUEST:**
- Could argue: "Supporting nonzero fill values is a new feature"
- **Counter-argument**: The method already exists and claims to find nonzero elements; fixing it is a bug fix

**Why this might be FEATURE_REQUEST:**
- Could argue: "Add a new method for correct nonzero behavior"
- **Counter-argument**: The existing method should be fixed, not replaced

## Final Assessment

This is clearly a **BUG**. The method has:
1. An unambiguous name that sets clear expectations
2. Demonstrably incorrect behavior that contradicts its name
3. A clear logic error in the implementation
4. Potential for causing data analysis errors

The lack of documentation doesn't excuse incorrect behavior when the method name has established semantics from NumPy. The fix is straightforward and maintains backward compatibility for the common case (fill_value=0).
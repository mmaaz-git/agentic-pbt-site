## Documentation Analysis

After reviewing the pandas documentation for both `get_dummies` and `from_dummies`, I found the following:

### Key Documentation Statements

1. **from_dummies docstring (line 376)**: Explicitly states that `from_dummies` "Inverts the operation performed by :func:`~pandas.get_dummies`."

2. **get_dummies See Also section**: References `from_dummies` as "Convert dummy codes to categorical DataFrame."

3. **drop_first parameter**: Documented as creating k-1 dummies out of k categorical levels by removing the first level.

### Documentation Analysis

The documentation clearly establishes an invertibility contract between `get_dummies` and `from_dummies`:

1. **Explicit Contract**: The docstring unambiguously states that `from_dummies` inverts `get_dummies`.

2. **Supported Parameters**: The `default_category` parameter in `from_dummies` is specifically designed to handle cases where a default value needs to be specified when no dummy column is set to 1.

3. **Edge Case Not Documented**: The documentation does not explicitly address what happens when:
   - `get_dummies(..., drop_first=True)` is used with data having only one unique value per column
   - This results in an empty DataFrame
   - How `from_dummies` should handle this empty DataFrame case

### Key Observations

1. The documentation does not say that `from_dummies` only works with certain parameter combinations of `get_dummies`.

2. The documentation does not warn about any limitations when using `drop_first=True`.

3. The examples in the documentation don't cover the edge case where all dummy columns are dropped.

4. The ValueError raised mentions "Length of 'default_category' did not match the length of the columns being encoded", which implies that the function expects columns to exist, but doesn't handle the special case of an empty DataFrame resulting from `drop_first=True`.

### Conclusion

Based on the documentation review, the claim that `from_dummies` should invert `get_dummies(..., drop_first=True)` even when it produces an empty DataFrame is valid. The documentation makes an unconditional statement about invertibility without carving out exceptions for edge cases.
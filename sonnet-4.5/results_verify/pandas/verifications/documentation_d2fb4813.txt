## Documentation Analysis

### Python's Hash-Equality Contract
From the official Python documentation (https://docs.python.org/3/reference/datamodel.html#object.__hash__):
- **Core Requirement**: "The only required property is that objects which compare equal have the same hash value"
- This is a fundamental Python requirement, not a suggestion or best practice
- Violating this contract can break hash-based collections (dict, set, etc.)

### Pandas ExtensionDtype Documentation
From the pandas API documentation and source code docstring:

1. **Hashability Requirement**:
   - "ExtensionDtypes are required to be hashable" (line 72 in base.py)
   - The base class provides default __hash__ implementation based on _metadata

2. **Equality Behavior** (from __eq__ docstring, lines 116-132):
   - "By default, 'other' is considered equal if either:
     * it's a string matching 'self.name'
     * it's an instance of this type and all of the attributes in self._metadata are equal"
   - This explicitly documents that string comparison is an intentional feature

3. **Hash Implementation**:
   - "The base class provides a default implementation, which relies on the _metadata class attribute"
   - Documentation states _metadata should contain attributes that define the data type
   - No mention that __hash__ must account for string equality

### Documentation Gap
The pandas documentation:
1. **Does document** that ExtensionDtype instances can equal strings
2. **Does NOT document** that this violates Python's hash-equality contract
3. **Does NOT warn** users about potential issues when using dtypes and strings in dictionaries/sets
4. **Does NOT provide** guidance on how to properly implement __hash__ when string equality is allowed

### Conclusion
The behavior is documented as intentional (string comparison in __eq__), but the implementation fails to maintain Python's fundamental hash-equality invariant. The documentation does not acknowledge or address this violation, creating a situation where documented behavior conflicts with Python's core data model requirements.
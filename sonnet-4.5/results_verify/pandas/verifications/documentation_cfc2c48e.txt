DOCUMENTATION ANALYSIS
=====================

Function Documentation:
----------------------
The import_optional_dependency function is documented in its docstring (lines 91-124 of _optional.py).

Key Documentation Points:
1. Purpose: "Import an optional dependency"
2. Error Handling: "By default, if a dependency is missing an ImportError with a nice message will be raised"
3. Parameters:
   - errors: {'raise', 'warn', 'ignore'} - What to do when dependency not found or version too old
   - When errors='raise': "Raise an ImportError"
4. Returns: The imported module when found and version is correct, or None in certain error cases

Documentation Promises:
----------------------
The documentation explicitly states:
- Line 94-95: "By default, if a dependency is missing an ImportError with a nice message will be raised"
- Line 107: When errors='raise': "Raise an ImportError"
- Lines 138 and 164: The code does raise ImportError in other error cases

The function consistently promises to raise ImportError for all import-related issues when errors='raise'.

What the Documentation Does NOT Say:
------------------------------------
- The documentation does not specify that KeyError might be raised
- The documentation does not distinguish between different types of import failures
- The documentation does not mention any special handling required for submodules

Existing Tests:
--------------
The existing test suite (test_optional_dependency.py) includes a test_submodule function that tests submodule imports, but it always ensures BOTH the parent and submodule are in sys.modules. The test doesn't cover the edge case where only the submodule exists without its parent.

API Contract Violation:
----------------------
The function violates its documented API contract by raising KeyError instead of ImportError in the specific case where:
- A submodule is being imported
- The submodule exists in sys.modules
- The parent module does not exist in sys.modules
- A min_version is specified

This is a clear violation of the documented behavior that states ImportError should be raised for import-related issues.
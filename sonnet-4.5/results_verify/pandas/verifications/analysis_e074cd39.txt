## Bug Triage Analysis

### Consideration for BUG (âœ“ SELECTED)

**Why it might be BUG:**
1. **Clear Contract Violation**: The documentation explicitly states that fill_value should be used when provided, but the implementation intentionally discards it (as confirmed by the source code comment).
2. **Inconsistent Behavior**: The same function behaves differently for numpy arrays vs Index objects, creating an API inconsistency.
3. **User Expectation Violation**: Users reasonably expect that providing a fill_value parameter will actually use that value.
4. **No Workaround**: Users cannot achieve the desired behavior when using Index objects - they're forced to accept NaN.
5. **Explicit Implementation Issue**: The source code comment confirms this is intentional but contradicts the documented API.

**Why it is BUG:**
This is a clear case where the implementation does not match the documented behavior. The API promises one thing and delivers another. This is the definition of a bug.

### Consideration for INVALID

**Why it might be INVALID:**
1. Could argue that Index objects have special NA handling requirements.
2. The comment in the code suggests this was intentional.

**Why it's NOT INVALID:**
The documentation makes no exception for Index objects. If Index objects were meant to have different behavior, this should be documented. The intentional implementation still violates the documented contract.

### Consideration for WONTFIX

**Why it might be WONTFIX:**
1. The behavior has been intentionally coded this way (per the comment).
2. Changing it might break existing code that relies on this behavior.
3. Could be considered a minor issue since users can work around it by converting to array first.

**Why it's NOT WONTFIX:**
This is not an obscure edge case - it's a fundamental API contract violation. The fill_value parameter becomes useless for Index objects, which is a significant limitation.

### Consideration for FEATURE_REQUEST

**Why it might be FEATURE_REQUEST:**
1. Could argue that supporting fill_value for Index is a new feature.
2. The current behavior might be considered "as designed" based on the code comment.

**Why it's NOT FEATURE_REQUEST:**
The API already documents that fill_value should work. This isn't requesting new functionality - it's asking for the documented functionality to work correctly.

### Consideration for DOCUMENTATION_FIX

**Why it might be DOCUMENTATION_FIX:**
1. The code intentionally behaves this way (per comment), so maybe the docs should be updated.
2. Could add a note that Index objects ignore fill_value.

**Why it's NOT DOCUMENTATION_FIX:**
The documented behavior is the correct and expected behavior. The implementation is wrong, not the documentation. Changing the documentation would make the API less useful and more confusing.

## Final Decision: BUG

This is clearly a BUG because:

1. **Contract Violation**: The implementation explicitly violates the documented API contract.
2. **No Documentation of Exception**: There's no documentation stating that Index objects behave differently.
3. **Inconsistent Behavior**: Creates an unexplained inconsistency between array and Index handling.
4. **Loss of Functionality**: Users cannot use custom fill values with Index objects.
5. **Clear Fix Available**: The bug report even provides a reasonable fix.

The fact that the code comment acknowledges discarding the fill_value makes this worse, not better - it shows the implementation knowingly violates the API contract. This should be fixed to honor the fill_value parameter as documented.
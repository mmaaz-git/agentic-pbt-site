## Documentation Analysis for Pandas Masked Reductions

After reviewing the pandas documentation and source code, I found the following key information:

### Official Documentation for sum() and prod()

The pandas documentation is explicit about the behavior when all values are NA:

1. **sum()**: The documentation clearly states "By default, the sum of an empty or all-NA Series is 0." This is configurable via the `min_count` parameter - if `min_count=1` is set, an empty or all-NA Series will return `nan`.

2. **prod()**: Similarly, the documentation states "By default, the product of an empty or all-NA Series is 1.0." This can also be controlled by `min_count` - with `min_count=1`, an empty or all-NA Series returns `nan`.

### Documentation for min(), max(), and mean()

The documentation for these functions does NOT explicitly specify what they return when all values are NA or masked. The documentation only mentions the `skipna` parameter but doesn't clarify the all-NA case behavior.

### Source Code Behavior

Looking at the actual implementation in masked_reductions.py:

1. **min() and max()**: Line 133 shows these functions explicitly return `libmissing.NA` when all values are masked.

2. **mean()**: Line 164 shows it explicitly checks `if mask.all()` and returns `libmissing.NA`.

3. **sum() and prod()**: These use the `_reductions()` function which relies on `min_count` to determine behavior. With default `min_count=0`, they don't have a specific check for all-masked values.

### Key Finding

The documented behavior for sum() and prod() is that they return their identity elements (0 and 1) when all values are NA with min_count=0. This is **explicitly documented** and **intentional design**. The bug report claims this is inconsistent with other functions, but the documentation makes it clear this is the expected behavior and can be controlled via the `min_count` parameter.

The inconsistency is not with the specification but rather between different reduction functions' design choices. sum() and prod() have configurable behavior via min_count, while min(), max(), and mean() always return NA for all-masked cases.
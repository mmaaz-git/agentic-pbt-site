## Documentation Analysis for AbstractMethodError

### Official Documentation Review

1. **Pandas Documentation (pandas.pydata.org)**
   - States that AbstractMethodError should be used "instead of NotImplementedError for abstract methods"
   - Parameters documented as:
     - class_instance: The class or instance where the abstract method is not implemented
     - methodtype: Optional, defaults to "method" (can specify "classmethod")
   - Example shows passing `cls` for classmethods and `self` for instance methods

2. **Docstring in Source Code**
   - Located in pandas/errors/__init__.py
   - Shows example usage where classmethod decorator passes `cls` (the class object)
   - For regular methods, shows passing `self` (the instance)
   - No explicit requirement or validation that classmethods MUST receive a class object

3. **Parameter Type Annotations**
   - The __init__ method signature: `__init__(self, class_instance, methodtype: str = "method")`
   - The parameter is named `class_instance` which is ambiguous - could mean either class OR instance
   - No type hint restricting class_instance to be a type/class object for classmethods

4. **Documentation Gaps**
   - The documentation does NOT explicitly state that when methodtype='classmethod', the first parameter MUST be a class object
   - The parameter name `class_instance` itself suggests it can be either a class OR an instance
   - The examples show the correct usage but don't warn against incorrect usage
   - There's no mention that passing an instance with methodtype='classmethod' will cause a crash

5. **Error in Documentation Example**
   - Line 291 in the docstring shows wrong error message: says "classmethod" when it should say "method"
   - This is a minor documentation error but not related to the main bug

### Conclusion
The documentation does not explicitly prohibit passing an instance when methodtype='classmethod'. While the examples show the correct pattern (passing cls for classmethods), there's no clear specification that this is required. The parameter name `class_instance` suggests it can accept either a class or instance, making the current behavior (crashing with AttributeError) unexpected and undocumented.
DOCUMENTATION ANALYSIS FOR numpy.ma.allequal

OFFICIAL DOCUMENTATION:
The function signature is: numpy.ma.allequal(a, b, fill_value=True)

According to the official NumPy documentation:
- Returns True if all entries of arrays a and b are equal
- Uses fill_value to determine how masked values are compared
- fill_value=True means masked values are considered equal
- fill_value=False means masked values are NOT considered equal
- Returns False if either array contains NaN

The key documentation statement is: "Whether masked values in a or b are considered equal (True) or not (False)."

SOURCE CODE DOCUMENTATION (from docstring):
The docstring states: "Return True if all entries of a and b are equal, using fill_value as a truth value where either or both are masked."

The docstring provides an example:
```python
a = np.ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])
b = np.array([1e10, 1e-7, -42.0])
np.ma.allequal(a, b, fill_value=False)  # Returns False
np.ma.allequal(a, b)  # Returns True
```

In this example:
- The arrays have different values at position 2 (42.0 vs -42.0)
- Position 2 is masked in array a
- With fill_value=True, the masked position is treated as equal, so result is True
- With fill_value=False, the documentation implies False should be returned

CRITICAL OBSERVATION:
The documentation describes fill_value as controlling whether "masked values are considered equal" - it does NOT say that having any mask should automatically return False. The parameter is meant to control how masked positions are treated in the comparison, not to bypass the comparison entirely.

The documentation suggests that fill_value=False means that masked positions should be considered NOT equal, but it doesn't specify that the function should ignore all unmasked values and automatically return False whenever any mask exists.
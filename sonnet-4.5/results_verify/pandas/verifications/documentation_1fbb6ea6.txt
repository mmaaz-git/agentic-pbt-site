Documentation Analysis for AbstractMethodError
===============================================

## Official Documentation Review

1. **pandas.pydata.org Documentation**
   - States that AbstractMethodError is used for abstract methods as a replacement for NotImplementedError
   - Documents the `methodtype` parameter as optional with default 'method'
   - Shows example error messages: "This {methodtype} must be defined in the concrete class {ClassName}"
   - Does NOT document what happens when an invalid methodtype is provided

2. **Inline Docstring (Source Code)**
   - Brief description: "Raise this error instead of NotImplementedError for abstract methods"
   - Provides examples for classmethod and regular method usage
   - Shows expected error output format
   - Does NOT specify valid values for methodtype parameter
   - Does NOT document the ValueError that occurs with invalid methodtype

## Key Findings

1. **No Documentation of Valid methodtype Values**
   - Neither official docs nor docstring specify that methodtype must be one of: {"method", "classmethod", "staticmethod", "property"}
   - No documentation about the ValueError raised for invalid methodtype values

2. **No Documentation of Error Message Format**
   - The documentation doesn't specify what error message should be shown when an invalid methodtype is provided
   - This is an internal validation error that occurs during object initialization

3. **Error Message Conventions**
   - While not explicitly documented, Python and pandas follow standard error message conventions:
     - Format: "parameter must be one of {valid_options}, got {actual_value} instead"
     - This is consistent across the pandas codebase and Python standard library
   - The current implementation violates this convention by swapping the positions

## Documentation Completeness
The documentation is incomplete regarding:
- Valid values for methodtype parameter
- Behavior when invalid methodtype is provided
- Error message format for validation errors

However, the lack of explicit documentation doesn't make the bug invalid. The error message format follows well-established conventions in Python that are understood implicitly. The current implementation clearly violates these conventions by presenting the error message backwards.

## Conclusion
While the specific error message format for invalid methodtype is not documented, the bug represents a violation of standard Python error message conventions. The error message should follow the pattern "expected X, got Y" not "expected Y, got X". This is a usability issue that makes debugging harder for users.
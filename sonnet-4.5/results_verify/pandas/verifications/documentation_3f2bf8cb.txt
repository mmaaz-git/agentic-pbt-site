## Documentation Analysis

### hash_array Documentation Review:

The documentation for `hash_array` states:
- **Purpose**: "Given a 1d array, return an array of deterministic integers"
- **categorize parameter**: "Whether to first categorize object arrays before hashing. This is more efficient when the array contains duplicate values."

### Key Documentation Findings:

1. **No Explicit Guarantee About Hash Uniqueness**: The documentation doesn't explicitly state that different values must produce different hashes, but this is a fundamental implicit expectation of any hash function.

2. **Categorize Described as Optimization**: The `categorize` parameter is documented as an efficiency optimization for arrays with duplicates. Importantly, it does NOT say that it may change the hash values or cause collisions. An optimization parameter should not change the correctness of the output.

3. **"Deterministic" Promise**: The documentation promises "deterministic integers", meaning the same input should always produce the same output. This is upheld, but determinism alone doesn't excuse incorrect collisions between distinct values.

4. **No Warning About Null Bytes**: There's no documentation warning that strings containing null bytes may be treated specially or incorrectly when `categorize=True`.

5. **Implicit Expectations**: While not explicitly documented, hash functions have well-established expectations:
   - Different inputs should (with high probability) produce different outputs
   - Hash collisions should be rare and unpredictable
   - Optimization flags should not affect correctness

### Conclusion:
The behavior violates reasonable expectations of a hash function. The documentation describes `categorize` as a performance optimization, which implies it should not change the semantic behavior (causing distinct values to hash identically). This is not a documentation issue but a genuine implementation bug.
## INVALID Considerations

**Why it might be INVALID:**
The function's documentation does not explicitly state what should happen with empty strings. The documentation only says it raises ValueError when "Part of the Excel column name was invalid." Since an empty string has no "parts," one could argue that this phrasing doesn't cover empty strings. The function is also an internal function (starts with underscore), suggesting it might not be intended for direct use and thus edge cases like empty strings might not be a concern. The current behavior is deterministic and consistent - it always returns -1 for empty input.

**Why it might not be INVALID:**
The documentation clearly states the function converts "Excel column name" to an index, and empty strings are not valid Excel column names. The function already raises ValueError for other invalid inputs like "A1", showing that input validation is expected. The -1 return value is semantically meaningless as Excel columns start at index 0, and this invalid value propagates to other functions causing incorrect behavior.

## WONTFIX Considerations

**Why it might be WONTFIX:**
This is an internal function (prefixed with underscore) that may not be intended for public use. The issue only occurs with clearly invalid input (empty strings), which responsible callers should never pass. The behavior has likely existed for a long time without causing major issues, suggesting it's not practically important. The fix would require changing existing behavior that some code might depend on.

**Why it might not be WONTFIX:**
The bug causes propagation of invalid indices to other functions like _range2cols, which could lead to subtle bugs in user code. The inconsistent error handling (ValueError for some invalid inputs, -1 for others) makes the function harder to use correctly. Even internal functions should have consistent and predictable behavior. The fix is trivial and would improve code quality.

## DOCUMENTATION_FIX Considerations

**Why it might be DOCUMENTATION_FIX:**
The documentation doesn't explicitly state what happens with empty strings, so one could argue the documentation should be updated to reflect the current behavior. The phrase "Part of the Excel column name was invalid" for ValueError could be clarified to explain which specific cases raise errors versus return -1. If the -1 return is intentional for empty strings, the documentation should state this explicitly.

**Why it might not be DOCUMENTATION_FIX:**
The function's purpose is clear from its name and description - converting valid Excel column names to indices. Empty strings are obviously not valid column names, so the current behavior is a bug, not a documentation issue. Documenting that the function returns -1 for empty strings would be endorsing incorrect behavior rather than fixing it.

## FEATURE_REQUEST Considerations

**Why it might be FEATURE_REQUEST:**
One could argue that proper handling of empty strings is a new feature rather than a bug fix, since the function currently has defined (if questionable) behavior for this case. Adding validation for empty strings could be seen as enhancing the function beyond its original scope. The user is essentially asking for better input validation, which could be considered a feature enhancement.

**Why it might not be FEATURE_REQUEST:**
The function already validates input and raises ValueError for invalid characters, so handling empty strings consistently is fixing existing functionality, not adding new features. Valid Excel column name conversion is the core purpose of the function, not a new feature. The issue is about correcting incorrect behavior, not adding new capabilities.

## BUG Considerations

**Why it might be BUG:**
The function returns a semantically invalid value (-1) for empty strings, as there is no Excel column with index -1. This creates inconsistent error handling where some invalid inputs raise ValueError ("A1") while others return -1 (""). The invalid return value propagates to other functions like _range2cols, potentially causing incorrect behavior in dependent code. The documentation implies only valid Excel column names should be accepted, and empty strings are not valid column names.

**Why it might not be BUG:**
The function is internal (underscore prefix) and may not be intended for robust edge case handling. The documentation doesn't explicitly promise to raise ValueError for empty strings. The behavior is consistent and deterministic, always returning -1 for empty input. No actual user-facing bug or crash has been demonstrated, just a theoretical concern about invalid indices.

## Overall Consideration

Looking at all considerations, this appears to be a borderline case between WONTFIX and INVALID. The function in question is an internal utility function (indicated by the underscore prefix) that has undocumented behavior for an edge case (empty strings). While the -1 return value is technically incorrect from a semantic standpoint, the impact is limited because: (1) this is an internal function not meant for direct public use, (2) callers should never pass empty strings to a function meant to convert column names, and (3) the behavior has likely existed for years without causing significant issues.

The strongest argument for BUG is the inconsistent error handling - the function raises ValueError for "A1" but returns -1 for "". However, one could argue these are different categories of invalid input: "A1" is an malformed column name (contains invalid characters), while "" is not a column name at all. The documentation's phrase about "Part of the Excel column name was invalid" could be interpreted to only cover the former case.

The propagation of -1 to _range2cols is concerning but ultimately reflects a caller passing invalid input. Well-written code using these internal functions should validate input before calling them. While fixing this would improve robustness, it's questionable whether modifying long-standing behavior in an internal function for an edge case that shouldn't occur is worth the risk of breaking existing code that might somehow depend on this behavior.
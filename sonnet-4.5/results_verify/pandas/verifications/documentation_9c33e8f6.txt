## Documentation Analysis for cumsum()

### Source Code Documentation

The cumsum() method has the following docstring in the source code:

```python
def cumsum(self, axis: AxisInt = 0, *args, **kwargs) -> SparseArray:
    """
    Cumulative sum of non-NA/null values.

    When performing the cumulative summation, any non-NA/null values will
    be skipped. The resulting SparseArray will preserve the locations of
    NaN values, but the fill value will be `np.nan` regardless.

    Parameters
    ----------
    axis : int or None
        Axis over which to perform the cumulative summation. If None,
        perform cumulative summation over flattened array.

    Returns
    -------
    cumsum : SparseArray
    """
```

### Key Documentation Points

1. **Promise**: The method promises to return a `SparseArray` with cumulative sum
2. **Return type**: Explicitly states it returns `SparseArray`
3. **Functionality**: States it computes "Cumulative sum of non-NA/null values"
4. **No exceptions mentioned**: The documentation does not mention that it may raise RecursionError or fail for certain fill values

### Documentation Implications

The documentation makes several important guarantees:
1. It will return a SparseArray (not raise an exception)
2. It will compute the cumulative sum
3. It handles NA/null values specially

There is NO mention that:
- The function might fail for non-null fill values
- The function might raise a RecursionError
- The function has any limitations based on fill_value

### Expected vs Actual Behavior

**Documentation Promise**: Returns cumulative sum as SparseArray
**Actual Behavior**: Crashes with RecursionError for non-null fill values

This is clearly a violation of the documented behavior. The function fails to deliver its promised functionality.

### Comparison with NumPy

NumPy's cumsum works correctly on all arrays:
- `np.array([0, 1, 2]).cumsum()` â†’ `[0, 1, 3]`

Users would reasonably expect SparseArray.cumsum() to work similarly, especially since:
1. SparseArray is meant to be a drop-in replacement for regular arrays in many cases
2. The documentation doesn't warn about any limitations
3. cumsum is a fundamental array operation

### Conclusion

The documentation clearly establishes that cumsum() should return a SparseArray with the cumulative sum. There are no documented exceptions or limitations for non-null fill values. The current behavior (infinite recursion) violates the documented contract.
## Documentation Analysis

### ArrowExtensionArray.fillna Documentation

The fillna method docstring indicates:
- Accepts a scalar value to fill all missing values
- Should return an ExtensionArray with NA/NaN filled
- No explicit mention of handling null-type arrays
- No explicit mention of what exceptions should be raised for type incompatibility

### General pandas fillna Behavior

From testing other array types:
1. **Regular pandas array** (object dtype): Successfully fills None with 0
2. **Nullable integer array** (Int64): Successfully fills None with 0
3. **String array**: Successfully fills None with strings

All other pandas array types handle filling an all-None array gracefully without raising errors.

### Expected Error Handling

Looking at the code, there is already an exception handler (lines 1161-1163) that:
- Catches `pa.ArrowTypeError`
- Raises a user-friendly `TypeError` with message: "Invalid value '{value}' for dtype '{dtype}'"

This indicates the intent is to:
1. Catch PyArrow-specific errors
2. Convert them to standard Python TypeError
3. Provide a clear error message about dtype incompatibility

### PyArrow Null Type Behavior

PyArrow has a special "null" type for arrays containing only None values. This type cannot accept non-null values, hence the "Invalid null value" error when trying to convert 0 to null type.

### Conclusion

The documentation doesn't explicitly specify behavior for null-type arrays, but:
1. The existing error handling pattern shows intent to catch type conversion errors
2. Other pandas array types handle this case without crashing
3. The error message provided by the existing handler would be appropriate
4. The bug is that `pa.ArrowInvalid` is not caught alongside `pa.ArrowTypeError`
Documentation Analysis for AbstractMethodError
==============================================

Official Documentation:
The pandas documentation for AbstractMethodError shows:
- It's a subclass of NotImplementedError used to indicate abstract methods must be implemented
- Takes parameters: class_instance and methodtype (default="method")
- Valid methodtype values per the code: {"method", "classmethod", "staticmethod", "property"}

Error Message Convention Analysis:
1. I searched for similar "must be one of" patterns in pandas codebase
2. Found multiple examples of error message formatting:
   - "engine must be one of 'auto', 'sqlalchemy'" (sql.py:1611)
   - "engine must be one of 'pyarrow', 'fastparquet'" (parquet.py:83)
   - "method must be one of.* Got '{invalid_method}' instead" (test_interpolate.py:354)

3. The standard convention follows the pattern:
   "{parameter} must be one of {valid_options}[, got {invalid_value} instead]"

   Where:
   - valid_options come first (the allowed values)
   - invalid_value comes after "got" (what was actually provided)

4. The current implementation at errors/__init__.py:298 has it backwards:
   f"methodtype must be one of {methodtype}, got {types} instead."

   This puts the invalid value (methodtype) where valid options should be, and valid options (types) where the invalid value should be.

Conclusion:
The documentation doesn't explicitly specify error message format, but:
1. Common practice in pandas and Python shows valid options should come before invalid input
2. The test case expectation aligns with standard error message conventions
3. The current implementation violates the intuitive and standard format used elsewhere in pandas
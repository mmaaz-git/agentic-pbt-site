## Documentation Analysis for pandas.errors.AbstractMethodError

### Official pandas documentation:
The pandas documentation for AbstractMethodError indicates:
1. Purpose: Raise an error for abstract methods that must be defined in concrete classes (more specific than NotImplementedError)
2. Parameters:
   - class_instance: The class/instance where the abstract method is not implemented
   - methodtype: Optional parameter to specify the method type (defaults to "method")
3. The documentation provides examples showing proper usage when raising this exception

### Parameter validation:
The documentation does not explicitly specify:
- What values are valid for methodtype
- The exact format of error messages when invalid methodtype values are provided
- Whether there's a specific convention for parameter validation error messages

### Python conventions:
While not explicitly documented in pandas, Python has strong conventions for parameter validation error messages:
- Standard format: "parameter must be [valid values], got [actual value] instead"
- This follows the pattern of stating what is expected first, then what was actually received
- Examples from Python stdlib:
  - ValueError: "invalid literal for int() with base 10: 'abc'"
  - TypeError: "expected str, bytes or os.PathLike, got int"

### Source code analysis:
Looking at the actual implementation at line 298, the error message format is:
```python
f"methodtype must be one of {methodtype}, got {types} instead."
```

This puts the invalid value (methodtype) where the valid values should be, and the valid values (types) where the invalid value should be. This is backwards from the standard Python convention and creates a confusing error message.
Documentation Analysis
======================

## Pandas Documentation Findings

### pandas.read_json()
- Purpose: "Converts JSON strings to pandas objects"
- Has a `dtype` parameter that defaults to True, meaning "infer column data types"
- Documentation shows examples of round-trip usage with to_json()
- Specifically mentions supporting JSON created by pandas' to_json() method
- No explicit warning about dtype changes for whole-number floats

### pandas.Series.to_json()
- Purpose: "Converts a pandas Series to a JSON string"
- Documentation states it "pairs with read_json() for round-trip data conversion"
- Floating point values are encoded with decimal precision (default 10 places)
- Shows example of round-trip: "result = df.to_json(orient='split'); parsed = loads(result)"

### Round-Trip Expectation
The pandas documentation explicitly:
1. States that to_json() "pairs with read_json() for round-trip data conversion"
2. Shows examples of round-trip usage without caveats about dtype changes
3. Does not warn about float64 â†’ int64 conversion for whole numbers

## JSON Specification Analysis

### JSON.org and RFC 7159
- JSON does not distinguish between number types (integer vs float)
- Numbers can include decimal points and fractions
- The representation "1.0" is valid JSON and includes the decimal point
- RFC 7159 recommends IEEE 754-2008 binary64 (double precision) for interoperability
- JSON parsers may interpret numbers differently based on their representation

### Key Finding
While JSON itself doesn't enforce type distinction, the JSON string produced by pandas DOES preserve the decimal notation (1.0, 2.0, 3.0), indicating these were floating-point values. The information needed to preserve the dtype is present in the JSON.

## Documentation Gap
The pandas documentation:
- Does not specify how dtype inference works with whole-number floats
- Does not warn about this specific case where round-trip fails
- Creates an expectation of round-trip preservation that is violated

This is not a case of "unspecified behavior" - the documentation explicitly describes these functions as supporting round-trip conversion, which creates a reasonable expectation that dtype should be preserved.
DOCUMENTATION ANALYSIS FOR pandas.read_json / pandas.Series.to_json

Key Documentation Findings:

1. The convert_dates Parameter:
   - Default value: True (confirmed in documentation and source)
   - Can be a boolean or list of column names
   - Documentation states: "If True then default datelike columns may be converted"

2. Date Detection Logic:
   The documentation specifies that a column is considered "datelike" if:
   - It ends with '_at'
   - It ends with '_time'
   - It begins with 'timestamp'
   - It is 'modified'
   - It is 'date'

3. Important Observation - NO MENTION OF NUMERIC CONVERSION:
   The documentation does NOT mention that numeric values will be automatically converted to dates based on their magnitude. The documentation only describes column name-based heuristics for date detection.

4. Round-trip Expectations:
   - The documentation mentions that "Compatible JSON strings can be produced by to_json() with a corresponding orient value" for read_json
   - This suggests round-trip compatibility is expected
   - However, there is NO explicit guarantee that round-trip will preserve dtype or values

5. The date_unit Parameter:
   - Documentation states it's for "The timestamp unit to detect if converting dates"
   - Default is None, which means "try and detect the correct precision"
   - This implies automatic detection behavior exists

6. Critical Gap in Documentation:
   The documentation does NOT specify:
   - That numeric values above a certain threshold will be converted to dates
   - What the threshold value is (31536000 in practice)
   - That this conversion happens regardless of column names
   - That this behavior can break round-trip serialization

7. Expected vs Actual Behavior:
   - Expected (from docs): Date conversion based on column names
   - Actual: Date conversion based on numeric value magnitude (>= 31536000)

This is a significant undocumented behavior that affects data integrity during JSON serialization/deserialization.
## Documentation Analysis for read_sas Function

### Official Documentation

From the pandas.io.sas.sasreader.py docstring (lines 99-130):
```
Read SAS files stored as either XPORT or SAS7BDAT format files.

Parameters
----------
filepath_or_buffer : str, path object, or file-like object
    String, path object (implementing ``os.PathLike[str]``), or file-like
    object implementing a binary ``read()`` function.
format : str {'xport', 'sas7bdat'} or None
    If None, file format is inferred from file extension. If 'xport' or
    'sas7bdat', uses the corresponding format.
```

### Key Documentation Points

1. **Format Parameter Documentation**: The documentation explicitly states that when `format` is None, "file format is inferred from file extension"

2. **File Extension vs Substring**: The documentation clearly uses the term "file extension" not "substring in filename". A file extension is universally understood in computing to mean the suffix after the last dot in a filename (e.g., .txt, .pdf, .xpt, .sas7bdat).

3. **Standard File Extensions**: The two supported formats have well-defined file extensions:
   - XPORT format: .xpt extension
   - SAS7BDAT format: .sas7bdat extension

### Documentation Implications

The documentation creates a clear expectation that:
- Files ending with ".xpt" should be treated as XPORT format
- Files ending with ".sas7bdat" should be treated as SAS7BDAT format
- Files with other extensions should raise an error

The current implementation violates this documented behavior by accepting files like:
- "archive.xpt.backup" (extension is .backup, not .xpt)
- "data.sas7bdat.old" (extension is .old, not .sas7bdat)
- "my.xpt_notes.txt" (extension is .txt, not .xpt)

### Conclusion

The documentation is clear and unambiguous about inferring format from "file extension". The implementation using substring matching (`in` operator) directly contradicts the documented behavior. This is not a documentation issue - the documentation correctly describes the intended behavior, but the implementation is buggy.
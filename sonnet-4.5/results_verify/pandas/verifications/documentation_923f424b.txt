DOCUMENTATION ANALYSIS

The function format_percentiles() has clear and explicit documentation in its docstring (lines 1549-1578 of format.py):

DOCUMENTED CONTRACT:
The docstring at lines 1562-1564 explicitly states:
"Rounding precision is chosen so that:
(1) if any two elements of ``percentiles`` differ, they remain different after rounding
(2) no entry is *rounded* to 0% or 100%."

Additional documentation:
- Line 1565: "Any non-integer is always rounded to at least 1 decimal place."
- Line 1554: Input should be "list-like, containing floats from interval [0,1]"
- Line 1574-1578: Example showing that 0 should produce '0%' but other values should not

KEY DOCUMENTATION PROMISES:
1. UNIQUENESS: Different input values must remain different in output
2. NO FALSE BOUNDARIES: Values should not round to 0% or 100% unless they are exactly 0 or 1
3. The function should handle ALL valid floats in [0,1] interval

EXAMPLES PROVIDED:
The documentation includes two examples that demonstrate these properties:
1. format_percentiles([0.01999, 0.02001, 0.5, 0.666666, 0.9999]) maintains uniqueness
2. format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999]) shows 0 correctly maps to '0%'

DOCUMENTATION vs ACTUAL BEHAVIOR:
The documented behavior is NOT met for the reported edge cases:
- Uniqueness is violated when [0.0, 1.401298464324817e-45] both map to '0%'
- The no-false-boundaries rule is violated when 1e-10 rounds to '0%'
- The function produces invalid 'nan%' output for [0.0, 5e-324]

CONCLUSION:
The bug report correctly identifies violations of the explicitly documented contract. The documentation is clear and unambiguous about the expected behavior. The function fails to meet its documented specifications for edge cases involving very small percentile values. This is not a documentation issue - the code does not conform to its specification.
DOCUMENTATION ANALYSIS
======================

I've examined the documentation for ArrowExtensionArray.all() and .any() methods, both in the source code and online resources.

1. Source Code Docstrings:

From array.py in pandas/core/arrays/arrow/:

all() method docstring states:
- "Exclude NA values. If the entire array is NA and `skipna` is True, then the result will be True, as for an empty array."
- Example given: "pd.array([pd.NA], dtype='boolean[pyarrow]').all() returns True"

any() method docstring states:
- "Exclude NA values. If the entire array is NA and `skipna` is True, then the result will be False, as for an empty array."
- Example given: "pd.array([pd.NA], dtype='boolean[pyarrow]').any() returns False"

2. Consistent API Contract:

The documented behavior is consistent with:
- Other pandas nullable array types (IntegerArray, BooleanArray)
- The principle that all-NA arrays with skipna=True behave like empty arrays
- Standard reduction semantics: all() on empty = True, any() on empty = False

3. Implementation Requirements:

The documentation clearly establishes that:
- When skipna=True and the entire array is NA, all() MUST return True
- When skipna=True and the entire array is NA, any() MUST return False
- This is an explicit part of the API contract, not undefined behavior

4. PyArrow Integration Note:

The documentation mentions that ArrowExtensionArray uses pyarrow compute functions, and some methods may raise exceptions if the compute function is not available. However, this is presented as a limitation to be handled, not as acceptable behavior for documented functionality.

CONCLUSION: The documentation unambiguously specifies that all() and any() should handle all-NA arrays with specific return values when skipna=True, not raise TypeErrors. The current behavior violates the documented API contract.
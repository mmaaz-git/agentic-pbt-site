## Documentation Analysis for pandas.util.hash_array

### Official Documentation
The official documentation for `pandas.util.hash_array` states:

Parameters:
- vals : ndarray or ExtensionArray
- encoding : str, default 'utf8' - Encoding for data & key when strings.
- hash_key : str, default _default_hash_key - Hash_key for string key to encode.
- categorize : bool, default True - Whether to first categorize object arrays before hashing.

The documentation does NOT specify:
1. Any requirement that hash_key must be exactly 16 bytes
2. Different behavior based on the dtype of the input array
3. That hash_key is ignored for numeric arrays
4. That hash_key only affects object arrays

### Internal Documentation
Looking at the C extension function `hash_object_array` that is called for object arrays, the documentation states:
"key : hash key, must be 16 byte len encoded"

This requirement is only documented for the internal C function, not in the public API documentation.

### Source Code Analysis
The source code shows:
1. The default hash_key is "0123456789123456" (16 bytes)
2. For numeric arrays (int, float, bool, datetime, timedelta), the hash_key parameter is completely ignored - the code path doesn't use it at all
3. For object arrays, the code calls `hash_object_array(vals, hash_key, encoding)` which requires a 16-byte key
4. There is no validation of hash_key at the top level of the function

### Key Findings
1. The public API documentation does not mention the 16-byte requirement for hash_key
2. The documentation does not mention that hash_key is ignored for numeric arrays
3. The behavior is inconsistent - the same parameter has different validation requirements depending on the input type
4. The internal C function documentation does specify the 16-byte requirement, but this is not exposed in the public API docs
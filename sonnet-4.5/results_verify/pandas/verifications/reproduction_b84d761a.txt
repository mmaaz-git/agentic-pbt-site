Reproduction Results for AbstractMethodError Bug Report

I have successfully reproduced both bugs reported in the bug report:

## Bug 1: Swapped Error Message Parameters

**Reproduction confirmed**: YES

When passing an invalid methodtype like 'invalid_type', the error message is:
"methodtype must be one of invalid_type, got {'method', 'property', 'staticmethod', 'classmethod'} instead."

The bug report is correct - the parameters are swapped. The error message should say:
"methodtype must be one of {'method', 'property', 'staticmethod', 'classmethod'}, got invalid_type instead."

This is clearly a bug in line 298 of the source code where the f-string has the wrong variable order.

## Bug 2: AttributeError in __str__ for classmethod with instance

**Reproduction confirmed**: YES

When creating an AbstractMethodError with an instance (not a class) and methodtype='classmethod', calling str() on the error raises:
"AttributeError: 'DummyClass' object has no attribute '__name__'"

This happens because line 305 assumes `self.class_instance` is a class object with a __name__ attribute when methodtype='classmethod', but there's no validation to ensure this.

When a proper class object is passed (e.g., DummyClass instead of DummyClass()), the __str__ method works correctly.

## Property-Based Test

The property-based test technically "passes" but for the wrong reason - it finds the invalid methodtype in the error message because it's in the wrong position (where the valid types should be listed).

Both bugs are real technical issues in the pandas codebase that affect the clarity and functionality of the AbstractMethodError class.
DOCUMENTATION ANALYSIS REPORT
============================

I have reviewed all relevant documentation for this bug. Here are my findings:

1. PANDAS CATEGORICAL DOCUMENTATION (pandas.Categorical.from_codes):
   - EXPLICITLY states that -1 is the sentinel value for NaN/missing data
   - Documentation quote: "codes are an integer array, where each integer points to a category... or else is -1 for NaN"
   - This is a well-established pandas convention for representing missing categorical values

2. DATAFRAME INTERCHANGE PROTOCOL SPECIFICATION:
   - The protocol supports multiple null representation types via ColumnNullType enum
   - Includes USE_SENTINEL option specifically for sentinel-based null representation
   - The protocol has a describe_null() method to communicate how nulls are encoded
   - No requirement to use modulo arithmetic when handling sentinel values

3. PANDAS from_dataframe() DOCUMENTATION:
   - Very minimal documentation available
   - Does NOT specify any special handling for sentinel values
   - Does NOT document that modulo arithmetic would be applied to codes
   - No warning about data corruption with categorical missing values
   - Simply states it builds a pandas DataFrame from interchange object

4. SOURCE CODE COMMENT ANALYSIS:
   - The comment at line 251-252 states:
     "Doing module in order to not get ``IndexError`` for out-of-bounds sentinel values in `codes`"
   - This comment acknowledges sentinel values exist
   - However, the implementation is incorrect - it should handle sentinels specially, not apply modulo

5. EXPECTED BEHAVIOR BASED ON DOCUMENTATION:
   - pandas.Categorical explicitly defines -1 as NaN sentinel
   - The interchange protocol supports sentinel-based nulls
   - from_dataframe() should preserve data during round-trip
   - Therefore, -1 codes MUST be preserved as NaN values, not converted to valid categories

6. DOCUMENTATION GAPS:
   - from_dataframe() lacks detailed documentation about categorical handling
   - No explicit statement about preserving sentinel values
   - However, data preservation is an implicit requirement of any interchange protocol

CONCLUSION:
The bug violates pandas' own documented convention that -1 represents NaN in categorical codes. The documentation establishes clear expectations that -1 is a sentinel value, not a regular code to be processed with modulo arithmetic. This is a clear violation of documented behavior.
BUG TRIAGE ANALYSIS
==================

## Evaluation Against Each Category

### BUG (Valid Bug Report)
**Strong Evidence FOR:**
- Data corruption occurs - actual array values are changed when they should not be
- The behavior violates the principle of least surprise
- Creating an array from another array should preserve data
- The documentation implies data should be preserved
- The fix is straightforward and logical
- High severity - silent data corruption is one of the worst types of bugs

**Evidence AGAINST:**
- None identified

### INVALID (Incorrect Report)
**Evidence FOR:**
- None - the bug is clearly reproducible

**Evidence AGAINST:**
- The bug reproduces exactly as described
- The hypothesis test correctly identifies the issue
- Multiple test cases confirm the problem

### WONTFIX (Trivial/Uninteresting)
**Evidence FOR:**
- None - this is not trivial

**Evidence AGAINST:**
- Data corruption is never trivial
- This affects core functionality of SparseArray
- Users would reasonably expect to change fill_value without data loss
- The bug is subtle and could cause production issues

### FEATURE_REQUEST (Not Currently Supported)
**Evidence FOR:**
- One could argue changing fill_value is an "advanced" operation

**Evidence AGAINST:**
- The constructor already accepts fill_value when data is a SparseArray
- The documentation lists fill_value precedence rules for this case
- This is clearly intended to work, not a missing feature

### DOCUMENTATION_FIX (Documentation Wrong)
**Evidence FOR:**
- The documentation could be clearer about this edge case

**Evidence AGAINST:**
- The documentation correctly implies data should be preserved
- The code is wrong, not the documentation
- Adding a warning about data corruption would be admitting a bug exists

## Key Considerations

1. **Data Integrity:** This bug causes silent data corruption, which is extremely serious
2. **User Expectations:** No reasonable user would expect their data to be replaced
3. **Documentation:** The docs imply this should work correctly
4. **Use Case:** Changing fill_value is a legitimate operation (e.g., optimizing storage)
5. **Fix Complexity:** The fix is straightforward - convert to dense when fill_value changes

## Final Assessment

This is unequivocally a **BUG**. The evidence is overwhelming:

1. Silent data corruption occurs
2. The behavior is clearly unintended
3. The documentation implies correct behavior
4. The fix is logical and straightforward
5. No reasonable interpretation makes this "expected behavior"

The fact that all values in an array can be silently replaced with a different value when the user is just trying to change the sparse storage parameter is a serious data integrity issue that must be fixed.
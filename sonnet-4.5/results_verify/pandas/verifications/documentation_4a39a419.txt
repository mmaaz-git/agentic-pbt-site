## Documentation Analysis for nested_to_record

I examined the documentation for `pandas.io.json._normalize.nested_to_record` function from multiple sources:

1. **Source Code Docstring**: The function docstring states it accepts "dict or list of dicts" as the first parameter `ds`. There is NO explicit restriction mentioned that dictionary keys must be strings.

2. **Function Purpose**: The documentation describes it as "A simplified json_normalize" that "Converts a nested dict into a flat dict ('record')".

3. **Key Type Specification**: The documentation does NOT specify any restriction on the types of keys that can be used in the input dictionaries. It simply says "ds : dict or list of dicts" without any additional constraints.

4. **Example in Documentation**: The example provided uses string keys exclusively:
   ```python
   dict(flat1=1, dict1=dict(c=1, d=2), nested=dict(e=dict(c=1, d=2), d=2))
   ```
   However, this example doesn't explicitly state that only string keys are supported - it's just an example.

5. **JSON Context**: While the function is in the JSON normalization module and JSON typically requires string keys, this is a Python function operating on Python dictionaries. The fact that it's "json_normalize" related doesn't automatically mean it should only accept string keys since Python dicts are more flexible than JSON.

6. **Code Inspection**: Looking at the source code (lines 98-99), there IS code that attempts to handle non-string keys:
   ```python
   if not isinstance(k, str):
       k = str(k)
   ```
   This suggests the function was intended to handle non-string keys by converting them to strings.

**Conclusion from Documentation**: The documentation does not explicitly restrict keys to strings only. The presence of code that attempts to convert non-string keys to strings suggests this was an intentional design choice to support non-string keys. Therefore, if the function crashes with non-string keys, this appears to be contrary to both the documentation (which doesn't forbid it) and the code's apparent intent (which tries to handle it).
# Documentation Analysis

## Pandas Documentation Review

### pandas.api.interchange.from_dataframe()
- The official pandas documentation provides minimal details about string encoding requirements
- No mention of UTF-8 encoding requirements
- No mention of Unicode handling or limitations
- No mention of surrogate characters or their handling
- Only general warning about implementation issues and recommendation to use Arrow instead

### DataFrame.__dataframe__()
- Documentation describes the interchange protocol but lacks encoding details
- References the external protocol specification at data-apis.org
- No specific requirements for string data mentioned

## DataFrame Protocol Specification Review

### Official Protocol Documentation (data-apis.org)
- The API specification states strings are "UTF-8 encoded" in the DtypeKind enum (STRING = 21)
- **CRITICAL FINDING**: The protocol explicitly specifies UTF-8 encoding for strings
- However, no explicit guidance on handling invalid UTF-8 sequences or surrogates
- No error handling specifications for encoding issues

## Source Code Analysis

Examined pandas/core/interchange/column.py line 351:
```python
b.extend(obj.encode(encoding="utf-8"))
```

This line directly encodes strings to UTF-8 without any error handling.

## Key Documentation Findings

1. **The protocol DOES specify UTF-8 encoding**: The dataframe interchange protocol explicitly states that strings should be UTF-8 encoded.

2. **No surrogate handling specified**: Neither pandas documentation nor the protocol specification addresses how to handle surrogate characters, which are valid in Python strings but invalid in UTF-8.

3. **No error handling guidance**: The documentation does not specify what should happen when strings cannot be encoded to UTF-8.

4. **Implementation follows specification**: The pandas implementation correctly attempts to encode strings as UTF-8 per the protocol specification.

## Conclusion on Documentation

The documentation establishes that:
- Strings MUST be UTF-8 encoded according to the protocol
- There is no documented behavior for handling strings that cannot be encoded to UTF-8
- The crash on surrogate characters is a gap between Python's string capabilities and the protocol's UTF-8 requirement

This is an undocumented edge case where the protocol's UTF-8 requirement conflicts with Python's ability to store surrogate characters in strings.
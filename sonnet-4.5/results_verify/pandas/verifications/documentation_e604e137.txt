## Documentation Findings for pandas SparseArray.fill_value setter

### Official Documentation Review

After reviewing the pandas documentation (pandas.pydata.org) and examining the source code:

1. **No explicit documentation for fill_value setter behavior**: The official pandas documentation does not explicitly document what should happen when the fill_value property is set after a SparseArray is created. The documentation primarily focuses on:
   - How to specify fill_value during SparseArray construction
   - What fill_value means (values that are not stored to save memory)
   - Default fill_values for different data types

2. **fill_value property documentation**: The documentation shows that fill_value is a property that can be accessed (getter), but there is no explicit documentation about:
   - Whether fill_value can or should be modified after creation
   - What behavior to expect when modifying fill_value
   - Whether modifying fill_value should preserve the logical data or not

3. **Source code examination**: Looking at the implementation in pandas/core/arrays/sparse/array.py:
   - Lines 659-661 show a simple setter that only updates the dtype: `self._dtype = SparseDtype(self.dtype.subtype, value)`
   - The setter does NOT handle data preservation or materialization of implicit values
   - The to_dense() method (via __array__) uses the current fill_value to reconstruct the dense array

4. **No warnings or notes**: The documentation does not warn users that changing fill_value can mutate the apparent data when converting back to dense format.

5. **Implicit vs Explicit storage**: The documentation explains that values equal to fill_value are not stored (implicit storage), but doesn't clarify what happens to these implicitly stored values when fill_value changes.

### Key Documentation Gap

There is a clear documentation gap regarding the behavior of the fill_value setter. The documentation neither:
- Explicitly states that fill_value should be immutable after creation
- Warns that changing fill_value can appear to mutate data
- Specifies that fill_value changes should preserve logical data
- Documents the current behavior where changing fill_value changes how implicit values are interpreted

This lack of specification means the current behavior is technically "undefined" from a documentation perspective.
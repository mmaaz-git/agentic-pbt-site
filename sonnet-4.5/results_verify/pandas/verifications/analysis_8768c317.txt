# Triage Analysis

## Considering INVALID
**Why it might be INVALID:**
- The docstrings explicitly state "Sum of non-NA/null values" and "Mean of non-NA/null values"
- One could argue this is the documented behavior

**Why it's NOT INVALID:**
- The `sum()` method accepts a `skipna` parameter that doesn't work
- This violates the principle of least surprise - parameters should work as expected
- SparseArray should behave consistently with pandas Series for the same operations
- The docstring appears to describe the default behavior, not the only behavior

## Considering WONTFIX
**Why it might be WONTFIX:**
- Someone might argue NaN handling in sparse arrays is an edge case
- The current behavior has existed for a while

**Why it's NOT WONTFIX:**
- This is not an obscure edge case - NaN handling is fundamental to data analysis
- The `skipna` parameter exists but doesn't work, which is misleading
- This affects data integrity and analysis correctness
- Users rely on NaN propagation to detect missing data

## Considering DOCUMENTATION_FIX
**Why it might be DOCUMENTATION_FIX:**
- The docstrings do say "Sum of non-NA/null values"
- One could update docs to clarify that `skipna` is ignored

**Why it's NOT just DOCUMENTATION_FIX:**
- The code accepts a `skipna` parameter that doesn't function
- This is a behavioral inconsistency with pandas Series, not just a documentation issue
- Users expect pandas objects to behave consistently
- The parameter's presence creates a contract that should be honored

## Considering FEATURE_REQUEST
**Why it might be FEATURE_REQUEST:**
- Adding proper `skipna` support could be seen as a new feature
- The `mean()` method lacks the parameter entirely

**Why it's NOT FEATURE_REQUEST:**
- The `sum()` method already has the `skipna` parameter - it just doesn't work
- This is expected baseline functionality, not an enhancement
- pandas Series already has this functionality
- It's fixing broken existing functionality, not adding new capabilities

## Considering BUG
**Why it IS a BUG:**
1. **Parameter doesn't work**: The `sum()` method accepts `skipna=False` but ignores it
2. **Inconsistent with pandas Series**: Same operations produce different results
3. **Violates NumPy semantics**: NaN should propagate by default in aggregations
4. **Breaks data analysis workflows**: Cannot detect missing data through aggregations
5. **Silent failure**: The parameter is accepted but doesn't change behavior
6. **Regression from expected behavior**: Users migrating from regular arrays to sparse arrays get different results
7. **API contract violation**: A parameter that exists should function as expected

## Critical Factors
1. The `skipna` parameter exists in the signature but doesn't work - this is clearly a bug
2. SparseArray is meant to be a drop-in replacement for regular arrays with memory optimization, not different mathematical behavior
3. This affects correctness of calculations, not just performance or convenience
4. The inconsistency with pandas Series is not documented or justified

## Conclusion
This is a clear BUG. The presence of a non-functional `skipna` parameter in `sum()` and the inconsistent behavior with pandas Series and NumPy arrays make this a legitimate bug that should be fixed. The fact that docstrings mention "non-NA/null values" appears to describe the default behavior when `skipna=True`, not mandate that NaN values must always be excluded.
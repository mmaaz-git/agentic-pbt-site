REPRODUCTION ANALYSIS
=====================

I have successfully reproduced the bug reported for ArrowExtensionArray.all() and .any() methods.

1. Property-Based Test Reproduction:
   - The hypothesis test fails immediately with the input ArrowExtensionArray(pa.array([None]))
   - The test expects that if all() returns True, then any() should also return True
   - The failure occurs because all() raises a TypeError instead of returning a value

2. Direct Bug Reproduction:
   - Created an ArrowExtensionArray with pa.array([None]) - confirmed it has dtype null[pyarrow]
   - Calling arr.all(skipna=True) raises: TypeError: 'ArrowExtensionArray' with dtype null[pyarrow] does not support reduction 'all' with pyarrow version 20.0.0
   - Calling arr.any(skipna=True) raises: TypeError: 'ArrowExtensionArray' with dtype null[pyarrow] does not support reduction 'any' with pyarrow version 20.0.0
   - The same errors occur with skipna=False
   - Empty arrays (ArrowExtensionArray(pa.array([]))) also have dtype null[pyarrow] and raise the same TypeError

3. Effect of the Bug:
   - Users cannot call all() or any() on ArrowExtensionArray objects that contain only None values
   - This breaks the expected pandas reduction API contract
   - The error message suggests upgrading pyarrow, but this is misleading as the issue is with null-type arrays specifically

The bug is real and reproducible. The methods fail with a TypeError when applied to null-type arrays, regardless of the skipna parameter value.
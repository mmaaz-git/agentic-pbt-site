DOCUMENTATION FINDINGS FOR SPARSEARRAY MAX/MIN WITH SKIPNA PARAMETER

1. SparseArray.max() Documentation:
   - The method documentation states: "Max of array values, ignoring NA values if specified."
   - Parameter skipna is documented as: "bool, default True - Whether to ignore NA values."
   - The documentation clearly indicates that when skipna=True, NA values should be ignored
   - When skipna=False, NA values should NOT be ignored (implicit from parameter name and description)

2. SparseArray.min() Documentation:
   - The method documentation states: "Min of array values, ignoring NA values if specified."
   - Parameter skipna is documented as: "bool, default True - Whether to ignore NA values."
   - Same semantics as max() - skipna controls whether NA values are ignored or not

3. Pandas Series.max() Documentation (for comparison):
   - The pandas Series documentation describes skipna as: "Exclude NA/null values when computing the result."
   - While not explicitly stating what happens when skipna=False with NaN values, the parameter name and
     description strongly imply that NaN values should NOT be excluded when skipna=False

4. NumPy Behavior (de facto standard):
   - NumPy's np.max() on arrays with NaN values returns NaN
   - NumPy's np.nanmax() ignores NaN values (equivalent to skipna=True)
   - This establishes a clear precedent for expected behavior

5. Pandas Consistency:
   - Dense pandas Series.max(skipna=False) returns NaN when the series contains NaN values
   - This is consistent with NumPy behavior and establishes the expected pandas-wide behavior

CONCLUSION:
The documentation, while not explicitly stating "returns NaN when skipna=False and array contains NaN",
clearly indicates through the parameter name and description that skipna=False means NA values should
NOT be ignored. Combined with NumPy precedent and pandas Series behavior, it's clear that the expected
behavior when skipna=False and NaN values are present is to return NaN, not to compute the max/min
while silently ignoring the NaN values.
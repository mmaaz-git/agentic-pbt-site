## Documentation Analysis for pandas.api.typing.NAType Comparison Behavior

### Official NAType Documentation

The NAType class documentation (from pd.NA.__doc__) explicitly shows that:

1. **Equality comparisons with pd.NA should return pd.NA:**
   - `pd.NA != pd.NA` returns `<NA>`
   - `pd.NA == pd.NA` returns `<NA>`

2. **The documentation explicitly demonstrates that comparisons should propagate NA:**
   - This is shown in the examples in the docstring
   - The documentation states that for equality comparisons, NA propagates

3. **Three-valued logic implementation:**
   - pandas documentation confirms it implements three-valued logic (Kleene logic)
   - Similar to R, SQL and Julia
   - Comparisons should propagate missing values (value == NA -> NA)

### Key Documentation Findings

1. **General rule from pandas documentation:**
   - "Equality comparisons between np.nan, NaT, and NA do not act like None"
   - `pd.NA == x` should return `<NA>` for all x
   - There are NO documented exceptions for container types or None

2. **No special cases documented:**
   - The documentation does not mention any special handling for None
   - The documentation does not mention any special handling for container types (lists, dicts, tuples, sets)
   - The documentation does not state that comparisons with certain types should return bool instead of NAType

3. **Experimental warning:**
   - The documentation includes a warning that "the behaviour of NA can still change without warning"
   - However, the documented behavior (comparisons returning NA) is clear

4. **Comparison with NaN behavior:**
   - Documentation explicitly states that NA differs from np.nan
   - np.nan comparisons always return False
   - pd.NA comparisons should propagate and return NA

### Documentation vs. Actual Behavior

The actual behavior (`pd.NA == None` returning `False`) contradicts the documented behavior that all comparisons with pd.NA should return NA. The documentation provides no justification for special-casing None or container types.

### Conclusion

Based on the documentation:
1. All comparisons with pd.NA should return pd.NA (NAType)
2. There are no documented exceptions for None or container types
3. The current behavior violates the documented three-valued logic semantics
4. This appears to be a genuine bug where implementation doesn't match documentation
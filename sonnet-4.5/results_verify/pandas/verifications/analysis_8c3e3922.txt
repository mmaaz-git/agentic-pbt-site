## Bug Report Triage Analysis

### Consideration for INVALID
**Why it might be INVALID:**
- The validation behavior for invalid methodtype values is completely undocumented
- The documentation never specifies that invalid values should raise a ValueError
- The error message format is an implementation detail not covered by any specification

**Why it's NOT INVALID:**
- The error message is objectively backwards - it says "must be one of X" where X is the invalid value
- This is a clear logic error in string formatting, not a matter of interpretation
- Even without documentation, error messages should make logical sense

### Consideration for WONTFIX
**Why it might be WONTFIX:**
- This is an error message for an edge case (passing invalid methodtype values)
- The error still gets raised, just with a confusing message
- Users who encounter this can figure out what went wrong despite the backwards message
- This is internal validation that most users won't encounter

**Why it's NOT WONTFIX:**
- Error messages are important for developer experience
- The fix is trivial (swap two variables in the f-string)
- Confusing error messages waste developer time
- This isn't an obscure edge case - it's basic parameter validation

### Consideration for DOCUMENTATION_FIX
**Why it might be DOCUMENTATION_FIX:**
- The validation behavior itself is undocumented
- The valid values for methodtype are not documented
- Could argue the documentation should specify this behavior

**Why it's NOT DOCUMENTATION_FIX:**
- The bug is in the code, not the documentation
- The error message is objectively wrong (backwards)
- Even if we document the behavior, the message would still be confusing

### Consideration for FEATURE_REQUEST
**Why it might be FEATURE_REQUEST:**
- Could frame this as "improve error messages for invalid parameters"
- The validation itself could be seen as a feature since it's undocumented

**Why it's NOT FEATURE_REQUEST:**
- This is fixing broken existing functionality, not adding new functionality
- The validation already exists, it just has a bug in the error message
- Error message clarity is a bug fix, not a feature

### Consideration for BUG
**Why it IS a BUG:**
- The error message has its parameters swapped in the format string
- Line 298 has: f"methodtype must be one of {methodtype}, got {types} instead."
- Should be: f"methodtype must be one of {types}, got {methodtype} instead."
- This produces objectively incorrect error messages that say "must be one of [invalid_value]"
- The intent of the error message is clear, but the implementation is wrong
- This is a simple logic error in string formatting

**Why it might NOT be a BUG:**
- Could argue that since the behavior is undocumented, any error message is acceptable

### Final Analysis

This is clearly a **BUG**. The error message format string has its parameters reversed, causing it to display:
- "methodtype must be one of [the invalid value you provided]"
Instead of:
- "methodtype must be one of [the valid values you should use]"

This is not a matter of opinion or documentation - it's a simple logic error where the variables are in the wrong positions in the format string. The message contradicts basic logic by telling users they "must use" the invalid value they just provided.

Even though the validation behavior is undocumented, once the code decides to validate and provide an error message, that message should make logical sense. A message saying "must be one of invalid_type" is objectively wrong.
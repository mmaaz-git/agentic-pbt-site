## Documentation Analysis

### pandas.read_json() Documentation
The official pandas documentation for read_json() specifies:
- `convert_dates` parameter defaults to `True`
- When True, it attempts to convert "default datelike columns"
- Default datelike columns are those ending with '_at', '_time', beginning with 'timestamp', or named 'modified' or 'date'

### Key Documentation Findings

1. **No explicit empty string handling documented:**
   - The documentation does not explicitly state how empty strings should be handled during date conversion
   - There is no specification that empty strings should or should not be converted to dates

2. **Related pandas.to_datetime() behavior:**
   - With `errors='coerce'`, invalid parsing results in NaT
   - This suggests that treating unparseable values as NaT is an established pattern in pandas
   - However, to_datetime requires explicit `errors='coerce'` to get this behavior

3. **Round-trip expectations:**
   - The documentation does not explicitly guarantee perfect round-trip serialization/deserialization
   - However, JSON is commonly expected to preserve data types and values when possible

### Documentation Gaps
The documentation lacks clarity on:
1. Whether empty strings are considered valid date representations
2. Expected behavior for non-datelike data in columns during automatic date conversion
3. Round-trip guarantees for JSON serialization/deserialization

### Conclusion
While the documentation doesn't explicitly specify how empty strings should be handled, the current behavior appears to be an unintended consequence of aggressive date parsing. The fact that this breaks round-trip behavior and that a workaround exists (convert_dates=False) suggests this is likely unintended behavior rather than a documented feature.
## Documentation Analysis

### Function Documentation
The function `convert_to_line_delimits` has the following documentation:
- Docstring: "Helper function that converts JSON lists to line delimited JSON."
- Inline comment: "Determine we have a JSON list to turn to lines otherwise just return the json object, only lists can"

The documentation clearly states:
1. The function is meant to convert JSON **lists** to line-delimited JSON
2. For non-lists, it should "just return the json object"
3. "Only lists can" be converted to line-delimited format

### Public vs Private API
- The function is not part of the public pandas API (not listed in pandas documentation)
- It's an internal helper function in the `_normalize` module (underscore prefix indicates private)
- It's only used internally by `pandas.io.json._json.to_json()` when the `lines=True` parameter is set

### JSON Lines Format Specification
JSON Lines (also called newline-delimited JSON) is a format where:
- Each line contains a valid JSON value
- Lines are separated by newline characters
- Commonly used for streaming and log processing

Converting a JSON array like `[{"a": 1}, {"b": 2}]` to JSON Lines produces:
```
{"a": 1}
{"b": 2}
```

### Expected Behavior Based on Documentation
According to the function's documentation and comments:
1. JSON lists (arrays) starting with '[' and ending with ']' should be converted to line-delimited format
2. Non-lists (objects, primitives) should be returned unchanged
3. The function should NOT modify JSON objects like `{"key": "value"}`

### Actual Behavior
The function corrupts non-list JSON by:
1. Failing to return early for JSON objects
2. Stripping the first and last characters (removing '{}' from objects)
3. Processing the corrupted string through `convert_json_to_lines`

### Conclusion
The bug violates the documented behavior. The documentation explicitly states that non-lists should be returned unchanged, but the current implementation corrupts JSON objects. This is a clear deviation from the intended and documented functionality.
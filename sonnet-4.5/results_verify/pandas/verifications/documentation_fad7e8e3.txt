DOCUMENTATION ANALYSIS
=====================

FUNCTION LOCATION AND PURPOSE:
The function format_percentiles is located in pandas.io.formats.format module. It appears to be an internal formatting utility function (not directly exposed in the main pandas API) used for formatting percentile values for display purposes, likely used in methods like DataFrame.describe().

DOCUMENTED BEHAVIOR FROM DOCSTRING:
The function's docstring (lines 1549-1579 in format.py) explicitly states:

"Rounding precision is chosen so that: (1) if any two elements of percentiles differ, they remain different after rounding"

This is a clear and unambiguous guarantee that the function makes. The documentation promises that:
1. Unique input percentiles will remain unique after formatting
2. No entry is rounded to 0% or 100% (unless already equal to it)
3. Any non-integer is always rounded to at least 1 decimal place
4. Duplicates in input are allowed and preserved

KEY DOCUMENTATION QUOTES:
From the Notes section (lines 1562-1565):
"Rounding precision is chosen so that: (1) if any two elements of
``percentiles`` differ, they remain different after rounding
(2) no entry is *rounded* to 0% or 100%.
Any non-integer is always rounded to at least 1 decimal place."

EXAMPLES PROVIDED:
The documentation provides two examples:
1. format_percentiles([0.01999, 0.02001, 0.5, 0.666666, 0.9999])
   Returns: ['1.999%', '2.001%', '50%', '66.667%', '99.99%']
   This example shows preserving uniqueness with close values (0.01999 vs 0.02001)

2. format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999])
   Returns: ['0%', '50%', '2.0%', '50%', '66.67%', '99.99%']
   This example shows handling of duplicates

EXTERNAL DOCUMENTATION:
- No external documentation found on pandas.pydata.org (404 error)
- This appears to be an internal utility function not exposed in the public API
- No references to external standards or RFCs

CONCLUSION:
The documentation explicitly promises that unique input values will remain unique after formatting. This is not ambiguous or open to interpretation - it's a clear guarantee stated in the docstring. The bug report correctly identifies that the implementation violates this documented guarantee.
DOCUMENTATION ANALYSIS
======================

## Official Documentation Review

I reviewed both the inline docstring and the official pandas documentation for pandas.read_sas().

### Key Documentation Statement

The documentation for the `format` parameter explicitly states:

**In the source code docstring (line 111)**:
"If None, file format is inferred from file extension."

**In the official pandas documentation**:
"When format=None, the function automatically detects the file format based on the file's extension."

### Critical Finding

The documentation clearly and unambiguously states that format detection is based on "file extension" - not "contains extension string" or "includes extension substring".

The term "file extension" in computing has a precise meaning: it refers to the suffix at the END of a filename, typically following the last period. For example:
- "data.xpt" has extension ".xpt"
- "data.xpt.backup" has extension ".backup" (NOT ".xpt")
- "file.sas7bdat.old" has extension ".old" (NOT ".sas7bdat")

### Documentation vs Implementation Mismatch

The current implementation uses substring matching:
```python
if ".xpt" in fname:  # Checks if .xpt appears ANYWHERE in filename
```

But the documentation promises extension checking:
```
"file format is inferred from file extension"  # Should check ONLY the end
```

### User Expectations

Based on the documentation, users would reasonably expect:
1. "data.xpt" → Detected as xport format ✓
2. "data.xpt.backup" → NOT detected as xport (extension is .backup) ✗
3. "file.sas7bdat.old" → NOT detected as sas7bdat (extension is .old) ✗

The current behavior violates these documented expectations.

### Conclusion

The documentation is clear and unambiguous about using "file extension" for format detection. The implementation's use of substring matching directly contradicts this documented behavior. This is not a case of undefined or ambiguous behavior - the documentation makes a specific promise that the code does not fulfill.
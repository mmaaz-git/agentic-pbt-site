DOCUMENTATION ANALYSIS

1. OFFICIAL DOCUMENTATION:
The docstring for remove_categories states:
"Remove the specified categories. 'removals' must be included in the old categories. Values which were in the removed categories will be set to NaN"

Key observations:
- NO mention of sorting behavior
- NO mention of different behavior for ordered vs unordered categoricals
- NO specification about preserving or changing category order

2. SOURCE CODE ANALYSIS:
Examined the actual implementation and found the root cause:
```python
new_categories = (
    self.dtype.categories.difference(removals, sort=False)
    if self.dtype.ordered is True
    else self.dtype.categories.difference(removals)
)
```

The code explicitly uses:
- For ordered categoricals: difference(removals, sort=False) - preserves order
- For unordered categoricals: difference(removals) - defaults to sort=None

3. INDEX.DIFFERENCE DOCUMENTATION:
The pandas Index.difference method documentation reveals:
- sort=None (default): "Attempt to sort the result"
- sort=False: "Do not sort the result"
- The default behavior tries to sort the result

4. COMPARISON WITH RELATED METHODS:
None of the related methods' documentation mentions sorting:
- remove_unused_categories: No sorting mentioned, preserves order in practice
- add_categories: No sorting mentioned, preserves order in practice
- set_categories: No sorting mentioned, preserves order in practice

5. USER EXPECTATIONS:
The documentation provides no warning that remove_categories will reorder categories. Users would reasonably expect:
- Category order to be preserved (minus removed categories)
- Consistent behavior with other category manipulation methods
- Consistent behavior between ordered and unordered categoricals (except for operations that specifically depend on ordering)

CONCLUSION:
The documentation does not specify that categories will be sorted after removal. The actual behavior (sorting for unordered categoricals) is undocumented and surprising given the behavior of related methods.
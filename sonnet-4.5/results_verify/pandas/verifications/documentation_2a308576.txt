DOCUMENTATION ANALYSIS
======================

## Official Documentation

The cumsum() method documentation (from docstring and help):

```
Cumulative sum of non-NA/null values.

When performing the cumulative summation, any non-NA/null values will
be skipped. The resulting SparseArray will preserve the locations of
NaN values, but the fill value will be `np.nan` regardless.

Parameters
----------
axis : int or None
    Axis over which to perform the cumulative summation. If None,
    perform cumulative summation over flattened array.

Returns
-------
cumsum : SparseArray
```

## Key Documentation Points

1. **Purpose**: The method is designed to compute cumulative sum of non-NA/null values
2. **NA/null handling**: Non-NA/null values are supposed to be skipped
3. **Fill value behavior**: Documentation explicitly states "the fill value will be `np.nan` regardless"
4. **Expected behavior**: Should preserve NaN locations but compute cumsum for non-NaN values

## Documentation vs Implementation

The documentation suggests the method is designed primarily for sparse arrays with NaN/null fill values. However:

1. The documentation doesn't explicitly prohibit non-NaN fill values
2. The documentation states fill value "will be np.nan regardless" - suggesting it should handle non-NaN fill values by converting them
3. There's no warning that non-NaN fill values will cause errors
4. The implementation has a specific code path for non-null fill values, indicating they were considered

## Conclusion

The documentation does not indicate that cumsum() with non-NaN fill values should crash. The documentation suggests it should work and convert the fill_value to np.nan in the result. The infinite recursion is clearly unintended behavior that violates the expected functionality described in the documentation.
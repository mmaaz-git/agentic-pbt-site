REPRODUCTION OF BUG REPORT FOR llm.cosine_similarity
======================================================

1. SUCCESSFULLY REPRODUCED THE BUG
The bug report is accurate and the issue has been successfully reproduced.

2. REPRODUCTION DETAILS

Test Case 1: Non-zero vector with zero vector
----------------------------------------------
Input: a = [1.0, 2.0, 3.0], b = [0.0, 0.0, 0.0]
Expected: Should handle gracefully (return NaN, 0.0, or raise ValueError)
Actual: ZeroDivisionError: float division by zero

Test Case 2: Zero vector with non-zero vector
----------------------------------------------
Input: a = [0.0, 0.0, 0.0], b = [1.0, 2.0, 3.0]
Expected: Should handle gracefully (return NaN, 0.0, or raise ValueError)
Actual: ZeroDivisionError: float division by zero

Test Case 3: Hypothesis test
----------------------------
The Hypothesis property-based test from the bug report runs and correctly finds the bug.
It generates multiple test cases where zero vectors cause ZeroDivisionError.
Sample failing inputs found by Hypothesis:
- a = [0.0], b = [0.0]
- a = [1.0, 2.0, 3.0], b = [0.0, 0.0, 0.0]
- Various other combinations with zero vectors

3. ROOT CAUSE ANALYSIS

The function at llm/__init__.py:458-462 is:

```python
def cosine_similarity(a, b):
    dot_product = sum(x * y for x, y in zip(a, b))
    magnitude_a = sum(x * x for x in a) ** 0.5
    magnitude_b = sum(x * x for x in b) ** 0.5
    return dot_product / (magnitude_a * magnitude_b)
```

The error occurs because:
- When vector `a` contains all zeros, magnitude_a = 0.0
- When vector `b` contains all zeros, magnitude_b = 0.0
- The division `dot_product / (magnitude_a * magnitude_b)` results in division by zero
- Python raises ZeroDivisionError when dividing by zero

4. VERIFICATION
The bug report's claim is correct. The function crashes with an unhelpful error message when either input vector contains all zeros, rather than handling this mathematical edge case gracefully.
## Documentation Findings for not_nulls function

### Code Location
The `not_nulls` function is defined in `/llm/default_plugins/openai_models.py` at line 915-916:
```python
def not_nulls(data) -> dict:
    return {key: value for key, value in data if value is not None}
```

### Function Usage
The function is called in `build_kwargs` method at line 658:
```python
kwargs = dict(not_nulls(prompt.options))
```

### Type Information
1. `prompt.options` is an instance of a Pydantic model that inherits from `BaseModel`:
   - `SharedOptions` extends `llm.Options` (line 346)
   - `llm.Options` is defined as a Pydantic `BaseModel` (line 1706 in models.py)
   - `SharedOptions` contains fields like `temperature`, `max_tokens`, `top_p`, etc., all as Optional fields with Pydantic Field descriptors

### Documentation Observations
- The `not_nulls` function has NO docstring
- There is no explicit documentation about what type of input `not_nulls` expects
- The function signature indicates it should return a `dict`, but doesn't specify what type of input `data` should be
- Looking at the usage, it appears the function is intended to filter out None values from a dictionary-like object

### Pydantic Model Iteration Behavior
When iterating over a Pydantic model directly (without `.items()`), Pydantic models yield field names as strings, not key-value pairs. This is standard Pydantic behavior.

### Conclusion
The documentation does not explicitly specify what type of input `not_nulls` should accept or how it should handle Pydantic models. The function appears to be an internal utility function without formal documentation. The bug report's claim that the function is being passed a Pydantic model instance is correct based on the code analysis.
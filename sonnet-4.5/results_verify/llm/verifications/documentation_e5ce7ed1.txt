## Documentation Analysis for not_nulls Function

### Documentation Findings

1. **Function Documentation**: The `not_nulls` function has NO documentation. It appears to be an internal utility function with only a type hint:
   ```python
   def not_nulls(data) -> dict:
       return {key: value for key, value in data if value is not None}
   ```

2. **Public Documentation**:
   - No mention of `not_nulls` in the official LLM documentation at https://llm.datasette.io
   - No documentation in the Python API reference
   - No documentation in the README or any public-facing docs

3. **Function Purpose**: Based on code inspection, `not_nulls` is an internal utility function used to filter out None values from data before passing options to the OpenAI API. It's called at line 658:
   ```python
   kwargs = dict(not_nulls(prompt.options))
   ```

4. **Expected Input Type**:
   - The function expects an iterable that yields (key, value) pairs when iterated
   - No documentation specifies what type of data should be passed
   - The actual usage passes a Pydantic BaseModel (SharedOptions)

5. **Pydantic v2 Behavior**:
   - The library requires `pydantic>=2.0.0`
   - Pydantic v2 BaseModel objects, when iterated, yield (key, value) tuples
   - This behavior is part of Pydantic's API but is not explicitly documented in the LLM library

6. **Internal vs External**:
   - `not_nulls` appears to be an internal implementation detail
   - It's not exported in the public API
   - Users would not normally call this function directly

### Conclusion
Since `not_nulls` is an undocumented internal utility function, there are no documented expectations or contracts about its behavior. The function implementation assumes it receives an iterable of (key, value) pairs, which is exactly what Pydantic v2 BaseModel provides. The bug report's claim about Pydantic v2 behavior is factually incorrect.
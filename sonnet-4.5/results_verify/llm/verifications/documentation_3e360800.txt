# Documentation Analysis for logit_bias Validation

## Internal Documentation
The `logit_bias` field in `SharedOptions` class has the following documentation:
- Field description: "Modify the likelihood of specified tokens appearing in the completion. Pass a JSON string like '{\"1712\":-100, \"892\":-100, \"1489\":-100}'"
- Field type: `Optional[Union[dict, str]]`
- The example shows values of -100, which aligns with the valid range

## External Documentation (OpenAI API)
Based on OpenAI's official documentation and help articles:
1. **Valid Range**: The logit_bias parameter accepts values from -100 to 100
2. **Behavior**:
   - Values of -100 typically block a token from being generated
   - Values of 100 make a token exclusively likely to be selected
   - Values between -1 and 1 provide moderate adjustments
3. **Format**: JSON object mapping token IDs to bias values

## Code Implementation
The `validate_logit_bias` method implements validation that:
1. Accepts either a dict or JSON string
2. Converts string keys to integers (token IDs)
3. Converts values to integers
4. **Validates that values are between -100 and 100**
5. Raises ValueError if validation fails

## Key Finding
The code correctly implements the OpenAI API specification that logit_bias values must be between -100 and 100. The validation logic at line 427 that raises "Value must be between -100 and 100" is the **correct** and **expected** behavior according to the OpenAI API documentation.

## Documentation Gap
Neither the internal field description nor the validator's docstring explicitly states the -100 to 100 range requirement. However, this is an established constraint from the OpenAI API that this library is wrapping.

## Conclusion
The range validation (-100 to 100) is correct and required behavior. The issue is not with what the code validates, but with the error message clarity when validation fails. The specific error message "Value must be between -100 and 100" is more helpful than the generic "Invalid key-value pair in logit_bias dictionary" and should be preserved for better user experience.
## Documentation Analysis

### 1. Official Documentation
The official Pydantic documentation for the experimental pipeline module is minimal:
- States that `validate_as` allows parsing input into a new type
- Lists available constraint methods including gt, ge, lt, le
- Prominently warns: "Be careful with this API, it's subject to change"
- Marked as "Experimental" API
- No specific performance considerations mentioned
- No explicit documentation about whether constraints should be applied at both schema and validator levels

### 2. Source Code Documentation
The module docstring at the top of pipeline.py simply states:
```python
"""Experimental pipeline API functionality. Be careful with this API, it's subject to change."""
```

The `_apply_constraint` function itself has minimal documentation:
- Function docstring: "Apply a single constraint to a schema."
- No comments explaining the intended behavior for constraint application
- No comments about whether redundant validation is intentional

### 3. Implementation Pattern Analysis
Looking at the code structure, there's a clear pattern:
- When the schema type matches the constraint type (int/float/decimal), the constraint is added at the schema level
- The Gt constraint implementation uses an `else` clause to avoid adding a validator when a schema constraint is set
- The Ge, Lt, Le implementations lack this `else` clause

### 4. Design Intent
Based on the Gt implementation (which uses `else`), the apparent design intent is:
1. Prefer schema-level constraints when possible (for performance)
2. Fall back to validator functions only when schema-level constraints can't be applied
3. Avoid redundant validation

The inconsistency between Gt and Ge/Lt/Le appears to be an implementation oversight rather than intentional design.

### 5. Experimental Status
The module is clearly marked as experimental:
- Multiple warnings about API instability
- Subject to change without notice
- Not part of the stable API

### Conclusion
The documentation does not specify that constraints should be applied redundantly. The Gt implementation suggests the intent is to apply constraints at only one level (schema OR validator, not both). The lack of `else` clauses in Ge/Lt/Le appears to be a genuine bug that contradicts the pattern established by Gt.
## Documentation Analysis for pydantic.experimental.pipeline not_in constraint

### Available Documentation

1. **Official Pydantic Documentation**: The experimental pipeline API is documented at https://docs.pydantic.dev/latest/concepts/experimental/. However, this documentation is high-level and does not provide detailed specifications for individual constraint methods like `not_in`.

2. **Method Availability**: Through testing, I confirmed that `not_in` is indeed a method available on the transform object in pydantic.experimental.pipeline. The method signature shows it exists alongside other constraints like `in_`, `eq`, `not_eq`, `gt`, `lt`, etc.

3. **No Detailed Specification**: The documentation does not specify:
   - The exact expected behavior of `not_in`
   - What type of return value the validation function should produce
   - How the validation should fail (True/False vs exceptions)
   - Implementation details about operator usage

### Implementation Details Found

From the source code at `/home/npc/pbt/agentic-pbt/envs/pydantic_env/lib/python3.13/site-packages/pydantic/experimental/pipeline.py`:
- Lines 627-633 show the `_NotIn` constraint implementation
- It uses `operator.__not__(operator.__contains__(values, v))`
- The result is passed to `_check_func` which expects a boolean predicate

### Key Finding about operator.__not__

Testing reveals that `operator.__not__` is NOT the bitwise NOT operator (`~`) as claimed in the bug report:
- `operator.__not__(True)` returns `False` (not -2)
- `operator.__not__(False)` returns `True` (not -1)
- This is functionally equivalent to the logical `not` operator

The bug report's claim that "`operator.__not__` is the bitwise NOT operator (~)" is factually incorrect. The bitwise NOT operator in Python is `~`, while `operator.__not__` implements the logical NOT operation.

### Documentation Gaps

1. The experimental nature of the API means documentation is incomplete
2. No formal specification exists for the expected behavior of constraint methods
3. No examples or tests are documented for the `not_in` constraint specifically
4. The API is marked as experimental and subject to change
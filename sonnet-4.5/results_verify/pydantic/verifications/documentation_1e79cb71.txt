## Documentation Findings

### 1. Pydantic Experimental Pipeline API

The pipeline API is explicitly marked as experimental in Pydantic. Key findings:
- The API is subject to change and deprecation (warning is shown on import)
- Documentation exists at https://docs.pydantic.dev/latest/concepts/experimental/
- The pipeline API allows composing validation, constraints and transformations

### 2. Constraint Functions Available

The documentation mentions several constraint types but does not provide an exhaustive list:
- Numeric constraints: `.gt()`, `.ge()`, `.lt()`, `.le()`
- String constraints: `.str_lower()`, `.str_pattern()`, `.str_strip()`
- Collection constraints: `.len()`

The documentation does NOT specifically mention `not_in()` or `in_()` constraints in the examples shown.

### 3. Python operator Module

Verified documentation at https://docs.python.org/3/library/operator.html:
- The operator module DOES contain `operator.__not__(obj)` function
- It also contains the preferred `operator.not_(obj)` variant
- Both functions return the outcome of `not obj`
- The `__contains__` function exists and is used correctly in the code

### 4. Experimental Nature

Critical finding: The pipeline API is marked as EXPERIMENTAL. The documentation states:
"This module is experimental, its contents are subject to change and deprecation."

This means:
- The API is not stable
- Bugs may exist as the feature is still under development
- The feature may be incomplete or have known issues

### 5. Constraint Implementation

The source code at line 631 shows:
```python
return operator.__not__(operator.__contains__(values, v))
```

This is syntactically valid Python code. The `operator.__not__` function exists and works.

### 6. Missing Documentation

There is NO documentation found that:
- Guarantees that `not_in()` constraint should work
- Specifies the expected behavior of `not_in()` validation
- Lists `not_in()` as a supported constraint method

The experimental nature of the API and lack of documentation for this specific constraint is significant.
DOCUMENTATION ANALYSIS
======================

1. Official Pydantic Documentation:
   - The experimental.pipeline module is marked as experimental with warnings that the API is subject to change
   - Documentation describes the constraint methods (gt, lt, ge, le) but does NOT specify implementation details
   - No documentation specifies whether constraints should be applied directly to schemas vs. wrapped with validators
   - No documentation indicates that Gt should behave differently from Ge, Lt, and Le

2. Code Documentation:
   - The _apply_constraint function has minimal documentation: "Apply a single constraint to a schema."
   - No comments or documentation explain why constraints are implemented differently
   - The experimental module __init__ warns: "This module is experimental, its contents are subject to change and deprecation."

3. Behavioral Expectations:
   - From a performance and consistency perspective, constraints that can be applied directly to schemas (int, float, decimal) should be
   - There is no documented reason why Ge, Lt, and Le should always add a validator function while Gt only adds it conditionally
   - The current implementation shows clear inconsistency in the code structure

4. Key Finding:
   - The documentation does NOT specify that:
     * Gt should produce simpler schemas than Ge/Lt/Le
     * Function-after wrappers are the intended behavior for Ge/Lt/Le
     * There should be any difference in schema structure between these constraints

5. Conclusion:
   - This appears to be an implementation inconsistency rather than documented behavior
   - The bug report correctly identifies a performance and consistency issue, though it incorrectly states only Ge is affected
   - The experimental nature of the module means this could be considered either a bug or an incomplete feature
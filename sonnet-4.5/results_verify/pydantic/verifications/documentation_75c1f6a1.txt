## Documentation Analysis for pydantic_encoder

### Official Documentation Status
The `pydantic_encoder` function is part of the deprecated JSON module in Pydantic v2. The function itself has minimal documentation - the help() function only shows the signature without any docstring explaining its behavior or expected handling of different types.

### Deprecation Status
The function is officially deprecated as of Pydantic v2, with clear deprecation warnings both in the decorator (@deprecated) and runtime warnings. The recommended migration path is to use `pydantic_core.to_jsonable_python` instead.

### Bytes Handling Specification
The documentation does NOT specify how bytes should be handled. There is no docstring, no comment, and no official documentation that describes:
- That bytes will be decoded as UTF-8
- That bytes must contain valid UTF-8 sequences
- What happens with non-UTF-8 bytes
- Any error handling behavior for bytes

### Implementation Details
The source code shows that bytes are handled via a simple lambda: `bytes: lambda o: o.decode()`. This uses Python's default decode() behavior, which:
- Assumes UTF-8 encoding
- Uses strict error handling (raises UnicodeDecodeError on invalid sequences)

### Historical Context
Based on GitHub issues (#3756), this has been a known problem since Pydantic v1. The issue notes that JSON doesn't have a native bytes type, so any convention for encoding bytes must come from outside the JSON specification. Different solutions were proposed including hex encoding or base64 encoding.

### JSON Specification
The JSON specification (RFC 8259) does not define a standard way to encode arbitrary binary data. Common conventions include:
- Base64 encoding (most common)
- Hex encoding
- Arrays of integers

### Conclusion on Documentation
The documentation is completely silent on how bytes should be handled. There is no specification that bytes must be valid UTF-8, nor any documentation about what happens with invalid UTF-8 bytes. The behavior is entirely implicit from the implementation.
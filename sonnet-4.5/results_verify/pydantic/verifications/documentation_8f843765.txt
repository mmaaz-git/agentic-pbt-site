## Documentation Analysis

### Official Documentation Review

1. **Pydantic Plugins Documentation (v2.8):**
   - URL: https://docs.pydantic.dev/2.8/concepts/plugins/
   - The documentation explicitly shows the format for PYDANTIC_DISABLE_PLUGINS
   - Format specified: `my-plugin-1,my-plugin2` (WITHOUT spaces)
   - Documentation table clearly states:
     * `__all__`, `1`, `true` - Disables all plugins
     * Comma-separated string (e.g. `my-plugin-1,my-plugin2`) - Disables specified plugin(s)

2. **Key Documentation Finding:**
   - The documentation example shows NO SPACES after commas
   - The format is explicitly: `my-plugin-1,my-plugin2`
   - NOT: `my-plugin-1, my-plugin2`

3. **Implementation Context:**
   - Feature added via GitHub PR #8767 (merged February 13, 2024)
   - The PR discussion doesn't mention whitespace handling considerations
   - The feature is marked as experimental and subject to change

### Documentation Implications

The documentation actually **supports** the current implementation's behavior:
- The documented format shows comma-separated values WITHOUT spaces
- Users who follow the documentation exactly would not encounter this bug
- However, the documentation doesn't explicitly state that spaces are NOT allowed

### User Expectations vs Documentation

While the documentation shows the format without spaces, it's important to note:
1. Comma-separated lists with spaces after commas are an extremely common convention
2. Most users would naturally write `"plugin1, plugin2"` not `"plugin1,plugin2"`
3. The documentation doesn't explicitly warn against using spaces
4. Other environment variable parsing in various tools typically handles whitespace gracefully

### Conclusion

The current behavior technically matches the documentation's example, but:
- The documentation doesn't explicitly specify that spaces will NOT be stripped
- The documentation doesn't warn users that spaces will cause issues
- Common user expectations would be that whitespace is handled gracefully
- The lack of explicit whitespace handling guidance makes this more of an implementation oversight than a documentation error
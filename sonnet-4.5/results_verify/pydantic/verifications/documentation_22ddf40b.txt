DOCUMENTATION ANALYSIS
======================

## Documentation Review:

1. **Official Pydantic Documentation**:
   - Checked https://docs.pydantic.dev/latest/api/experimental/#pydantic.experimental.pipeline
   - The module is explicitly marked as "Experimental pipeline API" with warning: "Be careful with this API, it's subject to change"
   - No specific documentation found for the internal `_apply_constraint` function (it's a private function)
   - The public API methods (ge(), gt(), lt(), le(), multiple_of()) are documented as constraint methods but no implementation details are provided

2. **Function Docstring**:
   - `_apply_constraint` has minimal docstring: "Apply a single constraint to a schema."
   - No specification about whether constraints should be applied once or twice
   - No specification about the expected behavior difference between constraint types

3. **Code Convention Analysis**:
   - The implementation of Gt constraint shows clear intent with the `else:` clause
   - The pattern suggests that constraints should EITHER be applied as schema constraints OR as validator functions, not both
   - The consistent pattern across Ge/Lt/Le/MultipleOf (all missing `else:`) suggests this might have been a copy-paste oversight

## Key Findings:

1. **No documented behavior**: There is no documentation that specifies whether constraints should be applied once or twice

2. **Experimental module**: The entire pipeline module is marked as experimental and subject to change

3. **Internal implementation detail**: `_apply_constraint` is a private function (prefixed with underscore), so its behavior is an implementation detail

4. **Consistency expectation**: While not explicitly documented, the principle of least surprise and code consistency suggests all similar constraints (comparison operators) should behave the same way

5. **Performance consideration**: Double validation is not documented as intentional behavior, and there's no apparent reason why some constraints would need double validation while others don't
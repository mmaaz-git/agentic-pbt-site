## Documentation Analysis

### Official Documentation Review

1. **Experimental Status**: The pydantic experimental pipeline module is explicitly marked as "Experimental" with a warning that "this API is subject to change". This is confirmed by:
   - Runtime warning: `PydanticExperimentalWarning: This module is experimental, its contents are subject to change and deprecation.`
   - Documentation explicitly states: "Be careful with this API, it's subject to change."

2. **Constraint Methods Documentation**: The documentation describes the constraint methods (gt, ge, lt, le) as:
   - `gt()`: Constrain value to be greater than a specific value
   - `ge()`: Constrain value to be greater than or equal to a specific value
   - `lt()`: Constrain value to be less than a specific value
   - `le()`: Constrain value to be less than or equal to a specific value

3. **Implementation Details**: The documentation does NOT specify:
   - How constraints should be internally implemented
   - Whether double validation is expected behavior
   - Performance characteristics or optimization expectations
   - Whether constraints should use native pydantic-core validation vs custom functions

4. **Related Issues**: GitHub search revealed:
   - Historical issues with constraints not working properly (Issue #3281)
   - Recent expansion of test coverage for pipeline API constraints (PR #9595)
   - Known double validation issues in other contexts (FastAPI issues)
   - No specific documentation about whether double validation is intentional

### Key Findings

1. **No Documentation of Double Validation**: There is no documentation suggesting that Ge, Le, and Lt should apply validation twice. The expected behavior would be consistent implementation across all comparison operators.

2. **Consistency Expectation**: Given that all four comparison operators (gt, ge, lt, le) are documented together with parallel descriptions, a reasonable expectation is that they would have consistent internal implementations.

3. **Performance Not Documented**: The documentation does not specify performance characteristics, but unnecessary double validation would violate the principle of least surprise for users.

4. **Experimental Nature**: While the experimental status means the API can change, it doesn't mean bugs should be ignored. The experimental warning is about API stability, not about accepting incorrect implementations.

### Conclusion

The documentation does not indicate that double validation is intentional or expected behavior. All four comparison operators are documented identically, suggesting they should behave consistently internally. The fact that Gt avoids double validation while Ge, Lt, and Le perform it appears to be an implementation inconsistency rather than documented behavior.
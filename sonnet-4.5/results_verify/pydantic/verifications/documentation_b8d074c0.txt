DOCUMENTATION FINDINGS FOR pydantic.experimental.pipeline._apply_constraint

1. Official Documentation Status:
   - The experimental pipeline module is marked as "Experimental" with explicit warnings that the API is subject to change
   - The official Pydantic documentation does not provide detailed documentation for the internal _apply_constraint function
   - The _apply_constraint function is a private/internal function (indicated by the leading underscore)
   - The public API consists of methods like gt(), ge(), lt(), le(), len(), multiple_of() which internally use _apply_constraint

2. Code Documentation:
   - The _apply_constraint function has a minimal docstring: "Apply a single constraint to a schema."
   - The function is marked with # noqa: C901 indicating complexity warnings are suppressed
   - No explicit documentation on expected behavior differences between constraint types

3. Observed Implementation Pattern:
   - The function handles various constraint types from annotated_types (Gt, Ge, Lt, Le, Len, MultipleOf, etc.)
   - For each constraint type, it attempts to:
     a) First embed the constraint directly into the schema dict if possible (for known schema types)
     b) Fall back to wrapping with a function validator for other cases

4. Key Finding - Inconsistent Implementation:
   - The Gt constraint (lines 448-463) has an explicit else clause that only applies the function wrapper when the constraint cannot be embedded
   - The Ge, Lt, Le, Len, and MultipleOf constraints lack this else clause, causing them to ALWAYS apply the function wrapper, even when the constraint was successfully embedded

5. Experimental Module Considerations:
   - The module header explicitly states: "Be careful with this API, it's subject to change"
   - This is experimental functionality not part of the stable API
   - Internal implementation details are not guaranteed to remain consistent

6. No Specification Found:
   - There is no formal specification for how _apply_constraint should behave
   - No documentation stating whether constraints should return 'int' or 'function-after' schemas
   - No documented expectation that all constraint types should behave identically
REPRODUCTION ANALYSIS
=====================

1. BUG REPRODUCTION STATUS: CONFIRMED

2. HYPOTHESIS TEST RESULTS:
   - The provided Hypothesis test FAILS as reported
   - Failure occurs on ANY input string for the 'required' field (tested with empty string '')
   - The assertion fails specifically on: assert 'with_factory' not in d
   - Error message: "AssertionError: with_factory should be excluded when exclude_defaults=True"

3. MANUAL TEST RESULTS:
   - Created a simple test case with three fields:
     * required: str (no default)
     * regular_default: int = 42
     * factory_default: list = Field(default_factory=list)

   - When calling model.dict(exclude_defaults=True):
     * ✓ 'required' is included (as expected)
     * ✓ 'regular_default' is excluded (as expected)
     * ✗ 'factory_default' is NOT excluded (BUG CONFIRMED)

   - The resulting dictionary is: {'required': 'test', 'factory_default': []}
   - The factory_default field has its default value ([]) but is still included

4. BEHAVIORAL INCONSISTENCY:
   The bug report accurately describes the inconsistent behavior:
   - Fields with regular defaults (e.g., int = 42) are correctly excluded when they have their default value
   - Fields with default_factory (e.g., list = Field(default_factory=list)) are NOT excluded even when they have their default value

5. IMPACT:
   This inconsistency makes it impossible to reliably exclude all fields with default values when serializing models, which breaks the expected semantics of exclude_defaults=True.

CONCLUSION: The bug is reproducible and behaves exactly as described in the bug report.
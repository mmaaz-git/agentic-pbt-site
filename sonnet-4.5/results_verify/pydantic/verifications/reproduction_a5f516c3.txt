## Bug Reproduction Analysis

I've successfully reproduced the bug and confirmed the technical details are accurate.

### Reproduction Results:

1. **Main Example (0, 0, 22)**:
   - Original RGB: (0, 0, 22)
   - Converts to HSL string: "hsl(240, 100%, 4%)"
   - Parses back to RGB: (0, 0, 20)
   - Difference: 2 units

2. **Additional Examples Confirmed**:
   - (0, 0, 1) → "hsl(240, 100%, 0%)" → (0, 0, 0) - diff: 1
   - (0, 0, 2) → "hsl(240, 100%, 0%)" → (0, 0, 0) - diff: 2
   - (0, 0, 22) → "hsl(240, 100%, 4%)" → (0, 0, 20) - diff: 2

3. **Technical Analysis**:
   - RGB (0, 0, 22) has exact lightness of 4.313725%
   - The format string `{li:0.0%}` rounds this to 4%
   - When parsing "4%" back, it represents exactly 4.0% lightness
   - 4.0% lightness converts to RGB (0, 0, 20)

4. **Precision Loss Pattern**:
   - RGB values that convert to lightness between 3.5% and 4.5% all get rounded to "4%"
   - When parsed back, they all become the same RGB value corresponding to exactly 4.0%
   - This creates differences of up to 2-3 units in RGB values

5. **Bug Report Accuracy**:
   - The bug report correctly identifies the issue is in line 196 and 199
   - The format string `{li:0.0%}` indeed causes the precision loss
   - The proposed fix (using `{li:0.1%}`) would reduce but not eliminate the issue

The bug is reproducible and the technical explanation in the report is accurate. The precision loss happens because HSL percentages are rounded to whole numbers when formatted as strings.
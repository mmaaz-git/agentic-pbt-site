## Documentation Analysis

### Official Documentation Review

1. **Experimental Pipeline API Documentation**
   - The pipeline API is clearly marked as "experimental" with warnings that it's "subject to change"
   - Documentation states that gt() "constrains a value to be greater than a certain value"
   - No specific documentation found about type mismatch behavior or requirements for constraint types to match field types

2. **Expected Behavior Based on Documentation**
   - The gt() method should validate that values are greater than the specified constraint
   - The documentation does not specify that constraint types must match field types
   - Other comparison operators (ge, lt, le) are documented identically to gt

3. **Implicit Expectations from API Design**
   - The API accepts float constraints on integer fields syntactically (no type error)
   - Mathematically, comparing integers to floats is well-defined (5 > 5.5 is False)
   - The constraint should reasonably apply cross-type comparisons

4. **Consistency with Related Features**
   - The ge(), lt(), and le() methods all work correctly with type mismatches
   - They properly validate cross-type comparisons (e.g., ge(5.5) correctly rejects 5)
   - This creates an expectation that gt() should behave similarly

5. **Documentation Gaps**
   - No explicit documentation about type matching requirements for constraints
   - No warnings about potential validation failures with type mismatches
   - No examples showing cross-type constraint usage

### Conclusion on Documentation

The documentation does not specify that constraint types must match field types, and the natural mathematical interpretation would be that gt(5.5) should reject values â‰¤ 5.5 regardless of whether the field is an integer or float. The fact that ge(), lt(), and le() all work correctly with type mismatches creates a reasonable expectation that gt() should behave the same way.

This is NOT a documentation issue - the code's behavior violates the reasonable interpretation of the documented functionality. The constraint simply doesn't work as described when there's a type mismatch.
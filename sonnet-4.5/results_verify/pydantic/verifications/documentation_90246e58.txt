DOCUMENTATION ANALYSIS
======================

## model_dump Documentation
- The `model_dump()` method has a `by_alias` parameter (defaults to False)
- When `by_alias=False` (default), the output uses original Python field names
- When `by_alias=True`, the output uses field aliases
- Documentation clearly states: "Whether to use the field's alias in the dictionary key if defined"

## model_validate Documentation
- The actual signature does NOT include `by_alias` or `by_name` parameters (contrary to what some documentation suggests)
- Signature: `model_validate(obj, *, strict=None, from_attributes=None, context=None)`
- No parameters exist to control whether it accepts field names vs aliases during validation

## Field Aliases Documentation
- By default, validation uses aliases (validate_by_alias=True in config)
- By default, serialization does NOT use aliases (serialize_by_alias=False)
- The documentation mentions `populate_by_name` is deprecated in v2.11+ in favor of `validate_by_name` and `validate_by_alias`
- However, testing shows that `validate_by_name=True` in ConfigDict does NOT work as expected - models still only accept aliases during validation

## Key Findings
1. The documentation does NOT explicitly state that model_dump(by_alias=False) followed by model_validate() should work without configuration
2. The documentation does NOT guarantee round-trip behavior for alias fields
3. The `populate_by_name` configuration IS documented as a way to accept both field names and aliases
4. The newer `validate_by_name` config option appears to not work as documented (possible documentation bug itself)

## Documentation Gaps
- No explicit discussion of round-trip serialization/deserialization with aliases
- No warning that model_dump(by_alias=False) output cannot be validated without populate_by_name=True
- The relationship between dump and validate operations is not clearly documented
- The documentation suggests validate_by_name should work but it doesn't in practice
# Documentation Analysis

## Official Pydantic Documentation
- The pydantic.deprecated.json module is explicitly marked as deprecated
- The function pydantic_encoder has a deprecation warning recommending use of `pydantic_core.to_jsonable_python` instead
- No specific documentation found about how bytes should be encoded in the deprecated module
- The migration guide confirms that ENCODERS_BY_TYPE was moved to pydantic.deprecated.json as part of the V2 migration

## Current Pydantic Behavior
Testing reveals that even modern pydantic (v2.10.3) has similar behavior:
- When using BaseModel with bytes fields, pydantic attempts UTF-8 decoding for JSON serialization
- Non-UTF-8 bytes result in PydanticSerializationError: "invalid utf-8 sequence"
- Valid UTF-8 bytes are successfully converted to strings

## JSON Standard
- The JSON specification (json.org) does not define a standard way to encode binary data
- JSON only natively supports strings, numbers, booleans, null, objects, and arrays
- Common practice for binary data in JSON is base64 encoding, but this is not mandated by the spec
- Python's standard json module refuses to encode bytes at all (TypeError)

## Key Findings
1. **No explicit documentation** found stating that bytes MUST be UTF-8 decodable in pydantic
2. **The deprecated module** is marked as deprecated with warnings suggesting migration
3. **Even the recommended replacement** (pydantic_core.to_jsonable_python) has the same UTF-8 limitation
4. **Industry standard practice** for binary in JSON is typically base64 encoding
5. **The current implementation** makes an implicit assumption that all bytes are UTF-8 text

## Documentation Gap
There is no clear documentation stating:
- That bytes passed to the encoder must be valid UTF-8
- What the intended use case for the bytes encoder is
- How users should handle arbitrary binary data

The lack of documentation about this constraint combined with Python's bytes type accepting arbitrary binary data creates a mismatch between user expectations and actual behavior.
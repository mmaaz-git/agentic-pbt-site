# Documentation Analysis

## Key Finding: Immutability Contract

The most critical documentation is found in the Django source code itself, in the base `Operation` class docstring at `/django/db/migrations/operations/base.py` lines 27-28:

**"Due to the way this class deals with deconstruction, it should be considered immutable."**

This is an explicit internal documentation requirement that all Operation subclasses must be immutable.

## What Immutability Means

The Operation class uses a deconstruction pattern (see `deconstruct()` method at lines 55-65) that captures constructor arguments to enable serialization and reconstruction of operation objects. The immutability requirement ensures that:

1. An operation can be reliably deconstructed and reconstructed
2. Operations can be safely reused across different contexts
3. The state of an operation remains consistent throughout its lifecycle

## Public Documentation

The public Django documentation (docs.djangoproject.com) does not explicitly mention the immutability requirement:

1. **Migration Operations Reference** - Documents RenameModel and RenameIndex but doesn't mention immutability or exception safety
2. **Writing Migrations** - No mention of immutability requirements
3. **Topics/Migrations** - General overview without technical implementation details

## Exception Safety

Neither the internal code documentation nor the public documentation explicitly addresses exception safety requirements for `database_backwards()` methods. However:

1. The immutability contract implies that operations should not have their state permanently modified by method calls
2. Standard exception safety principles would require that if a method fails, the object should remain in a valid, consistent state
3. The current implementation violates both of these principles

## Conclusion

The bug violates a documented internal contract (immutability) stated explicitly in the base class. While this requirement is not prominently featured in public documentation, it is clearly stated in the source code that all Django developers working on migrations would see. The violation occurs because the `database_backwards()` method modifies the object state and fails to restore it when an exception occurs.
Bug Report Triage Analysis
==========================

Evaluation of Each Category:
----------------------------

**INVALID - Why it might be:**
- One could argue that raising KeyError is technically correct Python behavior
- The format() method naturally raises KeyError for missing keys
- Developer should ensure their placeholders match their model

**Why it's NOT INVALID:**
- Django documentation explicitly advertises this as a feature
- No documentation warns about KeyError possibility
- The error provides no context about where it occurred
- Django already has established error patterns for configuration issues

**WONTFIX - Why it might be:**
- The error technically tells you what's wrong (missing key)
- Developers can figure out the issue by looking at the traceback
- It's a simple misconfiguration that's easy to fix once understood

**Why it's NOT WONTFIX:**
- This affects real-world usage and developer experience
- The fix is simple and improves usability significantly
- Django already uses ImproperlyConfigured for similar cases in the same method
- Poor error messages hurt Django's reputation for good developer experience

**DOCUMENTATION_FIX - Why it might be:**
- The code works as Python's format() naturally works
- Could just document that KeyError will be raised for missing placeholders
- Add a warning in docs about ensuring placeholders match model fields

**Why it's NOT just DOCUMENTATION_FIX:**
- The error handling is inconsistent within the same method
- Django has established patterns for configuration errors
- Better error messages are a code quality issue, not documentation
- The proposed fix improves the framework itself

**FEATURE_REQUEST - Why it might be:**
- Adding better error messages could be seen as an enhancement
- The current behavior is not technically "broken"
- Could be viewed as requesting new validation functionality

**Why it's NOT a FEATURE_REQUEST:**
- This is fixing poor error handling, not adding new functionality
- The feature (format strings) already exists but fails ungracefully
- Error message improvements are typically bug fixes, not features
- Django's own patterns suggest this should use ImproperlyConfigured

**BUG - Why this IS a bug:**
1. **Inconsistent Error Handling**: The same method uses ImproperlyConfigured for other configuration errors but not this one
2. **Poor Developer Experience**: Bare KeyError provides no context about the actual problem
3. **Documented Feature Fails Ungracefully**: The format string feature is documented but error case isn't handled
4. **Against Django Philosophy**: Django prides itself on helpful error messages
5. **Easy to Trigger**: Common scenarios like typos or model changes can trigger this
6. **Trivial Fix**: The proposed solution is simple and follows existing patterns

Decision Rationale:
------------------
This is a BUG because:
- It violates Django's own error handling patterns (using ImproperlyConfigured elsewhere)
- The error message provides insufficient context for debugging
- A documented feature fails with an unhelpful error
- The fix is straightforward and improves the framework
- This affects real developers in production scenarios
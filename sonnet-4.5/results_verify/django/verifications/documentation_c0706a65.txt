DOCUMENTATION ANALYSIS FOR DJANGO CHECK REGISTRY
=================================================

## Official Documentation References

Based on my investigation of Django's documentation and source code, here's what I found:

### 1. Docstring in CheckRegistry.register() (lines 34-49 of registry.py):
The docstring clearly states: "The function should receive **kwargs and return list of Errors and Warnings."
This explicitly says "list" - not "iterable", not "sequence", but specifically "list of Errors and Warnings".

### 2. Error Message in run_checks() (lines 92-93 of registry.py):
The error message states: "The function %r did not return a list. All functions registered with the checks registry must return a list."
Again, this explicitly says "must return a list" - not any iterable.

### 3. Comment in run_checks() (line 80 of registry.py):
The method docstring says: "Run all registered checks and return list of Errors and Warnings."
This reinforces that the expected return type is a list of error/warning objects.

### 4. Django Documentation Pattern:
The Django documentation examples consistently show check functions returning lists containing CheckMessage objects (Error, Warning, Info, etc.). The pattern is always:
```python
def check_function(app_configs, **kwargs):
    errors = []
    # ... check logic ...
    if problem_found:
        errors.append(Error(...))
    return errors
```

### 5. Implementation vs Documentation Mismatch:
The actual implementation at line 90 checks: `if not isinstance(new_errors, Iterable)`
This checks for ANY iterable, not specifically a list. Since strings are iterable in Python, they pass this check.
This is inconsistent with:
- The error message which says "must return a list"
- The docstring which says "return list of Errors and Warnings"
- The documentation patterns which always show lists

## Key Finding:
There is a clear mismatch between what the documentation/error messages claim (must return a list) and what the code actually enforces (any iterable is accepted). The documentation is explicit that a list should be returned, not just any iterable.
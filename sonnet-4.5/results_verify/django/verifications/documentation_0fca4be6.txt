# Documentation Analysis

## Django Documentation
The Django documentation for the checks framework (https://docs.djangoproject.com/en/stable/ref/checks/) does not provide any specific documentation about:
- How `CheckMessage` equality should behave
- Whether parent and child class instances should be considered equal
- Any requirements for symmetric, reflexive, or transitive properties

The documentation only describes the constructor parameters and general purpose of the CheckMessage class, but remains silent on comparison behavior.

## Python Language Documentation
According to Python's official documentation (https://docs.python.org/3/reference/datamodel.html#object.__eq__):

1. **No Strict Requirements**: Python does NOT explicitly mandate that `__eq__` must be symmetric, reflexive, or transitive. The documentation states "there are no implied relationships among the comparison operators."

2. **NotImplemented Convention**: The documentation suggests returning `NotImplemented` when the comparison doesn't know how to handle the other type, which allows Python to try the reversed comparison.

3. **Best Practices (not requirements)**:
   - While not mandated, symmetric equality is considered a best practice
   - Objects that compare equal should have the same hash value (for use in dictionaries/sets)
   - The functools.total_ordering decorator expects consistent comparisons

## Analysis of Expected Behavior
Given the lack of explicit documentation:

1. **No Documented Contract Violation**: The current Django implementation does not violate any documented contract about equality behavior.

2. **Python Conventions**: While symmetric equality is a common expectation in Python, it is not a language requirement. The documentation explicitly states there are "no implied relationships" among comparison operators.

3. **Current Behavior is Consistent**: The current implementation where `CheckMessage(ERROR, msg) == Error(msg)` returns `False` and `Error(msg) == CheckMessage(ERROR, msg)` also returns `False` is:
   - Symmetric (False == False)
   - Not explicitly wrong according to documentation
   - A reasonable design choice (parent and child instances are considered different)

## Conclusion
There is no documentation that mandates CheckMessage instances must compare equal to their subclass instances, nor is there documentation requiring strict mathematical properties for the equality operator. The current behavior is undocumented but not in violation of any documented requirements.
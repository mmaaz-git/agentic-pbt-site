## Documentation Analysis for SECURE_REFERRER_POLICY

### Django Documentation
According to Django's documentation and source code comments, the SECURE_REFERRER_POLICY setting:
1. Can accept either a string or an iterable of values
2. When a string is provided, it's treated as a comma-separated list of policies
3. When an iterable is provided, the values are used directly
4. The comment in the source code (line 50-51) explicitly states: "Support a comma-separated string or iterable of values to allow fallback"

The Django documentation does not explicitly specify how whitespace should be handled in either format. It simply states that the setting supports "an iterable or comma-separated string" for fallback policies.

### HTTP Referrer-Policy Specification
According to the W3C specification and MDN documentation:
1. The Referrer-Policy header accepts a comma-delimited list of policy tokens for fallback
2. The specification indicates that whitespace should be stripped from policy values
3. Policy tokens themselves do not contain spaces - they are hyphenated strings like "no-referrer", "strict-origin", etc.
4. Leading and trailing whitespace should be trimmed from policy values

### Key Finding
The documentation does not explicitly state that string and iterable inputs should produce identical HTTP headers. However, there is an implicit expectation based on:
1. Both formats are presented as equivalent alternatives for achieving the same goal (specifying fallback policies)
2. The HTTP specification expects trimmed policy values
3. The purpose is to generate valid HTTP headers, and policy tokens with whitespace are invalid

### Conclusion on Documentation
While Django's documentation doesn't explicitly promise identical handling of whitespace between string and iterable formats, the HTTP specification strongly suggests that whitespace should be trimmed from policy values to create valid headers. The current implementation creates potentially invalid HTTP headers when an iterable contains values with whitespace.
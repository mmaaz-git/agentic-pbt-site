Documentation Analysis
======================

## Official Django Documentation

### BaseEmailBackend Documentation (from base.py)
The base class documentation at lines 57-58 clearly states:
"Send one or more EmailMessage objects and return the number of email messages sent."

This establishes the contract that ALL email backends must follow:
- Input: One or more EmailMessage objects (as a list)
- Output: Integer representing the number of messages sent

### Django Documentation Website
From the official Django documentation:
1. The send_messages() method "returns the number of successfully delivered messages"
2. Custom backends must implement send_messages(email_messages) which returns the number of successfully delivered messages
3. The SMTP backend is referenced as the "reference implementation" for custom backends

### API Contract
The BaseEmailBackend.send_messages() raises NotImplementedError with the message:
"subclasses of BaseEmailBackend must override send_messages() method"

This enforces that all backends MUST implement this method, and by the documented contract,
MUST return an integer count of messages sent.

### Behavior of Other Backends
Documentation and code inspection confirm:
1. SMTP backend: Returns integer (explicitly returns 0 for empty list)
2. Dummy backend: Returns len(list(email_messages))
3. Locmem backend: Returns msg_count (initialized to 0)
4. Console backend: Returns None for empty list (violates contract)
5. Filebased backend: Inherits from console (same violation)

### Related Documentation Issues
- Django ticket #32471 addressed documenting the return value of EmailMessage.send()
- This helped clarify the API behavior in the official documentation
- The return value specification is considered crucial for consistent interface

## Conclusion

The documentation clearly and consistently states that send_messages() must return an integer
representing the number of messages sent. Returning None violates this documented contract.
When no messages are sent (empty list), the correct return value is 0, not None.

The console backend's behavior of returning None for an empty list is clearly inconsistent
with the documented API contract and the implementation of other backends.
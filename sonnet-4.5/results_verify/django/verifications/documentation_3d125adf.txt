DOCUMENTATION ANALYSIS
======================

I have reviewed the Django documentation for DecimalValidator and related components. Here are my findings:

1. DECIMALVALIDATOR DOCUMENTATION:
   The official Django documentation states:
   - DecimalValidator validates decimal numbers against max_digits and decimal_places constraints
   - max_digits: Maximum total number of digits allowed
   - decimal_places: Maximum number of decimal places allowed
   - Raises ValidationError with specific error codes for violations

2. NO SPECIAL MENTION OF ZERO HANDLING:
   The documentation does NOT specify:
   - How zero values with different representations should be handled
   - Whether Decimal("0.0") and Decimal("0") should be treated differently
   - Any special cases for zero values

3. DECIMALFIELD USAGE EXAMPLES:
   The documentation provides examples like:
   - "To store numbers up to 999.99 with a resolution of 2 decimal places"
   - "To store numbers up to approximately one billion with a resolution of 10 decimal places"

   These examples focus on positive numbers and don't address zero handling.

4. MATHEMATICAL EXPECTATIONS:
   While not explicitly documented, there are reasonable mathematical expectations:
   - Zero is a unique value that has no significant decimal places
   - In mathematics, 0 = 0.0 = 0.00 (all represent the same value)
   - The number of trailing zeros after the decimal point for zero is purely a formatting concern

5. DECIMAL TYPE BEHAVIOR:
   The documentation mentions that DecimalField uses Python's Decimal type, which:
   - Preserves the precision as entered (0.0 vs 0 have different internal representations)
   - But evaluates to equal values (Decimal("0") == Decimal("0.0"))

6. IMPLICIT EXPECTATIONS:
   While not explicitly documented, users would reasonably expect:
   - A validator for decimal places to focus on significant decimal places
   - Zero to be accepted regardless of formatting when decimal_places=0
   - Validation to be based on mathematical value, not string representation

CONCLUSION:
The documentation does not explicitly state how DecimalValidator should handle zero values with different representations. This leaves room for interpretation, but the current behavior (rejecting Decimal("0.0") when decimal_places=0) is counterintuitive and not aligned with mathematical principles where zero has no significant decimal places.
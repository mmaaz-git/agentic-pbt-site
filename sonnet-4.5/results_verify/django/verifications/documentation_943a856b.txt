DOCUMENTATION ANALYSIS

1. IntegerField.to_python() Docstring:
   - Located at django/forms/fields.py lines 336-338
   - States explicitly: "Validate that int() can be called on the input. Return the result of int() or None for empty values."
   - This docstring creates an expectation that the field should accept ANY value where int() can be called

2. Python Boolean/Integer Relationship:
   - bool.__bases__ = (<class 'int'>,)
   - Booleans are a subclass of int in Python
   - isinstance(True, int) = True
   - isinstance(False, int) = True
   - int(True) = 1, int(False) = 0
   - This is fundamental Python behavior since PEP 285 (Python 2.3)

3. IntegerField Implementation:
   - The implementation converts value to string first: str(value)
   - Then attempts int(str(value)) after removing decimal points
   - This intermediate string conversion breaks boolean support
   - str(True) = 'True', str(False) = 'False'
   - int('True') and int('False') raise ValueError

4. Form Field Context:
   - IntegerField is primarily designed for HTML form input
   - HTML forms submit data as strings, so string "42" works
   - The field also accepts numeric types (int, float)
   - Float 42.0 is accepted and converted to 42
   - However, booleans are rejected despite being valid Python integers

5. Documentation Ambiguity:
   - The docstring says "Validate that int() can be called on the input"
   - This is technically incorrect - the field does NOT validate that int() can be called
   - Instead, it validates that int(str(value)) can be called (with decimal removal)
   - The docstring creates a false expectation about boolean support

6. User Expectations:
   - Given that booleans ARE integers in Python
   - Given the docstring claims int() should work
   - Users would reasonably expect boolean values to be accepted
   - This is especially relevant for programmatic form usage (APIs, testing, data processing)

CONCLUSION:
The docstring creates a contract that the implementation does not fulfill. The documentation states the field validates "that int() can be called on the input", but this is false for boolean values where int(True) and int(False) are perfectly valid Python operations. This is a documentation/implementation mismatch.
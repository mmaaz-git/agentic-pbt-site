## Documentation Analysis for send_messages()

### Base Class Documentation
The base class `BaseEmailBackend` at `django/core/mail/backends/base.py` explicitly documents the contract for the `send_messages()` method in lines 55-59:

```python
def send_messages(self, email_messages):
    """
    Send one or more EmailMessage objects and return the number of email
    messages sent.
    """
```

This docstring clearly states that the method should:
1. Accept one or more EmailMessage objects
2. **Return the number of email messages sent**

The documentation is unambiguous - it requires returning a number (integer), not None or any other type.

### Implementation Analysis
Looking at various Django email backend implementations:

1. **SMTP Backend** (`smtp.py`, lines 125-126):
   ```python
   if not email_messages:
       return 0
   ```
   Returns `0` explicitly for empty lists.

2. **Dummy Backend** (`dummy.py`, line 10):
   ```python
   return len(list(email_messages))
   ```
   Returns the length, which would be `0` for empty lists.

3. **Locmem Backend** (`locmem.py`, lines 28-33):
   Does not have an early return for empty lists, iterates through messages and returns `msg_count`, which would be `0` for empty lists.

4. **Console Backend** (`console.py`, lines 30-31):
   ```python
   if not email_messages:
       return
   ```
   Returns `None` implicitly (bare `return` statement).

5. **File-based Backend** (`filebased.py`):
   Inherits from ConsoleBackend, so also returns `None` for empty lists.

### Contract Compliance
The base class establishes a clear contract: the method must return "the number of email messages sent." This is an integer value. When no messages are sent (empty list), the number is `0`, not `None`.

Most backends (SMTP, Dummy, Locmem) correctly return `0` for empty lists, maintaining consistency with the documented contract. The Console and File-based backends violate this contract by returning `None`.
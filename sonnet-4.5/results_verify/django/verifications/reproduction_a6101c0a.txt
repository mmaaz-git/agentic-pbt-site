# Bug Reproduction Report

## Summary
I have successfully reproduced the bug reported in scipy.spatial.distance.correlation function. The function returns `nan` when given constant arrays (arrays where all elements are the same value).

## Test Results

### 1. Direct Test Case from Bug Report
Tested: `correlation([5.0, 5.0, 5.0], [5.0, 5.0, 5.0])`
- Expected: 0.0 (identical arrays should have distance 0)
- Actual: nan
- Runtime warning: "invalid value encountered in scalar divide" at distance.py:682

### 2. Extended Testing with Various Constant Arrays
All constant arrays produce nan:
- `correlation([1.0, 1.0], [1.0, 1.0])` = nan
- `correlation([0.0, 0.0, 0.0], [0.0, 0.0, 0.0])` = nan
- `correlation([-5.0, -5.0, -5.0, -5.0], [-5.0, -5.0, -5.0, -5.0])` = nan
- `correlation([100.0] * 10, [100.0] * 10)` = nan

Different constant arrays also produce nan:
- `correlation([5.0, 5.0, 5.0], [10.0, 10.0, 10.0])` = nan

### 3. Non-Constant Arrays Work Correctly
- `correlation([1, 2, 3], [1, 2, 3])` = 0.0 (correctly returns 0 for identical arrays)
- `correlation([1, 2, 3], [4, 5, 6])` = 0.0 (correctly returns 0 for perfectly correlated arrays)

## Mathematical Analysis
The issue occurs because:
1. For constant arrays, all values are the same, so the variance is 0
2. The correlation distance formula involves dividing by the product of standard deviations
3. When standard deviation is 0, we get division by zero, resulting in nan
4. The warning message confirms this: "invalid value encountered in scalar divide" at line 682

## Impact
This bug violates a fundamental property of distance metrics:
- The identity property states that d(x, x) = 0 for any vector x
- Currently, `correlation(u, u)` returns nan when u is a constant array
- This breaks the mathematical definition of a proper distance metric

The bug is consistently reproducible and affects all constant arrays regardless of their value or length.
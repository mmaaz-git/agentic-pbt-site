# Documentation Analysis

## Official scipy.spatial.distance.correlation Documentation

### Function Description
The function computes the correlation distance between two 1-D arrays using the formula:
`1 - [(u - ū) · (v - v̄)] / [||u - ū||₂ * ||v - v̄||₂]`

### Key Documentation Findings

1. **No Edge Case Documentation**: The official documentation does NOT mention:
   - How constant arrays (zero variance) are handled
   - What happens when standard deviation is zero
   - Expected behavior when NaN values might be produced
   - Any special handling for the identity property d(x,x) = 0

2. **Source Code Analysis**:
   - Line 682 performs: `dist = 1.0 - uv / math.sqrt(uu * vv)`
   - When uu = 0 or vv = 0 (constant arrays), math.sqrt(0 * 0) = 0
   - Division by zero produces NaN with a runtime warning
   - No special case handling for zero variance scenarios

3. **Metric Space Properties**:
   According to mathematical literature:
   - A proper distance metric must satisfy the identity axiom: d(x,x) = 0
   - Correlation-based distances often form pseudometrics
   - The identity property is fundamental: "the distance from a point to itself needs to be 0"

4. **Mathematical Context**:
   - Correlation distance is commonly defined as 1 - correlation
   - For constant arrays, correlation is mathematically undefined (0/0)
   - However, for identical arrays, the distance should logically be 0

## Documentation Gaps

The scipy documentation is **incomplete** regarding:
1. Behavior with constant/zero-variance inputs
2. The identity property requirement for distance metrics
3. NaN return values in edge cases
4. Whether this implements a true metric or pseudometric

## Comparison with Mathematical Standards

The current implementation violates the fundamental metric axiom that d(x,x) = 0:
- For non-constant arrays: correlation(u, u) correctly returns 0
- For constant arrays: correlation(u, u) incorrectly returns NaN

This inconsistency is not documented, making it a surprise to users expecting metric properties.
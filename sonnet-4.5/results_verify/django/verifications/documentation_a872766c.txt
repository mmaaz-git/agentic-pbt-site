## Documentation Analysis

### BaseEmailBackend Documentation
The base class documentation (django/core/mail/backends/base.py) is explicit and unambiguous:

Lines 56-58 in the `send_messages` method docstring:
```
Send one or more EmailMessage objects and return the number of email
messages sent.
```

This clearly specifies that the method must:
1. Accept one or more EmailMessage objects
2. Return the **number** of email messages sent (an integer)

### Consistency Across Backends
Examining all Django email backends reveals a clear pattern:

1. **SMTP Backend** (smtp.py:119): Returns `0` for empty list
   ```python
   if not email_messages:
       return 0
   ```

2. **Dummy Backend** (dummy.py:10): Returns `len(list(email_messages))` which is `0` for empty list

3. **Locmem Backend** (locmem.py:28-33): Initializes `msg_count = 0` and returns it (returns `0` for empty list)

4. **Console Backend** (console.py:30-31): Returns `None` for empty list (BUG)
   ```python
   if not email_messages:
       return  # Returns None implicitly
   ```

5. **FileBased Backend**: Inherits from Console, so inherits the bug

### Documentation Verdict
The documentation is clear and unambiguous:
- The method MUST return "the number of email messages sent"
- When no messages are sent (empty list), the number is `0`
- Returning `None` violates the documented contract
- 3 out of 5 backends correctly return `0`
- Only Console and FileBased (via inheritance) have this bug

This is not a documentation issue - the documentation is correct and clear. The implementation in the Console backend (and by inheritance, FileBased) is incorrect.
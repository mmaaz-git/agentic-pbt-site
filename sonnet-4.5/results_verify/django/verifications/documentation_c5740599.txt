## Documentation Analysis for django.core.signing.b62_decode

### Official Documentation
I searched for official Django documentation for the `b62_encode` and `b62_decode` functions and found that:
1. These functions are NOT documented in the public Django documentation (checked django.utils.signing module docs)
2. The functions have no docstrings in the source code
3. The help() function returns minimal information with no description of behavior or contract

### Source Code Analysis
The functions are located in `/home/npc/miniconda/lib/python3.13/site-packages/django/core/signing.py`:

**b62_encode (lines 64-73):**
- Takes an integer `s` as input
- Returns "0" for input 0
- Handles negative numbers by prepending "-" sign
- Converts absolute value to base62 using alphabet "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

**b62_decode (lines 76-86):**
- Takes a string `s` as input
- Returns 0 for input "0"
- Handles negative numbers by detecting leading "-" and stripping it
- Converts remaining string from base62 back to integer

### Key Observations
1. These appear to be internal utility functions, not part of the public API
2. No documentation specifies round-trip properties or input validation requirements
3. No documentation mentions what should happen with malformed inputs like "-" or "-0"
4. The functions are used internally by `TimestampSigner` class for encoding timestamps
5. No error handling is specified or documented for invalid inputs

### Documentation Status
The functions are undocumented internal utilities with no specified contract for:
- Round-trip encoding/decoding guarantees
- Input validation requirements
- Error handling for malformed inputs
- Canonical representation requirements

Since there is no documentation defining the expected behavior, the bug report's assumptions about round-trip properties and input validation are not based on any documented specification.
## Bug Reproduction Results

### Test 1: Basic Reproduction
The bug report's reproduction code was executed successfully:

```python
backend = EmailBackend(stream=io.StringIO())
result = backend.send_messages([])
```

**Results:**
- `result` value: `None`
- `result` type: `NoneType`
- Expected: integer `0`
- Assertion failed: "Expected int, got <class 'NoneType'>"

### Test 2: Hypothesis Test
The hypothesis test from the bug report also fails:

```python
@given(st.integers(min_value=0, max_value=10))
def test_console_backend_empty_list_returns_int(n):
    backend = ConsoleBackend(stream=io.StringIO())
    result = backend.send_messages([])
    assert isinstance(result, int)
```

**Result:** Failed with error "Expected int, got NoneType: None"

### Test 3: Cross-Backend Comparison
Tested multiple Django email backends with empty message lists:

- **Console Backend**: Returns `None` (NoneType)
- **Locmem Backend**: Returns `0` (int)
- **Dummy Backend**: Returns `0` (int)
- **File-based Backend**: Returns `None` (NoneType) - inherits from Console

### Test 4: Non-empty List Verification
When sending one message, the Console backend correctly returns `1`:

```python
result = backend.send_messages([msg])
# Result: 1 (int)
```

### Technical Details
The issue is in `console.py` lines 30-31:
```python
if not email_messages:
    return  # Returns None implicitly
```

This bare `return` statement returns `None` in Python, not `0` as required by the contract.

### Conclusion
The bug is reproducible and confirmed. The Console backend (and File-based backend which inherits from it) returns `None` instead of `0` for empty message lists, violating the documented contract that requires returning an integer count.
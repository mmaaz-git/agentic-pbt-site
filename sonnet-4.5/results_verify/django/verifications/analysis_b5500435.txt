## Bug Report Triage Analysis

### INVALID - Reasons Against
- None. The bug is reproducible and violates documented behavior.

### WONTFIX - Reasons For/Against
**For:**
- Could argue that WeakKeyDictionary is needed to prevent memory leaks
- Might claim that most Django users use model instances as senders (which are weak-referenceable)

**Against:**
- This is not an obscure edge case - `sender=None` is a fundamental, documented feature
- Breaks common, reasonable use cases (strings, integers as senders)
- The caching optimization completely changes the API surface
- The cache is already cleared on connect/disconnect, so memory leaks are limited

### DOCUMENTATION_FIX - Reasons For/Against
**For:**
- Could update documentation to warn that `use_caching=True` only works with weak-referenceable senders
- Could document that certain sender types are incompatible with caching

**Against:**
- The current documentation explicitly states `sender=None` is valid
- Changing documentation would be breaking a documented API contract
- `use_caching` should be a transparent optimization, not change what's allowed
- This would be admitting a design flaw rather than fixing it

### FEATURE_REQUEST - Reasons For/Against
**For:**
- Could frame as "Add support for non-weak-referenceable senders with caching"

**Against:**
- This isn't a new feature - it's fixing broken existing functionality
- The API already claims to support these sender types
- `use_caching=True` with `sender=None` should already work per documentation

### BUG - Reasons For/Against
**For:**
- Violates explicit documentation that states `sender=None` is valid
- Breaks a common, fundamental use case (listening to all senders)
- The parameter `use_caching` changes the API contract unexpectedly
- Crashes with common Python types (str, int, None) that should work
- The error is not graceful - it crashes with TypeError
- Other sender types work fine without caching, so this is inconsistent behavior
- The fix is straightforward (use regular dict or handle non-weak-referenceable types)

**Against:**
- None. This is clearly a bug.

### Conclusion
This is a clear BUG. The implementation violates the documented API contract. The `connect()` method explicitly documents that `sender=None` is valid, and "Python object" implies broad support for different types. The `use_caching` parameter should be a transparent performance optimization that doesn't change what inputs are accepted. The current implementation breaks fundamental, documented functionality.
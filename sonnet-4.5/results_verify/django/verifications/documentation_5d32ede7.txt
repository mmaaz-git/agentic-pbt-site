## Documentation Analysis

### Official Documentation Contract

1. **BaseEmailBackend Documentation** (django/core/mail/backends/base.py):
   - Line 57-58: The docstring for `send_messages()` explicitly states:
     ```
     Send one or more EmailMessage objects and return the number of email
     messages sent.
     ```
   - This clearly establishes that the method MUST return a number (integer count)

2. **Django Docs on Email Backends**:
   - The documentation confirms that `send_messages()` "returns the number of successfully delivered messages"
   - It recommends looking at `smtp.EmailBackend` as a "reference implementation"
   - The SMTP backend correctly returns 0 for empty lists

3. **API Contract Clarity**:
   - The phrase "return the number of email messages sent" is unambiguous
   - For an empty list, the number of messages sent is mathematically 0, not None
   - There is no documented exception for empty message lists

### Backend Substitutability Principle
The documentation implies that all email backends should be interchangeable:
- Settings allow switching backends via `EMAIL_BACKEND` configuration
- No documentation suggests different return value contracts for different backends
- The purpose of multiple backends is to provide different delivery mechanisms while maintaining the same API

### Type Expectations
- "The number of" implies a numeric (integer) type
- Python convention: counting operations return integers (len(), count(), etc.)
- None is not a number and violates the documented contract

### Conclusion
The documentation clearly specifies that `send_messages()` must return an integer count. Returning None for empty lists violates this documented contract. The bug report's assumptions about the API contract are correct and well-founded in both the source code documentation and Django's official documentation.
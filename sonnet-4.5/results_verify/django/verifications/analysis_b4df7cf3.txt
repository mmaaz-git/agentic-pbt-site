# Bug Report Categorization Analysis

## BUG (Valid Bug Report)

### Why this should be categorized as BUG:
1. **Silent data loss**: The first registration's tags are lost without warning, causing registered checks to become unreachable
2. **Violates principle of least surprise**: Users reasonably expect either an error or additive behavior, not silent overwrites
3. **Real-world impact**: This can occur in production when:
   - Multiple modules register the same check
   - Developers use multiple @register() decorators thinking they add tags
   - Third-party apps and main apps register the same checks
4. **No documentation of behavior**: The behavior is undocumented, making it impossible for users to know this will happen
5. **Inconsistent with set semantics**: Uses a set internally (suggesting deduplication) but overwrites tags before the set operation

## Why NOT INVALID:
- The bug is real and reproducible
- The test case is correct and demonstrates actual loss of functionality
- The behavior violates reasonable expectations even without explicit documentation
- Silent overwrites that lose functionality are generally considered bugs

## Why NOT WONTFIX:
- This is not a trivial issue - it causes silent failures in production
- The fix is straightforward (either error or merge tags)
- Real-world scenarios exist where this bug would occur
- The current behavior provides no benefit over the alternatives

## Why NOT DOCUMENTATION_FIX:
- Simply documenting "tags will be silently overwritten" would not be acceptable design
- The behavior itself is problematic, not just the lack of documentation
- Users need the ability to either:
  - Register checks with multiple tags (merge behavior)
  - Be warned about conflicts (error behavior)
- Documentation alone cannot fix the loss of functionality

## Why NOT FEATURE_REQUEST:
- This is not asking for new functionality
- The current behavior is broken (silent data loss)
- Users are not requesting an enhancement but reporting that existing functionality fails silently
- The ability to register checks with tags already exists; it just doesn't work correctly for duplicate registrations

## Severity Assessment
- **Medium severity** is appropriate:
  - Silent failure without user notification
  - Can cause production issues
  - Workaround exists (don't register same check twice)
  - But the workaround requires knowing about the bug

## Recommended Fix
The bug report's suggested fixes are both reasonable:
1. Raise an error on duplicate registration (explicit failure)
2. Merge tags from multiple registrations (additive behavior)

Either approach would be better than the current silent overwrite behavior.
DOCUMENTATION ANALYSIS
======================

## Function Purpose
The `date_extract_sql` method in Django's MySQL backend is an internal implementation method that generates SQL for extracting date/time components from a database column. It's part of the database operations layer that translates Django's ORM queries into MySQL-specific SQL.

## Documentation Sources Reviewed

1. **Django Documentation**:
   - No explicit documentation found for this internal method
   - This is an internal implementation detail of Django's MySQL backend
   - Public API uses Extract/ExtractYear/ExtractMonth classes, not this method directly

2. **Code Comments**:
   - Line 45 references: https://dev.mysql.com/doc/mysql/en/date-and-time-functions.html
   - Line 62 states: "EXTRACT returns 1-53 based on ISO-8601 for the week number"
   - Line 42 notes: "EXTRACT format cannot be passed in parameters"

3. **MySQL Documentation**:
   - EXTRACT function accepts specific unit specifiers (YEAR, MONTH, DAY, etc.)
   - Valid units are uppercase words with optional underscores (e.g., YEAR_MONTH)
   - The regex pattern [A-Z_]+ correctly validates these units

## Error Message Context
The ValueError with message "Invalid loookup type" is raised when:
1. The lookup_type doesn't match special cases (week_day, iso_week_day, week, iso_year)
2. The uppercase version of lookup_type doesn't match the pattern [A-Z_]+

This is a validation error to prevent SQL injection and ensure only valid MySQL EXTRACT units are used.

## Expectations
- Error messages in software should be correctly spelled
- This is a user-facing error (can be triggered by invalid Django ORM queries)
- The error helps developers debug incorrect date extraction attempts

## Conclusion
There is no documentation that specifies the exact wording of error messages. However, correct spelling in error messages is a universal expectation in professional software. The typo "loookup" instead of "lookup" is clearly unintentional and should be fixed.
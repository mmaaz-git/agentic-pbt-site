## Documentation Analysis for Django SQLite3 LPAD/RPAD Functions

### Django Documentation
Django introduced LPAD and RPAD functions in version 2.1 as part of the text database functions. These are designed to provide database-level string padding functionality that works across different database backends. The documentation indicates these are meant to mimic SQL standard LPAD/RPAD behavior.

The actual implementation can be found in:
- `/django/db/backends/sqlite3/_functions.py` for SQLite backend
- Functions are registered as `LPAD` and `RPAD` with 3 parameters (text, length, fill_text)

### SQL Standard Behavior for LPAD/RPAD with Empty Padding Strings

Based on documentation from major SQL databases:

1. **MySQL**: Explicitly returns NULL when an empty string is provided as the padding parameter to LPAD() or RPAD()
   - Example: `SELECT LPAD('ABCD', 22, '')` returns NULL

2. **Oracle**: Returns NULL when empty string is used for padding
   - In Oracle, empty string ('') is equivalent to NULL
   - RPAD with NULL padding returns NULL

3. **PostgreSQL**: While not explicitly documented, follows similar conventions where NULL padding returns NULL

### Key Invariants of SQL LPAD/RPAD Functions

1. **Length Invariant**: The function should either:
   - Return a string of EXACTLY the specified length, OR
   - Return NULL if padding is impossible

2. **Padding Behavior**: When padding string is empty/NULL:
   - Standard SQL behavior is to return NULL (not the original string)
   - This is because it's impossible to pad to the required length with nothing

3. **Truncation**: If the input text is longer than the target length, the text should be truncated to exactly the target length

### Django's Current Implementation (lines 389-395, 438-441)

```python
def _sqlite_lpad(text, length, fill_text):
    if text is None or length is None or fill_text is None:
        return None
    delta = length - len(text)
    if delta <= 0:
        return text[:length]
    return (fill_text * length)[:delta] + text

def _sqlite_rpad(text, length, fill_text):
    if text is None or length is None or fill_text is None:
        return None
    return (text + fill_text * length)[:length]
```

### Issue with Current Implementation

The current implementation does NOT check for empty string (`fill_text == ""`). It only checks for None. This causes:
- When `fill_text=""` and `len(text) < length`: Returns the original text unchanged
- This violates the length invariant - the function returns a string of incorrect length
- This diverges from standard SQL behavior which returns NULL in this case
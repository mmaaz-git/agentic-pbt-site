## Documentation Analysis for django.template.Variable

### Inline Code Documentation

1. **Explicit comment at line 824**: The code contains a clear comment stating `# "2." is invalid`
   - This is immediately followed by code checking if the last character is "." and raising ValueError
   - This provides explicit documentation that strings like "2." should be rejected

2. **Class docstring**: The Variable class docstring explains it handles template variables that can be:
   - Hard-coded strings (quoted)
   - Variable lookups with dot notation (e.g., 'article.section')
   - Numeric literals

3. **Exception handling intent**: The code structure shows clear intent:
   - Lines 813-828: Try to parse as a number (float or int)
   - Lines 822-826: Special handling for floats, with explicit rejection of trailing dots
   - Lines 829-848: Handle non-numeric variables

### Expected Behavior Based on Documentation

Based on the inline documentation and code structure:

1. **Valid numeric formats**:
   - Integers: "42", "100"
   - Floats: "3.14", "2.0", "1.5e10"
   - Scientific notation: "1e5", "2.5E-3"

2. **Invalid numeric formats**:
   - Trailing dots: "2.", "10.", "100." (explicitly documented as invalid)
   - These should raise an exception and NOT be treated as variables

3. **Variable lookups**:
   - Should use dot notation: "article.section"
   - Should NOT have empty components (like the ('2', '') tuple created by the bug)

### Documentation Gaps

While the inline comment clearly states "2." is invalid, there is no external documentation found that explicitly describes:
- What numeric formats are accepted/rejected
- How trailing dots should be handled
- The expected exception type for invalid numeric literals

However, the inline comment is sufficient documentation that "2." should be rejected, making this a valid bug.

### Conclusion

The code's own documentation (the comment on line 824) explicitly states that "2." is invalid. The current behavior violates this documented intention by:
1. Not raising the intended exception
2. Creating a malformed Variable object with both literal and lookups set
3. Having an empty string in the lookups tuple

This is clearly a bug, not a documentation issue or feature request.
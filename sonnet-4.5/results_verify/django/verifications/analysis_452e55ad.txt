## Bug Triage Analysis

### Consideration for INVALID:
This is NOT an invalid bug report because:
- The code explicitly comments that "2." is invalid (line 824)
- The code attempts to raise ValueError to reject such input
- The bug causes an internal inconsistency where both literal and lookups are set
- This is not about raising a less descriptive exception - it's about incorrect state

### Consideration for WONTFIX:
This is NOT a WONTFIX issue because:
- This is not an obscure edge case - numeric strings with trailing dots can occur in real templates
- The bug violates a fundamental class invariant (literal XOR lookups)
- It's not about internal functions accepting diverse inputs - it's a public API issue
- The current behavior is clearly unintended based on the code comment

### Consideration for DOCUMENTATION_FIX:
This is NOT primarily a documentation issue because:
- The code comment explicitly states "2." is invalid
- The code tries to raise an exception but fails due to a bug
- The issue is not that the behavior is reasonable but undocumented
- The current behavior (both literal and lookups set) is clearly wrong

### Consideration for FEATURE_REQUEST:
This is NOT a feature request because:
- The code already tries to handle this case (by raising ValueError)
- The developer intent is clear from the comment
- This is not asking for new functionality but fixing broken existing functionality
- The bug causes resolve() to fail unexpectedly

### Consideration for BUG:
This IS a valid BUG because:
1. **Clear Developer Intent**: The comment "# '2.' is invalid" and the attempt to raise ValueError show the developer intended to reject such input entirely.

2. **Violated Invariant**: The Variable class has an implicit invariant that either `literal` OR `lookups` is set, never both. The resolve() method depends on this invariant with its if-else structure.

3. **Implementation Error**: The ValueError raised for trailing dots is caught by the outer exception handler, causing unintended fallthrough to the lookup parsing code.

4. **Unexpected Behavior**: Users get a confusing VariableDoesNotExist error at resolve() time instead of either:
   - A clear error at Variable construction time (intended behavior)
   - Successful resolution as float 2.0 (alternative reasonable behavior)

5. **Not Edge Case**: Numeric strings with trailing dots can reasonably appear in templates, especially from user input or data formatting.

6. **Clear Fix Available**: The bug report even provides a reasonable fix - reset self.literal to None when the trailing dot is detected.

### Severity Assessment:
- This is a logic bug that causes incorrect internal state
- It affects a public API (Variable class)
- It causes confusing runtime errors
- The fix is straightforward and low-risk

### Conclusion:
This is a legitimate BUG that should remain open. The code's intent is clear (reject "2." as invalid), but the implementation fails to achieve this intent due to improper exception handling. The bug causes a violation of class invariants and unexpected runtime errors.
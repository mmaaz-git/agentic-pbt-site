## Bug Reproduction Analysis

I have successfully reproduced the bug described in the report. The bug is real and behaves exactly as described.

### Key Findings:

1. **The bug exists**: When creating a Variable with strings like "2.", "1.", "10." (integers followed by a trailing dot), no exception is raised as intended.

2. **Actual behavior**:
   - Variable("2.") succeeds in creating a Variable object
   - The resulting object has: literal=2.0, lookups=('2', '')
   - This is incorrect because the code explicitly intends to reject such inputs

3. **Code analysis**:
   - Line 824 has a comment stating "# '2.' is invalid"
   - Line 825-826 check if the last character is "." and raise ValueError
   - However, this ValueError is caught by the outer except block at line 829
   - The except block then treats "2." as a variable name and splits it on "."
   - This creates lookups=('2', '') with an empty string as the second element

4. **Impact**: The bug causes malformed Variable objects where:
   - The literal is set to the float value (e.g., 2.0)
   - The lookups tuple contains an empty string as the last element
   - Both literal and lookups are set, which is semantically incorrect

5. **Test results**:
   - All test cases with trailing dots ("1.", "2.", "10.", "999.", "1234.") incorrectly succeed
   - The hypothesis test that expects these to raise exceptions fails
   - For comparison, "2.0" correctly creates a Variable with literal=2.0 and lookups=None

The bug is a clear logic error where the ValueError intended to reject trailing dots is accidentally caught and mishandled by exception handling meant for non-numeric variables.
REPRODUCTION OF BUG REPORT

I have successfully reproduced the bug described in the report. Here are my findings:

1. HYPOTHESIS TEST RESULTS:
   - Ran the provided property-based test
   - Confirmed it fails with input `host='A'`
   - The test correctly identifies that is_same_domain('A', 'A') returns False when it should return True

2. MANUAL REPRODUCTION:
   - is_same_domain('A', 'A') = False (INCORRECT - should be True)
   - is_same_domain('a', 'a') = True (correct)
   - is_same_domain('Example.COM', 'Example.COM') = False (INCORRECT - should be True)
   - is_same_domain('example.com', 'example.com') = True (correct)
   - is_same_domain('Example.com', 'example.com') = False (INCORRECT - should be True)
   - is_same_domain('example.com', 'Example.com') = True (correct when host is lowercase)

3. SOURCE CODE VERIFICATION:
   Located the function at /home/npc/pbt/agentic-pbt/envs/django_env/lib/python3.13/site-packages/django/utils/http.py:223-240

   Confirmed the bug exists in the code:
   - Line 235: `pattern = pattern.lower()` - only the pattern is lowercased
   - Line 239: `pattern == host` - direct comparison without lowercasing host
   - When host contains uppercase letters, the comparison fails incorrectly

4. EFFECT OF THE BUG:
   The function fails to match domains that should be considered identical according to DNS standards.
   When both host and pattern have the same case (including uppercase), they don't match.
   When host is uppercase and pattern is uppercase, they don't match even though they're identical.

   This affects:
   - Direct usage of is_same_domain() function
   - CSRF middleware which uses is_same_domain() with non-normalized hostnames from urlsplit()
   - Any other code that calls is_same_domain() without pre-normalizing the host parameter

The bug is real and reproducible exactly as described in the report.
## Documentation Analysis

### Django Official Documentation

I reviewed the Django documentation for the Left and Right functions at:
- https://docs.djangoproject.com/en/stable/ref/models/database-functions/#left
- https://docs.djangoproject.com/en/stable/ref/models/database-functions/#right

### Key Findings

1. **Function Purpose**:
   - Left: "Returns the first `length` characters of the given text field or expression."
   - Right: "Returns the last `length` characters of the given text field or expression."

2. **Parameter Documentation**:
   - The documentation does NOT explicitly state what happens when `length` is None
   - The documentation does NOT specify that length must be a positive integer
   - The documentation does NOT mention any specific exceptions that would be raised

3. **Examples Provided**:
   - Only show usage with positive integer literals (e.g., `Left("name", 1)`)
   - No examples with None, negative, or zero values

### Behavior of Similar Functions

Looking at the implementation of similar functions in the same module:

1. **LPad/RPad**: Accept None for length parameter without raising exceptions
2. **Repeat**: Accepts None for the number parameter without raising exceptions
3. **Substr**: Has optional length parameter that can be None (though pos parameter has same bug)

### Expected vs Actual Behavior

**What the documentation implies**: Based on the examples and description, the functions expect positive integer values for length.

**What the code should do**: Given that:
- The documentation doesn't explicitly forbid None values
- Similar functions (LPad, RPad, Repeat) gracefully handle None
- The parent Func class can handle None values
- Django often allows None for optional database expressions

The functions should either:
1. Handle None gracefully (pass it to parent class), OR
2. Raise a clear ValueError stating "length cannot be None"

**What actually happens**: A confusing TypeError about comparison operators.

### Conclusion

The current behavior (TypeError) is undocumented and inconsistent with:
1. Similar functions in the same module
2. Django's general pattern of handling None values
3. User expectations based on the error message clarity

The documentation doesn't specify the behavior for None values, but the inconsistency with similar functions and the unclear error message make this a legitimate bug rather than intended behavior.
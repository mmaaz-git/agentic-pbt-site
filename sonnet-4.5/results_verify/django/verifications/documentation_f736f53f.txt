DOCUMENTATION ANALYSIS
======================

1. Django's wrap() Function Documentation:
------------------------------------------
The function is in django.utils.text but is NOT documented in Django's public API documentation.
It only has an internal docstring which states:

"A word-wrap function that preserves existing line breaks. Expects that existing line breaks are posix newlines.
Preserve all white space except added line breaks consume the space on which they break the line.
Don't wrap long words, thus the output text may have lines longer than ``width``."

Key claims in the docstring:
- "preserves existing line breaks"
- "Preserve all white space except added line breaks consume the space on which they break the line"

2. Python's splitlines() Documentation:
----------------------------------------
According to Python's official documentation, splitlines() treats the following as line boundaries:
- \n (Line Feed)
- \r (Carriage Return)
- \r\n (CR+LF)
- \v or \x0b (Line Tabulation)
- \f or \x0c (Form Feed)
- \x1c (File Separator)
- \x1d (Group Separator)
- \x1e (Record Separator)
- \x85 (Next Line)
- \u2028 (Line Separator)
- \u2029 (Paragraph Separator)

This is documented Python behavior, not a bug in Python.

3. Python's isspace() Documentation:
-------------------------------------
A character is whitespace if its Unicode category is Zs OR its bidirectional class is WS, B, or S.

U+001C/1D/1E have:
- General Category: Cc (Control)
- Bidirectional Class: B (Paragraph Separator)

Therefore, they ARE officially whitespace according to Python's definition.

4. Unicode Standard:
--------------------
U+001C is INFORMATION SEPARATOR FOUR (File Separator)
U+001D is INFORMATION SEPARATOR THREE (Group Separator)
U+001E is INFORMATION SEPARATOR TWO (Record Separator)

These are ASCII control characters with bidirectional class B.

5. Documentation Assessment:
----------------------------
The wrap() function's docstring says it "preserves all white space" but:
- U+001C/1D/1E ARE whitespace according to Python
- They are also line separators according to splitlines()
- The docstring says "preserve all white space EXCEPT added line breaks"
- These characters are being treated as line breaks (correctly per Python)

The key ambiguity is whether "preserve all white space" should include whitespace characters that are also line separators. The docstring could be interpreted as:
a) Preserve all whitespace that isn't converted to line breaks (current behavior)
b) Preserve all whitespace including line separator whitespace (bug report's expectation)

The function is behaving consistently with interpretation (a), treating these as line breaks rather than preserved whitespace.
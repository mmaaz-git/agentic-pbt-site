## Documentation Analysis for django.template.backends.jinja2.get_exception_info

### Django Documentation

The function `get_exception_info` is documented within Django's source code with the following docstring:
"Format exception information for display on the debug page using the structure described in the template API documentation."

The function is used internally by Django's Jinja2 template backend when catching `jinja2.TemplateSyntaxError` exceptions to provide debugging information on Django's error pages.

### Function Contract and Purpose

The function accepts a Jinja2 exception object and returns a dictionary with debugging information. The expected attributes on the exception object are:
- `lineno`: Line number where the error occurred (integer)
- `filename`: Name of the template file (string)
- `message`: Error message (string)
- `source`: Template source code (string or None)

The function returns a dictionary with these keys:
- `name`: The filename
- `message`: The error message
- `source_lines`: List of (line_number, line_text) tuples for context
- `line`: The line number where error occurred
- `before`, `during`, `after`: Context information
- `total`: Total number of lines in source
- `top`, `bottom`: Boundaries of the context window

### Jinja2 TemplateSyntaxError Documentation

According to the Jinja2 API documentation:
- `lineno` is described as "the line number where the syntax error was found" (integer type)
- The documentation does NOT specify any constraints on lineno values
- The documentation does NOT guarantee that lineno will always be within valid bounds
- The documentation does NOT prohibit negative or zero values for lineno
- Real-world testing shows that Jinja2 always produces positive, valid line numbers in practice

### Documentation Gaps

1. Django's documentation does not specify how `get_exception_info` should handle edge cases:
   - What happens when lineno is out of bounds?
   - What happens when lineno is zero or negative?
   - What happens when source is empty but lineno > 1?

2. The function is marked as internal (not in public API docs) and is only used internally by Django's Jinja2 backend.

3. There is no specification that the function should handle arbitrary or malformed exception objects gracefully.

4. The function appears to assume that if a source exists, the lineno will be valid for that source.

### Key Finding

This function is an internal Django utility, not part of the public API. It's only called by Django's own code when handling real Jinja2 exceptions, which in practice always have valid line numbers. The documentation does not specify behavior for edge cases because the function was never intended to handle arbitrary input - it was designed specifically for real Jinja2 exceptions.
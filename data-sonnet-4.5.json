{
  "reports": [
    {
      "title": "CapacityLimiter Type Hint Violation",
      "target": "anyio.abc.CapacityLimiter",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CapacityLimiter.total_tokens` property is type-hinted as `float` but the setter rejects all float values except `math.inf`, only accepting integers. This violates the type contract established by the type hints.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_CapacityLimiter_total_tokens_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_CapacityLimiter_total_tokens_2025-09-25_14-30_k3m9.md",
      "call_id": "fbfb81c3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CapacityLimiter total_tokens Type Validation",
      "target": "anyio._core._synchronization.CapacityLimiter.total_tokens",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CapacityLimiter.total_tokens` property setter rejects valid `float` values despite the property being typed as `float` in all type hints and documentation. The validation incorrectly restricts inputs to `int` or `math.inf`, causing a `TypeError` when setting valid float values like `5.5`.",
      "package": "anyio",
      "file_name": "bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_02-04_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_02-04_x7k9.md",
      "call_id": "6d11a1c1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FileReadStream.receive(0) raises EndOfStream",
      "target": "anyio.streams.file.FileReadStream.receive",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Calling `FileReadStream.receive(0)` on a stream with remaining data incorrectly raises `EndOfStream` instead of returning an empty bytes object.",
      "package": "anyio",
      "file_name": "bug_report_anyio_FileReadStream_receive_zero_bytes_2025-09-25_06-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_FileReadStream_receive_zero_bytes_2025-09-25_06-15_k3m9.md",
      "call_id": "aa065992",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "MultiListener mutates nested MultiListener objects",
      "target": "anyio.streams.stapled.MultiListener",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`MultiListener.__post_init__` destructively mutates nested `MultiListener` objects by calling `del listener.listeners[:]`, leaving them in a broken state with no listeners.",
      "package": "anyio",
      "file_name": "bug_report_anyio_MultiListener_mutation_2025-09-25_11-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_MultiListener_mutation_2025-09-25_11-06_k3m9.md",
      "call_id": "1e4e30bb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio BufferedByteReceiveStream.receive_until() Delimiter Boundary Bug",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive_until()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `receive_until()` method incorrectly raises `DelimiterNotFound` when a delimiter is split across the `max_bytes` boundary, even though the delimiter exists in the stream.",
      "package": "anyio",
      "file_name": "bug_report_anyio_BufferedByteReceiveStream_receive_until_2025-09-25_05-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_BufferedByteReceiveStream_receive_until_2025-09-25_05-35_k3m9.md",
      "call_id": "c5d9fb37",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio DelimiterNotFound loses max_bytes value",
      "target": "anyio._core._exceptions.DelimiterNotFound",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `DelimiterNotFound` exception accepts a `max_bytes` parameter but only uses it to format an error message, discarding the original integer value. This prevents users from programmatically accessing the limit that caused the exception, forcing them to parse the string message or maintain external state.",
      "package": "anyio",
      "file_name": "bug_report_anyio_DelimiterNotFound_max_bytes_2025-09-25_03-23_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_DelimiterNotFound_max_bytes_2025-09-25_03-23_k7m2.md",
      "call_id": "d9f68e86",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio SpooledTemporaryFile readinto Data Corruption",
      "target": "anyio.SpooledTemporaryFile.readinto",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`SpooledTemporaryFile.readinto()` and `readinto1()` methods have two critical bugs that cause data corruption when the file hasn't been rolled to disk: (1) missing return statement causes double-read, (2) `readinto1()` calls wrong method.",
      "package": "anyio",
      "file_name": "bug_report_anyio_SpooledTemporaryFile_readinto_2025-09-25_08-41_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_SpooledTemporaryFile_readinto_2025-09-25_08-41_k8x3.md",
      "call_id": "5fb0c993",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio fail_after/move_on_after NaN Crash",
      "target": "anyio._core._tasks.fail_after",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `fail_after()` and `move_on_after()` functions crash with a confusing `ValueError: cannot convert float NaN to integer` when passed `math.nan` as the delay parameter, instead of validating the input or handling it gracefully.",
      "package": "anyio",
      "file_name": "bug_report_anyio_fail_after_nan_2025-09-25_09-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_fail_after_nan_2025-09-25_09-00_k3m9.md",
      "call_id": "10fa3ffd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.CapacityLimiter Rejects float('inf')",
      "target": "anyio.CapacityLimiter",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CapacityLimiter` uses identity comparison (`is`) instead of equality comparison (`==`) when checking for infinity, causing it to reject `float('inf')` even though `float('inf') == math.inf`.",
      "package": "anyio",
      "file_name": "bug_report_anyio_CapacityLimiter_infinity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_CapacityLimiter_infinity_2025-09-25_00-00_k3m9.md",
      "call_id": "8aa7eae8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.CapacityLimiter Type Annotation Mismatch",
      "target": "anyio.CapacityLimiter",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CapacityLimiter` constructor and `total_tokens` setter have type annotation `float` but runtime validation only accepts `int` or `math.inf`, creating a contract violation between static type checking and runtime behavior.",
      "package": "anyio",
      "file_name": "bug_report_anyio_capacity_limiter_type_2025-09-25_00-24_j3m2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_capacity_limiter_type_2025-09-25_00-24_j3m2.md",
      "call_id": "377bf6e7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.CapacityLimiter total_tokens Type Contract Violation",
      "target": "anyio.CapacityLimiter",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CapacityLimiter` class declares `total_tokens` parameter with type `float`, but the runtime validation rejects non-integer float values, causing a `TypeError` for valid inputs according to the type annotation.",
      "package": "anyio",
      "file_name": "bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_00-32_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_00-32_x7k9.md",
      "call_id": "4bee2dd1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc.CapacityLimiter total_tokens Type Contract Violation",
      "target": "anyio.abc.CapacityLimiter.total_tokens",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CapacityLimiter.total_tokens` setter is type-annotated to accept `float` values, but the implementation only accepts `int` or `math.inf`, incorrectly rejecting valid float values like `2.5`.",
      "package": "anyio",
      "file_name": "bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_CapacityLimiter_total_tokens_2025-09-25_00-00_k3x9.md",
      "call_id": "3d3a6bd1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc.Condition.notify Documentation Contract Violation",
      "target": "anyio.abc.Condition.notify",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Condition.notify(n)` method's docstring claims to \"Notify exactly n listeners\", but the implementation only notifies \"at most n listeners\" when there are fewer than n waiters.",
      "package": "anyio",
      "file_name": "bug_report_anyio_Condition_notify_2025-09-25_00-00_m8x2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_Condition_notify_2025-09-25_00-00_m8x2.md",
      "call_id": "aa95754f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._sockets._SocketProvider Inconsistent Address Caching",
      "target": "anyio.abc._sockets._SocketProvider.extra_attributes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_SocketProvider.extra_attributes` property exhibits inconsistent caching for address attributes: `local_address` calls `getsockname()` on every access (dynamic), while `remote_address` captures the value once at initialization (cached). This is the same pattern as the `local_port` vs `remote_port` bug and violates consistency.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_socket_local_address_caching_2025-09-25_16-35_p8q1.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_socket_local_address_caching_2025-09-25_16-35_p8q1.md",
      "call_id": "bac9d935",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._sockets._SocketProvider Inconsistent Attribute Caching",
      "target": "anyio.abc._sockets._SocketProvider.extra_attributes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_SocketProvider.extra_attributes` property exhibits inconsistent caching behavior: `local_port` calls `getsockname()` on every access (dynamic), while `remote_port` captures the value once at initialization (cached). This violates the principle of least surprise and causes unnecessary syscalls.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_socket_attribute_caching_2025-09-25_16-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_socket_attribute_caching_2025-09-25_16-30_k7m2.md",
      "call_id": "0c6586bc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._sockets._validate_socket Misleading Error Messages",
      "target": "anyio.abc._sockets._validate_socket",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_validate_socket` function produces misleading error messages when given an invalid file descriptor with `require_connected=True` or `require_bound=True`. It incorrectly reports connection/binding issues when the real problem is that the file descriptor is invalid.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_validate_socket_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_validate_socket_2025-09-25_00-00_k3m9.md",
      "call_id": "140ad8c6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._validate_socket Falsy Value Check",
      "target": "anyio.abc._sockets._validate_socket",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_validate_socket` function incorrectly rejects UNIX domain sockets that are in a valid but unbound state when `require_bound=True`. The bug is caused by using a falsy check (`if not bound_addr:`) which treats empty strings as \"not bound\" even though an empty string is the valid return value for unbound UNIX sockets.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_validate_socket_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_validate_socket_2025-09-25_00-00_x7k9.md",
      "call_id": "9541fa8b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._validate_socket Invalid File Descriptor Handling",
      "target": "anyio.abc._sockets._validate_socket",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_validate_socket` function inconsistently handles invalid file descriptors. It converts `ENOTSOCK` errors to `ValueError` but not `EBADF` errors, leading to inconsistent exception types for similar invalid inputs.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_validate_socket_2025-09-25_10-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_validate_socket_2025-09-25_10-30_k3x9.md",
      "call_id": "67a05edb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._validate_socket Misleading Error Messages",
      "target": "anyio.abc._sockets._validate_socket",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_validate_socket` function produces misleading error messages when `socket.socket(fileno=fd)` fails with an OSError (other than ENOTSOCK) and either `require_connected=True` or `require_bound=True` is specified. The function incorrectly reports that \"the socket must be connected\" or \"the socket must be bound to a local address\" when the actual problem is that the file descriptor is invalid or the socket construction failed for a different reason.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_validate_socket_2025-09-25_15-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_validate_socket_2025-09-25_15-30_k7m2.md",
      "call_id": "f6c7e66c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.abc._validate_socket Misleading Error Messages for Invalid File Descriptors",
      "target": "anyio.abc._sockets._validate_socket",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_validate_socket` function produces misleading error messages when given an invalid or closed file descriptor with `require_connected=True` or `require_bound=True`. It incorrectly reports that \"the socket must be connected\" or \"must be bound\" when the actual issue is that the file descriptor is invalid/closed.",
      "package": "anyio",
      "file_name": "bug_report_anyio_abc_validate_socket_2025-09-25_13-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_abc_validate_socket_2025-09-25_13-00_k3m9.md",
      "call_id": "6a80afa4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.create_memory_object_stream Float Type Rejection",
      "target": "anyio.create_memory_object_stream",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The function signature declares `max_buffer_size: float` but the implementation rejects all float values except `math.inf`, violating the type contract.",
      "package": "anyio",
      "file_name": "bug_report_anyio_create_memory_object_stream_float_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_create_memory_object_stream_float_2025-09-25_00-00_k3x9.md",
      "call_id": "b32cbbbb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.create_memory_object_stream Type Annotation Mismatch",
      "target": "anyio.create_memory_object_stream",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `create_memory_object_stream` function has a type annotation that claims `max_buffer_size: float`, but the implementation only accepts integers or `math.inf`, rejecting all other float values. This creates a contract violation between the type signature and runtime behavior.",
      "package": "anyio",
      "file_name": "bug_report_anyio_create_memory_object_stream_type_2025-09-25_09-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_create_memory_object_stream_type_2025-09-25_09-30_k7x2.md",
      "call_id": "f7ce9d95",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.create_memory_object_stream Type Annotation Mismatch",
      "target": "anyio.create_memory_object_stream",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `max_buffer_size` parameter has type annotation `float` but runtime validation only accepts `int` or `math.inf`, creating a contract violation between static type checking and runtime behavior.",
      "package": "anyio",
      "file_name": "bug_report_anyio_max_buffer_size_type_2025-09-25_00-24_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_max_buffer_size_type_2025-09-25_00-24_x7k3.md",
      "call_id": "c33e67d6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.create_memory_object_stream max_buffer_size Type Contract Violation",
      "target": "anyio.create_memory_object_stream",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `create_memory_object_stream` function declares `max_buffer_size` parameter with type `float`, but the runtime validation rejects non-integer float values, causing a `ValueError` for valid inputs according to the type annotation.",
      "package": "anyio",
      "file_name": "bug_report_anyio_create_memory_object_stream_max_buffer_size_2025-09-25_00-33_m3k7.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_create_memory_object_stream_max_buffer_size_2025-09-25_00-33_m3k7.md",
      "call_id": "4148f69e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.create_memory_object_stream rejects float despite type hint",
      "target": "anyio.create_memory_object_stream",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`create_memory_object_stream` has type hint `max_buffer_size: float` but raises ValueError when given float values like `1.0`, only accepting `int` or `math.inf`.",
      "package": "anyio",
      "file_name": "bug_report_anyio_create_memory_object_stream_float_2025-09-25_11-05_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_create_memory_object_stream_float_2025-09-25_11-05_x3k9.md",
      "call_id": "19e93283",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.sleep_until() Hangs Indefinitely with NaN Deadline",
      "target": "anyio.sleep_until",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`anyio.sleep_until(float('nan'))` hangs indefinitely instead of either raising an error or returning immediately. This occurs because `max(nan, 0)` returns `nan`, which is then passed to `sleep()`, causing unexpected behavior.",
      "package": "anyio",
      "file_name": "bug_report_anyio_sleep_until_nan_2025-09-25_08-04_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_sleep_until_nan_2025-09-25_08-04_k3m9.md",
      "call_id": "abfd52e6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams BufferedByteReceiveStream.receive_until max_bytes Violation",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive_until",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`BufferedByteReceiveStream.receive_until()` succeeds even when the delimiter is found beyond the `max_bytes` limit, violating its documented contract that it should raise `DelimiterNotFound` when the delimiter is not found within `max_bytes`.",
      "package": "anyio",
      "file_name": "bug_report_anyio_receive_until_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_receive_until_2025-09-25_00-00_k3m9.md",
      "call_id": "5824e029",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams MultiListener Mutates Nested MultiListeners",
      "target": "anyio.streams.stapled.MultiListener.__post_init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`MultiListener.__post_init__` mutates nested `MultiListener` instances by clearing their `listeners` list, making them unusable after being passed to an outer `MultiListener`. This violates the principle of least surprise and can lead to subtle bugs.",
      "package": "anyio",
      "file_name": "bug_report_anyio_multilistener_mutation_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_multilistener_mutation_2025-09-25_00-01_x7k9.md",
      "call_id": "0da80639",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.buffered.BufferedByteReceiveStream Buffered Data Lost When Closed",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `BufferedByteReceiveStream` is closed, any data in the buffer becomes inaccessible. The `receive()` method raises `ClosedResourceError` immediately without checking if there's buffered data available, causing data loss.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_buffered_closed_data_loss_2025-09-25_00-25_q8n5.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_buffered_closed_data_loss_2025-09-25_00-25_q8n5.md",
      "call_id": "a5780e46",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.buffered.BufferedByteReceiveStream.receive_exactly Negative Argument Handling",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive_exactly",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `receive_exactly()` method does not validate that `nbytes` is non-negative, leading to incorrect behavior when called with negative values. Instead of raising an error, it performs incorrect slice operations on the internal buffer.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_receive_exactly_negative_2025-09-25_00-25_m9x4.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_receive_exactly_negative_2025-09-25_00-25_m9x4.md",
      "call_id": "e452cf19",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.buffered.BufferedByteReceiveStream.receive_exactly() Missing Input Validation",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive_exactly()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`BufferedByteReceiveStream.receive_exactly()` does not validate that `nbytes` is non-negative, causing unexpected behavior when negative values are passed.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_BufferedByteReceiveStream_negative_nbytes_2025-09-25_12-02_k7x1.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_BufferedByteReceiveStream_negative_nbytes_2025-09-25_12-02_k7x1.md",
      "call_id": "2ed325ce",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.buffered.BufferedByteReceiveStream.receive_until() Missing Input Validation",
      "target": "anyio.streams.buffered.BufferedByteReceiveStream.receive_until()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`BufferedByteReceiveStream.receive_until()` does not validate that `max_bytes` is positive, causing immediate `DelimiterNotFound` exception when negative or zero values are passed.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_BufferedByteReceiveStream_negative_max_bytes_2025-09-25_12-03_n8q4.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_BufferedByteReceiveStream_negative_max_bytes_2025-09-25_12-03_n8q4.md",
      "call_id": "0c13f4aa",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.file.FileReadStream Negative max_bytes",
      "target": "anyio.streams.file.FileReadStream.receive",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FileReadStream.receive()` accepts negative values for `max_bytes`, which causes it to read the entire file instead of a bounded maximum, potentially causing memory issues with large files.",
      "package": "anyio",
      "file_name": "bug_report_anyio_FileReadStream_negative_max_bytes_2025-09-25_08-40_m7k9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_FileReadStream_negative_max_bytes_2025-09-25_08-40_m7k9.md",
      "call_id": "a8294fa7",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.memory Fractional Buffer Size Behavior",
      "target": "anyio.streams.memory.MemoryObjectStreamState",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `max_buffer_size` is set to a fractional value (e.g., 10.5), the actual buffer capacity is `ceil(max_buffer_size)` instead of the expected `floor(max_buffer_size)`, allowing more items than the documented \"maximum number of items\".",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_buffer_size_2025-09-25_20-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_buffer_size_2025-09-25_20-00_k3m9.md",
      "call_id": "c5796a05",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.stapled.MultiListener Destructive Mutation",
      "target": "anyio.streams.stapled.MultiListener",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`MultiListener.__post_init__` destructively modifies nested `MultiListener` objects by clearing their listeners, causing unexpected side effects when creating new MultiListener instances.",
      "package": "anyio",
      "file_name": "bug_report_anyio_multilistener_mutation_2025-09-25_00-01_a7b2.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_multilistener_mutation_2025-09-25_00-01_a7b2.md",
      "call_id": "367d8c0e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.stapled.MultiListener Input Mutation",
      "target": "anyio.streams.stapled.MultiListener",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`MultiListener.__post_init__` mutates nested `MultiListener` objects passed as input by clearing their `listeners` list, violating the principle of immutability for constructor arguments.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_MultiListener_mutation_2025-09-25_12-00_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_MultiListener_mutation_2025-09-25_12-00_x9k3.md",
      "call_id": "1203d889",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.stapled.MultiListener Mutates Input",
      "target": "anyio.streams.stapled.MultiListener.__post_init__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When constructing a `MultiListener` with another `MultiListener` as input, the constructor mutates the input `MultiListener` by clearing its `listeners` list, leaving the original object in an unusable state.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_MultiListener_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_MultiListener_2025-09-25_00-00_k3m9.md",
      "call_id": "8914ee0b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.stapled.MultiListener Mutates Input",
      "target": "anyio.streams.stapled.MultiListener",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Creating a `MultiListener` with another `MultiListener` as input unexpectedly empties the input `MultiListener`'s listeners list, violating the principle that object construction should not mutate existing objects.",
      "package": "anyio",
      "file_name": "bug_report_anyio_streams_multilistener_2025-09-25_05-34_y4u4.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_streams_multilistener_2025-09-25_05-34_y4u4.md",
      "call_id": "0019fb90",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.stapled.MultiListener Mutates Nested MultiListeners",
      "target": "anyio.streams.stapled.MultiListener.__post_init__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When creating a MultiListener from other MultiListener instances, the `__post_init__` method destructively modifies the nested MultiListeners by clearing their internal listeners lists, making them unusable afterwards.",
      "package": "anyio",
      "file_name": "bug_report_anyio_multilistener_mutation_2025-09-25_11-30_x7k4.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_multilistener_mutation_2025-09-25_11-30_x7k4.md",
      "call_id": "64d3afd5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "anyio.streams.text.TextReceiveStream Empty String Handling",
      "target": "anyio.streams.text.TextReceiveStream.receive",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`TextReceiveStream.receive()` incorrectly raises `EndOfStream` when attempting to receive an empty string that was encoded and sent, breaking the encode/decode round-trip property for empty strings.",
      "package": "anyio",
      "file_name": "bug_report_anyio_TextReceiveStream_empty_string_2025-09-25_12-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_anyio_TextReceiveStream_empty_string_2025-09-25_12-00_k3x9.md",
      "call_id": "25af1d44",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.base.operations negative LIMIT generation",
      "target": "django.db.backends.base.operations.BaseDatabaseOperations.limit_offset_sql",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `limit_offset_sql` method can generate invalid SQL with negative LIMIT values when called with `high_mark < low_mark`, producing SQL like `LIMIT -5 OFFSET 10` which is invalid in SQL.",
      "package": "anyio",
      "file_name": "bug_report_django_db_backends_base_negative_limit_2025-09-25_08-40_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/anyio/bug_reports/bug_report_django_db_backends_base_negative_limit_2025-09-25_08-40_k3x9.md",
      "call_id": "7fcc34b0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "assoc Function Docstring Typo",
      "target": "attr.assoc",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `assoc()` function docstring contains a typo: \"du to\" instead of \"due to\".",
      "package": "attrs",
      "file_name": "bug_report_assoc_typo_2025-09-25_05-02_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_assoc_typo_2025-09-25_05-02_k9m3.md",
      "call_id": "9403d61f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr Field Options Hash/Equality Contract Violation",
      "target": "attr.field",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a field is configured with `eq=False` and `hash=True`, attrs creates classes that violate Python's fundamental hash/equality contract: if `a == b`, then `hash(a) == hash(b)`. This can cause silent data corruption when objects are used in sets or as dictionary keys.",
      "package": "attrs",
      "file_name": "bug_report_attr_hash_equality_contract_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_hash_equality_contract_2025-09-25_00-00_k3m9.md",
      "call_id": "985d780c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.asdict value_serializer Documentation Incomplete",
      "target": "attr.asdict",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `asdict()` function's `value_serializer` parameter documentation states it \"receives the current instance, field and value\" but fails to mention that `inst` and `field` can be `None` for nested non-attrs values (list items, dict keys/values). This causes user code that reasonably assumes these parameters are never `None` to crash with `AttributeError`.",
      "package": "attrs",
      "file_name": "bug_report_attr_asdict_value_serializer_2025-09-25_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_asdict_value_serializer_2025-09-25_k8j3.md",
      "call_id": "ced30eb6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.converters.to_bool Accepts Undocumented Float Values",
      "target": "attr.converters.to_bool",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `attr.converters.to_bool` function accepts float values `1.0` and `0.0` and converts them to `True` and `False` respectively, even though the documentation explicitly states that only integers `1` and `0` are valid numeric inputs.",
      "package": "attrs",
      "file_name": "bug_report_attr_converters_to_bool_float_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_converters_to_bool_float_2025-09-25_12-00_x7k9.md",
      "call_id": "63cd104d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.has() Contract Violation",
      "target": "attr.has",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `attr.has()` function violates its documented API contract by accepting non-class inputs without raising `TypeError`, contradicting its explicit documentation.",
      "package": "attrs",
      "file_name": "bug_report_attr_has_contract_2025-09-25_05-29_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_has_contract_2025-09-25_05-29_x8k2.md",
      "call_id": "91bc3668",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.validators.gt Documentation Error",
      "target": "attr.validators.gt",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `attr.validators.gt` function's docstring incorrectly states it uses `operator.ge` when it actually uses `operator.gt`.",
      "package": "attrs",
      "file_name": "bug_report_attr_validators_gt_2025-09-25_02-27_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_validators_gt_2025-09-25_02-27_x7k9.md",
      "call_id": "7880cca3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.validators.gt() Documentation Error",
      "target": "attr.validators.gt()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `attr.validators.gt()` incorrectly states that it uses `operator.ge` for comparisons, when it actually uses `operator.gt`. This creates a mismatch between the documented and actual behavior.",
      "package": "attrs",
      "file_name": "bug_report_attr_validators_gt_2025-09-25_01-29_xk9m.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_validators_gt_2025-09-25_01-29_xk9m.md",
      "call_id": "6de8d83c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.validators.or_ Catches All Exceptions Including Programming Errors",
      "target": "attr.validators.or_",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `attr.validators.or_` validator catches ALL exceptions (including programming errors like `NameError`, `AttributeError`, etc.) when testing validators, masking bugs in validator code and making debugging difficult.",
      "package": "attrs",
      "file_name": "bug_report_attr_validators_or_exception_handling_2025-09-25_02-27_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_validators_or_exception_handling_2025-09-25_02-27_k3m9.md",
      "call_id": "473365e1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attr.validators.or_ Masks Programming Errors",
      "target": "attr.validators.or_",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `attr.validators.or_()` validator catches ALL exceptions (including programming errors like NameError, AttributeError, etc.) instead of only catching validation errors (ValueError, TypeError). This masks bugs in user-written validators and makes debugging extremely difficult.",
      "package": "attrs",
      "file_name": "bug_report_attr_validators_or_exception_2025-09-25_02-36_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attr_validators_or_exception_2025-09-25_02-36_x7k9.md",
      "call_id": "bc62ccd6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs Hash/Equality Contract Violation",
      "target": "attrs.field",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `attrs` library allows defining fields with `eq=False` (excluded from equality) and `hash=True` (included in hash), which violates Python's fundamental hash/equality contract: equal objects must have equal hashes.",
      "package": "attrs",
      "file_name": "bug_report_attrs_hash_eq_contract_2025-09-25_02-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_hash_eq_contract_2025-09-25_02-00_x7k9.md",
      "call_id": "840f1b61",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs asdict Namedtuple in Nested Collections",
      "target": "attr.asdict",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `asdict()` processes namedtuples nested inside collections (lists, dicts, etc.) with `retain_collection_types=True`, it crashes with a TypeError due to incorrect constructor call syntax.",
      "package": "attrs",
      "file_name": "bug_report_attrs_asdict_namedtuple_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_asdict_namedtuple_2025-09-25_12-00_x7k9.md",
      "call_id": "b90fcfcb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs asdict() Crashes on Namedtuples with retain_collection_types",
      "target": "attr._funcs._asdict_anything",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `asdict()` function crashes with a TypeError when processing namedtuples inside collections with `retain_collection_types=True`. The main `asdict` function has a workaround for namedtuples, but the helper `_asdict_anything` function lacks the same workaround, causing crashes on nested structures.",
      "package": "attrs",
      "file_name": "bug_report_attrs_asdict_namedtuple_2025-09-25_10-40_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_asdict_namedtuple_2025-09-25_10-40_x9k2.md",
      "call_id": "66d1fc2c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs cmp_using Error Message Typo",
      "target": "attrs.cmp_using",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `cmp_using()` function has a grammatical error in its error message when `eq` is not provided but ordering functions are.",
      "package": "attrs",
      "file_name": "bug_report_attrs_cmp_using_typo_2025-09-25_05-01_j7x2.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_cmp_using_typo_2025-09-25_05-01_j7x2.md",
      "call_id": "69e90860",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs cmp_using Error Message Typo",
      "target": "attr._cmp.cmp_using",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `cmp_using()` function has a grammatical error in its error message when `eq` is not provided with ordering functions.",
      "package": "attrs",
      "file_name": "bug_report_attrs_cmp_error_message_typo_2025-09-25_07-29_x7m2.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_cmp_error_message_typo_2025-09-25_07-29_x7m2.md",
      "call_id": "7959e6aa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs converters.to_bool Float Acceptance",
      "target": "attrs.converters.to_bool",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `attrs.converters.to_bool()` function accepts float values `0.0` and `1.0` despite documentation explicitly listing only integers `0` and `1` as valid numeric inputs.",
      "package": "attrs",
      "file_name": "bug_report_attrs_converters_to_bool_2025-09-25_05-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_converters_to_bool_2025-09-25_05-01_x7k9.md",
      "call_id": "60044fae",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs evolve() Double-Applies Converters",
      "target": "attr.evolve",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `attr.evolve()` function incorrectly double-applies converters when creating a copy of an instance. When no change is specified for a field with a converter, evolve() copies the already-converted value and passes it through the converter again, leading to incorrect results.",
      "package": "attrs",
      "file_name": "bug_report_attrs_evolve_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_evolve_2025-09-25_k3m9.md",
      "call_id": "57c3ab18",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs or_ Validator Hides Non-Validation Exceptions",
      "target": "attr.validators.or_",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `or_` validator catches ALL exceptions (including AttributeError, KeyError, etc.) instead of only validation exceptions (ValueError, TypeError). This hides bugs in validator implementations and makes debugging significantly harder.",
      "package": "attrs",
      "file_name": "bug_report_attrs_or_validator_exception_handling_2025-09-25_04-29_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_or_validator_exception_handling_2025-09-25_04-29_k3n9.md",
      "call_id": "493c3461",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs to_bool Undocumented Float Acceptance",
      "target": "attrs.converters.to_bool",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `attrs.converters.to_bool()` converter accepts `1.0` and `0.0` (floats) despite documentation stating it only accepts specific boolean values, creating undocumented and inconsistent behavior.",
      "package": "attrs",
      "file_name": "bug_report_attrs_to_bool_float_2025-09-25_05-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_to_bool_float_2025-09-25_05-01_k3m9.md",
      "call_id": "3759d6d4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs validators.gt Docstring Error",
      "target": "attr.validators.gt",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validators.gt()` function has incorrect documentation that claims it uses `operator.ge` when it actually uses `operator.gt`.",
      "package": "attrs",
      "file_name": "bug_report_attrs_validators_gt_docstring_2025-09-25_07-58_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_validators_gt_docstring_2025-09-25_07-58_x3k9.md",
      "call_id": "62b66c8c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs validators.gt() Incorrect Docstring",
      "target": "attrs.validators.gt",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validators.gt()` function has incorrect documentation stating it uses `operator.ge` when it actually uses `operator.gt`.",
      "package": "attrs",
      "file_name": "bug_report_attrs_validators_gt_docstring_2025-09-25_07-29_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_validators_gt_docstring_2025-09-25_07-29_k3x9.md",
      "call_id": "948d5613",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs validators.not_ Incomplete Inversion with Empty exc_types",
      "target": "attr.validators.not_",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validators.not_()` function fails to properly invert validators when passed an empty `exc_types` tuple, causing exceptions from the wrapped validator to propagate instead of being suppressed.",
      "package": "attrs",
      "file_name": "bug_report_attrs_validators_not_empty_exc_types_2025-09-25_07-58_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_validators_not_empty_exc_types_2025-09-25_07-58_k9f2.md",
      "call_id": "91b43b83",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs.evolve Double-Conversion",
      "target": "attrs.evolve",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`attrs.evolve()` applies converters to unchanged fields, causing double-conversion when creating a copy with partial changes. This silently corrupts field values that were not meant to be modified.",
      "package": "attrs",
      "file_name": "bug_report_attrs_evolve_double_conversion_2025-09-25_07-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_evolve_double_conversion_2025-09-25_07-01_k3m9.md",
      "call_id": "ba434ccd",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs.evolve Loses Field Values for init=False Fields",
      "target": "attrs.evolve",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `attrs.evolve()` function does not preserve the values of fields with `init=False`, instead resetting them to their default values. This is inconsistent with the similar function `attrs.assoc()`, which correctly preserves all field values.",
      "package": "attrs",
      "file_name": "bug_report_attrs_evolve_init_false_2025-09-25_01-29_kx3m.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_evolve_init_false_2025-09-25_01-29_kx3m.md",
      "call_id": "1f7d2bd0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs.filters._split_what Generator Exhaustion",
      "target": "attr.filters._split_what",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_split_what` function silently loses data when passed a generator instead of a list, because it iterates over the input three times without converting it to a reusable collection first.",
      "package": "attrs",
      "file_name": "bug_report_attrs_filters_split_what_2025-09-25_10-33_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_filters_split_what_2025-09-25_10-33_k3m9.md",
      "call_id": "c44d6a5f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "attrs.validators.or_ Catches All Exceptions Including Programming Errors",
      "target": "attrs.validators.or_",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `or_` validator catches **all** exceptions (line 675: `except Exception:`), including programming errors like `KeyError`, `AttributeError`, etc. This hides bugs in validators and makes debugging extremely difficult. The validator should only catch validation-related exceptions (ValueError, TypeError) like the `not_` validator does.",
      "package": "attrs",
      "file_name": "bug_report_attrs_or_validator_2025-09-25_05-01_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/attrs/bug_reports/bug_report_attrs_or_validator_2025-09-25_05-01_k7m9.md",
      "call_id": "bb756aee",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython widest_numeric_type Equality Comparison",
      "target": "Cython.Compiler.PyrexTypes.widest_numeric_type",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `widest_numeric_type` function violates the commutativity property: `widest_numeric_type(a, a)` called twice returns objects that don't compare equal using `==`, even though they should be the same object.",
      "package": "cython",
      "file_name": "bug_report_cython_widest_numeric_type_equality_2025-09-25_00-14_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_widest_numeric_type_equality_2025-09-25_00-14_x7k9.md",
      "call_id": "378cbfc8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build DistutilsInfo Comment Handling",
      "target": "Cython.Build.Dependencies.DistutilsInfo.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When parsing distutils directive values containing inline comments, `parse_list` incorrectly includes comment text as a placeholder label (`#__Pyx_L1_`) instead of stripping it, causing invalid entries in configuration lists.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_05-19_ca88.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_05-19_ca88.md",
      "call_id": "e73fdffc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build parse_list Filters Out Quoted Whitespace",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_list` function incorrectly filters out items containing only whitespace when using bracket notation, despite the function's doctests explicitly showing that quoted whitespace should be preserved.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_whitespace_2025-09-25_05-14_m3n8.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_whitespace_2025-09-25_05-14_m3n8.md",
      "call_id": "1b77b20b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build parse_list KeyError Crash",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when given input containing unclosed quotes (e.g., a single quote character `\"'\"`). This occurs because the function's `unquote` helper incorrectly tries to look up string literal labels in the literals dictionary.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_crash_2025-09-25_05-14_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_crash_2025-09-25_05-14_k7x2.md",
      "call_id": "9af2c594",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.BuildExecutable EXE_EXT Can Be None Causing TypeError",
      "target": "Cython.Build.BuildExecutable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The module-level variable `EXE_EXT` is assigned from `sysconfig.get_config_var('EXE')`, which can return `None` on some platforms. When `EXE_EXT` is `None`, string concatenation operations like `basename + EXE_EXT` raise `TypeError`.",
      "package": "cython",
      "file_name": "bug_report_cython_build_exe_ext_none_crash.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_exe_ext_none_crash.md",
      "call_id": "26fdedf0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache cleanup_cache Removes Newest Files Instead of Oldest",
      "target": "Cython.Build.Cache.cleanup_cache",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cleanup_cache()` method removes the most recently accessed files first instead of the least recently accessed files, implementing the opposite of the intended LRU (Least Recently Used) cache eviction policy.",
      "package": "cython",
      "file_name": "bug_report_cython_build_cache_cleanup_lru_bug.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_cache_cleanup_lru_bug.md",
      "call_id": "6eecdee1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache load_from_cache Extracts Zip Files to Wrong Path",
      "target": "Cython.Build.Cache.load_from_cache",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_from_cache()` method incorrectly passes `join_path(dirname, artifact)` as the extraction path to `zipfile.ZipFile.extract()`, which expects only a directory path, not a full file path. This causes files to be extracted to the wrong location.",
      "package": "cython",
      "file_name": "bug_report_cython_build_cache_zip_extract_wrong_path.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_cache_zip_extract_wrong_path.md",
      "call_id": "ff940afe",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache.cleanup_cache Inverted LRU Deletion Order",
      "target": "Cython.Build.Cache.cleanup_cache",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cleanup_cache` method deletes cache files in the wrong order for an LRU (Least Recently Used) cache. It keeps the oldest files and deletes the newest ones, which is backwards. An LRU cache should delete least recently accessed files (oldest) and keep most recently accessed files (newest).",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_Cache_cleanup_2025-09-25_01-00_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_Cache_cleanup_2025-09-25_01-00_m8k3.md",
      "call_id": "f6e9868e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache.load_from_cache Incorrect Zip Extraction",
      "target": "Cython.Build.Cache.load_from_cache",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_from_cache` method incorrectly uses `zipfile.ZipFile.extract()` by passing a file path as the extraction directory instead of a directory path. This causes extraction to fail with \"Not a directory\" errors when trying to load cached compilation artifacts from zip files.",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_Cache_load_from_cache_2025-09-25_00-50_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_Cache_load_from_cache_2025-09-25_00-50_x7k9.md",
      "call_id": "70248d1e",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache.load_from_cache Incorrect Zipfile Extraction Path",
      "target": "Cython.Build.Cache.load_from_cache",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_from_cache` method incorrectly extracts files from zip archives to a nested subdirectory instead of the intended directory, causing cached compilation artifacts to be placed in the wrong location.",
      "package": "cython",
      "file_name": "bug_report_cython_cache_zipfile_extract_2025-09-25_00-01_z8m3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_cache_zipfile_extract_2025-09-25_00-01_z8m3.md",
      "call_id": "7070e8a3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies parse_list Crashes on Incomplete Quotes",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list()` function crashes with `KeyError` when given input containing incomplete or unmatched quotes, due to incorrect label extraction in the `unquote()` helper function.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_keyerror.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_keyerror.md",
      "call_id": "c14b88b1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies resolve_depend Crashes on Empty String",
      "target": "Cython.Build.Dependencies.resolve_depend",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `resolve_depend()` function crashes with `IndexError` when passed an empty string as the `depend` parameter, due to unchecked indexing with `depend[0]` and `depend[-1]`.",
      "package": "cython",
      "file_name": "bug_report_cython_build_resolve_depend_empty_string.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_resolve_depend_empty_string.md",
      "call_id": "c387ba08",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies resolve_depend Crashes on Empty String",
      "target": "Cython.Build.Dependencies.resolve_depend",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `resolve_depend()` function crashes with `IndexError` when passed an empty string as the `depend` parameter, due to unchecked indexing operations `depend[0]` and `depend[-1]`.",
      "package": "cython",
      "file_name": "bug_report_cython_build_resolve_depend_indexerror.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_resolve_depend_indexerror.md",
      "call_id": "32b85fe6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.DistutilsInfo.merge List Aliasing",
      "target": "Cython.Build.Dependencies.DistutilsInfo.merge",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DistutilsInfo.merge` method fails to create copies of `transitive_list` values when the key doesn't exist in `self`. This causes list aliasing where modifications to the merged object's lists also modify the source object's lists, violating the documented intent to \"change a *copy* of the list\" (as noted in comment on line 224).",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_DistutilsInfo_merge_2025-09-25_00-55_j3k8.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_DistutilsInfo_merge_2025-09-25_00-55_j3k8.md",
      "call_id": "ea28aa49",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.extended_iglob Deprecation Warning",
      "target": "Cython.Build.Dependencies.extended_iglob",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `extended_iglob` function uses deprecated positional argument syntax for `re.split()` that generates `DeprecationWarning` in Python 3.13+.",
      "package": "cython",
      "file_name": "bug_report_cython_build_extended_iglob_deprecation_2025-09-25_00-00_p7x3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_extended_iglob_deprecation_2025-09-25_00-00_p7x3.md",
      "call_id": "fdaa54e9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.extended_iglob Produces Duplicate Results",
      "target": "Cython.Build.Dependencies.extended_iglob",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`extended_iglob` produces duplicate file paths when brace expansion contains glob wildcard characters (like `?` or `*`) that match other items in the expansion.",
      "package": "cython",
      "file_name": "bug_report_cython_build_extended_iglob_duplicates_2025-09-25_07-41_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_extended_iglob_duplicates_2025-09-25_07-41_x3k9.md",
      "call_id": "e1fb45bb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.extended_iglob Returns Duplicates",
      "target": "Cython.Build.Dependencies.extended_iglob",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `extended_iglob` function returns duplicate file paths when brace expansion patterns contain repeated alternatives (e.g., `{a,a}.txt`), inconsistent with the `**/` code path which explicitly deduplicates results.",
      "package": "cython",
      "file_name": "bug_report_cython_build_extended_iglob_2025-09-25_00-00_7j2p.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_extended_iglob_2025-09-25_00-00_7j2p.md",
      "call_id": "83086e02",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Comment Filtering",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_list` function fails to filter out comments from parsed lists, instead returning substitution labels like `#__Pyx_L1_` that were created by `strip_string_literals`. This violates the expected behavior for parsing Cython directive values where comments should be ignored.",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_00-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_00-45_k3m9.md",
      "call_id": "725fe240",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Empty String Crash",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when given a bracketed list containing an empty quoted string, such as `'[\"\"]'`.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_empty_string_2025-09-25_06-22_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_empty_string_2025-09-25_06-22_k3m9.md",
      "call_id": "25d63e27",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Empty String KeyError",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a KeyError when parsing bracket-delimited lists containing empty strings (e.g., `[\"\"]`).",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_03-14_m8x7.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_03-14_m8x7.md",
      "call_id": "1dc8afb0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Empty String KeyError",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a KeyError when parsing bracket-delimited lists containing empty strings (e.g., `[\"\"]`).",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_03-14_jyao.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_03-14_jyao.md",
      "call_id": "db7059a8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Hash Character Corruption",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_list()` function incorrectly treats `#` as a comment delimiter in compiler directive values, corrupting any value containing a hash character.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_07-12_k9x7.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_07-12_k9x7.md",
      "call_id": "b0b314c3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Quote Characters",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when parsing strings containing unclosed quote characters (single or double quotes) or certain other special characters like `#`. This is due to incorrect string slicing logic when looking up normalized string literals in the internal literals dictionary.",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_12-00_k3m9.md",
      "call_id": "375a289c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Quote Characters",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when parsing bracket-delimited lists containing quoted quote characters (e.g., `['\"']`), due to a mismatch between how `strip_string_literals` handles unclosed/special strings and how `parse_list.unquote` looks up literal values.",
      "package": "cython",
      "file_name": "bug_report_cython_parse_list_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_parse_list_2025-09-25_00-00_k3m9.md",
      "call_id": "26792458",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Quote Characters",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when parsing strings containing unclosed quote characters (single or double quotes) or certain other special characters like `#`. This is due to incorrect string slicing logic when looking up normalized string literals in the internal literals dictionary.",
      "package": "cython",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_00-00_a7f2.md",
      "call_id": "bf830577",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Quoted Strings",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list()` function crashes with `KeyError` when parsing quoted strings due to a mismatch between the label format created by `strip_string_literals()` (with trailing underscore) and the label format expected by the internal `unquote()` function (without trailing underscore).",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_07-16_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_07-16_k9x2.md",
      "call_id": "ebafc37d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Unclosed Quotes",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`parse_list` crashes with a `KeyError` when given strings containing unclosed or malformed quotes, such as a single `\"` character.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_01-11_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_01-11_k7m3.md",
      "call_id": "31f88368",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Unclosed Quotes",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a KeyError when given a string containing an unclosed quote character (`\"` or `'`), which can occur when parsing malformed distutils/cython directives from source file comments.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_01-48_kx9p.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_01-48_kx9p.md",
      "call_id": "a297357e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Unclosed Quotes",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when given input containing unclosed or lone quote characters, despite being used to parse user-written distutils directive values that could contain such malformed input.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_00-00_x9k2.md",
      "call_id": "3f01a043",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Mangles '#' Characters",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_list` function incorrectly treats `#` as a comment marker, causing it to mangle library names, macro names, and other values that legitimately contain `#` characters.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_00-00_xk3m.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_2025-09-25_00-00_xk3m.md",
      "call_id": "a36a1713",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Quote KeyError",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when given an unbalanced quote character (single `'` or `\"`) as input.",
      "package": "cython",
      "file_name": "bug_report_cython_build_parse_list_quote_keyerror_2025-09-25_04-11_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_parse_list_quote_keyerror_2025-09-25_04-11_x7k9.md",
      "call_id": "82f4f617",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Inline strip_common_indent Comment Corruption",
      "target": "Cython.Build.Inline.strip_common_indent",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `strip_common_indent` function uses a stale loop variable when identifying comment lines, causing comments to be corrupted or completely removed when processing code with certain indentation patterns.",
      "package": "cython",
      "file_name": "bug_report_cython_build_strip_common_indent_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_strip_common_indent_2025-09-25_12-00_x7k9.md",
      "call_id": "09874818",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Inline strip_common_indent Comment Mangling",
      "target": "Cython.Build.Inline.strip_common_indent",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `strip_common_indent` function mangles comment lines when they are indented differently than the last processed non-comment line, causing the '#' character and leading content to be incorrectly stripped.",
      "package": "cython",
      "file_name": "bug_report_cython_inline_strip_common_indent_2025-09-25_01-04_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_inline_strip_common_indent_2025-09-25_01-04_x3k9.md",
      "call_id": "65180791",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Inline.safe_type AttributeError with None Context",
      "target": "Cython.Build.Inline.safe_type",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The function `safe_type` crashes with `AttributeError` when called with a custom class instance and `context=None` (the default), because it attempts to call `context.find_module()` without checking if context is None.",
      "package": "cython",
      "file_name": "bug_report_cython_safe_type_context_2025-09-25_01-31_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_safe_type_context_2025-09-25_01-31_x7k9.md",
      "call_id": "086e3fe1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Inline.strip_common_indent Undefined Variable",
      "target": "Cython.Build.Inline.strip_common_indent",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The function `strip_common_indent` uses an undefined variable `indent` in its second loop, which either causes a `NameError` when processing code with only comments/blank lines, or uses a stale value from a previous loop iteration leading to incorrect comment detection.",
      "package": "cython",
      "file_name": "bug_report_cython_strip_common_indent_2025-09-25_01-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_strip_common_indent_2025-09-25_01-30_k3m9.md",
      "call_id": "afa8144e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Builtin.is_safe_compile_time_method Missing Type Entries",
      "target": "Cython.Compiler.Builtin.is_safe_compile_time_method",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The function `is_safe_compile_time_method` incorrectly returns `False` for types that have inferred method return types but no entry in the `unsafe_compile_time_methods` dictionary (bytearray, frozenset, dict, memoryview). This prevents compile-time evaluation of safe methods on these types.",
      "package": "cython",
      "file_name": "bug_report_cython_builtin_is_safe_compile_time_method_2025-09-25_08-16_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_builtin_is_safe_compile_time_method_2025-09-25_08-16_x3k9.md",
      "call_id": "6afd2622",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Code._indent_chunk Loses Single Characters",
      "target": "Cython.Compiler.Code._indent_chunk",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_indent_chunk` function incorrectly converts single-character strings (without trailing newlines) into newline characters, causing content loss. This affects strings of exactly length 1, such as '0', 'a', 'x', etc.",
      "package": "cython",
      "file_name": "bug_report_cython_code_indent_chunk_2025-09-25_00-04_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_code_indent_chunk_2025-09-25_00-04_k3x9.md",
      "call_id": "57cbaeba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Main._make_range_re IndexError on Odd-Length Input",
      "target": "Cython.Compiler.Main._make_range_re",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`_make_range_re` crashes with IndexError when given an odd-length string due to missing input validation.",
      "package": "cython",
      "file_name": "bug_report_cython_main_make_range_re_2025-09-25_11-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_main_make_range_re_2025-09-25_11-15_k3x9.md",
      "call_id": "3da5ae19",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Main._make_range_re IndexError on Odd-Length Strings",
      "target": "Cython.Compiler.Main._make_range_re",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_make_range_re` function crashes with IndexError when given an odd-length string input.",
      "package": "cython",
      "file_name": "bug_report_cython_compiler_make_range_re_odd_length_2025-09-25_04-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_compiler_make_range_re_odd_length_2025-09-25_04-45_k3m9.md",
      "call_id": "b56948a6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Naming.py_version_hex Integer Overflow",
      "target": "Cython.Compiler.Naming.py_version_hex",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `py_version_hex` function silently corrupts data when version components >= 256 are passed, causing different inputs to produce identical outputs and making round-trip conversion impossible.",
      "package": "cython",
      "file_name": "bug_report_cython_naming_py_version_hex_overflow_2025-09-25_20-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_naming_py_version_hex_overflow_2025-09-25_20-47_k3m9.md",
      "call_id": "a88361c8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Options.normalise_encoding_name Crashes on Null Characters",
      "target": "Cython.Compiler.Options.normalise_encoding_name",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `normalise_encoding_name` function crashes with `ValueError: embedded null character` when given a string containing null bytes, instead of handling it gracefully as it does for other invalid encoding names.",
      "package": "cython",
      "file_name": "bug_report_Cython_Compiler_Options_normalise_encoding_name_2025-09-25_10-13_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Compiler_Options_normalise_encoding_name_2025-09-25_10-13_k3f8.md",
      "call_id": "fea724a8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Options.parse_variable_value Crashes on Unicode Digits",
      "target": "Cython.Compiler.Options.parse_variable_value",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_variable_value` function crashes with `ValueError` when given Unicode digit characters like '\u00b2' because it uses `str.isdigit()` (which returns True for Unicode digits) but then calls `int()` (which only accepts ASCII digits).",
      "package": "cython",
      "file_name": "bug_report_cython_parse_variable_value_2025-09-25_04-50_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_parse_variable_value_2025-09-25_04-50_x7n2.md",
      "call_id": "3fdbfda1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes._escape_special_type_characters Idempotence Violation",
      "target": "Cython.Compiler.PyrexTypes._escape_special_type_characters",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_escape_special_type_characters` function is not idempotent: escaping ':' once produces '__D', but escaping '__D' again produces '__dunderD', violating the expected property that escape functions should be idempotent.",
      "package": "cython",
      "file_name": "bug_report_cython_escape_special_type_characters_idempotence_2025-09-25_02-46_tyx3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_escape_special_type_characters_idempotence_2025-09-25_02-46_tyx3.md",
      "call_id": "1a087bf1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Exceeds max_len",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cap_length` function fails to cap string length to `max_len` when `max_len < 17`, instead producing strings significantly longer than the specified limit.",
      "package": "cython",
      "file_name": "bug_report_cython_pyrextypes_cap_length_2025-09-25_07-19_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_pyrextypes_cap_length_2025-09-25_07-19_k3m9.md",
      "call_id": "bcd90b9b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Unicode Crash",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cap_length` function crashes with `UnicodeEncodeError` when given a string containing non-ASCII characters that exceeds `max_len`.",
      "package": "cython",
      "file_name": "bug_report_cython_cap_length_2025-09-25_10-44_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_cap_length_2025-09-25_10-44_k3x9.md",
      "call_id": "609dad1b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Violates Length Constraint",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `cap_length` function violates its implied contract by returning strings longer than `max_len` when `max_len < 17`.",
      "package": "cython",
      "file_name": "bug_report_cython_compiler_cap_length_2025-09-25_04-44_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_compiler_cap_length_2025-09-25_04-44_x7k9.md",
      "call_id": "b2052867",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Violates Length Constraint",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cap_length` function fails to enforce its length constraint when `max_len < 17`, returning strings longer than the specified maximum.",
      "package": "cython",
      "file_name": "bug_report_cython_cap_length_2025-09-25_04-50_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_cap_length_2025-09-25_04-50_k3m9.md",
      "call_id": "d1834219",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Violates Length Contract",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cap_length()` function returns strings that exceed the specified `max_len` parameter when `max_len < 13`, violating its implied contract to cap string length.",
      "package": "cython",
      "file_name": "bug_report_cython_pyextypes_cap_length_2025-09-25_05-47_onze.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_pyextypes_cap_length_2025-09-25_05-47_onze.md",
      "call_id": "9d9e8857",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.StringEncoding.split_string_literal Infinite Loop",
      "target": "Cython.Compiler.StringEncoding.split_string_literal",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_string_literal` function enters an infinite loop when given a string of backslashes with a small `limit` parameter (limit < 6). The function fails to make forward progress, causing the program to hang indefinitely.",
      "package": "cython",
      "file_name": "bug_report_cython_split_string_literal_2025-09-25_05-05_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_split_string_literal_2025-09-25_05-05_k9x3.md",
      "call_id": "534befc8",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.StringEncoding.split_string_literal Quadratic Performance",
      "target": "Cython.Compiler.StringEncoding.split_string_literal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `split_string_literal` function exhibits O(n\u00b2) time complexity when splitting strings containing many consecutive backslashes with small limit values, causing compilation to hang or timeout on legitimate code.",
      "package": "cython",
      "file_name": "bug_report_cython_split_string_literal_2025-09-25_03-14_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_split_string_literal_2025-09-25_03-14_k9x2.md",
      "call_id": "ddd34816",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.TestTypes Length Assertion Failure",
      "target": "Cython.Compiler.Tests.TestTypes.TestTypeIdentifiers._test_escape",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The test `TestTypeIdentifiers._test_escape` incorrectly asserts that `_escape_special_type_characters` produces output \u226464 characters, but this internal function has no such guarantee. Only the public-facing `type_identifier_from_declaration` maintains this invariant through subsequent `cap_length` calls.",
      "package": "cython",
      "file_name": "bug_report_cython_tests_escape_length_2025-09-25_01-57_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tests_escape_length_2025-09-25_01-57_k3m9.md",
      "call_id": "10121239",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.Utils restore_Options RuntimeError",
      "target": "Cython.Compiler.Tests.Utils.restore_Options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `restore_Options` function crashes with `RuntimeError: dictionary changed size during iteration` when attempting to remove keys that were added to the Options module after a backup was created.",
      "package": "cython",
      "file_name": "bug_report_cython_compiler_tests_utils_restore_2025-09-25_06-41_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_compiler_tests_utils_restore_2025-09-25_06-41_k3x9.md",
      "call_id": "db467610",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.Utils.restore_Options Dictionary Iteration",
      "target": "Cython.Compiler.Tests.Utils.restore_Options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `restore_Options` function crashes with `RuntimeError: dictionary changed size during iteration` when attempting to remove newly-added attributes from the Options module.",
      "package": "cython",
      "file_name": "bug_report_cython_compiler_tests_utils_restore_options_2025-09-25_05-17_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_compiler_tests_utils_restore_options_2025-09-25_05-17_k3x9.md",
      "call_id": "510bd099",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.Utils.restore_Options Dictionary Iteration Bug",
      "target": "Cython.Compiler.Tests.Utils.restore_Options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `restore_Options` function crashes with `RuntimeError: dictionary changed size during iteration` when attempting to remove newly-added attributes from the Options module, because it iterates over the dictionary while simultaneously deleting from it.",
      "package": "cython",
      "file_name": "bug_report_cython_compiler_tests_restore_options_2025-09-25_05-11_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_compiler_tests_restore_options_2025-09-25_05-11_x9k3.md",
      "call_id": "f4c7fa8d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.Utils.restore_Options Dictionary Iteration Crash",
      "target": "Cython.Compiler.Tests.Utils.restore_Options",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `restore_Options` function crashes with `RuntimeError: dictionary changed size during iteration` when attempting to delete keys that were added to Options after the backup was created.",
      "package": "cython",
      "file_name": "bug_report_cython_tests_utils_restore_options_crash_2025-09-25_02-46_t51c.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tests_utils_restore_options_crash_2025-09-25_02-46_t51c.md",
      "call_id": "3febd135",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Tests.Utils.restore_Options Dictionary Mutation During Iteration",
      "target": "Cython.Compiler.Tests.Utils.restore_Options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `restore_Options` function crashes with RuntimeError when deleting newly-added options because it modifies a dictionary while iterating over it.",
      "package": "cython",
      "file_name": "bug_report_cython_tests_restore_options_2025-09-25_01-57_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tests_restore_options_2025-09-25_01-57_x7k9.md",
      "call_id": "60ad7ad4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.TreePath Multiple Error Handling Bugs",
      "target": "Cython.Compiler.TreePath._build_path_iterator",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The TreePath module has multiple error handling inconsistencies. Functions raise `StopIteration`, `KeyError`, and `AssertionError` for invalid inputs instead of uniformly raising `ValueError`. Additionally, `parse_path_value` uses `assert` statements for validation, which are disabled with `python -O`.",
      "package": "cython",
      "file_name": "bug_report_cython_treepath_error_handling_2025-09-25_10-36_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_treepath_error_handling_2025-09-25_10-36_k3m9.md",
      "call_id": "244eaf0d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.TypeInference.find_spanning_type Commutativity Violation",
      "target": "Cython.Compiler.TypeInference.find_spanning_type",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `find_spanning_type(type1, type2)` function violates commutativity when one of the types is `error_type`. The result depends on argument order, leading to non-deterministic type inference and incorrect associativity.",
      "package": "cython",
      "file_name": "bug_report_cython_typeinference_commutativity_2025-09-25_05-51_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_typeinference_commutativity_2025-09-25_05-51_k3m9.md",
      "call_id": "88ed8e38",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.TypeSlots Assertion Error Handling",
      "target": "Cython.Compiler.TypeSlots.get_slot_by_name",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `get_slot_by_name` function uses `assert False` to signal an error condition (slot not found). This is incorrect because assertions can be disabled with `python -O` and should not be used for error handling.",
      "package": "cython",
      "file_name": "bug_report_cython_typeslots_assert_error_2025-09-25_10-47_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_typeslots_assert_error_2025-09-25_10-47_x3k9.md",
      "call_id": "5156126a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger CyBreak Complete Duplicate Suggestions",
      "target": "Cython.Debugger.libcython.CyBreak.complete",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CyBreak.complete` method fails to filter out already-typed function names when `word` is empty, due to `text[:-0]` evaluating to an empty string, causing duplicate suggestions.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_cybreak_complete_2025-09-25_07-48_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_cybreak_complete_2025-09-25_07-48_m3p7.md",
      "call_id": "e495d8f0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger is_valid_tag Missing XML Tag Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag()` function in `Cython.Debugger.DebugWriter` only validates the specific pattern of `.` followed by decimal digits (e.g., `.0`, `.123`) but does not validate general XML tag name rules. This causes `ValueError` exceptions when argument names start with digits or contain control characters, which are invalid in XML but pass `is_valid_tag()`.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_is_valid_tag_2025-09-25_00-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_is_valid_tag_2025-09-25_00-45_k3m9.md",
      "call_id": "d61803e7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Cygdb make_command_file Carriage Return Conversion",
      "target": "Cython.Debugger.Cygdb.make_command_file",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `make_command_file` function silently converts all carriage return (`\\r`) characters in the `prefix_code` parameter to newline (`\\n`) characters due to Python's universal newlines mode, causing inconsistent behavior between what is written and what is read back.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_make_command_file_carriage_return_2025-09-25_06-17_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_make_command_file_carriage_return_2025-09-25_06-17_x3k9.md",
      "call_id": "a94d639a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Cygdb make_command_file Surrogate Character Crash",
      "target": "Cython.Debugger.Cygdb.make_command_file",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `make_command_file` function crashes with `UnicodeEncodeError` when the `prefix_code` parameter contains Unicode surrogate characters (U+D800 to U+DFFF), which are invalid in UTF-8.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_make_command_file_surrogate_crash_2025-09-25_06-17_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_make_command_file_surrogate_crash_2025-09-25_06-17_m8k3.md",
      "call_id": "db20e467",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.CythonDebugWriter.serialize - Missing Precondition Check",
      "target": "Cython.Debugger.DebugWriter.CythonDebugWriter.serialize",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `serialize()` method unconditionally calls `self.tb.end('Module')` but doesn't verify that `start('Module')` was previously called. Calling `serialize()` without first calling `start('Module')` causes an AssertionError. Additionally, calling `serialize()` twice causes an IndexError.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_serialize_2025-09-25_01-15_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_serialize_2025-09-25_01-15_k3n9.md",
      "call_id": "7a8ad6de",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.add_entry Missing Attribute Value Validation",
      "target": "Cython.Debugger.DebugWriter.CythonDebugWriter.add_entry",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `add_entry` method in `CythonDebugWriter` accepts arbitrary attribute values without validating them for XML compatibility, causing crashes when attribute values contain control characters.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_add_entry_attr_validation_2025-09-25_10-11_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_add_entry_attr_validation_2025-09-25_10-11_k3m9.md",
      "call_id": "313a8078",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag - Incomplete XML Tag Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag` function claims to validate tag names but only checks for a specific pattern (EncodedStrings starting with \".\" followed by decimals). It fails to detect many invalid XML tag names, causing crashes when these tags are used with `CythonDebugWriter.start()`.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_is_valid_tag_2025-09-25_01-14_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_is_valid_tag_2025-09-25_01-14_x7m9.md",
      "call_id": "38004fbd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag - Incomplete XML Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag()` function only validates against the specific pattern \".DECIMAL\" (e.g., \".0\", \".123\") but fails to validate that tag names are valid XML identifiers, causing `CythonDebugWriter` methods to crash with `ValueError` when processing many common invalid tag names.",
      "package": "cython",
      "file_name": "bug_report_cython_debugwriter_is_valid_tag_2025-09-25_08-44_0rdt.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugwriter_is_valid_tag_2025-09-25_08-44_0rdt.md",
      "call_id": "468a2500",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag - Inconsistent Validation for str vs EncodedString",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag` function fails to validate tag names like `.0`, `.123` when passed as regular `str` objects, but correctly rejects them when passed as `EncodedString` objects. This inconsistent behavior violates the documented purpose of filtering out generator argument names.",
      "package": "cython",
      "file_name": "bug_report_Cython_Debugger_is_valid_tag_2025-09-25_07-43_u96q.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Debugger_is_valid_tag_2025-09-25_07-43_u96q.md",
      "call_id": "ebbc2527",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag Incomplete XML Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag()` function fails to properly validate XML tag names, allowing invalid tags to reach lxml's TreeBuilder which then crashes. The function only checks the `.N` pattern for `EncodedString` instances, missing multiple categories of invalid XML tags including regular strings with `.N` pattern, digit-starting tags, and control characters.",
      "package": "cython",
      "file_name": "bug_report_Cython_Debugger_is_valid_tag_2025-09-25_09-44_t99m.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Debugger_is_valid_tag_2025-09-25_09-44_t99m.md",
      "call_id": "ffe5a09f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag Incomplete XML Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag` function fails to validate XML tag name requirements, allowing invalid tags that cause crashes when used with TreeBuilder.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_is_valid_tag_xml_validation_2025-09-25_10-11_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_is_valid_tag_xml_validation_2025-09-25_10-11_x3k9.md",
      "call_id": "18536749",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag Inconsistent Validation",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag` function incorrectly accepts regular strings matching the pattern `'.<decimal>'` (e.g., '.0', '.123') when it should reject them, as indicated by its docstring. The function only correctly rejects `EncodedString` instances with this pattern, creating an inconsistency in validation behavior.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_is_valid_tag_2025-09-25_00-00_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_is_valid_tag_2025-09-25_00-00_k3f8.md",
      "call_id": "699e5afe",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.DebugWriter.is_valid_tag Type-Dependent Behavior",
      "target": "Cython.Debugger.DebugWriter.is_valid_tag",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_valid_tag` function exhibits inconsistent behavior: it validates names differently depending on whether the input is a regular `str` or an `EncodedString`, causing it to accept invalid tag names like `.0` when passed as regular strings.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_is_valid_tag_2025-09-25_11-15_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_is_valid_tag_2025-09-25_11-15_x7k2.md",
      "call_id": "e3efb44a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Tests source_to_lineno Loses Duplicate Lines",
      "target": "Cython.Debugger.Tests.TestLibCython.source_to_lineno",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `source_to_lineno` dictionary loses duplicate source lines, mapping all occurrences of a line to only the last occurrence's line number.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_source_to_lineno_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_source_to_lineno_2025-09-25_00-01_x7k9.md",
      "call_id": "78ce3282",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Tests workaround_for_coding_style_checker Missing Return",
      "target": "Cython.Debugger.Tests.TestLibCython.TestList.workaround_for_coding_style_checker",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `workaround_for_coding_style_checker` method takes a parameter but never uses it, builds a result string but never returns it, making the function a no-op that always returns None.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_tests_workaround_missing_return_2025-09-25_07-45_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_tests_workaround_missing_return_2025-09-25_07-45_x3k9.md",
      "call_id": "c07880e1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Tests workaround_for_coding_style_checker Returns Nothing",
      "target": "Cython.Debugger.Tests.test_libcython_in_gdb.TestList.workaround_for_coding_style_checker",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `workaround_for_coding_style_checker` method computes a result but never returns it, making the function completely useless. It also accepts a parameter that is never used.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_tests_workaround_2025-09-25_06-38_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_tests_workaround_2025-09-25_06-38_x7k9.md",
      "call_id": "4234a30e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Tests.TestLibCython test_gdb() Version Regex",
      "target": "Cython.Debugger.Tests.TestLibCython.test_gdb()",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The GDB version detection regex incorrectly matches the Ubuntu/Debian package version instead of the actual GDB version, causing tests to run on incompatible GDB versions or skip on compatible ones.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_test_gdb_2025-09-25_00-00_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_test_gdb_2025-09-25_00-00_k7x9.md",
      "call_id": "c3eb3905",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.Tests.TestLibCython workaround_for_coding_style_checker Missing Return",
      "target": "Cython.Debugger.Tests.TestLibCython.TestList.workaround_for_coding_style_checker",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `workaround_for_coding_style_checker` method builds a processed string internally but never returns it, causing the method to always return `None`.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_tests_workaround_missing_return_2025-09-25_09-41_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_tests_workaround_missing_return_2025-09-25_09-41_x3k9.md",
      "call_id": "36697612",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.libpython.TruncatedStringIO maxlen=0 Ignored",
      "target": "Cython.Debugger.libpython.TruncatedStringIO",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TruncatedStringIO` class does not enforce its maximum length constraint when `maxlen=0` due to a falsy check, allowing unlimited data to be written despite the explicit zero-length limit.",
      "package": "cython",
      "file_name": "bug_report_cython_debugger_truncatedstringio_maxlen_zero_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_debugger_truncatedstringio_maxlen_zero_2025-09-25_00-01_k3m9.md",
      "call_id": "5a500588",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils Directives Type Validation Missing",
      "target": "Cython.Distutils.build_ext.finalize_options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `finalize_options` method does not validate or parse the `cython_directives` option when it's a string (as it would be when set from command-line), causing a crash in `build_extension`.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_directives_crash_2025-09-25_03-15_vx7n.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_directives_crash_2025-09-25_03-15_vx7n.md",
      "call_id": "aa192a77",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils Empty Strings in Include Paths",
      "target": "Cython.Distutils.build_ext.finalize_options",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `finalize_options` method creates empty strings in `cython_include_dirs` when the input string contains consecutive path separators, causing unintended inclusion of the current directory.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_pathsep_2025-09-25_03-14_nbfz.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_pathsep_2025-09-25_03-14_nbfz.md",
      "call_id": "1dca6a15",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils Unvalidated Directives Cause Crash",
      "target": "Cython.Distutils.build_ext.finalize_options",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `cython_directives` is set as a string (e.g., from command-line), `finalize_options` doesn't parse or validate it, causing a crash when `build_extension` attempts to use it.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_directives_2025-09-25_03-16_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_directives_2025-09-25_03-16_m8k3.md",
      "call_id": "a31153f1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils finalize_options Empty String Handling",
      "target": "Cython.Distutils.build_ext.finalize_options",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Both `finalize_options` methods incorrectly handle empty strings for `cython_include_dirs`, converting `''` to `['']` (list with one empty string) instead of `[]` (empty list).",
      "package": "cython",
      "file_name": "bug_report_finalize_options_empty_string_2025-09-25_11-02_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_finalize_options_empty_string_2025-09-25_11-02_x3k9.md",
      "call_id": "a0e7db7c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils pyrex_* Silently Overwrites cython_*",
      "target": "Cython.Distutils.Extension.__init__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When both deprecated `pyrex_*` and modern `cython_*` parameters are provided to the Extension constructor, the `pyrex_*` value silently overwrites the `cython_*` value without warning or error.",
      "package": "cython",
      "file_name": "bug_report_cython_extension_pyrex_overwrite_2025-09-25_03-15_kihb.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_extension_pyrex_overwrite_2025-09-25_03-15_kihb.md",
      "call_id": "288c4816",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.Extension Ignores cython_* Parameters When pyrex_* Present",
      "target": "Cython.Distutils.Extension",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When any `pyrex_*` keyword argument is passed to `Extension.__init__`, all explicit `cython_*` constructor parameters (like `cython_include_dirs`, `cython_directives`) are silently ignored and reset to their default values.",
      "package": "cython",
      "file_name": "bug_report_cython_extension_params_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_extension_params_2025-09-25_00-01_k3m9.md",
      "call_id": "d4000de8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.Extension Loses Cython Parameters When Pyrex Parameters Present",
      "target": "Cython.Distutils.extension.Extension.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When any `pyrex_*` parameter is passed to Extension's constructor alongside explicit `cython_*` parameters, the explicit `cython_*` parameters are silently ignored and reset to their default values.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_extension_param_loss_2025-09-25_01-16_1aky.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_extension_param_loss_2025-09-25_01-16_1aky.md",
      "call_id": "fac399aa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.Extension Parameter Loss with Mixed pyrex/cython Options",
      "target": "Cython.Distutils.Extension.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When constructing an Extension with explicit `cython_*` parameters (e.g., `cython_include_dirs`) alongside any `pyrex_*` keyword arguments (e.g., `pyrex_gdb=True`), the explicit `cython_*` parameters are silently lost and reset to their default values (empty list/dict).",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_extension_parameter_loss_2025-09-25_10-39_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_extension_parameter_loss_2025-09-25_10-39_k3m9.md",
      "call_id": "ee2cbc48",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.Extension Pyrex Options Override Explicit Cython Parameters",
      "target": "Cython.Distutils.extension.Extension.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When pyrex_* backward compatibility options are provided alongside explicit cython_* parameters, the Extension.__init__ method silently discards the explicit cython_* parameters due to a flawed recursive call pattern.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_extension_pyrex_override_2025-09-25_08-00_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_extension_pyrex_override_2025-09-25_08-00_m3x7.md",
      "call_id": "00b711d6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.Extension Pyrex/Cython Option Mixing",
      "target": "Cython.Distutils.Extension.__init__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When mixing deprecated `pyrex_*` options with `cython_*` options in Extension constructor, all directly specified `cython_*` parameters are silently ignored due to early return in backwards compatibility code path.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_extension_pyrex_mixing_2025-09-25_06-07_m3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_extension_pyrex_mixing_2025-09-25_06-07_m3x9.md",
      "call_id": "1f477eea",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.build_ext.get_extension_attr Ignores Falsy Command-Line Options",
      "target": "Cython.Distutils.build_ext.get_extension_attr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_extension_attr` method in `Cython.Distutils.build_ext` uses the `or` operator to choose between command-line and extension-level settings. This causes falsy but valid values (like `0`, `False`, `\"\"`, `[]`, `{}`) from command-line options to be incorrectly ignored in favor of extension-level settings.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_build_ext_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_build_ext_2025-09-25_12-00_x7k9.md",
      "call_id": "64223cd4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.build_ext.get_extension_attr Ignores Falsy Command-Line Values",
      "target": "Cython.Distutils.build_ext.get_extension_attr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_extension_attr` method uses `or` logic to combine command-line and extension attributes, causing it to ignore explicitly-set falsy command-line values (0, False, [], \"\") and incorrectly fall back to extension values instead.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_get_extension_attr_2025-09-25_01-14_jl7f.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_get_extension_attr_2025-09-25_01-14_jl7f.md",
      "call_id": "faaebf15",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.extension.read_setup_file Macro Value Parsing",
      "target": "Cython.Distutils.extension.read_setup_file",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_setup_file` function incorrectly parses `-D` macro definitions with values, dropping the first character of the macro value due to an off-by-one error in string slicing.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_read_setup_file_2025-09-25_04-11_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_read_setup_file_2025-09-25_04-11_k3x9.md",
      "call_id": "f9e8d377",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.old_build_ext Option Precedence Bug",
      "target": "Cython.Distutils.old_build_ext.cython_sources",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cython_sources` method incorrectly handles falsy values when merging command-line and extension options, causing explicitly set command-line values of `0` or `False` to be overridden by extension attribute values.",
      "package": "cython",
      "file_name": "bug_report_cython_distutils_old_build_ext_or_operator_2025-09-25_00-04_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_distutils_old_build_ext_or_operator_2025-09-25_00-04_k3m9.md",
      "call_id": "06059783",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Distutils.old_build_ext Option Precedence Violation",
      "target": "Cython.Distutils.old_build_ext.cython_sources",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cython_sources` method uses `or` operators for configuration options, which means falsy command-level values cannot override truthy extension values, violating the expected precedence.",
      "package": "cython",
      "file_name": "bug_report_old_build_ext_option_precedence_2025-09-25_11-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_old_build_ext_option_precedence_2025-09-25_11-01_k3m9.md",
      "call_id": "4b39d073",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Begin Action Crashes Due to Missing Scanner.begin() Method",
      "target": "Cython.Plex.Actions.Begin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Begin` action, a core feature for state management in Plex lexical scanners, crashes with `AttributeError` because it internally calls `scanner.begin()` which doesn't exist on Scanner instances.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_begin_action_crash_2025-09-25_09-51_8s6x.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_begin_action_crash_2025-09-25_09-51_8s6x.md",
      "call_id": "75990e28",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Range() Unhelpful Error for Odd-Length Strings",
      "target": "Cython.Plex.Range",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Range()` function raises an unhelpful `IndexError: string index out of range` when given an odd-length string, instead of a clear error message explaining the input requirement.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_range_odd_length_2025-09-25_06-49_m7p3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_range_odd_length_2025-09-25_06-49_m7p3.md",
      "call_id": "f3cffa86",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Scanner Infinite Loop with Nullable Patterns",
      "target": "Cython.Plex.Scanner",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Scanner.read() enters an infinite loop when the Lexicon contains nullable patterns (patterns that can match empty strings) like `Rep()`, `Opt()`, or `Str('')`. The scanner repeatedly returns empty tokens instead of advancing or raising an error.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-49_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-49_x3k9.md",
      "call_id": "f274c380",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex chars_to_ranges Incorrect Range on Duplicates",
      "target": "Cython.Plex.Regexps.chars_to_ranges",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` function incorrectly expands character ranges when the input string contains duplicate characters, covering characters that are not in the input. This affects `Any()` and `AnyBut()` regular expression constructors.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_chars_to_ranges_2025-09-25_01-13_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_chars_to_ranges_2025-09-25_01-13_k3x9.md",
      "call_id": "12b15cc0",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Lexicon InvalidToken Constructor Mismatch",
      "target": "Cython.Plex.Lexicons.parse_token_definition",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Lexicon.parse_token_definition` method raises `InvalidToken` exceptions with only one argument (message), but the `InvalidToken` constructor requires two arguments (token_number, message), causing a TypeError instead of the intended exception.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_invalidtoken_constructor_2025-09-25_02-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_invalidtoken_constructor_2025-09-25_02-00_x7k9.md",
      "call_id": "52e70741",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Machines FastMachine.chars_to_ranges Duplicate Characters",
      "target": "Cython.Plex.Machines.FastMachine.chars_to_ranges",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` method in `FastMachine` creates duplicate ranges when the input character list contains duplicate characters, instead of producing a minimal set of non-overlapping ranges.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_fastmachine_chars_to_ranges_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_fastmachine_chars_to_ranges_2025-09-25_00-00_k3m9.md",
      "call_id": "f3452736",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps chars_to_ranges Duplicate Character Handling",
      "target": "Cython.Plex.Regexps.chars_to_ranges",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` function incorrectly expands character ranges when the input string contains duplicate characters, causing `Any()` and `AnyBut()` patterns to match characters that were not in the original string.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_chars_to_ranges_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_chars_to_ranges_2025-09-25_00-00_x7k9.md",
      "call_id": "7e5f1b9f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps chars_to_ranges Incorrect Handling of Duplicates",
      "target": "Cython.Plex.Regexps.chars_to_ranges",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` function incorrectly extends character ranges when encountering duplicate characters, causing the `Any()` regular expression constructor to match characters that were not in the input set.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_chars_to_ranges_2025-09-25_00-01_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_chars_to_ranges_2025-09-25_00-01_k9m3.md",
      "call_id": "6106ce8e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.RE.wrong_type Python 3 Incompatibility",
      "target": "Cython.Plex.Regexps.RE.wrong_type",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `RE.wrong_type` method uses `types.InstanceType` which was removed in Python 3, causing an AttributeError when RE validation fails instead of raising the intended PlexTypeError.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_instancetype_python3_2025-09-25_02-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_instancetype_python3_2025-09-25_02-01_k3m9.md",
      "call_id": "d10ca83f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.Range IndexError on Odd-Length String",
      "target": "Cython.Plex.Regexps.Range",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Range` function crashes with `IndexError` when given an odd-length string, instead of validating the input and raising a descriptive error.",
      "package": "cython",
      "file_name": "bug_report_Cython_Plex_Range_odd_length.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Plex_Range_odd_length.md",
      "call_id": "ae8abffb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.RawCodeRange.calc_str AttributeError",
      "target": "Cython.Plex.Regexps.RawCodeRange.calc_str",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `RawCodeRange.calc_str` method references non-existent attributes `self.code1` and `self.code2`, causing an AttributeError when the string representation is requested.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_rawcoderange_calc_str_2025-09-25_02-03_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_rawcoderange_calc_str_2025-09-25_02-03_x7k9.md",
      "call_id": "b1a78602",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.chars_to_ranges Incorrect Range Merging",
      "target": "Cython.Plex.Regexps.chars_to_ranges",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` function incorrectly merges character ranges when the input contains duplicate characters, causing it to cover characters not present in the input string.",
      "package": "cython",
      "file_name": "bug_report_Cython_Plex_chars_to_ranges.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Plex_chars_to_ranges.md",
      "call_id": "5cbc9418",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Scanner Missing Documented Methods",
      "target": "Cython.Plex.Scanners.Scanner",
      "severity": "Invalid",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Scanner` class docstring documents two methods (`begin()` and `produce()`) that do not exist in the actual implementation, violating the API contract and misleading users.",
      "package": "cython",
      "file_name": "bug_report_cython_plex_scanner_missing_methods_2025-09-25_09-52_z9fv.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_plex_scanner_missing_methods_2025-09-25_09-52_z9fv.md",
      "call_id": "9d68a1ea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Runtime.refnanny.Context Integer Overflow",
      "target": "Cython.Runtime.refnanny.Context.__init__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Context` constructor crashes with `OverflowError` when the `line` parameter exceeds the maximum value representable by a C `ssize_t`, instead of validating input or handling the overflow gracefully.",
      "package": "cython",
      "file_name": "bug_report_cython_runtime_context_overflow_2025-09-25_01-42_1e98.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_runtime_context_overflow_2025-09-25_01-42_1e98.md",
      "call_id": "72680ef0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Bytes Content Type Error",
      "target": "Cython.Tempita._tempita.lex",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Template constructor accepts bytes content and sets the `_unicode` flag accordingly, but the `lex()` function crashes when trying to parse bytes content because it uses a string regex pattern.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_bytes_content_2025-09-25_02-05_m8n2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_bytes_content_2025-09-25_02-05_m8n2.md",
      "call_id": "e7b300f4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Multiple Else Clauses Accepted",
      "target": "Cython.Tempita._tempita.parse_one_cond",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Template parser incorrectly accepts if statements with multiple else clauses and elif clauses after else, violating standard conditional statement syntax.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_multiple_else_2025-09-25_06-22_r7k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_multiple_else_2025-09-25_06-22_r7k3.md",
      "call_id": "83020175",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Parser Accepts Duplicate else Clauses",
      "target": "Cython.Tempita._tempita.parse_cond",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The template parser accepts multiple `else` clauses in a single if/elif/else block, which should be a syntax error. Only the first `else` is executed, and subsequent ones are silently ignored.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_duplicate_else_2025-09-25_01-06_p9x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_duplicate_else_2025-09-25_01-06_p9x2.md",
      "call_id": "d10f5bec",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Parser Accepts Invalid Conditional Syntax",
      "target": "Cython.Tempita._tempita.parse_cond",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The template parser accepts invalid conditional block syntax including duplicate `else` clauses and `elif` after `else`, which should be syntax errors per Python syntax rules. Invalid clauses are silently ignored during execution.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_invalid_conditionals_2025-09-25_01-06_m3n9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_invalid_conditionals_2025-09-25_01-06_m3n9.md",
      "call_id": "f6f9b820",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita SyntaxError Missing Position Information",
      "target": "Cython.Tempita.Template._eval",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "SyntaxError exceptions in template expressions lack line/column position information, unlike other exceptions (NameError, etc.), making template debugging difficult.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_syntaxerror_position_2025-09-25_02-47_v9k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_syntaxerror_position_2025-09-25_02-47_v9k2.md",
      "call_id": "fd1a11b3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Template._repr UnicodeDecodeError Construction",
      "target": "Cython.Tempita._tempita.Template._repr",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Template._repr` method incorrectly constructs `UnicodeDecodeError` and `UnicodeEncodeError` exceptions with a single string argument instead of the required 5 arguments, causing a TypeError when these error paths are triggered.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_repr_unicode_error_2025-09-25_06-27_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_repr_unicode_error_2025-09-25_06-27_k3x9.md",
      "call_id": "e141f478",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Template.from_filename Encoding Missing",
      "target": "Cython.Tempita._tempita.Template.from_filename",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Template.from_filename() crashes with TypeError when the encoding parameter is not specified, despite having a default_encoding class attribute that should be used automatically.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_from_filename_encoding_2025-09-25_10-18_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_from_filename_encoding_2025-09-25_10-18_x3k9.md",
      "call_id": "a9840957",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Template.substitute Mutates Input Dictionary",
      "target": "Cython.Tempita._tempita.Template.substitute",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Template.substitute` method mutates the input dictionary by adding the `__template_name__` key, violating the principle of least surprise that method calls should not modify their arguments unless explicitly documented.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_substitute_mutation_2025-09-25_06-28_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_substitute_mutation_2025-09-25_06-28_x7m9.md",
      "call_id": "7aefc108",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Template.substitute Namespace Override",
      "target": "Cython.Tempita.Template.substitute",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Template namespace values incorrectly override substitute() arguments, reversing the expected precedence where runtime values should take priority over defaults.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_substitute_namespace_2025-09-25_02-44_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_substitute_namespace_2025-09-25_02-44_k7m3.md",
      "call_id": "930ec339",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita TemplateDef Keyword Arguments Crash",
      "target": "Cython.Tempita._tempita.TemplateDef._parse_signature",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When calling a template-defined function with keyword arguments, the code crashes with \"TypeError: unhashable type: 'list'\" due to using a list as a dictionary key.",
      "package": "cython",
      "file_name": "bug_report_Cython_Tempita_TemplateDef_kwargs_2025-09-25_02-13_p9f1.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Tempita_TemplateDef_kwargs_2025-09-25_02-13_p9f1.md",
      "call_id": "f4f9674a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita Unicode Identifier Rejection",
      "target": "Cython.Tempita._tempita.parse_default",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Tempita's `{{default}}` statement rejects valid Python 3 Unicode identifiers using an ASCII-only regex that doesn't match Python 3's identifier rules.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_unicode_identifiers_2025-09-25_03-17_u9x4.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_unicode_identifiers_2025-09-25_03-17_u9x4.md",
      "call_id": "5d4206d2",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita fill_command py: Prefix Parsing",
      "target": "Cython.Tempita._tempita.fill_command",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `fill_command` function incorrectly parses `py:` prefixed arguments, keeping only the prefix \"py:\" instead of the actual variable name, causing all Python-evaluated arguments to be stored under the same key \"py:\".",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_fill_command_py_prefix_2025-09-25_06-26_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_fill_command_py_prefix_2025-09-25_06-26_x9k3.md",
      "call_id": "b82285f4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita isolate_expression Bounds Checking",
      "target": "Cython.Tempita._tempita.isolate_expression",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `isolate_expression` function raises an `IndexError` when start position is past the end of the text, despite code comments indicating that positions past the end can occur.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_isolate_expression_bounds_2025-09-25_06-22_p4m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_isolate_expression_bounds_2025-09-25_06-22_p4m9.md",
      "call_id": "8d7ab8cd",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita isolate_expression Empty String IndexError",
      "target": "Cython.Tempita._tempita.isolate_expression",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `isolate_expression` function crashes with IndexError when called on an empty string, as it doesn't handle the case where `splitlines()` returns an empty list.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_isolate_empty_2025-09-25_06-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_isolate_empty_2025-09-25_06-30_k3m9.md",
      "call_id": "3a2aedfc",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita looper first_group/last_group None Handling",
      "target": "Cython.Tempita._looper.loop_pos._compare_group",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `first_group()` and `last_group()` methods crash with AttributeError when used with non-None getters at sequence boundaries, because they attempt to call getattr/index operations on None values (previous/next items).",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_looper_group_none_2025-09-25_06-29_m3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_looper_group_none_2025-09-25_06-29_m3x9.md",
      "call_id": "460e6458",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita looper.even Type Inconsistency",
      "target": "Cython.Tempita._looper.loop_pos.even",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `looper.even` property returns int (0 or 1) instead of bool, creating type inconsistency with its counterpart `odd` property which correctly returns bool.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_looper_even_type_2025-09-25_03-58_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_looper_even_type_2025-09-25_03-58_x7k9.md",
      "call_id": "33699aa0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_def IndexError on Empty Directive",
      "target": "Cython.Tempita._tempita.parse_def",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_def` function crashes with an IndexError instead of raising a proper TemplateError when parsing malformed `{{def}}` directives that have no function signature after the keyword.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_def_crash_2025-09-25_10-34_w5j3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_def_crash_2025-09-25_10-34_w5j3.md",
      "call_id": "c0806e80",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_def IndexError on Whitespace-Only Input",
      "target": "Cython.Tempita._tempita.parse_def",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_def` function crashes with IndexError instead of raising a meaningful TemplateError when parsing `{{def }}` (with only whitespace after the keyword).",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_def_indexerror_2025-09-25_06-33_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_def_indexerror_2025-09-25_06-33_x7m9.md",
      "call_id": "57d86e58",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_default IndexError on Empty Directive",
      "target": "Cython.Tempita._tempita.parse_default",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_default` function crashes with an IndexError instead of raising a proper TemplateError when parsing malformed `{{default}}` directives that have no content after the keyword.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_default_crash_2025-09-25_10-32_d4f8.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_default_crash_2025-09-25_10-32_d4f8.md",
      "call_id": "d148c56d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_default IndexError on Whitespace-Only Input",
      "target": "Cython.Tempita._tempita.parse_default",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_default` function crashes with IndexError instead of raising a meaningful TemplateError when parsing `{{default }}` (with only whitespace after the keyword).",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_default_indexerror_2025-09-25_06-32_m3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_default_indexerror_2025-09-25_06-32_m3x9.md",
      "call_id": "1ee2d456",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_inherit IndexError on Empty Directive",
      "target": "Cython.Tempita._tempita.parse_inherit",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_inherit` function crashes with an IndexError instead of raising a proper TemplateError when parsing malformed `{{inherit}}` directives that have no expression after the keyword.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_inherit_crash_2025-09-25_10-33_p9q1.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_inherit_crash_2025-09-25_10-33_p9q1.md",
      "call_id": "b0574533",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita parse_inherit IndexError on Whitespace-Only Input",
      "target": "Cython.Tempita._tempita.parse_inherit",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_inherit` function crashes with IndexError instead of raising a meaningful TemplateError when parsing `{{inherit }}` (with only whitespace after the keyword).",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_parse_inherit_indexerror_2025-09-25_06-33_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_parse_inherit_indexerror_2025-09-25_06-33_k3m9.md",
      "call_id": "55660c52",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita sub() __name Parameter Leaks into Template Namespace",
      "target": "Cython.Tempita._tempita.sub",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sub()` function's `__name` parameter is not removed from the kwargs dict before passing it to `substitute()`, causing it to leak into the template namespace where it can be accessed as a variable.",
      "package": "cython",
      "file_name": "bug_report_cython_tempita_sub_name_leak_2025-09-25_06-31_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_tempita_sub_name_leak_2025-09-25_06-31_x7k9.md",
      "call_id": "c4eb1c5f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita.bunch delattr Not Supported",
      "target": "Cython.Tempita.bunch",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `bunch` class supports `setattr()` to modify attributes but does not support `delattr()` to remove them, creating an inconsistent and incomplete implementation of Python's attribute protocol.",
      "package": "cython",
      "file_name": "bug_report_Cython_Tempita_bunch_delattr_2025-09-25_04-15_p9q2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Tempita_bunch_delattr_2025-09-25_04-15_p9q2.md",
      "call_id": "d117ac3e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita.bunch dir() Missing Attributes",
      "target": "Cython.Tempita.bunch",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `bunch` class does not include its dynamically set attributes in the `dir()` output, violating Python's introspection protocol and breaking IDE autocomplete, debuggers, and other introspection tools.",
      "package": "cython",
      "file_name": "bug_report_Cython_Tempita_bunch_dir_2025-09-25_04-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Tempita_bunch_dir_2025-09-25_04-15_k3m9.md",
      "call_id": "e383e5bd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Tempita.looper odd/even Properties Are Swapped",
      "target": "Cython.Tempita._looper.loop_pos",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `odd` and `even` properties of the `loop_pos` class return the opposite boolean values from what their names suggest. Position 0 (the first item) is reported as odd when it should be even.",
      "package": "cython",
      "file_name": "bug_report_Cython_Tempita_looper_odd_even_2025-09-25_02-13_m7k4.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Tempita_looper_odd_even_2025-09-25_02-13_m7k4.md",
      "call_id": "3de71997",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.TestUtils _parse_pattern ValueError with Backslash",
      "target": "Cython.TestUtils._parse_pattern",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_pattern` function crashes with a `ValueError: not enough values to unpack` when the pattern starts with a slash followed by a backslash and no subsequent unescaped slash (e.g., `/\\/`).",
      "package": "cython",
      "file_name": "bug_report_cython_testutils_parse_pattern_2025-09-25_03-44_x7j4.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_testutils_parse_pattern_2025-09-25_03-44_x7j4.md",
      "call_id": "60fdb0a6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.TestUtils._parse_pattern ValueError on Missing Delimiter",
      "target": "Cython.TestUtils._parse_pattern",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_pattern` function crashes with a `ValueError` when given patterns that start with `/` or `:/` but lack the required second delimiter. The function uses `re.split()` with tuple unpacking, which fails when the delimiter is not found.",
      "package": "cython",
      "file_name": "bug_report_cython_testutils_parse_pattern_2025-09-25_11-10_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_testutils_parse_pattern_2025-09-25_11-10_x7k9.md",
      "call_id": "6f700162",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.TestUtils.write_newer_file Infinite Loop",
      "target": "Cython.TestUtils.write_newer_file",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`write_newer_file()` enters an infinite loop when the `newer_than` file doesn't exist, violating its documented behavior and causing hangs in test suites.",
      "package": "cython",
      "file_name": "bug_report_cython_testutils_write_newer_file_infinite_loop_2025-09-25_11-03_w9k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_testutils_write_newer_file_infinite_loop_2025-09-25_11-03_w9k3.md",
      "call_id": "b13c1805",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility Field.__repr__ Attribute Name Mismatch",
      "target": "Cython.Utility.Field.__repr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Field.__repr__` method uses `kwonly` in its format string, but the actual attribute name is `kw_only` (with underscore), creating inconsistent naming in the repr output.",
      "package": "cython",
      "file_name": "bug_report_cython_utility_field_repr_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utility_field_repr_2025-09-25_00-00_x7k9.md",
      "call_id": "e0b7be3f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility pylong_join Inconsistency",
      "target": "Cython.Utility.pylong_join",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The two implementations of pylong_join in Cython.Utility produce inconsistent output for count=0 and negative values. `pylong_join` returns an empty string while `_pylong_join` returns `'()'`.",
      "package": "cython",
      "file_name": "bug_report_Cython_Utility_pylong_join_consistency_2025-09-25_00-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Utility_pylong_join_consistency_2025-09-25_00-46_k3m9.md",
      "call_id": "6220875c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility.Dataclasses Field repr Typo",
      "target": "Cython.Utility.Dataclasses.Field.__repr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Field.__repr__` method uses `'kwonly='` in the format string, but the actual attribute name is `'kw_only'` (with underscore). This creates an inconsistency between the repr output and the actual attribute names.",
      "package": "cython",
      "file_name": "bug_report_Cython_Utility_Dataclasses_Field_repr_2025-09-25_00-01_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Utility_Dataclasses_Field_repr_2025-09-25_00-01_x3m9.md",
      "call_id": "dc2ff66f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility.Dataclasses.Field Inconsistent Attribute Name in __repr__",
      "target": "Cython.Utility.Dataclasses.Field.__repr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Field.__repr__()` method displays the attribute as `kwonly=` in its string representation, but the actual attribute name is `kw_only` (with an underscore), creating an inconsistency between the repr and the actual object.",
      "package": "cython",
      "file_name": "bug_report_Cython_Utility_Field_repr_2025-09-25_10-12_jcaq.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Utility_Field_repr_2025-09-25_10-12_jcaq.md",
      "call_id": "c62381a0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility._pylong_join Unbalanced Parentheses",
      "target": "Cython.Utility._pylong_join",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_pylong_join` function generates C code with unbalanced parentheses when count >= 2, producing invalid C expressions that will not compile.",
      "package": "cython",
      "file_name": "bug_report_cython_utility_private_pylong_join_2025-09-25_10-39_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utility_private_pylong_join_2025-09-25_10-39_x7k9.md",
      "call_id": "eb3a310b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility.pylong_join Invalid C Code Generation",
      "target": "Cython.Utility.pylong_join",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `pylong_join` function generates invalid C code when `join_type` parameter is an empty string, producing empty casts `()` which are syntactically invalid in C.",
      "package": "cython",
      "file_name": "bug_report_cython_utility_pylong_join_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utility_pylong_join_2025-09-25_00-00_x7k9.md",
      "call_id": "4088a05f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utility.pylong_join OverflowError with Large Negative Counts",
      "target": "Cython.Utility.pylong_join",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pylong_join` function exhibits inconsistent behavior with negative count values: small negative values (e.g., -1, -2) return an empty string, but extremely large negative values (e.g., -4611686018427387905) trigger an OverflowError.",
      "package": "cython",
      "file_name": "bug_report_cython_utility_pylong_join_2025-09-25_01-43_4v1f.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utility_pylong_join_2025-09-25_01-43_4v1f.md",
      "call_id": "5d28de28",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils normalise_float_repr Corrupts Negative Numbers",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function fails to correctly handle negative numbers in scientific notation, producing either invalid float strings or dramatically corrupting the numeric value by treating the minus sign as part of the digit string.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_normalise_float_repr_2025-09-25_03-44_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_normalise_float_repr_2025-09-25_03-44_k3m9.md",
      "call_id": "0cfd04d2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils normalise_float_repr Scientific Notation",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function in Cython.Utils produces completely incorrect normalized representations for floating-point numbers in scientific notation with negative exponents, resulting in values that are orders of magnitude different from the input.",
      "package": "cython",
      "file_name": "bug_report_cython_normalise_float_repr_2025-09-25_05-14_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_normalise_float_repr_2025-09-25_05-14_k7m3.md",
      "call_id": "5ef5b195",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.build_hex_version - Crash on Missing Number After Release Tag",
      "target": "Cython.Utils.build_hex_version",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`build_hex_version` crashes with `ValueError` when a version string has a release tag (a, b, rc) without a following number.",
      "package": "cython",
      "file_name": "bug_report_Cython_build_hex_version_crash_2025-09-25_05-14_b5w3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_build_hex_version_crash_2025-09-25_05-14_b5w3.md",
      "call_id": "26d6909a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.build_hex_version - Wrong Output Length",
      "target": "Cython.Utils.build_hex_version",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`build_hex_version` produces hex strings with 9 digits instead of 8 for certain version numbers, violating the documented format '0x%08X'.",
      "package": "cython",
      "file_name": "bug_report_Cython_build_hex_version_format_2025-09-25_05-14_q8n1.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_build_hex_version_format_2025-09-25_05-14_q8n1.md",
      "call_id": "8f0f16e0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.build_hex_version ValueError on Invalid Input",
      "target": "Cython.Utils.build_hex_version",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `build_hex_version` function crashes with an uninformative `ValueError` when given invalid version strings such as empty strings, non-numeric inputs, or improperly formatted versions.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_build_hex_version_2025-09-25_09-46_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_build_hex_version_2025-09-25_09-46_x7k9.md",
      "call_id": "01764058",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr - Exponent Calculation Error",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function produces incorrect output values when handling floats with negative exponents and decimal points, resulting in values that differ by many orders of magnitude from the input.",
      "package": "cython",
      "file_name": "bug_report_normalise_float_repr_exponent_2025-09-25_04-12_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_normalise_float_repr_exponent_2025-09-25_04-12_x7k9.md",
      "call_id": "fe67a3db",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr - Incorrect Exponent Handling",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`normalise_float_repr` produces incorrect numeric values for numbers in scientific notation, dramatically changing the magnitude of the number.",
      "package": "cython",
      "file_name": "bug_report_Cython_normalise_float_repr_exponent_2025-09-25_05-14_m7x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_normalise_float_repr_exponent_2025-09-25_05-14_m7x2.md",
      "call_id": "b78838aa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr - Incorrect Handling of Negative Numbers",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function produces syntactically invalid float strings when given negative numbers with negative exponents. The minus sign is placed in the wrong position within the normalized output, making the result unparseable as a float.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_normalise_float_repr_negative_2025-09-25_10-41_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_normalise_float_repr_negative_2025-09-25_10-41_x7k9.md",
      "call_id": "baf9aa11",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr - Negative Numbers Produce Invalid Format",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function incorrectly handles negative floating-point numbers, producing outputs with the minus sign in the wrong position (e.g., `.000-1` instead of `-.000001`), making them unparseable or having incorrect values.",
      "package": "cython",
      "file_name": "bug_report_normalise_float_repr_negative_2025-09-25_04-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_normalise_float_repr_negative_2025-09-25_04-12_k3m9.md",
      "call_id": "f2721a71",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr - Negative Numbers with Exponents",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`normalise_float_repr` produces invalid float strings for negative numbers in scientific notation, placing the minus sign in the wrong position.",
      "package": "cython",
      "file_name": "bug_report_Cython_normalise_float_repr_negative_2025-09-25_05-14_a3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_normalise_float_repr_negative_2025-09-25_05-14_a3k9.md",
      "call_id": "25027017",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr Fails on Negative Numbers",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function in `Cython.Utils` fails to handle negative numbers correctly, producing either invalid output that cannot be parsed back to a float, or incorrect values that don't match the input.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_normalise_float_repr_2025-09-25_06-13_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_normalise_float_repr_2025-09-25_06-13_x8k2.md",
      "call_id": "668e140f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr Incorrect Handling of Negative Exponents",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr()` function incorrectly handles scientific notation with negative exponents, producing results that are off by many orders of magnitude. For example, `6.103515625e-05` (\u22480.00006104) is incorrectly normalized to `'610351.00005625'` (\u2248610351).",
      "package": "cython",
      "file_name": "bug_report_Cython_Utils_normalise_float_repr_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_Cython_Utils_normalise_float_repr_2025-09-25_k3m9.md",
      "call_id": "da7d727f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr Incorrect Handling of Negative Exponents",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function produces incorrect results when normalizing float strings with negative exponents and multiple significant digits. The function returns a value that is orders of magnitude different from the input.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_normalise_float_repr_2025-09-25_08-11_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_normalise_float_repr_2025-09-25_08-11_x9k3.md",
      "call_id": "5f62fee4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr Incorrect Handling of Scientific Notation",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr` function produces incorrect results when normalizing floats in scientific notation, particularly for values with negative exponents. The function violates its fundamental property that the normalized string should represent the same numeric value as the input.",
      "package": "cython",
      "file_name": "bug_report_cython_normalise_float_repr_scientific_2025-09-25_04-41_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_normalise_float_repr_scientific_2025-09-25_04-41_k3m9.md",
      "call_id": "26614b27",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.normalise_float_repr Negative Number Handling",
      "target": "Cython.Utils.normalise_float_repr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalise_float_repr()` function produces invalid float string representations for negative numbers in scientific notation, causing the minus sign to appear in the wrong position.",
      "package": "cython",
      "file_name": "bug_report_cython_utils_normalise_float_repr_2025-09-25_02-37_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_normalise_float_repr_2025-09-25_02-37_x9k2.md",
      "call_id": "7a2f462b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.strip_py2_long_suffix IndexError on Empty String",
      "target": "Cython.Utils.strip_py2_long_suffix",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `strip_py2_long_suffix` function crashes with an `IndexError` when given an empty string as input, due to unchecked access to `value_str[-1]`.",
      "package": "cython",
      "file_name": "bug_report_cython_strip_py2_long_suffix_empty_2025-09-25_04-41_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_strip_py2_long_suffix_empty_2025-09-25_04-41_x7k9.md",
      "call_id": "7ed84680",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Integer Overflow in Cython.Utils.build_hex_version",
      "target": "Unknown",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "Unknown",
      "summary": "",
      "package": "cython",
      "file_name": "bug_report_cython_utils_build_hex_version_2025-09-25_a3f9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_utils_build_hex_version_2025-09-25_a3f9.md",
      "call_id": "7afe8ccc",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Options.parse_variable_value Large Integer Precision Loss",
      "target": "Cython.Compiler.Options.parse_variable_value",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_variable_value` function silently loses precision when parsing large integers by converting them to floats, corrupting compile-time integer constants.",
      "package": "cython",
      "file_name": "bug_report_options_parse_variable_value_precision_2025-09-25_01-36_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_options_parse_variable_value_precision_2025-09-25_01-36_x7k9.md",
      "call_id": "3e830230",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "build_ext.get_extension_attr Ignores Falsy Builder Values",
      "target": "Cython.Distutils.build_ext.get_extension_attr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_extension_attr` method uses `or` operator to select between builder and extension attribute values, causing falsy builder values (0, False, [], {}) to be incorrectly ignored in favor of extension values, even though builder options should take precedence.",
      "package": "cython",
      "file_name": "bug_report_cython_build_ext_get_extension_attr_2025-09-25_00-00_x7n9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_cython_build_ext_get_extension_attr_2025-09-25_00-00_x7n9.md",
      "call_id": "91b1611b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_python_int Type Signature Mismatch and Precision Issues",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function has a type signature that says it accepts `int | np.integer`, but its implementation also accepts floats. This creates two bugs: (1) type signature mismatch with runtime behavior, and (2) the function fails for floats with decimal parts or large integers that lose precision when converted to float.",
      "package": "cython",
      "file_name": "bug_report_ensure_python_int_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_ensure_python_int_2025-09-25_00-00_k9x3.md",
      "call_id": "4c7c2d10",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_python_int raises OverflowError instead of TypeError",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function raises `OverflowError` when given infinity values instead of the documented `TypeError`. This violates the function's API contract which states it only raises `TypeError`.",
      "package": "cython",
      "file_name": "bug_report_pandas_ensure_python_int_OverflowError_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_ensure_python_int_OverflowError_2025-09-25_00-01_k3m9.md",
      "call_id": "576fd540",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "extended_iglob Brace Expansion Duplicates",
      "target": "Cython.Build.Dependencies.extended_iglob",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `extended_iglob` function returns duplicate file paths when brace expansion patterns contain duplicate alternatives (e.g., `{py,pyx,py}`). This violates the implicit no-duplicates guarantee that the function provides for recursive globs.",
      "package": "cython",
      "file_name": "bug_report_extended_iglob_duplicates_2025-09-25_15-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_extended_iglob_duplicates_2025-09-25_15-30_k3x9.md",
      "call_id": "adc10158",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "is_dtype_equal raises ValueError instead of returning False",
      "target": "pandas.core.dtypes.common.is_dtype_equal",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_dtype_equal` function raises `ValueError` when comparing certain invalid dtype strings instead of returning `False` as intended. This violates the function's documented behavior and the pattern established by similar dtype checking functions.",
      "package": "cython",
      "file_name": "bug_report_pandas_is_dtype_equal_ValueError_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_is_dtype_equal_ValueError_2025-09-25_00-00_x7k9.md",
      "call_id": "dcbfc36f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_reductions [sum/prod return identity instead of NA]",
      "target": "pandas.core.array_algos.masked_reductions.sum",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When all values in an array are masked (indicating all values should be treated as NA/missing), the `sum()` and `prod()` functions incorrectly return their identity elements (0 for sum, 1 for prod) instead of returning NA. This is inconsistent with `min()` and `max()` which correctly return NA in the same situation.",
      "package": "cython",
      "file_name": "bug_report_pandas_array_algos_masked_reductions_2025-09-25_02-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_array_algos_masked_reductions_2025-09-25_02-30_k3m9.md",
      "call_id": "da2ad607",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.arrow ListAccessor Indexing Crash",
      "target": "pandas.core.arrays.arrow.ListAccessor.__getitem__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ListAccessor crashes when indexing lists of varying lengths, even though the docstring example shows this is expected to work. Accessing `series.list[i]` fails with an ArrowInvalid error when some lists don't have an element at index `i`.",
      "package": "cython",
      "file_name": "bug_report_pandas_core_arrays_arrow_ListAccessor_varying_lengths_2025-09-25_05-11_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_core_arrays_arrow_ListAccessor_varying_lengths_2025-09-25_05-11_x7k9.md",
      "call_id": "f0e216d0",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.common.ensure_decoded Crashes on Invalid UTF-8",
      "target": "pandas.core.computation.common.ensure_decoded",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ensure_decoded` function crashes with a `UnicodeDecodeError` when given bytes that are not valid UTF-8, despite claiming to handle bytes by decoding them to unicode.",
      "package": "cython",
      "file_name": "bug_report_pandas_computation_ensure_decoded_2025-09-25_10-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_computation_ensure_decoded_2025-09-25_10-12_k3m9.md",
      "call_id": "0f142c3b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.inference.is_re_compilable raises exception on invalid regex patterns",
      "target": "pandas.core.dtypes.inference.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable` function raises `PatternError` exceptions when given invalid regex patterns, instead of returning `False` as documented. The function's docstring states it \"returns bool\" indicating whether an object can be compiled as a regex pattern, but it crashes on invalid patterns like `'('`, `')'`, `'['`, etc.",
      "package": "cython",
      "file_name": "bug_report_pandas_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "call_id": "74765a51",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Step",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function incorrectly returns negative values for slices with negative steps, violating its documented contract of returning the \"expected length of target[indexer]\".",
      "package": "cython",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_16-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_16-00_k3m9.md",
      "call_id": "4a1084d1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange date32 Conversion Corrupts Pre-Epoch Dates",
      "target": "pandas.core.interchange.from_dataframe.parse_datetime_format_str",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_datetime_format_str()` function incorrectly converts date32[day] values to uint64 before multiplication, causing dates before the Unix epoch (1970-01-01) to wrap around to incorrect future dates.",
      "package": "cython",
      "file_name": "bug_report_pandas_interchange_date32_negative_2025-09-25_14-50_k3p7.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_interchange_date32_negative_2025-09-25_14-50_k3p7.md",
      "call_id": "040976b1",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange get_chunks Produces Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_chunks` method produces empty chunks when the requested number of chunks cannot evenly divide the DataFrame/Column size. This bug affects both `PandasDataFrameXchg.get_chunks` (dataframe.py:98-113) and `PandasColumn.get_chunks` (column.py:250-265).",
      "package": "cython",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_18-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_18-30_k3x9.md",
      "call_id": "d14dcd5c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops Kleene Logic Functions Infinite Recursion",
      "target": "pandas.core.ops.kleene_and",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The Kleene logic functions (`kleene_and`, `kleene_or`, `kleene_xor`) enter infinite recursion when both `left_mask` and `right_mask` parameters are `None`, causing a `RecursionError`. While the docstring states \"Only one of these may be None\", the functions do not validate this precondition and instead crash with infinite recursion.",
      "package": "cython",
      "file_name": "bug_report_pandas_core_ops_kleene_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pandas_core_ops_kleene_2025-09-25_00-00_x7k9.md",
      "call_id": "a70a7c74",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "parse_list KeyError on Unclosed Quotes",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a `KeyError` when given strings containing unclosed quotes (e.g., `\"`, `'`, `\"\"`, etc.). This happens because the `unquote` helper function incorrectly slices the literal label, removing the trailing underscore that is part of the label's format.",
      "package": "cython",
      "file_name": "bug_report_parse_list_keyerror_2025-09-25_15-45_a7x2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_parse_list_keyerror_2025-09-25_15-45_a7x2.md",
      "call_id": "88670b6f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport PyImportMetaFinder found flag prevents multiple module compilation",
      "target": "pyximport.PyImportMetaFinder",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `found` flag in `PyImportMetaFinder` is set to `True` when the first .py module is found but never reset, preventing subsequent .py modules from being Cython-compiled when using `pyimport=True`.",
      "package": "cython",
      "file_name": "bug_report_pyximport_pyimport_found_flag_2025-09-25_06-17_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_pyimport_found_flag_2025-09-25_06-17_x7k2.md",
      "call_id": "3450626a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport install() Not Idempotent for pyimport=True",
      "target": "pyximport.install()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `install()` function is not idempotent when called with `pyimport=True`. Each call adds a new `PyImportMetaFinder` instance to `sys.meta_path`, causing the import system to check the same hook multiple times and degrading performance.",
      "package": "cython",
      "file_name": "bug_report_pyximport_install_idempotence_2025-09-25_00-03_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_install_idempotence_2025-09-25_00-03_k7m2.md",
      "call_id": "fa4eda55",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport._have_importers() Fails to Detect PyImportMetaFinder",
      "target": "pyximport.pyximport._have_importers()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_have_importers()` function fails to detect when `PyImportMetaFinder` is installed in `sys.meta_path`, incorrectly returning `has_py_importer=False` when it should return `True`.",
      "package": "cython",
      "file_name": "bug_report_pyximport_have_importers_2025-09-25_07-37_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_have_importers_2025-09-25_07-37_k3m9.md",
      "call_id": "9060b82b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport._have_importers() Fails to Detect PyImportMetaFinder",
      "target": "pyximport.pyximport._have_importers()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_have_importers()` function fails to detect `PyImportMetaFinder` instances in `sys.meta_path` due to incorrect `isinstance` check ordering. Since `PyImportMetaFinder` and `PyxImportMetaFinder` are sibling classes (not parent-child), the outer `isinstance` check excludes `PyImportMetaFinder` from detection. This causes `install(pyimport=True)` to install duplicate importers when called multiple times.",
      "package": "cython",
      "file_name": "bug_report_pyximport_have_importers_2025-09-25_09-45_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_have_importers_2025-09-25_09-45_x3k9.md",
      "call_id": "f67ae868",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport.get_distutils_extension crashes with non-str paths",
      "target": "pyximport.get_distutils_extension",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `get_distutils_extension()` receives non-string path arguments (bytes or pathlib.Path objects), it crashes due to broken Python 2\u21923 migration code. Bytes paths cause `TypeError: can't concat str to bytes`, while Path objects cause `AttributeError: 'PosixPath' object has no attribute 'encode'`.",
      "package": "cython",
      "file_name": "bug_report_pyximport_get_distutils_extension_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_get_distutils_extension_2025-09-25_00-00_k9x3.md",
      "call_id": "d06760b4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport.handle_special_build AttributeError",
      "target": "pyximport.handle_special_build",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `handle_special_build` function crashes with `AttributeError: 'NoneType' object has no attribute 'sources'` when a `.pyxbld` file defines `make_setup_args()` but not `make_ext()`.",
      "package": "cython",
      "file_name": "bug_report_pyximport_handle_special_build_2025-09-25_07-12_cdxl.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_handle_special_build_2025-09-25_07-12_cdxl.md",
      "call_id": "58ad608d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport.handle_special_build AttributeError with make_setup_args",
      "target": "pyximport.handle_special_build",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`handle_special_build()` crashes with AttributeError when a `.pyxbld` file defines only `make_setup_args()` without `make_ext()`, despite documentation explicitly allowing this configuration.",
      "package": "cython",
      "file_name": "bug_report_pyximport_handle_special_build_2025-09-25_06-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_handle_special_build_2025-09-25_06-17_k3m9.md",
      "call_id": "8918bcea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pyximport.install Duplicate Importers",
      "target": "pyximport.install()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Calling `pyximport.install(pyimport=True)` multiple times adds duplicate `PyImportMetaFinder` instances to `sys.meta_path` due to a logic error in the `_have_importers()` helper function.",
      "package": "cython",
      "file_name": "bug_report_pyximport_install_duplicate_importers_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/cython/bug_reports/bug_report_pyximport_install_duplicate_importers_2025-09-25_00-00_x7k9.md",
      "call_id": "f5219054",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django SQLite LPAD/RPAD Negative Length Handling",
      "target": "django.db.backends.sqlite3._functions._sqlite_lpad",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_sqlite_lpad` and `_sqlite_rpad` functions incorrectly handle negative length values, returning truncated strings instead of empty strings as per SQL standard behavior (PostgreSQL, MySQL).",
      "package": "dask",
      "file_name": "bug_report_django_sqlite_lpad_rpad_negative_2025-09-25_20-30_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_django_sqlite_lpad_rpad_negative_2025-09-25_20-30_a7f2.md",
      "call_id": "cf60c4ff",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django SQLite format_dtdelta Inconsistent Return Types",
      "target": "django.db.backends.sqlite3._functions._sqlite_format_dtdelta",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_sqlite_format_dtdelta` function returns inconsistent types: `str` for addition/subtraction operations, but `float` for multiplication/division operations. This violates the function's intended purpose as indicated by its name (\"format\") and creates type inconsistency in SQL query results.",
      "package": "dask",
      "file_name": "bug_report_django_sqlite_format_dtdelta_2025-09-25_20-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_django_sqlite_format_dtdelta_2025-09-25_20-45_k3m9.md",
      "call_id": "9289d329",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django truncate_name Length Limit Violation with Namespaces",
      "target": "django.db.backends.utils.truncate_name",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_name` function fails to respect the specified length limit when the identifier contains a namespace prefix (e.g., `SCHEMA\".\"TABLE`). The function only checks the table name portion's length, ignoring the namespace, causing the final truncated identifier to exceed the specified length limit.",
      "package": "dask",
      "file_name": "bug_report_django_truncate_name_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_django_truncate_name_2025-09-25_14-30_k3m9.md",
      "call_id": "cec8445a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FromArray Column Order Data Corruption",
      "target": "dask.dataframe.dask_expr.io.io.FromArray._column_indices",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `FromArray._column_indices` property does not preserve the order of requested columns, causing silent data corruption where column data is assigned to the wrong column names.",
      "package": "dask",
      "file_name": "bug_report_fromarray_column_order_2025-09-25_01-30_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_fromarray_column_order_2025-09-25_01-30_k8x2.md",
      "call_id": "14d4338d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "LRU Cache Incorrectly Evicts on Update",
      "target": "dask.dataframe.dask_expr._util.LRU.__setitem__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The LRU cache incorrectly evicts items when updating an existing key. The `__setitem__` method checks if the cache is full before checking if the key already exists, causing it to unnecessarily evict the least recently used item even when just updating a value.",
      "package": "dask",
      "file_name": "bug_report_dask_lru_setitem_2025-09-25_04-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_lru_setitem_2025-09-25_04-30_x7k9.md",
      "call_id": "321ed523",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "LRU Cache Incorrectly Evicts on Update",
      "target": "dask.dataframe.dask_expr._util.LRU",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The LRU cache incorrectly evicts an item when updating an existing key in a full cache, causing the cache size to drop below maxsize.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_lru_update_2025-09-25_02-01_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_lru_update_2025-09-25_02-01_k8m3.md",
      "call_id": "f6788368",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Node.__copy__ Violates Shallow Copy Semantics",
      "target": "django.utils.tree.Node.__copy__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Node.__copy__()` method shares the children list reference between the original and copied nodes, violating Python's shallow copy semantics. This can cause unintended mutations to propagate between supposedly independent copies.",
      "package": "dask",
      "file_name": "bug_report_django_node_copy_shallow_2025-09-25_children_aliasing.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_django_node_copy_shallow_2025-09-25_children_aliasing.md",
      "call_id": "84fa6f52",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "WhereNode.relabel_aliases Inconsistent Return Value",
      "target": "django.db.models.sql.where.WhereNode.relabel_aliases",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `WhereNode.relabel_aliases()` method has inconsistent return behavior: it returns `self` when given an empty change_map, but returns `None` when given a non-empty change_map, violating API consistency.",
      "package": "dask",
      "file_name": "bug_report_django_wherenode_relabel_aliases_2025-09-25_inconsistent_return.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_django_wherenode_relabel_aliases_2025-09-25_inconsistent_return.md",
      "call_id": "baa368ec",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "_aggregate_statistics_to_file crashes with None statistics",
      "target": "dask.dataframe.dask_expr.io.parquet._aggregate_statistics_to_file",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_aggregate_statistics_to_file` function crashes with an `AttributeError` when processing parquet file metadata that contains `None` values in the `statistics` field, which is a valid state according to the parquet specification.",
      "package": "dask",
      "file_name": "bug_report_dask_aggregate_statistics_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_aggregate_statistics_2025-09-25_k3m9.md",
      "call_id": "67e596e1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "_normalize_and_strip_protocol Lacks Idempotence",
      "target": "dask.dataframe.dask_expr.io.parquet._normalize_and_strip_protocol",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_normalize_and_strip_protocol` function is not idempotent when paths contain multiple `::` protocol separators. Calling the function multiple times on the same input produces different results, which violates the expected behavior of a normalization function.",
      "package": "dask",
      "file_name": "bug_report_dask_normalize_protocol_2025-09-25_11-30_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_normalize_protocol_2025-09-25_11-30_a7k2.md",
      "call_id": "5cf8d416",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "_sort_mixed Crashes on Arrays with Tuples",
      "target": "dask.dataframe.dask_expr._expr._sort_mixed",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_sort_mixed` function crashes with a `ValueError` when sorting arrays containing tuples because `np.argsort` returns a 2D array for tuples, which cannot be concatenated with the 1D arrays from other types.",
      "package": "dask",
      "file_name": "bug_report_dask_sort_mixed_tuples_2025-09-25_04-35_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sort_mixed_tuples_2025-09-25_04-35_k9f2.md",
      "call_id": "abc74d6f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "apply_filters Empty List Crash",
      "target": "dask.dataframe.io.parquet.core.apply_filters",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`apply_filters` crashes with an `IndexError` when passed an empty list for the `filters` parameter. The function attempts to access `filters[0]` without first checking if the list is empty.",
      "package": "dask",
      "file_name": "bug_report_apply_filters_empty_2025-09-25_00-01_m7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_apply_filters_empty_2025-09-25_00-01_m7k2.md",
      "call_id": "9017892c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array ravel() crashes on empty arrays with non-zero dimensions",
      "target": "dask.array.ravel()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`dask.array.ravel()` crashes with `TypeError: reduce() of empty iterable with no initial value` when called on empty arrays that have non-zero dimensions (e.g., shape `(3, 0)`). NumPy handles these cases correctly, but Dask fails due to missing initial value in `reduce()` call in the reshape logic.",
      "package": "dask",
      "file_name": "bug_report_dask_array_ravel_empty_2025-09-25_02-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_ravel_empty_2025-09-25_02-30_x7k9.md",
      "call_id": "e041c69f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.argtopk - Crash When k >= Array Size",
      "target": "dask.array.argtopk",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`da.argtopk` crashes with `ValueError: too many values to unpack` when `k` (the number of elements to extract) equals or exceeds the array size and the array has multiple chunks.",
      "package": "dask",
      "file_name": "bug_report_dask_array_argtopk_2025-09-25_00-36_5o4k.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_argtopk_2025-09-25_00-36_5o4k.md",
      "call_id": "a57a8472",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.diff Inconsistent broadcast_to Usage",
      "target": "dask.array.diff",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `diff` function in `dask.array.routines` uses `broadcast_to` from `dask.array.core` for the `prepend` parameter but uses `np.broadcast_to` from NumPy for the `append` parameter. This inconsistency violates the expected behavior that all intermediate operations should use dask arrays for lazy evaluation.",
      "package": "dask",
      "file_name": "bug_report_dask_array_diff_broadcast_inconsistency_2025-09-25_10-06_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_diff_broadcast_inconsistency_2025-09-25_10-06_x7k9.md",
      "call_id": "79d3013c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.eye Chunking Bug for Non-Square Matrices",
      "target": "dask.array.eye",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`dask.array.eye` crashes with \"Missing dependency\" error when creating non-square matrices (N != M) with chunk size >= M.",
      "package": "dask",
      "file_name": "bug_report_dask_array_eye_chunking_2025-09-25_01-15_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_eye_chunking_2025-09-25_01-15_x7k3.md",
      "call_id": "e7bb9be9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.overlap _overlap_internal_chunks Type Inconsistency",
      "target": "dask.array.overlap._overlap_internal_chunks",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_overlap_internal_chunks` function returns inconsistent types in its output structure. When processing dimensions with a single chunk, it preserves the original tuple, but for dimensions with multiple chunks, it converts them to lists. This results in a list containing a mix of tuples and lists, violating type consistency expectations.",
      "package": "dask",
      "file_name": "bug_report_dask_overlap_type_inconsistency_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_overlap_type_inconsistency_2025-09-25_14-30_x7k9.md",
      "call_id": "55d557ce",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.overlap periodic/reflect Crash with Large Depth",
      "target": "dask.array.overlap.periodic",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `periodic` and `reflect` functions crash with a `ValueError` when `depth` is greater than the array size along the specified axis, while NumPy's `np.pad` handles this case correctly.",
      "package": "dask",
      "file_name": "bug_report_dask_array_overlap_periodic_reflect_depth_2025-09-25_04-30_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_overlap_periodic_reflect_depth_2025-09-25_04-30_k7m3.md",
      "call_id": "dac84280",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.overlap.ensure_minimum_chunksize Incorrect Parameter Documentation",
      "target": "dask.array.overlap.ensure_minimum_chunksize",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `ensure_minimum_chunksize` incorrectly describes the `size` parameter as \"The maximum size of any chunk\" when it should be \"The minimum size of any chunk\".",
      "package": "dask",
      "file_name": "bug_report_dask_array_overlap_ensure_minimum_chunksize_2025-09-25_10-36_2aox.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_overlap_ensure_minimum_chunksize_2025-09-25_10-36_2aox.md",
      "call_id": "76a7e9a6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.slicing normalize_slice Empty Slice Mishandling",
      "target": "dask.array.slicing.normalize_slice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`normalize_slice` incorrectly normalizes negative-indexed slices with negative step when start equals stop, producing a non-empty slice instead of an empty one. This causes dask.array to return different results than NumPy for certain edge case slices.",
      "package": "dask",
      "file_name": "bug_report_dask_array_normalize_slice_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_normalize_slice_2025-09-25_00-00_k3f9.md",
      "call_id": "2483139c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.slicing.check_index Misleading Error Message",
      "target": "dask.array.slicing.check_index",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `check_index` function in `dask.array.slicing` raises an error when a boolean index array size doesn't match the expected dimension size. However, the error message incorrectly says the array is \"not long enough\" even when the array is actually too long (larger than the dimension size).",
      "package": "dask",
      "file_name": "bug_report_dask_array_check_index_2025-09-25_00-00_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_check_index_2025-09-25_00-00_k7m3.md",
      "call_id": "39d2b030",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.array.squeeze IndexError on Invalid Axis",
      "target": "dask.array.squeeze",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`dask.array.squeeze` raises `IndexError` instead of `AxisError` (or `ValueError`) when called with an out-of-bounds axis parameter, breaking compatibility with NumPy's behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_array_squeeze_2025-09-25_03-06_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_squeeze_2025-09-25_03-06_k8m2.md",
      "call_id": "24f7b745",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag accumulate_part returns wrong tuple size",
      "target": "dask.bag.core.accumulate_part",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `accumulate_part` helper function has a syntax error due to missing parentheses, causing it to return a 3-tuple instead of a 2-tuple when `is_first=True` and the result list is empty. This breaks the accumulate operation.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_accumulate_tuple_bug_2025-09-25_02-39_m4k7.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_accumulate_tuple_bug_2025-09-25_02-39_m4k7.md",
      "call_id": "b0565b30",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag frequencies() docstring syntax error",
      "target": "dask.bag.Bag.frequencies",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `Bag.frequencies()` contains invalid Python syntax in its example output, using a comma instead of a colon in a dictionary literal.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_frequencies_docstring_2025-09-25_02-38_x7k4.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_frequencies_docstring_2025-09-25_02-38_x7k4.md",
      "call_id": "b89a3c96",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.frequencies Invalid Python Syntax in Docstring",
      "target": "dask.bag.Bag.frequencies",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `frequencies` method in dask.bag has a syntax error in its docstring example. The expected output shows `{'Alice': 2, 'Bob', 1}` which is invalid Python syntax (missing colon after `'Bob'`). This should be `{'Alice': 2, 'Bob': 1}`.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_frequencies_docstring_2025-09-25_04-06_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_frequencies_docstring_2025-09-25_04-06_x7k2.md",
      "call_id": "dd82c3e3",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.join AttributeError in Error Message",
      "target": "dask.bag.Bag.join",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `join` method in dask.bag has a bug in its error handling code that causes an `AttributeError` when trying to raise a `TypeError` for invalid input. The error message tries to access `type(other).__name` instead of `type(other).__name__`, which is not a valid attribute.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_join_attribute_error_2025-09-25_04-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_join_attribute_error_2025-09-25_04-06_k3m9.md",
      "call_id": "7a2de462",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.take Returns Fewer Elements Than Requested",
      "target": "dask.bag.Bag.take",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `take` method returns fewer elements than requested when `k` exceeds the size of the first partition, even when the bag contains sufficient total elements.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_take_insufficient_elements_2025-09-25_01-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_take_insufficient_elements_2025-09-25_01-00_k3m9.md",
      "call_id": "3a6617e2",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.var Division by Zero",
      "target": "dask.bag.Bag.var",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Bag.var()` method crashes with `ZeroDivisionError` when the number of elements equals the degrees of freedom parameter (`n == ddof`). This occurs because the variance aggregation function divides by `(n - ddof)` without checking if it equals zero.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_var_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_var_2025-09-25_00-00_a1b2.md",
      "call_id": "d9b47625",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.var Division by Zero",
      "target": "dask.bag.Bag.var",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Bag.var()` method crashes with `ZeroDivisionError` when `ddof == n` or when called on an empty bag.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_var_division_by_zero_2025-09-25_00-01_k3m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_var_division_by_zero_2025-09-25_00-01_k3m2.md",
      "call_id": "9c39f2f4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.Bag.var Negative Variance",
      "target": "dask.bag.Bag.var",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Bag.var()` method returns negative variance when `ddof > n`, which violates the mathematical property that variance must always be non-negative.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_var_negative_variance_2025-09-25_00-00_a7x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_var_negative_variance_2025-09-25_00-00_a7x9.md",
      "call_id": "2eff11ca",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.chunk var_aggregate Numerical Instability",
      "target": "dask.bag.chunk.var_aggregate",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The variance calculation in `dask.bag.chunk.var_aggregate` uses a numerically unstable formula that produces negative variance values and incorrect results for datasets with large values or small variance.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_variance_2025-09-25_07-07_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_variance_2025-09-25_07-07_x3k9.md",
      "call_id": "a1aed489",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bag.from_sequence npartitions Parameter Not Respected",
      "target": "dask.bag.from_sequence",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `from_sequence` function does not respect the `npartitions` parameter. When creating a bag with a specified number of partitions, the actual number of partitions created can be significantly different from what was requested, violating the API contract.",
      "package": "dask",
      "file_name": "bug_report_dask_bag_from_sequence_2025-09-25_09-05_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bag_from_sequence_2025-09-25_09-05_k8j3.md",
      "call_id": "29fa0da0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.base.key_split UnicodeDecodeError",
      "target": "dask.base.key_split",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`key_split` crashes with `UnicodeDecodeError` when given bytes that are not valid UTF-8, despite explicitly supporting bytes inputs in its docstring.",
      "package": "dask",
      "file_name": "bug_report_dask_key_split_unicode_2025-09-25_01-05_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_key_split_unicode_2025-09-25_01-05_x7k3.md",
      "call_id": "a745fe58",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes Blocksize Calculation Quadratic Time Complexity",
      "target": "dask.bytes.core.read_bytes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The blocksize calculation loop in `read_bytes` has O(size/blocksize) time complexity, causing practical hangs or extremely slow performance when reading large files with small blocksizes.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_blocksize_2025-09-25_10-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_blocksize_2025-09-25_10-30_k3m9.md",
      "call_id": "05ad63a6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.core Infinite Loop in Blocksize Calculation",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `read_bytes` function in `dask.bytes.core` contains an infinite loop when calculating block offsets for certain combinations of file size and blocksize, due to floating-point arithmetic issues.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_infinite_loop_2025-09-25_09-10_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_infinite_loop_2025-09-25_09-10_x7k3.md",
      "call_id": "c24ec18f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.core.read_block Length None Without Delimiter",
      "target": "dask.bytes.core.read_block",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `read_block` function raises `AssertionError` when `length=None` and `delimiter=None`, despite the docstring explicitly stating that `length=None` should \"read through end of file if None\".",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_read_block_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_read_block_2025-09-25_00-00_k3x9.md",
      "call_id": "092d64ab",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.core.read_bytes not_zero Parameter Creates Invalid Blocks",
      "target": "dask.bytes.core.read_bytes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `not_zero=True` and the first block would normally have length 1, the blocksize calculation produces invalid results: zero-length blocks and duplicate offsets.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_not_zero_2025-09-25_15-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_not_zero_2025-09-25_15-30_k3f9.md",
      "call_id": "c920789c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_block Data Loss at End of File",
      "target": "dask.bytes.core.read_block",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_block` function silently loses data at the end of a file when reading in blocks with a delimiter. When the remaining data after a delimiter is less than the requested block size, the function returns an empty byte string instead of the remaining data, causing data loss.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_read_block_2025-09-25_09-03_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_read_block_2025-09-25_09-03_k7m3.md",
      "call_id": "c7c3f1c8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes Block Size Precision Error",
      "target": "dask.bytes.core.read_bytes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_bytes` function uses float division to calculate adjusted block sizes when a file size is not evenly divisible by the requested block size. This causes precision errors in offset calculations, leading to incorrect block boundaries and potential data integrity issues.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_blocksize_precision_2025-09-25_02-01_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_blocksize_precision_2025-09-25_02-01_k3f8.md",
      "call_id": "3939c3d0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes Delimiter Sampling",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using `read_bytes` with a delimiter and sample size, if the entire file fits within the first read operation, the returned sample incorrectly includes data after the first delimiter instead of stopping at it.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_delimiter_sampling_2025-09-25_04-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_delimiter_sampling_2025-09-25_04-02_k3m9.md",
      "call_id": "d2e2f29a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes Duplicate Offsets with not_zero Parameter",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_bytes` function in `dask.bytes.core` can generate duplicate offsets when `not_zero=True` and the file size is small relative to the blocksize. This violates the invariant that offsets should be strictly increasing, which could lead to incorrect block reading behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_read_bytes_offset_duplicate_2025-09-25_00-00_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_read_bytes_offset_duplicate_2025-09-25_00-00_k3f8.md",
      "call_id": "647348c2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes Float Division Causes Incorrect Block Offsets",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_bytes` function uses float division to calculate adjusted block sizes, which causes block offsets to be calculated incorrectly. This creates gaps or overlaps in block boundaries, violating the fundamental expectation that all file bytes should be read exactly once.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_float_division_2025-09-25_06-14_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_float_division_2025-09-25_06-14_k3f9.md",
      "call_id": "f0fb4c53",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes Float Division in Block Size Calculation",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_bytes` function uses float division instead of integer division when calculating adjusted block sizes, violating the principle that byte offsets should always be integers. This produces semantically incorrect offset values that differ from proper integer arithmetic by up to tens of bytes.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_blocksize_float_division_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_blocksize_float_division_2025-09-25_00-00_k3f9.md",
      "call_id": "07fe971b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes not_zero Parameter Causes Empty Blocks",
      "target": "dask.bytes.core.read_bytes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `read_bytes` is called with `not_zero=True` on a file where the first block size would be 1 byte, the function produces an empty block instead of skipping just the first byte. This results in data loss and violates the expected behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_not_zero_2025-09-25_10-30_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_not_zero_2025-09-25_10-30_k3j9.md",
      "call_id": "8fb3c9a9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.bytes.read_bytes sample=0 Returns Integer Instead of Bytes",
      "target": "dask.bytes.read_bytes",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `read_bytes` is called with `sample=0`, it returns the integer `0` instead of an empty bytes object `b''`, violating the documented return type.",
      "package": "dask",
      "file_name": "bug_report_dask_bytes_read_bytes_sample_zero_2025-09-25_06-09_rviq.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_bytes_read_bytes_sample_zero_2025-09-25_06-09_rviq.md",
      "call_id": "d2e04acf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.callbacks.Callback Multiple Instances Unregister",
      "target": "dask.callbacks.Callback",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When multiple `Callback` instances with identical callback functions are registered, calling `unregister()` on one instance causes subsequent `unregister()` calls on other instances to raise a `KeyError`.",
      "package": "dask",
      "file_name": "bug_report_dask_callbacks_unregister_2025-09-25_07-35_4ho3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_callbacks_unregister_2025-09-25_07-35_4ho3.md",
      "call_id": "bbc271e3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Addition with Mismatched Indices and Integer Overflow",
      "target": "dask.dataframe",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When adding two Dask DataFrames with mismatched lengths and values near the int64 overflow boundary, Dask produces incorrect results that differ from pandas. Specifically, the sign of the result can be flipped in some partitions.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_addition_overflow_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_addition_overflow_2025-09-25_00-00_k3m9.md",
      "call_id": "c31e6f70",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe DataFrame.nlargest() Crashes When Followed by Column Selection",
      "target": "dask.dataframe.DataFrame.nlargest()",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `DataFrame.nlargest(n, column)[column].compute()` crashes with `TypeError: Series.nlargest() got an unexpected keyword argument 'columns'`. The lazy evaluation incorrectly tries to apply DataFrame.nlargest parameters to a Series operation.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_nlargest_column_selection_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_nlargest_column_selection_2025-09-25_00-00_a7f2.md",
      "call_id": "dc8d40b7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Integer Overflow in Aggregation Operations",
      "target": "dask.dataframe.DataFrame.sum()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Dask and pandas produce different results when performing aggregation operations (sum, mean) on large integers that cause overflow, violating the fundamental contract that dask.dataframe should match pandas.dataframe behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_integer_overflow_2025-09-25_00-00_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_integer_overflow_2025-09-25_00-00_k3f8.md",
      "call_id": "afea5b49",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Multiplication with Mismatched Indices and Integer Overflow",
      "target": "dask.dataframe",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When multiplying two Dask DataFrames with mismatched lengths and values that cause int64 overflow, Dask produces incorrect results that differ from pandas. The sign of the result is flipped in some partitions.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_multiplication_overflow_2025-09-25_00-02_m3n7.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_multiplication_overflow_2025-09-25_00-02_m3n7.md",
      "call_id": "25e88f15",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Quantile Calculation Produces Incorrect and Unordered Results",
      "target": "dask.dataframe.Series.quantile",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quantile()` method in dask.dataframe produces incorrect quantile values that can violate the fundamental mathematical property that quantiles must be ordered (Q25 \u2264 Q50 \u2264 Q75). This leads to incorrect statistical calculations and violates basic expectations about quantile behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_quantile_ordering_2025-09-25_04-06_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_quantile_ordering_2025-09-25_04-06_x3k9.md",
      "call_id": "fb1138a3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Series.str.upper() Incorrect Unicode Handling",
      "target": "dask.dataframe.Series.str.upper()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.Series.str.upper()` does not match pandas behavior for German \u00df character. Dask converts `'\u00df'` to capital \u00df (`'\u1e9e'`, U+1E9E), while pandas follows the traditional German convention of converting to `'SS'`.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_str_upper_unicode_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_str_upper_unicode_2025-09-25_00-00_k3m9.md",
      "call_id": "f5b3710e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe String Dtype Not Preserved in Round-Trip",
      "target": "dask.dataframe.from_pandas()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When converting a pandas DataFrame with object-dtype string columns to dask and back via `from_pandas().compute()`, the string columns are converted from `object` dtype to `string[pyarrow]` dtype, violating the round-trip property.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_string_dtype_2025-09-25_00-00_m7x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_string_dtype_2025-09-25_00-00_m7x2.md",
      "call_id": "6e372bd3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe Subtraction with Mismatched Indices and Integer Overflow",
      "target": "dask.dataframe",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When subtracting two Dask DataFrames with mismatched lengths and values near the int64 overflow boundary, Dask produces incorrect results that differ from pandas. The sign of the result is flipped in some partitions.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_subtraction_overflow_2025-09-25_00-01_h7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_subtraction_overflow_2025-09-25_00-01_h7k2.md",
      "call_id": "26a9f061",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe reset_index Produces Duplicate Indices",
      "target": "dask.dataframe.DataFrame.reset_index",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When calling `reset_index(drop=True)` on a Dask DataFrame with multiple partitions, each partition independently resets its index starting from 0, resulting in duplicate indices in the final computed result. This differs from pandas, which creates a sequential index across the entire DataFrame.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_reset_index_2025-09-25_00-03_p4q8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_reset_index_2025-09-25_00-03_p4q8.md",
      "call_id": "14c2bc2f",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe tail() missing npartitions parameter",
      "target": "dask.dataframe.DataFrame.tail()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `tail()` method lacks the `npartitions` parameter that `head()` has, creating an API asymmetry and limiting functionality. This prevents users from retrieving the last n rows across multiple partitions.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_tail_npartitions_2025-09-25_08-03_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_tail_npartitions_2025-09-25_08-03_k7m2.md",
      "call_id": "68963f79",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.DataFrame.reset_index Produces Duplicate Index Values",
      "target": "dask.dataframe.DataFrame.reset_index",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `reset_index(drop=True)` is called on a multi-partition Dask DataFrame, each partition independently resets its index to start from 0, resulting in duplicate index values. This violates pandas semantics where `reset_index(drop=True)` creates a continuous RangeIndex.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_reset_index_2025-09-25_05-32_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_reset_index_2025-09-25_05-32_k3m9.md",
      "call_id": "864e2512",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr Groupby Split Calculation Returns Negative Value",
      "target": "dask.dataframe.dask_expr._groupby._adjust_split_out_for_group_keys",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The function `_adjust_split_out_for_group_keys` can return negative values when called with an empty `by` list (`len(by) == 0`), due to missing input validation. This function is used to calculate the number of output partitions for groupby operations.",
      "package": "dask",
      "file_name": "bug_report_dask_groupby_split_out_negative_2025-09-25_04-06_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_groupby_split_out_negative_2025-09-25_04-06_k9m3.md",
      "call_id": "9fc8fec8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr Integer Overflow to String Conversion",
      "target": "dask.dataframe.dask_expr.from_pandas",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a pandas Series contains integers that overflow int64 (e.g., `-9223372036854775809`), `from_pandas` incorrectly converts them to PyArrow strings instead of preserving the object dtype. This results in data corruption where integer values become strings.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_int_overflow_string_conversion_2025-09-25_04-32_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_int_overflow_string_conversion_2025-09-25_04-32_k7m9.md",
      "call_id": "b8dcbb2e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr LRU Cache Incorrect Eviction",
      "target": "dask.dataframe.dask_expr._util.LRU",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The LRU cache incorrectly evicts items when updating an existing key, even when the cache is not full. This violates the LRU invariant that the cache should only evict items when it exceeds maxsize with a NEW insertion.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_lru_eviction_2025-09-25_01-31_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_lru_eviction_2025-09-25_01-31_k3m9.md",
      "call_id": "8c155e6e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr NLargest Column Selection",
      "target": "dask.dataframe.dask_expr._reductions.NLargest",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `.compute()` on the result of `df.nlargest(n, column)[column]` crashes with `TypeError: Series.nlargest() got an unexpected keyword argument 'columns'`. This occurs because when a column is selected from a DataFrame.nlargest() result, dask incorrectly passes the DataFrame's `columns` parameter to the underlying pandas Series.nlargest() method, which doesn't accept that argument.",
      "package": "dask",
      "file_name": "bug_report_dask_nlargest_column_selection_2025-09-25_09-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_nlargest_column_selection_2025-09-25_09-15_k3m9.md",
      "call_id": "c24d2532",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr Repartition Division Count Mismatch",
      "target": "dask.dataframe.dask_expr._repartition.Repartition",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When repartitioning a DataFrame to a specific number of partitions using `repartition(npartitions=N)`, the actual number of partitions created can be less than `N` when the DataFrame has few rows. This violates the API contract and the fundamental invariant that `npartitions == len(divisions) - 1`.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_repartition_division_count_2025-09-25_04-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_repartition_division_count_2025-09-25_04-00_k3m9.md",
      "call_id": "abd04133",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr Rolling Window with Timedelta and center=True",
      "target": "dask.dataframe.dask_expr._rolling.RollingReduction._lower",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`DataFrame.rolling()` crashes with `TypeError` when using a string/timedelta window (e.g., '2h') with `center=True`. The code attempts integer division on a string, which pandas supports but dask does not handle correctly.",
      "package": "dask",
      "file_name": "bug_report_dask_rolling_center_timedelta_2025-09-25_10-06_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_rolling_center_timedelta_2025-09-25_10-06_x7k9.md",
      "call_id": "064024e1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr Series Quantile Mutates Input Array",
      "target": "dask.dataframe.dask_expr._quantile.SeriesQuantile.q",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `SeriesQuantile.q` cached property can mutate the user's input array when `q` is provided as a numpy array. This happens because `np.array()` does not always create a copy (especially in older NumPy versions), and the subsequent in-place sort modifies the original array.",
      "package": "dask",
      "file_name": "bug_report_dask_quantile_array_mutation_2025-09-25_04-06_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_quantile_array_mutation_2025-09-25_04-06_x7k2.md",
      "call_id": "a9fc983a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr._repartition._clean_new_division_boundaries Multiple Logic Bugs",
      "target": "dask.dataframe.dask_expr._repartition._clean_new_division_boundaries",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_clean_new_division_boundaries` function has multiple logic bugs that violate fundamental invariants: (1) it can produce non-monotonic boundaries, (2) it doesn't ensure the last boundary equals `frame_npartitions` when inputs exceed it, and (3) it loses boundaries by replacing instead of appending.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_clean_boundaries_2025-09-25_06-02_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_clean_boundaries_2025-09-25_06-02_x3k9.md",
      "call_id": "1984d89c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr.from_pandas Large Integer Type Conversion",
      "target": "dask.dataframe.dask_expr.from_pandas",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `from_pandas()` processes a DataFrame containing integers that exceed int64 range (stored in object dtype columns), it incorrectly converts them to strings, breaking arithmetic operations and changing data types.",
      "package": "dask",
      "file_name": "bug_report_dask_from_pandas_large_int_2025-09-25_02-35_k7j3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_from_pandas_large_int_2025-09-25_02-35_k7j3.md",
      "call_id": "0762f4ac",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr.io.bag.to_bag format='frame' Returns Column Names Instead of DataFrames",
      "target": "dask.dataframe.dask_expr.io.bag.to_bag",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_bag` function with `format='frame'` returns a Bag containing column names (strings) instead of DataFrame partitions. According to the docstring, `format='frame'` should return \"dataframe-like objects\" where \"the original partitions of df will not be transformed in any way\", but instead it iterates over the DataFrame partitions yielding column names.",
      "package": "dask",
      "file_name": "bug_report_dask_to_bag_frame_format_2025-09-25_08-10_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_to_bag_frame_format_2025-09-25_08-10_x9k2.md",
      "call_id": "e215db17",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.dask_expr.memory_repr Returns None for Large Values",
      "target": "dask.dataframe.dask_expr.memory_repr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `memory_repr` function returns `None` instead of a string when the input value exceeds 1024 TB (1024^5 bytes), violating the function's implicit contract of always returning a string representation.",
      "package": "dask",
      "file_name": "bug_report_dask_expr_memory_repr_2025-09-25_01-01_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_expr_memory_repr_2025-09-25_01-01_k9x3.md",
      "call_id": "c314a3c9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.from_pandas Crashes on Surrogate Characters",
      "target": "dask.dataframe.from_pandas",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.from_pandas` crashes with a `UnicodeEncodeError` when converting pandas DataFrames containing string columns with Unicode surrogate characters (e.g., `\\ud800`), despite these being valid pandas DataFrames.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_from_pandas_surrogate_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_from_pandas_surrogate_2025-09-25_00-00_k3m9.md",
      "call_id": "967ad30f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.from_pandas Silently Changes Dtype",
      "target": "dask.dataframe.from_pandas",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `from_pandas` function silently converts object dtype columns to string[pyarrow] dtype, violating the round-trip property and contradicting user expectations. This behavior is undocumented and breaks code that depends on dtype preservation.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_from_pandas_2025-09-25_10-07_owj7.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_from_pandas_2025-09-25_10-07_owj7.md",
      "call_id": "bc4da9b2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.from_pandas Silently Converts String Dtypes",
      "target": "dask.dataframe.from_pandas",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.from_pandas` followed by `.compute()` does not preserve the original dtypes of string columns. Object-dtype string columns are silently converted to PyArrow-backed StringDtype, violating the round-trip property.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_from_pandas_dtype_2025-09-25_03-38_m3p8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_from_pandas_dtype_2025-09-25_03-38_m3p8.md",
      "call_id": "a334896e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.from_pandas Silently Corrupts Mixed-Type Object Columns",
      "target": "dask.dataframe.from_pandas",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.from_pandas` silently corrupts data when converting pandas DataFrames with mixed-type object columns. Non-string values in object columns are converted to strings, causing the round-trip property `from_pandas(df).compute() == df` to fail with silent data corruption.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_from_pandas_dtype_conversion_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_from_pandas_dtype_conversion_2025-09-25_00-00_x7k9.md",
      "call_id": "93e719fa",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.from_pandas Unicode Surrogate Crash",
      "target": "dask.dataframe.from_pandas",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.from_pandas` crashes with a UnicodeEncodeError when the input pandas DataFrame contains Unicode surrogate characters, even though pandas itself supports storing such characters.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_from_pandas_surrogate_2025-09-25_03-38_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_from_pandas_surrogate_2025-09-25_03-38_k7x9.md",
      "call_id": "dd6c128e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.hyperloglog compute_first_bit",
      "target": "dask.dataframe.hyperloglog.compute_first_bit",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `compute_first_bit` function in HyperLogLog computes the position of the **rightmost** set bit + 1, but the HyperLogLog algorithm requires the number of **leading zeros** + 1. This fundamental error affects cardinality estimation accuracy.",
      "package": "dask",
      "file_name": "bug_report_dask_hyperloglog_compute_first_bit_2025-09-25_04-06_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_hyperloglog_compute_first_bit_2025-09-25_04-06_x3m9.md",
      "call_id": "13df3254",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io read_json Creates Duplicate Indices",
      "target": "dask.dataframe.io.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When reading JSON files written by `to_json` with multiple partitions, `read_json` creates duplicate indices. Each partition's index starts from 0, causing index values to be duplicated across partitions instead of being sequential.",
      "package": "dask",
      "file_name": "bug_report_dask_io_json_duplicate_indices_2025-09-25_04-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_io_json_duplicate_indices_2025-09-25_04-06_k3m9.md",
      "call_id": "b57f9cf6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io sorted_division_locations Docstring Examples Fail",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains examples using plain Python lists, but these examples fail with `TypeError: No dispatch for <class 'list'>` because the `tolist` dispatch function is not registered for Python lists.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_tolist_2025-09-25_06-21_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_tolist_2025-09-25_06-21_x9k3.md",
      "call_id": "927cd525",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.io.sorted_division_locations - Docstring Examples Fail",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function has docstring examples that demonstrate usage with plain Python lists, but the function crashes with `TypeError: No dispatch for <class 'list'>` when given a list as input.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_2025-09-25_00-00_k3x9.md",
      "call_id": "636c1861",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc ArrowORCEngine Opens Wrong File",
      "target": "dask.dataframe.io.orc.arrow.ArrowORCEngine.read_metadata",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `split_stripes=False`, the `read_metadata` method opens `paths[0]` instead of the current `path` in the loop, causing it to always read the schema from the first file rather than the current file being processed.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_wrong_file_2025-09-25_00-01_m7x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_wrong_file_2025-09-25_00-01_m7x2.md",
      "call_id": "e4d38977",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc ArrowORCEngine._aggregate_files TypeError with None Stripes",
      "target": "dask.dataframe.io.orc.arrow.ArrowORCEngine._aggregate_files",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ArrowORCEngine._aggregate_files` crashes with TypeError when `aggregate_files=True`, `split_stripes > 1`, and parts contain `None` stripe values (which occurs when `split_stripes=False` in `read_metadata`).",
      "package": "dask",
      "file_name": "bug_report_dask_io_orc_aggregate_files_typeerror_2025-09-25_09-05_x9m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_io_orc_aggregate_files_typeerror_2025-09-25_09-05_x9m3.md",
      "call_id": "72fffe56",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Columns List Mutation",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates the `columns` parameter list by appending the index column, violating the principle that function parameters should not be modified unless explicitly documented.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_columns_mutation_2025-09-25_02-12_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_columns_mutation_2025-09-25_02-12_k8f3.md",
      "call_id": "f0a54b7a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Columns Parameter Mutation",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates its `columns` parameter by appending the index column to it, violating Python's convention that function parameters should not be modified unless explicitly documented.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_columns_mutation_2025-09-25_04-30_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_columns_mutation_2025-09-25_04-30_k7m3.md",
      "call_id": "4868593b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Empty DataFrame Crash",
      "target": "dask.dataframe.io.orc.read_orc",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `read_orc` function crashes with `ValueError: All iterables must have a non-zero length` when reading ORC files written from empty DataFrames, despite empty DataFrames being valid and `to_orc` successfully writing them.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_empty_dataframe_2025-09-25_00-00_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_empty_dataframe_2025-09-25_00-00_k7x9.md",
      "call_id": "a6f4b751",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Index Corruption in Multi-Partition Round-Trip",
      "target": "dask.dataframe.io.orc.read_orc",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing a multi-partition Dask DataFrame to ORC without the index (`write_index=False`) and reading it back, the resulting index contains duplicate values instead of a sequential RangeIndex, causing silent data corruption.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_index_2025-09-25_11-05_wzk8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_index_2025-09-25_11-05_wzk8.md",
      "call_id": "a7ff4565",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Index Duplication",
      "target": "dask.dataframe.io.orc.to_orc",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing a Dask DataFrame with `write_index=False` and reading it back, the resulting DataFrame has duplicate index values instead of a continuous RangeIndex. Each partition's index is reset independently, causing index values to repeat across partitions.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_index_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_index_2025-09-25_00-00_x7k9.md",
      "call_id": "15c39625",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Index Preservation in Multi-Partition Write/Read",
      "target": "dask.dataframe.io.orc",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing a Dask DataFrame to ORC files with multiple partitions using `write_index=True`, and then reading it back, the index values are not preserved correctly. Each partition's index is reset to start at 0, causing silent data corruption.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_index_preservation_2025-09-25_02-15_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_index_preservation_2025-09-25_02-15_k7x9.md",
      "call_id": "892e556d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc Schema Validation Bypass",
      "target": "dask.dataframe.io.orc.arrow.ArrowORCEngine.read_metadata",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `split_stripes=False`, the `read_metadata` method fails to validate schema consistency across multiple ORC files, always checking only the first file's schema instead of each file individually.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_schema_2025-09-25_02-12_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_schema_2025-09-25_02-12_x3k9.md",
      "call_id": "2408f9f8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc _read_orc Mutates columns Parameter",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function in `dask/dataframe/io/orc/core.py` mutates the `columns` parameter by calling `columns.append(index)`, violating the principle that function parameters should not be mutated unless explicitly documented.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_orc_columns_mutation_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_orc_columns_mutation_2025-09-25_00-00_k3x9.md",
      "call_id": "d634b7c9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc._read_orc Columns Parameter Mutation",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates the `columns` parameter by appending the `index` to it, violating the principle that function parameters should not be modified.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_columns_mutation_2025-09-25_08-41_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_columns_mutation_2025-09-25_08-41_x7k9.md",
      "call_id": "47952e04",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc._read_orc Mutates Columns Parameter",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates the `columns` list parameter by appending the index column to it, violating the principle that functions should not have side effects on input parameters.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_columns_mutation_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_columns_mutation_2025-09-25_00-00_k3m9.md",
      "call_id": "2343069c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc._read_orc Mutates Input Columns List",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates its input `columns` list by appending the `index` parameter to it, violating the principle that functions should not mutate their inputs unless explicitly documented.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_columns_mutation_2025-09-25_06-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_columns_mutation_2025-09-25_06-02_k3m9.md",
      "call_id": "c637d252",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc._read_orc Mutates Input Columns List",
      "target": "dask.dataframe.io.orc.core._read_orc",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_read_orc` function mutates the input `columns` list by appending the `index` column to it, violating the principle that functions should not modify their arguments.",
      "package": "dask",
      "file_name": "bug_report_dask_io_orc_read_orc_mutation_2025-09-25_09-05_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_io_orc_read_orc_mutation_2025-09-25_09-05_a7k2.md",
      "call_id": "40dcdc43",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.orc.read_orc Index Column Not in Columns List",
      "target": "dask.dataframe.io.orc.read_orc",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When calling `read_orc()` with a `columns` parameter that does not include the column specified as `index`, the function crashes with a KeyError instead of automatically including the index column in the read operation.",
      "package": "dask",
      "file_name": "bug_report_dask_orc_index_columns_2025-09-25_04-06_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_orc_index_columns_2025-09-25_04-06_x3k9.md",
      "call_id": "631f8ae5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet _DNF.combine Lacks Associativity",
      "target": "dask.dataframe.dask_expr.io.parquet._DNF.combine",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_DNF.combine` method does not satisfy the associativity property, causing `(a.combine(b)).combine(c)` to produce different filter results than `a.combine(b.combine(c))`. This can lead to incorrect query results when filters are combined in different orders.",
      "package": "dask",
      "file_name": "bug_report_dask_dnf_combine_associativity_2025-09-25_02-32_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dnf_combine_associativity_2025-09-25_02-32_k8f3.md",
      "call_id": "faebc9df",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet _aggregate_columns Infinite Loop",
      "target": "dask.dataframe.dask_expr.io.parquet._aggregate_columns",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_aggregate_columns` function enters an infinite loop when called with an empty list as input due to a logic error in the loop termination condition.",
      "package": "dask",
      "file_name": "bug_report_dask_aggregate_columns_2025-09-25_12-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_aggregate_columns_2025-09-25_12-00_a7b3.md",
      "call_id": "52b9c484",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet _aggregate_stats Missing Column Name",
      "target": "dask.dataframe.io.parquet.utils._aggregate_stats",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_aggregate_stats` function in `dask/dataframe/io/parquet/utils.py` creates column statistics dictionaries without a 'name' field when `min == max` and `null_count > 0`. This causes KeyError when downstream code attempts to access the column name.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_aggregate_stats_missing_name_2025-09-25_02-40_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_aggregate_stats_missing_name_2025-09-25_02-40_k7m2.md",
      "call_id": "a9df1a68",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet _normalize_and_strip_protocol Empty String",
      "target": "dask.dataframe.dask_expr.io.parquet._normalize_and_strip_protocol",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_normalize_and_strip_protocol` function returns empty strings for valid filesystem root paths like \"/\" or \"///\", which are invalid paths that will cause downstream failures.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_normalize_path_empty_string_2025-09-25_09-07_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_normalize_path_empty_string_2025-09-25_09-07_k3x9.md",
      "call_id": "77fed3a9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet _normalize_and_strip_protocol Empty String",
      "target": "dask.dataframe.io.parquet._normalize_and_strip_protocol",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_normalize_and_strip_protocol` function can return a list containing empty strings when given paths that consist only of slashes (e.g., `\"/\"`, `\"///\"`, or protocol-only paths like `\"file:///\"`). This violates the reasonable expectation that normalized paths should be non-empty strings.",
      "package": "dask",
      "file_name": "bug_report_dask_normalize_and_strip_protocol_2025-09-25_06-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_normalize_and_strip_protocol_2025-09-25_06-02_k3m9.md",
      "call_id": "f6735e32",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet apply_filters Empty List",
      "target": "dask.dataframe.io.parquet.core.apply_filters",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `apply_filters` function crashes with an `IndexError` when given an empty filters list, instead of returning all parts as expected.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_apply_filters_empty_2025-09-25_11-30_a3f8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_apply_filters_empty_2025-09-25_11-30_a3f8.md",
      "call_id": "b9e03ec7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet apply_filters IndexError on Empty Filters",
      "target": "dask.dataframe.io.parquet.core.apply_filters",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `apply_filters` function crashes with an `IndexError` when called with an empty `filters` list, even though this is a valid input according to the function's documented behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_apply_filters_empty_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_apply_filters_empty_2025-09-25_00-00_k3m9.md",
      "call_id": "1b09eb85",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet apply_filters TypeError with Partial None Values",
      "target": "dask.dataframe.io.parquet.core.apply_filters",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `apply_filters` function crashes with a TypeError when parquet statistics have only one of min or max as None (partial None values). Despite a comment claiming \"min/max cannot be None for remaining checks\" (line 531), the code doesn't validate this before performing comparisons, leading to crashes when comparing None with integers.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_apply_filters_none_2025-09-25_01-06_p7k4.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_apply_filters_none_2025-09-25_01-06_p7k4.md",
      "call_id": "c65cd776",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet sorted_columns AssertionError with Invalid Statistics",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with an `AssertionError` when given statistics where `min > max` in a column, rather than gracefully handling or rejecting the invalid data.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_assertion_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_assertion_2025-09-25_00-01_x7k9.md",
      "call_id": "716c963f",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet sorted_columns TypeError",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with a `TypeError` when comparing integer min values with None max values in column statistics.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_sorted_columns_type_2025-09-25_11-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_sorted_columns_type_2025-09-25_11-30_x7k9.md",
      "call_id": "473fa090",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet sorted_columns TypeError with None Values",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with a TypeError when parquet statistics contain None values for min or max fields. This occurs because the function checks for None in the min field but fails to validate None in the max field before performing comparisons and sorting operations.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_sorted_columns_none_2025-09-25_01-05_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_sorted_columns_none_2025-09-25_01-05_k8m3.md",
      "call_id": "fd209b8c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.core sorted_columns Assertion Failure",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with an AssertionError when processing row group statistics where a row group has `min > max` according to the comparison operator. This occurs at line 442 where the function asserts that divisions are sorted, but this assumption can be violated.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_assertion_2025-09-25_09-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_assertion_2025-09-25_09-30_x7k9.md",
      "call_id": "6a1cb69d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.core.apply_filters IndexError on Empty Filters",
      "target": "dask.dataframe.io.parquet.core.apply_filters",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `apply_filters` function crashes with an `IndexError` when passed an empty filters list, despite empty filters being a valid input that should return all parts unfiltered.",
      "package": "dask",
      "file_name": "bug_report_dask_apply_filters_empty_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_apply_filters_empty_2025-09-25_00-00_k3x9.md",
      "call_id": "7b5086be",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.core.sorted_columns Assertion Failure with None",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with a TypeError in its internal assertion when divisions contain `None` values, as `None` cannot be compared with integers during sorting.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_none_assertion_2025-09-25_09-06_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_none_assertion_2025-09-25_09-06_x7k2.md",
      "call_id": "706806f4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.core.sorted_columns None Comparison Crash",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with a TypeError when comparing `None` max values with integer min values during statistics processing.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_none_comparison_2025-09-25_09-06_k3m8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_none_comparison_2025-09-25_09-06_k3m8.md",
      "call_id": "d705b9ac",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.core.sorted_columns TypeError with None Values",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with a TypeError when row-group statistics contain None values for max (but not min). The function attempts to sort divisions that include None values, causing Python's sort to fail.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_none_crash_2025-09-25_07-32_x8k4.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_none_crash_2025-09-25_07-32_x8k4.md",
      "call_id": "a42577ba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.utils._normalize_index_columns Allows Column/Index Overlap",
      "target": "dask.dataframe.io.parquet.utils._normalize_index_columns",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_normalize_index_columns` function returns overlapping column and index names when both user parameters are None and the data parameters contain overlapping values. This violates the function's documented invariant that column and index names must not intersect.",
      "package": "dask",
      "file_name": "bug_report_dask_normalize_index_columns_overlap_2025-09-25_07-32_m9p2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_normalize_index_columns_overlap_2025-09-25_07-32_m9p2.md",
      "call_id": "b6eba844",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.parquet.utils._normalize_index_columns Allows Overlapping Columns and Index",
      "target": "dask.dataframe.io.parquet.utils._normalize_index_columns",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_normalize_index_columns` function allows columns and index names to overlap when neither `user_columns` nor `user_index` are specified, violating the invariant that columns and indices must not intersect.",
      "package": "dask",
      "file_name": "bug_report_dask_parquet_normalize_index_columns_2025-09-25_12-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_parquet_normalize_index_columns_2025-09-25_12-00_k3x9.md",
      "call_id": "8506ea4a",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.sorted_division_locations - TypeError with Python lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains examples using Python lists, but the implementation raises `TypeError: No dispatch for <class 'list'>` when called with Python lists. The function only accepts pandas or numpy types, contradicting its own documentation.",
      "package": "dask",
      "file_name": "bug_report_dask_io_sorted_division_locations_2025-09-25_08-04_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_io_sorted_division_locations_2025-09-25_08-04_x7k9.md",
      "call_id": "8a5fda4d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.sorted_division_locations Docstring Examples Don't Work",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `sorted_division_locations` shows examples using plain Python lists, but the function only accepts pandas/numpy/GPU array types. All docstring examples fail with `TypeError: No dispatch for <class 'list'>`.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_14-30_k3m9.md",
      "call_id": "133a8291",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.sorted_division_locations Input Type Mismatch",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `sorted_division_locations` shows examples using plain Python lists, but the implementation only accepts pandas Series, numpy arrays, or other types registered with the `tolist_dispatch`. This creates a mismatch between the documented API and actual behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_03-06_30qy.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_03-06_30qy.md",
      "call_id": "f853e694",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.io.sorted_division_locations TypeError with Plain Lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function crashes with `TypeError: No dispatch for <class 'list'>` when called with plain Python lists, despite its docstring containing multiple examples using plain lists.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_00-00_k3m9.md",
      "call_id": "e4b14e1f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.reset_index Creates Duplicate Index Values",
      "target": "dask.dataframe.DataFrame.reset_index",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When calling `reset_index()` on a dask DataFrame split across multiple partitions, the resulting index contains duplicate values (all 0s) instead of a sequential RangeIndex like pandas produces.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_reset_index_2025-09-25_02-04_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_reset_index_2025-09-25_02-04_k3j9.md",
      "call_id": "37a3b6ae",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.to_numeric Returns Wrong Dtype",
      "target": "dask.dataframe.to_numeric",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`dask.dataframe.to_numeric` returns nullable dtypes (`Int64`, `Float64`) instead of numpy dtypes (`int64`, `float64`) as documented, violating its API contract and differing from pandas behavior.",
      "package": "dask",
      "file_name": "bug_report_dask_to_numeric_dtype_2025-09-25_11-06_cl9b.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_to_numeric_dtype_2025-09-25_11-06_cl9b.md",
      "call_id": "790a3b27",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Division Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function returns bin divisions and output divisions with mismatched lengths when using `closed='right'` and `label='right'` parameters. This violates the expectation that both tuples should have the same length, as they are used together to define partition boundaries.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_division_mismatch_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_division_mismatch_2025-09-25_00-00_k3x9.md",
      "call_id": "ec72b977",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Division Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function returns `newdivs` and `outdivs` with mismatched lengths when certain conditions are met, leading to an AssertionError during computation.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_2025-09-25_12-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_2025-09-25_12-00_k3j9.md",
      "call_id": "76428282",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Division Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function can produce `newdivs` and `outdivs` with different lengths, caused by inconsistent application of the append operation in the boundary adjustment logic.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_length_mismatch_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_length_mismatch_2025-09-25_00-00_x3k9.md",
      "call_id": "387c670a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Duplicate Divisions",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function can produce output divisions (outdivs) with duplicate consecutive elements due to a logic error on line 99 where `setter(outdivs, outdivs[-1])` either creates a duplicate by appending the last element again, or performs a no-op by setting the last element to itself.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_duplicate_divisions_2025-09-25_09-30_k7x3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_duplicate_divisions_2025-09-25_09-30_k7x3.md",
      "call_id": "c0344857",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Incorrect Results for Quarterly Resample",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Quarterly (and other non-Tick frequency) resampling with `closed='right'` and `label='right'` returns incorrect results. The last resample bin contains 0 instead of the correct aggregated value, causing silent data corruption.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_2025-09-25_00-00_k8f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_2025-09-25_00-00_k8f2.md",
      "call_id": "b162cf45",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function returns `newdivs` and `outdivs` tuples with mismatched lengths under certain conditions, violating the invariant that these two outputs should always have the same length.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_length_mismatch_2025-09-25_10-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_length_mismatch_2025-09-25_10-45_k3m9.md",
      "call_id": "736ace4e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Output Divisions Boundary Violation",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function can produce output divisions (`outdivs`) where the first element is before the first input division, extending the time range beyond the input data boundaries.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_boundary_violation_2025-09-25_00-00_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_boundary_violation_2025-09-25_00-00_k9f2.md",
      "call_id": "7fe9af38",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Resample Division Duplicates",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function produces duplicate consecutive timestamps in output divisions when the resampling frequency is larger than the input time range, violating the strict monotonicity requirement for Dask divisions.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_duplicates_2025-09-25_04-03_7x2k.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_duplicates_2025-09-25_04-03_7x2k.md",
      "call_id": "5a5f9db7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Resample Division Monotonicity Violation",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function produces non-monotonic output divisions when using right-closed and right-labeled resampling with certain time ranges and frequencies, violating a fundamental invariant of time series operations.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_monotonic_2025-09-25_04-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_monotonic_2025-09-25_04-02_k3m9.md",
      "call_id": "24ca2e08",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries Resample Repartition Assertion Error",
      "target": "dask.dataframe.dask_expr._repartition.RepartitionToFewer._partitions_boundaries",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When resampling a Dask DataFrame/Series to a larger frequency (e.g., from hourly to daily), the code attempts to use `RepartitionToFewer` which asserts that the number of input partitions must be greater than the number of output partitions. However, resampling can legitimately increase the number of partitions, causing an AssertionError.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_repartition_assertion_2025-09-25_00-01_m9p2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_repartition_assertion_2025-09-25_00-01_m9p2.md",
      "call_id": "9e2d077f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries._resample_bin_and_out_divs Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function can return `newdivs` and `outdivs` tuples with different lengths, violating a critical assumption made by `ResampleAggregation._divisions()` which expects them to have the same length.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_2025-09-25_13-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_2025-09-25_13-45_x7k9.md",
      "call_id": "99318d0c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample - AssertionError on Partition Reduction",
      "target": "dask.dataframe.tseries.resample.Resampler",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Resampler` class fails with an `AssertionError` when resampling a time series that has more partitions than the number of output time bins. This violates the documented behavior that Dask's `Resampler` should match pandas' `Resampler` (indicated by `@derived_from(pd_Resampler)` decorators).",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_partition_reduction_2025-09-25_07-37_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_partition_reduction_2025-09-25_07-37_k8m3.md",
      "call_id": "9069c8f0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample Division Length Mismatch",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function returns tuples `newdivs` and `outdivs` with different lengths when certain combinations of parameters are used. This causes failures in real resampling operations with the error \"Index is not contained within new index.\"",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_division_length_mismatch_2025-09-25_01-33_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_division_length_mismatch_2025-09-25_01-33_k9m2.md",
      "call_id": "cb61ca45",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample Duplicate Divisions",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function generates duplicate timestamps in the `outdivs` tuple when resampling with certain division sizes and rules. This violates Dask's requirement that divisions must be strictly increasing, leading to incorrect DataFrame metadata.",
      "package": "dask",
      "file_name": "bug_report_dask_resample_duplicate_divisions_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_resample_duplicate_divisions_2025-09-25_00-00_x7k9.md",
      "call_id": "f7cc3f6c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample Duplicate Timestamps in Output Divisions",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function produces duplicate timestamps in the `outdivs` output when certain combinations of input parameters are used. Specifically, when the number of output divisions is less than the number of input divisions and `outdivs[-1] < divisions[-1]`, the function appends `temp.index[-1]` to outdivs even though it may already be the last element, creating a duplicate.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_duplicates_2025-09-25_02-33_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_duplicates_2025-09-25_02-33_k9x2.md",
      "call_id": "007f292c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample Non-Monotonic Output Divisions",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function produces non-monotonic output divisions when `label='right'` is combined with certain division patterns, violating the fundamental requirement that divisions must be monotonically increasing.",
      "package": "dask",
      "file_name": "bug_report_dask_resample_monotonicity_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_resample_monotonicity_2025-09-25_00-00_a1b2.md",
      "call_id": "1314756f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample Unsorted Output Divisions",
      "target": "dask.dataframe.tseries.resample._resample_bin_and_out_divs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_resample_bin_and_out_divs` function returns unsorted `outdivs` when `label='right'` and certain time boundary conditions are met, violating the fundamental invariant that divisions must be sorted.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_unsorted_divisions_2025-09-25_14-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_unsorted_divisions_2025-09-25_14-30_k7m2.md",
      "call_id": "5d1a6393",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.tseries.resample _resample_series Month-End Frequency",
      "target": "dask.dataframe.tseries.resample._resample_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`_resample_series` fails with ValueError when resampling with month-end frequency ('ME') or other anchor-based frequencies on data that doesn't span a complete period. The function incorrectly assumes that `pd.date_range(start, end, freq)` will contain all indices created by `series.resample(freq)`, but pandas resample can create indices outside the [start, end] range for anchor-based frequencies.",
      "package": "dask",
      "file_name": "bug_report_dask_tseries_resample_ME_2025-09-25_07-39_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_tseries_resample_ME_2025-09-25_07-39_x8k2.md",
      "call_id": "fbf529f2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.utils._maybe_sort Permanently Mutates Index Names",
      "target": "dask.dataframe.utils._maybe_sort",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`_maybe_sort` permanently changes DataFrame index names when they overlap with column names, instead of temporarily renaming them for sorting. This violates the principle of least surprise and causes unexpected side effects.",
      "package": "dask",
      "file_name": "bug_report_dask_maybe_sort_index_mutation_2025-09-25_08-44_a3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_maybe_sort_index_mutation_2025-09-25_08-44_a3k9.md",
      "call_id": "2da4c69e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.utils.check_matching_columns Treats NaN Column Names as 0",
      "target": "dask.dataframe.utils.check_matching_columns",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`check_matching_columns` incorrectly treats column names containing `NaN` as equivalent to column names with value `0` due to the use of `np.nan_to_num`. This allows DataFrames with mismatched column names to pass validation silently.",
      "package": "dask",
      "file_name": "bug_report_dask_check_matching_columns_nan_2025-09-25_08-43_x7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_check_matching_columns_nan_2025-09-25_08-43_x7m2.md",
      "call_id": "2b8cc8f3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.dataframe.utils.valid_divisions Crashes on Small Inputs",
      "target": "dask.dataframe.utils.valid_divisions",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`valid_divisions` crashes with `IndexError` when given a list with fewer than 2 elements (empty list or single-element list). This violates the function's contract of returning a boolean indicating validity.",
      "package": "dask",
      "file_name": "bug_report_dask_valid_divisions_crash_2025-09-25_08-42_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_valid_divisions_crash_2025-09-25_08-42_k3f8.md",
      "call_id": "564278e6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics ResourceProfiler Type Mismatch in PID Comparison",
      "target": "dask.diagnostics.profile._Tracker._update_pids",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_Tracker` class in `ResourceProfiler` incorrectly compares integer PIDs to Process objects due to a type error on line 261, causing the tracker process to never be filtered out from resource monitoring, potentially inflating measurements.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_tracker_pid_2025-09-25_04-05_m8j3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_tracker_pid_2025-09-25_04-05_m8j3.md",
      "call_id": "ad354595",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics unquote crashes on empty dict",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function in `dask.diagnostics.profile_visualize` crashes when attempting to unquote empty dictionary task representations. There are two related bugs: an `IndexError` for `(dict, [])` and a `ValueError` for `(dict, [[]])`.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_02-32_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_02-32_k7m3.md",
      "call_id": "55ce0c31",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.CacheProfiler Empty metric_name Ignored",
      "target": "dask.diagnostics.CacheProfiler.__init__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CacheProfiler` ignores explicitly provided empty string `metric_name=\"\"` parameter due to truthiness check instead of `is not None` check, treating it the same as `None`.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_CacheProfiler_metric_name_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_CacheProfiler_metric_name_2025-09-25_00-00_k3m9.md",
      "call_id": "ecc41b40",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.ProgressBar Crashes with Negative Width",
      "target": "dask.diagnostics.ProgressBar",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ProgressBar` accepts negative `width` values in its constructor but crashes with `ValueError: Sign not allowed in string format specifier` when the progress bar is actually displayed.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_ProgressBar_negative_width_2025-09-25_00-00_ab3f.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_ProgressBar_negative_width_2025-09-25_00-00_ab3f.md",
      "call_id": "492ada5f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.ProgressBar Crashes with Negative dt",
      "target": "dask.diagnostics.ProgressBar",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ProgressBar` accepts negative `dt` (update interval) values in its constructor but crashes with `ValueError: sleep length must be non-negative` when the background timer thread attempts to sleep.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_ProgressBar_negative_dt_2025-09-25_00-01_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_ProgressBar_negative_dt_2025-09-25_00-01_x7m9.md",
      "call_id": "302b6d2a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.ResourceProfiler Crashes with Negative dt",
      "target": "dask.diagnostics.ResourceProfiler",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ResourceProfiler` accepts negative `dt` (sampling interval) values in its constructor but crashes with `ValueError: sleep length must be non-negative` when the background tracker process attempts to sleep.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_ResourceProfiler_negative_dt_2025-09-25_00-02_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_ResourceProfiler_negative_dt_2025-09-25_00-02_k8m3.md",
      "call_id": "fc32edbf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.ResourceProfiler Type Mismatch in PID Comparison",
      "target": "dask.diagnostics.profile.ResourceProfiler._update_pids",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_update_pids` method in `ResourceProfiler._Tracker` compares an integer PID with a Process object, causing the tracker process to never be filtered out from resource monitoring.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_ResourceProfiler_2025-09-25_01-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_ResourceProfiler_2025-09-25_01-35_k3m9.md",
      "call_id": "dc7ca831",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics._Tracker Type Mismatch in Process Filtering",
      "target": "dask.diagnostics.profile._Tracker._update_pids",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_Tracker._update_pids` method has a type mismatch bug where it compares an integer (`p.pid`) with a Process object (`pid`), causing the process filter to always evaluate to True and fail to exclude the tracker process itself from monitoring.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_tracker_type_mismatch_2025-09-25_23-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_tracker_type_mismatch_2025-09-25_23-00_x7k2.md",
      "call_id": "6a21b5b5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.fix_bounds Violates Minimum Span Invariant",
      "target": "dask.diagnostics.profile_visualize.fix_bounds",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `fix_bounds` function fails to guarantee that the returned span is at least `min_span` when dealing with large floating-point numbers, due to floating-point precision loss.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_fix_bounds_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_fix_bounds_2025-09-25_00-00_k3m9.md",
      "call_id": "bf2f8824",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote Crashes on Unhashable Set Elements",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with `TypeError: unhashable type: 'list'` when processing task expressions that result in sets containing unhashable elements (lists, dicts, or nested sets).",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_00-00_k3x9.md",
      "call_id": "67b9757b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote IndexError and ValueError",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with IndexError when given an empty list argument for dict tasks, and crashes with ValueError when given malformed dict task structures. These are valid dask tasks (since dict is callable) that the function should handle gracefully.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_00-00_x3k9.md",
      "call_id": "54df645f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote IndexError on Empty Dict",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with `IndexError: list index out of range` when processing an empty dict task representation `(dict, [])`.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_13-45_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_13-45_k7m2.md",
      "call_id": "66ae7e8a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote IndexError on Empty Dict Task",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with an `IndexError` when given a valid dask task that represents an empty dictionary creation: `(dict, [])`.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_00-27_i1pp.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_00-27_i1pp.md",
      "call_id": "67f32b6a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote IndexError on Empty Dict Task",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with an `IndexError` when given a dict task with an empty list of items: `(dict, [])`.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_indexerror_2025-09-25_01-30_x7k4.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_indexerror_2025-09-25_01-30_x7k4.md",
      "call_id": "795bced7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote Rejects Dict Tasks with Tuple Pairs",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `unquote` function fails to process dict tasks when key-value pairs are tuples instead of lists. The function checks `isinstance(expr[1][0], list)` but Python's `dict()` constructor accepts both lists and tuples as key-value pairs.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_tuple_pairs_2025-09-25_01-31_m9p2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_tuple_pairs_2025-09-25_01-31_m9p2.md",
      "call_id": "508aff6f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.profile_visualize.unquote ValueError on Empty List",
      "target": "dask.diagnostics.profile_visualize.unquote",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `unquote` function crashes with a ValueError when given a dict task containing an empty list, due to missing validation of list element structure.",
      "package": "dask",
      "file_name": "bug_report_dask_diagnostics_unquote_2025-09-25_09-08_13q9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_diagnostics_unquote_2025-09-25_09-08_13q9.md",
      "call_id": "5f93a997",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.diagnostics.progress.ProgressBar Missing State Keys",
      "target": "dask.diagnostics.progress.ProgressBar._update_bar",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ProgressBar._update_bar` method crashes with a `KeyError` when the state dictionary is missing required keys (`\"finished\"`, `\"ready\"`, `\"waiting\"`, or `\"running\"`), even though it performs defensive checks for empty state dictionaries.",
      "package": "dask",
      "file_name": "bug_report_dask_progressbar_keyerror_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_progressbar_keyerror_2025-09-25_00-00_x3k9.md",
      "call_id": "43d20137",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.sizeof Non-Determinism for Large Collections",
      "target": "dask.sizeof",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sizeof` function in `dask.sizeof` is non-deterministic when called on collections (lists, tuples, dicts) with more than 10 items. Repeated calls on the same object return different values due to random sampling without a fixed seed.",
      "package": "dask",
      "file_name": "bug_report_dask_sizeof_nondeterminism_2025-09-25_04-06_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sizeof_nondeterminism_2025-09-25_04-06_k9m3.md",
      "call_id": "eb00b845",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.sizeof Return Type Inconsistency for Broadcasted NumPy Arrays",
      "target": "dask.sizeof.sizeof_numpy_ndarray",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sizeof` function for NumPy arrays returns inconsistent types: Python `int` for regular arrays but `numpy.intp` for broadcasted arrays (arrays with 0 in strides). This violates the implicit contract that `sizeof` returns Python `int` and causes `isinstance(result, int)` checks to fail for broadcasted arrays.",
      "package": "dask",
      "file_name": "bug_report_dask_sizeof_numpy_type_2025-09-25_03-08_k7x3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sizeof_numpy_type_2025-09-25_03-08_k7x3.md",
      "call_id": "62137079",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.sizeof dict Non-Determinism",
      "target": "dask.sizeof.sizeof",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sizeof` function for dictionaries is non-deterministic when the dictionary has more than 10 items, returning different values across multiple calls with the same input.",
      "package": "dask",
      "file_name": "bug_report_dask_sizeof_dict_nondeterminism_2025-09-25_06-09_x9k4.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sizeof_dict_nondeterminism_2025-09-25_06-09_x9k4.md",
      "call_id": "d09c0dcd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils - format_time and parse_timedelta Incompatibility",
      "target": "dask.utils.format_time",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_time` function produces multi-unit output strings (e.g., \"10m 1s\", \"24hr 0m\") that cannot be parsed by `parse_timedelta`, breaking the expected round-trip property for format/parse function pairs.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_parse_time_2025-09-25_04-32_n7w1.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_parse_time_2025-09-25_04-32_n7w1.md",
      "call_id": "b7244a69",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils format_bytes/parse_bytes Round-Trip Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_bytes` and `parse_bytes` functions do not form a proper round-trip: `parse_bytes(format_bytes(n))` often returns a different value than `n` due to precision loss from formatting with only 2 decimal places.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_parse_bytes_2025-09-25_02-10_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_parse_bytes_2025-09-25_02-10_x3k9.md",
      "call_id": "cc279bea",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.asciitable Crashes on Empty Rows",
      "target": "dask.utils.asciitable",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`asciitable` raises `TypeError: not enough arguments for format string` when given column names but no data rows, instead of displaying just the header.",
      "package": "dask",
      "file_name": "bug_report_dask_asciitable_empty_rows_2025-09-25_01-05_p3q8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_asciitable_empty_rows_2025-09-25_01-05_p3q8.md",
      "call_id": "b7ddf58c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes - Length Guarantee Violated",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented guarantee that \"For all values < 2**60, the output is always <= 10 characters.\" Values >= 1000 PiB produce strings with 11 characters.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_04-32_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_04-32_k8m3.md",
      "call_id": "c2d40540",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Docstring Incorrect Character Limit",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `format_bytes` claims \"For all values < 2**60, the output is always <= 10 characters\", but this is violated for values >= 1000 * 2**50 (1000 PiB).",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_docstring_2025-09-25_05-32_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_docstring_2025-09-25_05-32_x3k9.md",
      "call_id": "6e27f170",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Length Claim Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring of `format_bytes` claims \"For all values < 2**60, the output is always <= 10 characters\", but this is violated for values >= 1000 * 2**50 (which is < 2**60), where the output is 11 characters or more.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_00-00_x3k9.md",
      "call_id": "892dfc29",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Length Constraint Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters.\" However, this constraint is violated for values >= 1000 * 2**50 (approximately 2**60 - 2**50), where the output exceeds 10 characters.",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_length_2025-09-25_06-03_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_length_2025-09-25_06-03_x7m9.md",
      "call_id": "181abaa7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Length Constraint Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented constraint that \"For all values < 2**60, the output is always <= 10 characters\" when formatting values >= 1000 PiB.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_length_2025-09-25_13-45_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_length_2025-09-25_13-45_k7m3.md",
      "call_id": "8ae68510",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Length Exceeds Documented Limit",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`format_bytes` violates its documented guarantee that \"For all values < 2**60, the output is always <= 10 characters.\" Values >= 1000 PiB produce 11-character strings.",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_length_2025-09-25_01-05_m4n7.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_length_2025-09-25_01-05_m4n7.md",
      "call_id": "0a1aff1c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Length Invariant Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented invariant that \"For all values < 2**60, the output is always <= 10 characters.\" Values >= 1000 PiB produce 11-character output.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_00-00_x7k9.md",
      "call_id": "930c107f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters,\" but this claim is violated for values >= 100 * 2**50 (approximately 1.13e17).",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_output_length_2025-09-25_07-37_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_output_length_2025-09-25_07-37_k3m9.md",
      "call_id": "532ad435",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Exceeds Documented Bound",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters,\" but this claim is violated for large values near 2**60.",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_length_bound_2025-09-25_10-06_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_length_bound_2025-09-25_10-06_x3m9.md",
      "call_id": "85e8bde6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Exceeds Documented Limit",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented guarantee that \"For all values < 2**60, the output is always <= 10 characters.\" Values >= 1000 PiB (but still < 2**60) produce 11-character outputs like \"1000.00 PiB\".",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_length_violation_2025-09-25_06-12_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_length_violation_2025-09-25_06-12_x7k9.md",
      "call_id": "8f11d161",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Exceeds Documented Limit",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters,\" but this property is violated for large values near 2**60, where outputs can be 11 characters long.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_00-00_k9x2.md",
      "call_id": "be7e1dda",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Exceeds Documented Maximum",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented invariant that output is \"always <= 10 characters\" for values < 2**60. Values >= 1000 PiB produce 11-character output.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_05-06_9ujb.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_05-06_9ujb.md",
      "call_id": "7871c775",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Violation",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's documentation claims \"For all values < 2**60, the output is always <= 10 characters\", but this is violated for values >= 1000 PiB (1,125,899,906,842,624,000 bytes), which produce 11-character output like '1000.00 PiB'.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_00-00_k3m9.md",
      "call_id": "ca9aa14e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes Output Length Violation",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented invariant that \"For all values < 2**60, the output is always <= 10 characters\" when formatting values >= 1000 PiB.",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_output_length_2025-09-25_07-34_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_output_length_2025-09-25_07-34_k3x9.md",
      "call_id": "baa40cc7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes violates documented length guarantee",
      "target": "dask.utils.format_bytes",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters\", but this claim is violated for values >= 1000 PiB (approximately 1.126e18 bytes).",
      "package": "dask",
      "file_name": "bug_report_dask_format_bytes_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_format_bytes_2025-09-25_00-00_k3m9.md",
      "call_id": "02d05476",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.format_bytes violates length guarantee",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented guarantee that \"For all values < 2**60, the output is always <= 10 characters.\" For certain inputs near the boundary, the output can be 11 characters.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_format_bytes_2025-09-25_00-00_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_format_bytes_2025-09-25_00-00_a7k3.md",
      "call_id": "96ac2705",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.insert Function Name/Behavior Mismatch",
      "target": "dask.utils.insert",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `insert` function in `dask.utils` has a misleading name - it performs element replacement rather than insertion. The function name suggests it inserts a new element into a tuple, but it actually replaces an existing element at the specified position.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_insert_2025-09-25_10-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_insert_2025-09-25_10-06_k3m9.md",
      "call_id": "e0f4863a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split Crashes on Invalid UTF-8 Bytes",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with `UnicodeDecodeError` when given bytes that are not valid UTF-8, despite having a catch-all exception handler that should return \"Other\" for problematic inputs.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_key_split_2025-09-25_05-06_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_key_split_2025-09-25_05-06_x7m9.md",
      "call_id": "60c2bba7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split Crashes on Non-UTF8 Bytes",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with `UnicodeDecodeError` when given byte strings that are not valid UTF-8, despite the function's documentation showing it accepts byte inputs.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_key_split_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_key_split_2025-09-25_00-01_x7k9.md",
      "call_id": "37db05b0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split Hex Pattern Does Not Match Digits",
      "target": "dask.utils.key_split",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `key_split` function fails to strip 8-character hexadecimal suffixes that contain digits (0-9), only stripping those containing letters (a-f). This is due to an incorrect regular expression pattern `[a-f]+` that excludes digits.",
      "package": "dask",
      "file_name": "bug_report_dask_key_split_hex_pattern_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_key_split_hex_pattern_2025-09-25_00-00_k3f9.md",
      "call_id": "b3a77139",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split Incorrectly Strips Legitimate English Words",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `key_split` function incorrectly strips legitimate English words that happen to be 8 characters long and contain only letters a-f (e.g., \"feedback\", \"faceache\", \"beefcafe\") because the hex detection pattern is too permissive.",
      "package": "dask",
      "file_name": "bug_report_dask_key_split_feedback_2025-09-25_03-39_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_key_split_feedback_2025-09-25_03-39_x7k9.md",
      "call_id": "f9a9567a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split UnicodeDecodeError",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with a `UnicodeDecodeError` when passed bytes that are not valid UTF-8, despite the docstring showing bytes as a valid input type and the function having general exception handling.",
      "package": "dask",
      "file_name": "bug_report_key_split_unicode_2025-09-25_10-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_key_split_unicode_2025-09-25_10-30_x7k9.md",
      "call_id": "6b5c6b7b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.key_split crashes on non-UTF-8 bytes",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with a `UnicodeDecodeError` when given bytes that are not valid UTF-8, despite documenting support for bytes input in its docstring examples.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_key_split_2025-09-25_00-00_x9m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_key_split_2025-09-25_00-00_x9m2.md",
      "call_id": "f9f4be14",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.natural_sort_key Unicode Digit Crash",
      "target": "dask.dataframe.dask_expr.io.natural_sort_key",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `natural_sort_key` function crashes with a `ValueError` when given strings containing certain Unicode digit characters (e.g., superscript digits like '\u00b2', '\u00b3', '\u00b9') because it uses `str.isdigit()` to check if a part is a digit, but then calls `int()` which only accepts ASCII digits.",
      "package": "dask",
      "file_name": "bug_report_dask_natural_sort_key_unicode_2025-09-25_02-32_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_natural_sort_key_unicode_2025-09-25_02-32_k3m9.md",
      "call_id": "b26555e5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.ndeepmap Silent Data Loss",
      "target": "dask.utils.ndeepmap",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ndeepmap(n, func, seq)` silently discards all elements except the first when `n <= 0` and `seq` is a list with multiple elements. This violates the principle of least surprise and causes silent data corruption.",
      "package": "dask",
      "file_name": "bug_report_dask_ndeepmap_silent_data_loss_2025-09-25_09-06_x8m3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_ndeepmap_silent_data_loss_2025-09-25_09-06_x8m3.md",
      "call_id": "ea87e235",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.ndeepmap Silent Data Loss",
      "target": "dask.utils.ndeepmap",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ndeepmap(n, func, seq)` silently discards all but the first element when `n <= 0` and `seq` is a list with multiple elements. This can lead to silent data corruption as the function processes only one element while ignoring the rest.",
      "package": "dask",
      "file_name": "bug_report_dask_ndeepmap_silent_data_loss_2025-09-25_08-34_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_ndeepmap_silent_data_loss_2025-09-25_08-34_x7k9.md",
      "call_id": "9a150fbc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.parse_bytes Accepts Invalid Whitespace-Only Input",
      "target": "dask.utils.parse_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`parse_bytes` silently accepts empty strings and whitespace-only strings (like `'\\r'`, `'\\n'`, `'\\t'`), returning `1` instead of raising a `ValueError` as it does for other invalid inputs.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_parse_bytes_2025-09-25_17-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_parse_bytes_2025-09-25_17-30_k3x9.md",
      "call_id": "31f15b97",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.parse_bytes Accepts Negative Values",
      "target": "dask.utils.parse_bytes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_bytes` function accepts negative numeric values and returns negative byte sizes, which is semantically incorrect since byte sizes cannot be negative.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_parse_bytes_negative_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_parse_bytes_negative_2025-09-25_00-00_k9x2.md",
      "call_id": "45f78ed4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.utils.parse_timedelta Crashes on Empty String",
      "target": "dask.utils.parse_timedelta",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`parse_timedelta` crashes with `IndexError: string index out of range` when given an empty string or space-only string, instead of raising an informative `ValueError`.",
      "package": "dask",
      "file_name": "bug_report_dask_utils_parse_timedelta_2025-09-25_17-35_a8k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_utils_parse_timedelta_2025-09-25_17-35_a8k2.md",
      "call_id": "25162251",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.widgets format_bytes Output Length Violation",
      "target": "dask.widgets.widgets.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function violates its documented guarantee that \"For all values < 2**60, the output is always <= 10 characters\" when formatting values >= 1000 PiB.",
      "package": "dask",
      "file_name": "bug_report_dask_widgets_format_bytes_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_widgets_format_bytes_2025-09-25_00-00_a1b2.md",
      "call_id": "36fbe881",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.widgets format_bytes violates length guarantee",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters\", but this property is violated for large values approaching 2**60.",
      "package": "dask",
      "file_name": "bug_report_dask_widgets_format_bytes_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_widgets_format_bytes_2025-09-25_00-00_k3x9.md",
      "call_id": "5134ad2e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "dask.widgets key_split crashes on non-UTF-8 bytes",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with a `UnicodeDecodeError` when given bytes that are not valid UTF-8, despite the function accepting bytes as a documented input type.",
      "package": "dask",
      "file_name": "bug_report_dask_widgets_key_split_unicode_2025-09-25_00-01_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_widgets_key_split_unicode_2025-09-25_00-01_a7f2.md",
      "call_id": "b4bf1a4b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_minimum_chunksize Parameter Documentation",
      "target": "dask.array.overlap.ensure_minimum_chunksize",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `size` parameter docstring in `ensure_minimum_chunksize` incorrectly states \"The maximum size of any chunk\" when it should say \"The minimum size of any chunk\".",
      "package": "dask",
      "file_name": "bug_report_dask_array_overlap_ensure_minimum_chunksize_2025-09-25_02-40_x3k8.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_array_overlap_ensure_minimum_chunksize_2025-09-25_02-40_x3k8.md",
      "call_id": "6e308c00",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "format_bytes Length Constraint Violation",
      "target": "dask.utils.format_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters\", but this claim is violated for values near the PiB boundary, where the output can be 11 characters.",
      "package": "dask",
      "file_name": "bug_report_format_bytes_length_2025-09-25_00-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_format_bytes_length_2025-09-25_00-00_a7b3.md",
      "call_id": "f719360d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "format_bytes Length Guarantee Violated",
      "target": "dask.utils.format_bytes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_bytes` function's docstring claims \"For all values < 2**60, the output is always <= 10 characters\", but this is violated for values >= 1000 PiB.",
      "package": "dask",
      "file_name": "bug_report_format_bytes_length_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_format_bytes_length_2025-09-25_00-00_k3f9.md",
      "call_id": "5d4c7d43",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "key_split Crashes on Non-UTF-8 Bytes",
      "target": "dask.utils.key_split",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `key_split` function crashes with `UnicodeDecodeError` when given non-UTF-8 bytes, despite accepting bytes as input (shown in docstring examples).",
      "package": "dask",
      "file_name": "bug_report_key_split_unicode_2025-09-25_00-01_p7x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_key_split_unicode_2025-09-25_00-01_p7x2.md",
      "call_id": "72e02a52",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "natural_sort_key Unicode Digit Crash",
      "target": "dask.utils.natural_sort_key",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`natural_sort_key` crashes with a `ValueError` when passed strings containing Unicode digit characters like '\u00b2', '\u00b3', '\u2460', etc. The function uses `str.isdigit()` to detect digits, but `int()` only accepts ASCII digits, causing a crash.",
      "package": "dask",
      "file_name": "bug_report_natural_sort_key_unicode_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_natural_sort_key_unicode_2025-09-25_00-00_k3x9.md",
      "call_id": "9450f9f1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_columns TypeError with None max Value",
      "target": "dask.dataframe.io.parquet.core.sorted_columns",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `sorted_columns` function crashes with `TypeError: '>=' not supported between instances of 'int' and 'NoneType'` when the first row group has `None` values for min/max statistics and subsequent row groups have non-None values.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_columns_2025-09-25_09-45_p3k7.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_columns_2025-09-25_09-45_p3k7.md",
      "call_id": "b25648b7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations - TypeError on Plain Python Lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring shows examples using plain Python lists, but the function crashes with `TypeError: No dispatch for <class 'list'>` when called with a list.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_00-00_k3f9.md",
      "call_id": "e754bc98",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Cannot Handle Python Lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring demonstrates usage with plain Python lists, but the function raises `TypeError: No dispatch for <class 'list'>` when given a Python list as input.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_2025-09-25_09-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_2025-09-25_09-30_k7m2.md",
      "call_id": "f116871d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Docstring Examples Fail",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains multiple examples using plain Python lists, but the function fails with `TypeError: No dispatch for <class 'list'>` when given a list. The implementation expects pandas/cudf Series, contradicting the documented API.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_19-35_k7f2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_19-35_k7f2.md",
      "call_id": "d14a29e5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Docstring Examples Use Unsupported List Type",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `sorted_division_locations` contains examples using plain Python lists as input, but the implementation only supports numpy arrays, pandas Series/Index, and similar types. Attempting to use a plain list results in a `TypeError: No dispatch for <class 'list'>`.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_list_input_2025-09-25_14-31_p7x2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_list_input_2025-09-25_14-31_p7x2.md",
      "call_id": "348ede6a",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Doesn't Support Plain Python Lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains examples showing it being used with plain Python lists, but the actual implementation crashes with `TypeError: No dispatch for <class 'list'>` when passed a Python list. This is a contract violation where the documented API differs from the implementation.",
      "package": "dask",
      "file_name": "bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_06-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_dataframe_io_sorted_division_locations_2025-09-25_06-02_k3m9.md",
      "call_id": "032cba36",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Rejects Lists Despite Documentation",
      "target": "dask.dataframe.dask_expr.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains examples using plain Python lists as input, but the function raises a TypeError when called with lists. It only accepts numpy arrays or pandas Series.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_list_2025-09-25_00-00_7m2p.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_list_2025-09-25_00-00_7m2p.md",
      "call_id": "32cc4107",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Rejects Plain Lists",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function raises `TypeError` when given a plain Python list, despite its docstring explicitly showing examples with lists as input.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_2025-09-25_01-04_dr7o.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_2025-09-25_01-04_dr7o.md",
      "call_id": "240d9fe3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Rejects Python Lists Despite Documentation",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function crashes when given Python lists, despite all docstring examples showing it being called with Python lists. The function internally calls `tolist()` which only accepts pandas Index or numpy array objects, making the documented examples non-functional.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_2025-09-25_06-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_2025-09-25_06-06_k3m9.md",
      "call_id": "5d2967d4",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Returns Fewer Divisions Than Requested",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `sorted_division_locations` is called with `npartitions=N` on a sequence with fewer unique values than N, it returns fewer than `N+1` divisions, violating the invariant that `len(divisions) == npartitions + 1`. This causes downstream code to create fewer partitions than requested.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_npartitions_2025-09-25_04-06_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_npartitions_2025-09-25_04-06_x7k3.md",
      "call_id": "8b68d248",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Returns Unsorted Divisions",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The function `sorted_division_locations` returns unsorted division values when given an unsorted input sequence, violating its documented contract and breaking code that depends on sorted divisions.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_unsorted_input_2025-09-25_08-41_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_unsorted_input_2025-09-25_08-41_x7k3.md",
      "call_id": "da6111d3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Silently Produces Invalid Results on Unsorted Input",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function silently produces invalid results (non-monotonic locations) when given unsorted input, instead of validating its precondition or raising an error.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_2025-09-25_07-32_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_2025-09-25_07-32_x9k2.md",
      "call_id": "b4d146ca",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations TypeError with List Input",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function fails with `TypeError: No dispatch for <class 'list'>` when given a Python list as input, despite the function's docstring explicitly showing examples using lists.",
      "package": "dask",
      "file_name": "bug_report_dask_io_sorted_division_locations_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_io_sorted_division_locations_2025-09-25_00-00_k3m9.md",
      "call_id": "a2ddfd32",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations TypeError with Plain Lists",
      "target": "dask.dataframe.dask_expr.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function crashes with a `TypeError` when passed plain Python lists, despite all docstring examples using plain Python lists. The function only works with numpy arrays or pandas Index objects.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_2025-09-25_00-00_x7k9.md",
      "call_id": "e134cfd9",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations Undocumented Precondition",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function has an undocumented precondition that the input sequence must be sorted, but it does not validate this requirement. When called with unsorted input, it returns unsorted divisions, which violates the expected behavior implied by the function name and docstring.",
      "package": "dask",
      "file_name": "bug_report_dask_sorted_division_locations_2025-09-25_03-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_dask_sorted_division_locations_2025-09-25_03-30_x7k9.md",
      "call_id": "5362201d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "sorted_division_locations fails with plain Python lists despite docstring examples",
      "target": "dask.dataframe.io.io.sorted_division_locations",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sorted_division_locations` function's docstring contains examples using plain Python lists, but the function raises a `TypeError` when called with lists because the internal `tolist` dispatch doesn't support the `list` type.",
      "package": "dask",
      "file_name": "bug_report_sorted_division_locations_2025-09-25_00-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/dask/bug_reports/bug_report_sorted_division_locations_2025-09-25_00-25_k3m9.md",
      "call_id": "f4558664",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "AddIndex.reduce() Mutates Original Index Object",
      "target": "django.db.migrations.operations.AddIndex.reduce",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AddIndex.reduce()` method mutates the original operation's index object when reducing with a `RenameIndex` operation. This violates the immutability contract and can lead to unexpected state changes.",
      "package": "django",
      "file_name": "bug_report_django_addindex_reduce_mutation_2025-09-25_06-30_m4k8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_addindex_reduce_mutation_2025-09-25_06-30_m4k8.md",
      "call_id": "ae0e1ea7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "BrokenLinkEmailsMiddleware Incorrect Referer Comparison",
      "target": "django.middleware.common.BrokenLinkEmailsMiddleware.is_ignorable_request",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `BrokenLinkEmailsMiddleware.is_ignorable_request` method incorrectly compares a full URL (referer) with a path-only string (uri), causing internal redirects from `APPEND_SLASH` to incorrectly trigger broken link notification emails.",
      "package": "django",
      "file_name": "bug_report_django_middleware_broken_link_2025-09-25_14-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_middleware_broken_link_2025-09-25_14-30_k7m9.md",
      "call_id": "5248ff10",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CaseInsensitiveMapping Case-Folding Asymmetry",
      "target": "django.utils.datastructures.CaseInsensitiveMapping",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CaseInsensitiveMapping fails to retrieve values when the lookup key's uppercase and lowercase transformations are not symmetric, such as with the German letter '\u00df' (sharp s), which uppercases to 'SS'.",
      "package": "django",
      "file_name": "bug_report_django_CaseInsensitiveMapping_2025-09-25_11-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_CaseInsensitiveMapping_2025-09-25_11-30_k3x9.md",
      "call_id": "96d427c1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CaseInsensitiveMapping Unicode Case Folding",
      "target": "django.utils.datastructures.CaseInsensitiveMapping",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CaseInsensitiveMapping` fails to provide case-insensitive access for Unicode characters where `str.upper()` and `str.lower()` don't round-trip, such as '\u00b5' (MICRO SIGN U+00B5).",
      "package": "django",
      "file_name": "bug_report_django_caseinsensitivemapping_unicode_2025-09-25_09-10_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_caseinsensitivemapping_unicode_2025-09-25_09-10_k3x9.md",
      "call_id": "23442124",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CheckMessage Hash/Equality Contract Violation",
      "target": "django.core.checks.CheckMessage",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `CheckMessage` class implements `__eq__()` but not `__hash__()`, violating Python's equality/hash contract and making instances unhashable. This prevents `CheckMessage` objects from being used in sets or as dictionary keys.",
      "package": "django",
      "file_name": "bug_report_django_checks_CheckMessage_hash_2025-09-25_08-55_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_checks_CheckMessage_hash_2025-09-25_08-55_k3m9.md",
      "call_id": "a7a95d15",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CreateModel.reduce() RenameField Case-Sensitive Comparison",
      "target": "django.db.migrations.operations.models.CreateModel.reduce()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `CreateModel.reduce()` processes a `RenameField` operation, it fails to properly rename the field in `unique_together` and `index_together` constraints when the field name in the constraint differs in case from the `old_name` parameter. The bug occurs because field names are compared case-sensitively.",
      "package": "django",
      "file_name": "bug_report_django_renamefield_reduce_2025-09-25_12-15_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_renamefield_reduce_2025-09-25_12-15_a7b3.md",
      "call_id": "34d20e7b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DecimalField Float vs String Inconsistency",
      "target": "django.db.models.fields.DecimalField.to_python",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "DecimalField accepts float values that would be rejected if passed as strings, due to precision-based rounding that occurs before validation for floats but not for strings.",
      "package": "django",
      "file_name": "bug_report_django_decimalfield_float_inconsistency_2025-09-25_10-32_vpje.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_decimalfield_float_inconsistency_2025-09-25_10-32_vpje.md",
      "call_id": "1b67c1a6",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DecimalField.to_python Precision Handling Inconsistency",
      "target": "django.db.models.fields.DecimalField.to_python",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`DecimalField.to_python()` inconsistently applies precision limits based on input type: float inputs are precision-limited using `Context(prec=max_digits)`, but Decimal inputs bypass this limitation, leading to different Decimal objects for the same numeric value.",
      "package": "django",
      "file_name": "bug_report_django_decimalfield_precision_inconsistency_2025-09-25_04-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_decimalfield_precision_inconsistency_2025-09-25_04-30_k7x2.md",
      "call_id": "77ff6d89",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DecimalField.to_python() Inconsistent Float vs String Conversion",
      "target": "django.db.models.fields.DecimalField.to_python",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "DecimalField.to_python() produces different results when converting a float value versus converting the string representation of that same float value, violating the expected consistency of type conversion.",
      "package": "django",
      "file_name": "bug_report_django_decimalfield_to_python_2025-09-25_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_decimalfield_to_python_2025-09-25_k3f8.md",
      "call_id": "15f4f885",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DecimalValidator Rejects Zero with Decimal Places",
      "target": "django.core.validators.DecimalValidator",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`DecimalValidator` incorrectly rejects zero values when represented with decimal places (e.g., `Decimal(\"0.0\")`) if `decimal_places=0` is configured, even though zero is mathematically valid regardless of its representation.",
      "package": "django",
      "file_name": "bug_report_django_core_DecimalValidator_2025-09-25_07-26_uxra.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_DecimalValidator_2025-09-25_07-26_uxra.md",
      "call_id": "3d125adf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Deserializer Raises KeyError Instead of DeserializationError",
      "target": "django.core.serializers.python.Deserializer",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The Python/JSON deserializer raises KeyError instead of DeserializationError when deserializing malformed JSON that is missing required keys like \"model\" or \"fields\".",
      "package": "django",
      "file_name": "bug_report_django_core_serializers_deserializer_keyerror_2025-09-25_00-10_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_serializers_deserializer_keyerror_2025-09-25_00-10_x3m9.md",
      "call_id": "5feb352a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django CSRF Trusted Origins Scheme Validation",
      "target": "django.core.checks.compatibility.django_4_0.check_csrf_trusted_origins",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_csrf_trusted_origins` function incorrectly validates CSRF_TRUSTED_ORIGINS by only checking if `\"://\"` appears anywhere in the origin string, rather than verifying that a non-empty scheme appears at the start. This allows malformed origins like `\"://example.com\"` to pass validation despite not starting with a valid scheme.",
      "package": "django",
      "file_name": "bug_report_django_csrf_scheme_validation_2025-09-25_16-30_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_csrf_scheme_validation_2025-09-25_16-30_k7m3.md",
      "call_id": "cd37a58d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django CSRF_TRUSTED_ORIGINS Check Accepts Malformed URLs",
      "target": "django.core.checks.compatibility.django_4_0.check_csrf_trusted_origins",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `check_csrf_trusted_origins` function accepts malformed URLs that contain \"://\" but cannot be properly parsed by `urlsplit()`. This allows invalid CSRF_TRUSTED_ORIGINS configurations that the middleware cannot use correctly, leading to silent configuration errors.",
      "package": "django",
      "file_name": "bug_report_django_csrf_trusted_origins_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_csrf_trusted_origins_2025-09-25_00-00_k3f9.md",
      "call_id": "f9e68965",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Core Cache Template Fragment Key Collision",
      "target": "django.core.cache.utils.make_template_fragment_key",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `make_template_fragment_key` function produces identical cache keys for different `vary_on` arguments when those arguments contain the separator character `:`, causing cache collisions and potential security vulnerabilities.",
      "package": "django",
      "file_name": "bug_report_django_core_cache_key_collision_2025-09-25_15-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_cache_key_collision_2025-09-25_15-30_k3x9.md",
      "call_id": "26cff527",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django DictionarySerializer TypeError with Mixed-Type Keys",
      "target": "django.db.migrations.serializer.DictionarySerializer",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "DictionarySerializer crashes with TypeError when attempting to serialize dictionaries with keys of incomparable types (e.g., integers and strings mixed together) due to calling `sorted()` without a key function in Python 3.",
      "package": "django",
      "file_name": "bug_report_django_dict_serializer_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dict_serializer_2025-09-25_00-00_x7k2.md",
      "call_id": "c9061bf1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django HTTP parse_cookie Whitespace Key Collision",
      "target": "django.http.cookie.parse_cookie",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_cookie` function silently loses data when multiple cookies have whitespace-only names, as they all get stripped to the empty string key and collide in the resulting dictionary.",
      "package": "django",
      "file_name": "bug_report_django_http_parse_cookie_key_collision_2025-09-25_07-34_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_http_parse_cookie_key_collision_2025-09-25_07-34_x9k3.md",
      "call_id": "cf2324f9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Mail Filebased Backend Empty Messages Returns None",
      "target": "django.core.mail.backends.filebased.EmailBackend",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The filebased email backend returns `None` for empty message lists instead of `0`, inheriting this bug from the console backend and violating the backend substitutability contract.",
      "package": "django",
      "file_name": "bug_report_django_mail_filebased_empty_messages_2025-09-25_07-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_filebased_empty_messages_2025-09-25_07-00_k3m9.md",
      "call_id": "5d32ede7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Mail Filebased Backend None Path Crash",
      "target": "django.core.mail.backends.filebased.EmailBackend",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The filebased email backend crashes with TypeError when both the `file_path` parameter and `settings.EMAIL_FILE_PATH` are None, due to calling `os.path.abspath(None)`.",
      "package": "django",
      "file_name": "bug_report_django_mail_filebased_none_path_2025-09-25_06-59_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_filebased_none_path_2025-09-25_06-59_x7k9.md",
      "call_id": "19c5f9ad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Migrations Operations Immutability Violation",
      "target": "django.db.migrations.operations.RenameModel",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`RenameModel` and `RenameIndex` operations violate the immutability contract documented in the base `Operation` class by mutating instance attributes in `database_backwards()`. This creates potential issues with thread safety, exception handling, and operation reuse.",
      "package": "django",
      "file_name": "bug_report_django_migrations_operations_immutability_2025-09-25_04-27_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_operations_immutability_2025-09-25_04-27_k3x9.md",
      "call_id": "b542e48d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Migrations Rename Operations State Mutation",
      "target": "django.db.migrations.operations.RenameModel",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RenameModel.database_backwards()` and `RenameIndex.database_backwards()` permanently mutate the operation's state when an exception is raised, violating Django's documented immutability requirement for migration operations.",
      "package": "django",
      "file_name": "bug_report_django_migrations_rename_operations_state_mutation_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_rename_operations_state_mutation_2025-09-25_00-00_k3x9.md",
      "call_id": "104d253a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django ModelFormMixin and DeletionMixin KeyError on Missing success_url Format Parameters",
      "target": "django.views.generic.edit.ModelFormMixin.get_success_url",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ModelFormMixin.get_success_url()` and `DeletionMixin.get_success_url()` raise unhandled `KeyError` when the `success_url` format string contains placeholders that don't exist in `self.object.__dict__`, causing 500 errors instead of providing clear configuration error messages.",
      "package": "django",
      "file_name": "bug_report_django_views_generic_modelformmixin_success_url_2025-09-25_06-06_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_views_generic_modelformmixin_success_url_2025-09-25_06-06_k3x9.md",
      "call_id": "757054b3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django OrderedSet Missing Equality Implementation",
      "target": "django.utils.datastructures.OrderedSet",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `OrderedSet` class does not implement `__eq__` and `__hash__`, causing two OrderedSets with identical elements in the same order to be unequal when compared with `==`.",
      "package": "django",
      "file_name": "bug_report_django_OrderedSet_equality_2025-09-25_08-30_4fsu.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_OrderedSet_equality_2025-09-25_08-30_4fsu.md",
      "call_id": "9ad0bc5e",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django SQLite3 LPAD/RPAD Empty Fill Text",
      "target": "django.db.backends.sqlite3._functions._sqlite_lpad",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_sqlite_lpad` and `_sqlite_rpad` functions return strings of incorrect length when `fill_text` is an empty string, violating the invariant that these functions should always return a string of exactly the specified `length`.",
      "package": "django",
      "file_name": "bug_report_django_sqlite3_lpad_rpad_empty_fill_2025-09-25_04-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sqlite3_lpad_rpad_empty_fill_2025-09-25_04-15_k3x9.md",
      "call_id": "8f2e7acd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django ServerHandler Negative Content-Length",
      "target": "django.core.servers.basehttp.ServerHandler.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ServerHandler` class accepts negative `CONTENT_LENGTH` values from HTTP headers, which causes the `LimitedStream` to become completely unreadable, preventing valid request body data from being processed.",
      "package": "django",
      "file_name": "bug_report_django_servers_negative_content_length_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_servers_negative_content_length_2025-09-25_00-00_x7k3.md",
      "call_id": "d6d1a326",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django Signal dispatch_uid Falsy Value Handling",
      "target": "django.dispatch.Signal.connect",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Signal class incorrectly handles falsy but valid `dispatch_uid` values (such as 0, empty string, or False) due to using truthiness checks instead of explicit None checks. This causes receivers registered with falsy dispatch_uids to be incorrectly keyed and become undisconnectable using the dispatch_uid alone.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_falsy_dispatch_uid_2025-09-25_04-02_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_falsy_dispatch_uid_2025-09-25_04-02_k3x9.md",
      "call_id": "1c41d428",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django TemplateCommand Camel Case Conversion with Digits",
      "target": "django.core.management.templates.TemplateCommand",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The camel case conversion for project/app names containing digits produces unexpected capitalization. When creating an app or project with a name containing digits (e.g., \"my2app\"), the `.title()` method treats digits as word boundaries, causing the letter after each digit to be capitalized incorrectly.",
      "package": "django",
      "file_name": "bug_report_django_templates_camel_case_2025-09-25_03-59_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templates_camel_case_2025-09-25_03-59_k3x9.md",
      "call_id": "1105677a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django TemplateCommand is_url Accepts Invalid Protocol-Only URLs",
      "target": "django.core.management.templates.TemplateCommand.is_url",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_url()` method in Django's TemplateCommand incorrectly returns `True` for protocol-only URLs like `\"http://\"`, `\"https://\"`, and `\"ftp://\"`. These are not valid downloadable URLs and produce filenames with colons (e.g., `\"http:\"`) which are invalid on Windows.",
      "package": "django",
      "file_name": "bug_report_django_core_management_templates_is_url_2025-09-25_06-02_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_management_templates_is_url_2025-09-25_06-02_x7k9.md",
      "call_id": "371db6c0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django TemplateCommand validate_name ValueError with __main__",
      "target": "django.core.management.templates.TemplateCommand.validate_name",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The validate_name method crashes with ValueError when validating the name '__main__' because find_spec('__main__') raises ValueError instead of returning None or a valid spec.",
      "package": "django",
      "file_name": "bug_report_django_core_management_TemplateCommand_validate_name_2025-09-25_10-56_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_management_TemplateCommand_validate_name_2025-09-25_10-56_x7k2.md",
      "call_id": "5708ff1f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django UploadedFile Backslash Path Separator Not Sanitized",
      "target": "django.core.files.uploadedfile.UploadedFile",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `UploadedFile.name` setter sanitizes file names to prevent path traversal attacks by using `os.path.basename()`, but this only removes forward slashes on Unix systems. Backslashes (Windows path separators) are not removed, creating a potential security vulnerability if uploaded files are later processed on Windows or in cross-platform contexts.",
      "package": "django",
      "file_name": "bug_report_django_uploadedfile_backslash_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_uploadedfile_backslash_2025-09-25_00-00_x7k9.md",
      "call_id": "504c6ace",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DjangoJSONEncoder Silently Truncates Microseconds",
      "target": "django.core.serializers.json.DjangoJSONEncoder",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `DjangoJSONEncoder` silently truncates microseconds to milliseconds when encoding `datetime.datetime` and `datetime.time` objects, causing undocumented data loss in JSON serialization round-trips.",
      "package": "django",
      "file_name": "bug_report_django_core_serializers_microseconds_2025-09-25_01-55_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_serializers_microseconds_2025-09-25_01-55_k3x9.md",
      "call_id": "41ffc354",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Dummy Backend Generator Exhaustion",
      "target": "django.core.mail.backends.dummy.EmailBackend.send_messages",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The dummy email backend exhausts generator arguments by converting them to lists, violating its documented behavior of \"doing nothing\" and breaking the iterator protocol contract.",
      "package": "django",
      "file_name": "bug_report_dummy_backend_generator_exhaustion_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_dummy_backend_generator_exhaustion_2025-09-25_00-00_x7k9.md",
      "call_id": "2cb38f66",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Field Validation Rejects Empty Values in Choices",
      "target": "django.db.models.fields.Field.validate",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Django field validation incorrectly rejects empty values (empty string, None) even when they are explicitly included as valid choices. The blank/null validation runs after choice validation but the choice validation is skipped for empty values, causing valid empty choices to be rejected.",
      "package": "django",
      "file_name": "bug_report_field_empty_choice_validation_2025-09-25_11-35_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_field_empty_choice_validation_2025-09-25_11-35_x7k9.md",
      "call_id": "cd06271d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "File.open() Crashes When Reopening File Without Mode Attribute",
      "target": "django.core.files.base.File.open",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a `File` is created with a file-like object that lacks a `mode` attribute (such as `BytesIO`), calling `open()` without an explicit mode parameter raises a confusing `AttributeError` instead of a clear error message.",
      "package": "django",
      "file_name": "bug_report_django_file_open_missing_mode_2025-09-25_11-35_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_file_open_missing_mode_2025-09-25_11-35_x3k9.md",
      "call_id": "14ec942d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "GetLanguageInfoListNode.get_language_info Single-Character Language Code",
      "target": "django.templatetags.i18n.GetLanguageInfoListNode.get_language_info",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_language_info` method incorrectly handles tuples with single-character language codes. It uses `len(language[0]) > 1` to distinguish between strings and tuples, but this fails when a tuple contains a single-character code (e.g., `('x', 'Language X')`), causing it to call `str(language)` which produces `\"('x', 'Language X')\"` instead of extracting the code `'x'`.",
      "package": "django",
      "file_name": "bug_report_i18n_get_language_info_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_i18n_get_language_info_2025-09-25_00-00_x7k2.md",
      "call_id": "503b88db",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "InMemoryStorage Accepts Null Bytes in Filenames",
      "target": "django.core.files.storage",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "InMemoryStorage and FileSystemStorage handle null bytes in filenames inconsistently. FileSystemStorage raises ValueError when attempting to save a file with a null byte in its name, while InMemoryStorage accepts it. This breaks the abstraction and can cause code that works in tests (using InMemoryStorage) to fail in production (using FileSystemStorage).",
      "package": "django",
      "file_name": "bug_report_django_storage_null_byte_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_storage_null_byte_2025-09-25_14-30_k3m9.md",
      "call_id": "2342ee27",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "InMemoryStorage._save() Resource Leak - Unclosed File",
      "target": "django.core.files.storage.memory.InMemoryStorage._save()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`InMemoryStorage._save()` opens a file descriptor in a loop but never closes it, creating a resource leak. This is inconsistent with `FileSystemStorage._save()`, which properly closes file descriptors in a `try/finally` block.",
      "package": "django",
      "file_name": "bug_report_django_storage_inmemory_unclosed_file_2025-09-25_10-59_p8k1.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_storage_inmemory_unclosed_file_2025-09-25_10-59_p8k1.md",
      "call_id": "f1083684",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ModelFormMixin.get_success_url() KeyError on Mismatched Format Placeholders",
      "target": "django.views.generic.edit.ModelFormMixin.get_success_url()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ModelFormMixin.get_success_url()` crashes with an unhelpful `KeyError` when the `success_url` template contains format placeholders (e.g., `{id}`) that don't exist in `self.object.__dict__`. This occurs at line 120 in `django/views/generic/edit.py` where `self.success_url.format(**self.object.__dict__)` is executed without validation or error handling.",
      "package": "django",
      "file_name": "bug_report_modelformmixin_format_string_2025-09-25_00-00_b8k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_modelformmixin_format_string_2025-09-25_00-00_b8k3.md",
      "call_id": "6da5203c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Oracle Backend Timezone Regex Overly Permissive",
      "target": "django.db.backends.oracle.operations.DatabaseOperations._tzname_re",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The timezone name validation regex `^[\\w/:+-]+$` accepts Unicode word characters (including Chinese, Greek, Cyrillic, etc.) even though all valid timezone names in the IANA timezone database use only ASCII characters. This is overly permissive and contradicts the code comment stating \"This regexp matches all time zone names from the zoneinfo database.\"",
      "package": "django",
      "file_name": "bug_report_oracle_tzname_regex_overly_permissive.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_oracle_tzname_regex_overly_permissive.md",
      "call_id": "934b7d95",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "PrefixNode.handle_token IndexError on Incomplete 'as' Syntax",
      "target": "django.templatetags.static.PrefixNode.handle_token",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `PrefixNode.handle_token` method crashes with an IndexError when parsing a token with incomplete 'as' syntax (e.g., `{% get_static_prefix as %}` without a variable name). The code checks that the second token is 'as' but doesn't verify there's a third token before accessing `tokens[2]`.",
      "package": "django",
      "file_name": "bug_report_prefixnode_handle_token_2025-09-25_00-00_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_prefixnode_handle_token_2025-09-25_00-00_m8k3.md",
      "call_id": "63bb7f1d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "QueryDict.pop() Returns List While __getitem__ Returns Single Value",
      "target": "django.http.QueryDict.pop",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "QueryDict violates the dict protocol by having `pop()` and `__getitem__` return different types. `qd[key]` returns the last value as a string, but `qd.pop(key)` returns all values as a list. This inconsistency breaks the expected behavior where these operations should return the same type.",
      "package": "django",
      "file_name": "bug_report_django_http_querydict_pop_2025-09-25_04-34_9m45.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_http_querydict_pop_2025-09-25_04-34_9m45.md",
      "call_id": "bd03060a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RenameModel and RenameIndex Violate Immutability on Exception",
      "target": "django.db.migrations.operations.models.RenameModel",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `database_backwards()` methods in `RenameModel` and `RenameIndex` mutate the operation's state by swapping name attributes, but fail to restore the original state if `database_forwards()` raises an exception. This violates the immutability property documented in `base.py:28`: \"Due to the way this class deals with deconstruction, it should be considered immutable.\"",
      "package": "django",
      "file_name": "bug_report_django_migrations_RenameModel_immutability_2025-09-25_04-02_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_RenameModel_immutability_2025-09-25_04-02_k8m2.md",
      "call_id": "e7426f5e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ServerHandler Negative Content-Length",
      "target": "django.core.servers.basehttp.ServerHandler.__init__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "ServerHandler's CONTENT_LENGTH parsing handles invalid string values by defaulting to 0, but allows negative integers through, creating a LimitedStream with a negative limit instead of the intended 0.",
      "package": "django",
      "file_name": "bug_report_django_core_servers_serverhandler_negative_content_length_2025-09-25_11-33_dtyh.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_servers_serverhandler_negative_content_length_2025-09-25_11-33_dtyh.md",
      "call_id": "de485955",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TemplateCommand --exclude Makes Filtering Less Restrictive",
      "target": "django.core.management.templates.TemplateCommand.handle",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using the `--exclude` option with Django's `startapp` or `startproject` commands, the directory filtering becomes LESS restrictive rather than MORE restrictive. Specifically, without `--exclude`, all directories starting with `.` are excluded, but WITH `--exclude`, only `.git` is excluded, allowing directories like `.vscode`, `.idea`, etc. to be copied.",
      "package": "django",
      "file_name": "bug_report_django_templatecommand_exclude_2025-09-25_12-30_a3b8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templatecommand_exclude_2025-09-25_12-30_a3b8.md",
      "call_id": "3c51fb71",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "WhereNode XOR Emulation Crashes on Empty Children",
      "target": "django.db.models.sql.where.WhereNode.as_sql",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a `WhereNode` with `XOR` connector has no children and the database doesn't support native XOR operations, calling `as_sql()` raises a `TypeError` due to an empty `reduce()` call without an initial value.",
      "package": "django",
      "file_name": "bug_report_django_wherenode_xor_empty_2025-09-25_09-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_wherenode_xor_empty_2025-09-25_09-30_x7k9.md",
      "call_id": "27ffb7c2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.apps AppConfig.create() IndexError on Trailing Dot",
      "target": "django.apps.config.AppConfig.create",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AppConfig.create()` raises an unhelpful `IndexError` when called with an entry that ends with a dot (e.g., `\"django.contrib.auth.\"`), instead of a clear error message indicating the configuration is invalid.",
      "package": "django",
      "file_name": "bug_report_django_apps_create_trailing_dot_2025-09-25_10-33_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_apps_create_trailing_dot_2025-09-25_10-33_a7k2.md",
      "call_id": "7c56cc57",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.apps.get_model() Cryptic Error Message",
      "target": "django.apps.registry.Apps.get_model()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `Apps.get_model()` is called with a single argument that doesn't contain exactly one dot, it raises a ValueError with a cryptic Python unpacking error message instead of a clear, user-friendly message explaining the required format.",
      "package": "django",
      "file_name": "bug_report_django_apps_get_model_error_message_2025-09-25_11-04_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_apps_get_model_error_message_2025-09-25_11-04_k3x9.md",
      "call_id": "2a8b0fbb",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.apps.registry.Apps.get_model Unclear Error Message",
      "target": "django.apps.registry.Apps.get_model",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Apps.get_model()` method promises to \"raise ValueError if called with a single argument that doesn't contain exactly one dot\" according to its docstring. However, when called with a string containing multiple dots, it raises a confusing ValueError with message \"too many values to unpack (expected 2)\" instead of a clear error explaining the dot requirement.",
      "package": "django",
      "file_name": "bug_report_django_apps_get_model_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_apps_get_model_2025-09-25_00-00_x3k9.md",
      "call_id": "b2ab6e11",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf SECRET_KEY Misleading Error Message",
      "target": "django.conf.LazySettings.__getattr__",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `SECRET_KEY` is set to a non-empty falsy value (e.g., `False`, `0`), the error message incorrectly states \"must not be empty\" even though the value is not empty in the traditional sense.",
      "package": "django",
      "file_name": "bug_report_django_conf_secret_key_2025-09-25_08-32_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_secret_key_2025-09-25_08-32_x7k9.md",
      "call_id": "173129db",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf Settings TIME_ZONE Path Traversal",
      "target": "django.conf.Settings.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Django's Settings class accepts TIME_ZONE values with path traversal sequences (e.g., `../../../tmp/file`) that escape the intended `/usr/share/zoneinfo` directory. The timezone validation logic only checks if the constructed path exists, not whether it's actually within the zoneinfo directory.",
      "package": "django",
      "file_name": "bug_report_django_conf_timezone_path_construction_2025-09-25_02-03_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_timezone_path_construction_2025-09-25_02-03_k3x9.md",
      "call_id": "e958c4c0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.SettingsReference String Operations Lose setting_name",
      "target": "django.conf.SettingsReference",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`SettingsReference` is a `str` subclass with a `setting_name` attribute used for serializing model references in Django migrations. However, any string operation (`.upper()`, `.lower()`, `.strip()`, etc.) returns a plain `str` object that loses the `setting_name` attribute, breaking serialization and potentially causing migration failures.",
      "package": "django",
      "file_name": "bug_report_django_conf_SettingsReference_2025-09-25_04-27_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_SettingsReference_2025-09-25_04-27_k3m9.md",
      "call_id": "022c8f92",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.UserSettingsHolder Allows Lowercase Settings",
      "target": "django.conf.UserSettingsHolder",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`UserSettingsHolder.__setattr__` allows setting lowercase attribute names, violating the contract that Django settings must be uppercase. This bypasses the validation enforced by `LazySettings.configure()` and creates an API inconsistency.",
      "package": "django",
      "file_name": "bug_report_django_conf_UserSettingsHolder_2025-09-25_08-55_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_UserSettingsHolder_2025-09-25_08-55_k3m9.md",
      "call_id": "6d48395c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.locale Azerbaijani Incorrectly Marked as Bidi",
      "target": "django.conf.locale.LANG_INFO",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Azerbaijani language (code 'az') is incorrectly marked as bidirectional (`bidi: True`) in LANG_INFO, despite using Latin script which is left-to-right.",
      "package": "django",
      "file_name": "bug_report_django_conf_locale_azerbaijani_bidi_2025-09-25_14-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_locale_azerbaijani_bidi_2025-09-25_14-30_k7x2.md",
      "call_id": "cc71eb42",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.locale Azerbaijani Incorrectly Marked as Right-to-Left",
      "target": "django.conf.locale.LANG_INFO['az']",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Azerbaijani language (code 'az') is incorrectly marked as a right-to-left (bidirectional) language with `bidi: True` in LANG_INFO, when it should be `bidi: False` since Azerbaijani has used Latin script exclusively since 1991.",
      "package": "django",
      "file_name": "bug_report_django_conf_locale_azerbaijani_bidi_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_locale_azerbaijani_bidi_2025-09-25_k3m9.md",
      "call_id": "fed27dba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.locale Missing Base Chinese Language Code",
      "target": "django.conf.locale.LANG_INFO",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "LANG_INFO contains Chinese language variants (`zh-hans`, `zh-hant`) but is missing the base Chinese language code `zh`. This breaks Django's language fallback logic and prevents users from using the generic `zh` language code.",
      "package": "django",
      "file_name": "bug_report_django_conf_locale_missing_zh_2025-09-25_17-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_locale_missing_zh_2025-09-25_17-00_k3m9.md",
      "call_id": "10c37adb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.locale Missing LANG_INFO Entries for 7 Locales",
      "target": "django.conf.locale.LANG_INFO",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `LANG_INFO` dictionary in `django.conf.locale` is missing entries for 7 locale variants that have corresponding directories with locale data on disk: `de-ch`, `en-ca`, `en-ie`, `es-pr`, `fr-be`, `fr-ca`, and `fr-ch`.",
      "package": "django",
      "file_name": "bug_report_django_conf_locale_missing_entries_2025-09-25_16-30_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_locale_missing_entries_2025-09-25_16-30_x3k9.md",
      "call_id": "70b339af",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.include app_name Type Validation Missing",
      "target": "django.conf.urls.include",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `include()` function accepts non-string values for `app_name` in 2-tuples without validation, causing `TypeError` crashes during URL resolution when the resolver tries to join app names with \":\".",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_include_2025-09-25_04-57_rbaa.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_include_2025-09-25_04-57_rbaa.md",
      "call_id": "18e0b549",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.include() Empty String app_name Treated as None",
      "target": "django.conf.urls.include()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When calling `include((urlconf, ''), namespace='ns')` with an empty string as `app_name`, the function incorrectly raises `ImproperlyConfigured`, treating the empty string as if no `app_name` was provided. This is due to using a truthiness check (`not app_name`) instead of explicitly checking for `None`.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_include_empty_app_name_2025-09-25_05-03_m8x4.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_include_empty_app_name_2025-09-25_05-03_m8x4.md",
      "call_id": "bbd6f4b1",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.static Catch-All Pattern with Slash-Only Prefix",
      "target": "django.conf.urls.static.static()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `static()` function creates an overly permissive catch-all URL pattern when given a prefix consisting only of slashes (e.g., `\"/\"`, `\"//\"`, `\"///\"`). This happens because `prefix.lstrip(\"/\")` removes all leading slashes, resulting in an empty string that produces the regex `^(?P<path>.*)$`, which matches all URLs.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_static_slash_prefix_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_static_slash_prefix_2025-09-25_00-00_k3f9.md",
      "call_id": "550f8169",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.static Incomplete Prefix Validation",
      "target": "django.conf.urls.static.static()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `static()` function validates that the prefix is not empty, but fails to validate that it doesn't become empty after internal `lstrip('/')` processing. This allows slash-only prefixes like `'/'` to create overly broad URL patterns.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_static_validation_2025-09-25_01-24_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_static_validation_2025-09-25_01-24_x9k3.md",
      "call_id": "3e3abaab",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.static Slash-Only Prefix Creates Catch-All Pattern",
      "target": "django.conf.urls.static.static()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `static()` function accepts a slash-only prefix (e.g., \"/\", \"//\", \"///\") which, after `lstrip(\"/\")`, becomes an empty string. This creates a catch-all regex pattern `^(?P<path>.*)$` that matches all URLs, causing incorrect routing behavior.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_static_slash_prefix_2025-09-25_04-48_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_static_slash_prefix_2025-09-25_04-48_k3x9.md",
      "call_id": "be82bc3a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.static Whitespace-Only Prefix",
      "target": "django.conf.urls.static.static",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `static()` function accepts whitespace-only prefixes (e.g., `' '`, `'\\t'`, `'\\n'`) when it should reject them as empty. The validation check `if not prefix:` only catches truly empty strings but allows whitespace-only strings, leading to malformed URL patterns.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_static_whitespace_prefix_2025-09-25_03-33_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_static_whitespace_prefix_2025-09-25_03-33_k8x2.md",
      "call_id": "d48139bc",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.static() Slash Prefix",
      "target": "django.conf.urls.static.static()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `static()` function accepts \"/\" as a valid prefix, but generates an overly-broad URL pattern `^(?P<path>.*)$` that matches ALL URLs in the application, breaking URL routing. This is inconsistent with the function's validation that explicitly rejects empty prefixes.",
      "package": "django",
      "file_name": "bug_report_django_conf_urls_static_slash_prefix_2025-09-25_10-33_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_conf_urls_static_slash_prefix_2025-09-25_10-33_k3x9.md",
      "call_id": "9dad3534",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache LocMemCache._delete() Incomplete Cleanup",
      "target": "django.core.cache.backends.locmem.LocMemCache._delete()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_delete()` method in `LocMemCache` fails to clean up `_expire_info` when a key exists in `_expire_info` but not in `_cache`, leading to an inconsistent internal state and potential memory leak.",
      "package": "django",
      "file_name": "bug_report_django_cache_locmem_delete_2025-09-25_01-00_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_locmem_delete_2025-09-25_01-00_k8x3.md",
      "call_id": "15caf7c5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.backends incr_version Deletes Value When delta=0",
      "target": "django.core.cache.backends.base.BaseCache.incr_version",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `incr_version` method incorrectly deletes the cache value when called with `delta=0`. The method sets the value at the new version (which equals the old version when delta=0), then immediately deletes it, resulting in data loss.",
      "package": "django",
      "file_name": "bug_report_django_cache_incr_version_delta_zero_2025-09-25_01-53_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_incr_version_delta_zero_2025-09-25_01-53_k7x9.md",
      "call_id": "e5249800",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.backends.base.BaseCache.incr_version with delta=0",
      "target": "django.core.cache.backends.base.BaseCache.incr_version",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Calling `incr_version(key, delta=0)` silently deletes the cached value instead of being a no-op, causing unexpected data loss.",
      "package": "django",
      "file_name": "bug_report_django_cache_incr_version_zero_2025-09-25_14-30_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_incr_version_zero_2025-09-25_14-30_k8x3.md",
      "call_id": "71d7cab4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.backends.locmem - MAX_ENTRIES Violation",
      "target": "django.core.cache.backends.locmem.LocMemCache",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The LocMemCache backend violates its MAX_ENTRIES constraint when `cull_frequency > max_entries`. This causes the cache to grow beyond the configured maximum size, potentially leading to unbounded memory growth.",
      "package": "django",
      "file_name": "bug_report_django_cache_locmem_max_entries_violation_2025-09-25_04-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_locmem_max_entries_violation_2025-09-25_04-30_k3x9.md",
      "call_id": "d9c65827",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.backends.locmem MAX_ENTRIES Violation",
      "target": "django.core.cache.backends.locmem.LocMemCache",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The LocMemCache backend can exceed its configured MAX_ENTRIES limit when MAX_ENTRIES is small relative to CULL_FREQUENCY. This violates the documented constraint that the cache should not hold more than MAX_ENTRIES items.",
      "package": "django",
      "file_name": "bug_report_django_core_cache_locmem_max_entries_2025-09-25_06-36_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_cache_locmem_max_entries_2025-09-25_06-36_k3x9.md",
      "call_id": "f7aef465",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.backends.locmem.LocMemCache Max Entries Enforcement",
      "target": "django.core.cache.backends.locmem.LocMemCache._set",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The local memory cache can exceed its configured `max_entries` limit when `cull_frequency` is set such that the number of items to remove rounds down to zero (i.e., when `len(cache) // cull_frequency == 0`).",
      "package": "django",
      "file_name": "bug_report_django_cache_max_entries_enforcement_2025-09-25_00-00_m9p2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_max_entries_enforcement_2025-09-25_00-00_m9p2.md",
      "call_id": "36d752d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.cache.utils.make_template_fragment_key Hash Collision",
      "target": "django.core.cache.utils.make_template_fragment_key",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `make_template_fragment_key` function has a hash collision vulnerability where different `vary_on` lists can produce identical cache keys due to improper separator handling. Specifically, `['a', 'b']` and `['a:b']` generate the same cache key.",
      "package": "django",
      "file_name": "bug_report_django_cache_utils_make_template_fragment_key_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_cache_utils_make_template_fragment_key_2025-09-25_k3m9.md",
      "call_id": "f9afa85d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks CheckRegistry.run_checks String Iteration Bug",
      "target": "django.core.checks.registry.CheckRegistry.run_checks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a check function incorrectly returns a string instead of a list of CheckMessage objects, `CheckRegistry.run_checks()` silently treats the string as an iterable and adds each character to the errors list, instead of raising a TypeError.",
      "package": "django",
      "file_name": "bug_report_django_core_checks_run_checks_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_checks_run_checks_2025-09-25_00-00_x7k9.md",
      "call_id": "48ed38d3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.CheckMessage Equality Not Symmetric",
      "target": "django.core.checks.CheckMessage.__eq__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CheckMessage.__eq__` method violates the symmetry property of equality when comparing instances of the parent class with instances of subclasses (e.g., `Error`, `Warning`). Specifically, `CheckMessage(ERROR, msg) == Error(msg)` returns `True`, but `Error(msg) == CheckMessage(ERROR, msg)` returns `False`.",
      "package": "django",
      "file_name": "bug_report_django_core_checks_CheckMessage_equality_2025-09-25_12-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_checks_CheckMessage_equality_2025-09-25_12-00_k3f9.md",
      "call_id": "0fca4be6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.CheckRegistry Double Registration Overwrites Tags",
      "target": "django.core.checks.registry.CheckRegistry.register",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When the same check function is registered multiple times with different tags using `CheckRegistry.register()`, the second registration overwrites the tags from the first registration instead of accumulating them. This means the check function becomes inaccessible via its original tags.",
      "package": "django",
      "file_name": "bug_report_django_core_checks_CheckRegistry_register_2025-09-25_12-15_n7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_checks_CheckRegistry_register_2025-09-25_12-15_n7k2.md",
      "call_id": "08006e62",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.compatibility CSRF Scheme Validation Mismatch",
      "target": "django.core.checks.compatibility.django_4_0.check_csrf_trusted_origins",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `check_csrf_trusted_origins` function accepts any origin containing \"://\" anywhere in the string, even when the scheme is invalid or positioned incorrectly. The error message claims origins \"must start with a scheme\" but the code only checks if \"://\" exists anywhere.",
      "package": "django",
      "file_name": "bug_report_django_csrf_scheme_validation_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_csrf_scheme_validation_2025-09-25_00-00_x7k9.md",
      "call_id": "d955337a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.registry - Tag Overwrite on Duplicate Registration",
      "target": "django.core.checks.registry.CheckRegistry.register",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When the same check function is registered multiple times with different tags, the second registration silently overwrites the tags from the first registration, making the check no longer callable with the original tags. This violates reasonable user expectations and could cause silent failures in production.",
      "package": "django",
      "file_name": "bug_report_django_core_checks_registry_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_checks_registry_2025-09-25_k3x9.md",
      "call_id": "b4df7cf3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.registry.CheckRegistry String Return Bug",
      "target": "django.core.checks.registry.CheckRegistry.run_checks()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a registered check function returns a string instead of a list of CheckMessage objects, `CheckRegistry.run_checks()` silently accepts it and iterates over the string character-by-character, resulting in a list of individual characters being returned instead of CheckMessage objects.",
      "package": "django",
      "file_name": "bug_report_django_core_checks_registry_2025-09-25_01-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_checks_registry_2025-09-25_01-00_k3x9.md",
      "call_id": "c0706a65",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.security Cross-Origin Opener Policy Whitespace Bug",
      "target": "django.core.checks.security.base.check_cross_origin_opener_policy",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_cross_origin_opener_policy` function incorrectly rejects valid cross-origin opener policy values when they contain leading or trailing whitespace, producing false positive errors.",
      "package": "django",
      "file_name": "bug_report_django_security_checks_cross_origin_whitespace_2025-09-25_06-35_m7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_security_checks_cross_origin_whitespace_2025-09-25_06-35_m7k2.md",
      "call_id": "102f0874",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.security Empty Referrer Policy List Bypasses Warning",
      "target": "django.core.checks.security.base.check_referrer_policy",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_referrer_policy` function treats `SECURE_REFERRER_POLICY = []` (empty list) differently from `SECURE_REFERRER_POLICY = None`, allowing an empty referrer policy to pass validation without any warnings. This is inconsistent and potentially misleading, as both represent \"no referrer policy configured\" and should warn the user about the security implications.",
      "package": "django",
      "file_name": "bug_report_django_security_referrer_policy_2025-09-25_01-54_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_security_referrer_policy_2025-09-25_01-54_k9x3.md",
      "call_id": "e09dd227",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.security.base.check_referrer_policy Empty String Validation",
      "target": "django.core.checks.security.base.check_referrer_policy",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_referrer_policy` function incorrectly rejects valid referrer policy strings that contain trailing commas, double commas, or commas with only whitespace. This causes false positive security check failures.",
      "package": "django",
      "file_name": "bug_report_django_check_referrer_policy_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_check_referrer_policy_2025-09-25_00-00_a7f2.md",
      "call_id": "ef1f8b2f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.checks.security.check_referrer_policy Empty String Validation",
      "target": "django.core.checks.security.base.check_referrer_policy",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_referrer_policy` function incorrectly rejects valid referrer policy strings that contain trailing commas or consecutive commas, due to improper handling of empty strings created during comma-separated value parsing.",
      "package": "django",
      "file_name": "bug_report_django_check_referrer_policy_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_check_referrer_policy_2025-09-25_00-00_k3f9.md",
      "call_id": "da833ea4",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.storage FileSystemStorage Line Ending Corruption",
      "target": "django.core.files.storage.FileSystemStorage",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FileSystemStorage and InMemoryStorage behave inconsistently when handling text files with non-LF line endings. FileSystemStorage silently converts CR (`\\r`) and CRLF (`\\r\\n`) to LF (`\\n`) when opening files in text mode, while InMemoryStorage preserves the original line endings. This violates the storage backend equivalence property and can cause silent data corruption.",
      "package": "django",
      "file_name": "bug_report_django_storage_newline_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_storage_newline_2025-09-25_00-00_k3x9.md",
      "call_id": "f539edd6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.utils FileProxyMixin.writable() Incorrect Mode Detection",
      "target": "django.core.files.utils.FileProxyMixin.writable",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `FileProxyMixin.writable()` method incorrectly determines if a file is writable when the underlying file object doesn't have a `writable()` method. It only checks if `\"w\"` is in the mode string, which fails to detect other writable modes like `\"r+\"`, `\"a\"`, `\"a+\"`, `\"x\"`, and `\"x+\"`.",
      "package": "django",
      "file_name": "bug_report_django_files_fileproxymixin_writable_2025-09-25_00-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_files_fileproxymixin_writable_2025-09-25_00-15_k3x9.md",
      "call_id": "7ac7923f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.utils.FileProxyMixin.closed Property Logic Error",
      "target": "django.core.files.utils.FileProxyMixin.closed",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `closed` property in `FileProxyMixin` incorrectly reports a file as closed when the underlying file object is falsy but actually open. The logic uses `not self.file or self.file.closed`, which returns True for any falsy file object, even if that object's `.closed` attribute is False.",
      "package": "django",
      "file_name": "bug_report_django_files_fileproxymixin_closed_2025-09-25_02-28_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_files_fileproxymixin_closed_2025-09-25_02-28_k3x9.md",
      "call_id": "084c808f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.utils.validate_file_name Backslash Handling Inconsistency",
      "target": "django.core.files.utils.validate_file_name",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validate_file_name` function has inconsistent backslash handling between `allow_relative_path=True` and `allow_relative_path=False` modes on Unix systems, allowing backslashes in filenames when they should be rejected as path separators.",
      "package": "django",
      "file_name": "bug_report_django_core_files_validate_file_name_2025-09-25_02-28_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_files_validate_file_name_2025-09-25_02-28_x7k9.md",
      "call_id": "2a171872",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.utils.validate_file_name Backslash Path Separator Bypass",
      "target": "django.core.files.utils.validate_file_name",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validate_file_name` function fails to properly validate file names containing backslash path separators when `allow_relative_path=False`. On Linux/Unix systems, backslashes are not treated as path separators by `os.path.basename()`, allowing names like `\"uploads\\\\..\\\\passwords.txt\"` to pass validation. This creates a cross-platform security vulnerability where files uploaded on one OS could enable directory traversal attacks when accessed on another OS (particularly Windows).",
      "package": "django",
      "file_name": "bug_report_django_validate_file_name_2025-09-25_00-20_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_validate_file_name_2025-09-25_00-20_x3k9.md",
      "call_id": "b335a018",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.files.utils.validate_file_name Cross-Platform Path Traversal",
      "target": "django.core.files.utils.validate_file_name",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`validate_file_name()` fails to sanitize backslash characters on non-Windows platforms, allowing potential path traversal attacks when uploaded files are transferred to or accessed on Windows systems.",
      "package": "django",
      "file_name": "bug_report_django_core_files_validate_file_name_backslash_2025-09-25_07-05_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_files_validate_file_name_backslash_2025-09-25_07-05_k3x9.md",
      "call_id": "ab85c0e6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.handlers.wsgi.LimitedStream Negative Content-Length",
      "target": "django.core.handlers.wsgi.LimitedStream",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`LimitedStream` fails to enforce read limits when initialized with a negative limit value, allowing unlimited reading from the underlying stream. This can occur when a malicious client sends a negative `Content-Length` header.",
      "package": "django",
      "file_name": "bug_report_django_core_handlers_limitedstream_negative_limit_2025-09-25_05-55_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_handlers_limitedstream_negative_limit_2025-09-25_05-55_k7x9.md",
      "call_id": "12e615cb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.handlers.wsgi.get_script_name UnicodeDecodeError",
      "target": "django.core.handlers.wsgi.get_script_name",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_script_name` function crashes with `UnicodeDecodeError` when processing WSGI environ values containing invalid UTF-8 sequences, while similar functions (`get_path_info`, `get_str_from_wsgi`) handle such input gracefully.",
      "package": "django",
      "file_name": "bug_report_django_core_handlers_get_script_name_2025-09-25_02-03_k8x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_handlers_get_script_name_2025-09-25_02-03_k8x9.md",
      "call_id": "ead06878",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.EmailMessage.attach() Crashes with None Filename",
      "target": "django.core.mail.EmailMessage.attach()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `EmailMessage.attach()` method crashes with a `TypeError` when `filename=None` and `mimetype=None`, despite the docstring stating \"The filename can be omitted\".",
      "package": "django",
      "file_name": "bug_report_django_mail_attach_none_filename_2025-09-25_12-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_attach_none_filename_2025-09-25_12-00_a7f2.md",
      "call_id": "41822743",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.backends.base Context Manager Masks Exceptions",
      "target": "django.core.mail.backends.base.BaseEmailBackend.__enter__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `BaseEmailBackend.__enter__()` method masks the original exception from `open()` when `close()` also raises an exception, making debugging difficult and violating Python exception handling best practices.",
      "package": "django",
      "file_name": "bug_report_django_mail_base_exception_masking_2025-09-25_00-00_m7e0.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_base_exception_masking_2025-09-25_00-00_m7e0.md",
      "call_id": "cf10271e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.backends.console Returns None Instead of 0",
      "target": "django.core.mail.backends.console.EmailBackend.send_messages",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `console.EmailBackend.send_messages` method returns `None` when given an empty list of messages, violating the documented API contract that states it should \"return the number of email messages sent\".",
      "package": "django",
      "file_name": "bug_report_django_core_mail_backends_console_empty_return_2025-09-25_10-05_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_mail_backends_console_empty_return_2025-09-25_10-05_k3x9.md",
      "call_id": "09760371",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.backends.console Returns None for Empty Message List",
      "target": "django.core.mail.backends.console.EmailBackend.send_messages",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `send_messages` method in `console.EmailBackend` returns `None` instead of `0` when called with an empty list of messages, violating the API contract specified in the base class.",
      "package": "django",
      "file_name": "bug_report_django_core_mail_backends_console_2025-09-25_14-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_mail_backends_console_2025-09-25_14-30_k3f9.md",
      "call_id": "da98eef3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.backends.console Returns None for Empty Messages",
      "target": "django.core.mail.backends.console.EmailBackend.send_messages",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `send_messages()` method in `ConsoleBackend` returns `None` instead of `0` when called with an empty list of messages, violating the documented contract that it should return the number of messages sent (an integer).",
      "package": "django",
      "file_name": "bug_report_django_core_mail_backends_console_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_mail_backends_console_2025-09-25_00-00_k3f9.md",
      "call_id": "ae2429cf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.backends.filebased Unclear Error on Missing Path",
      "target": "django.core.mail.backends.filebased.EmailBackend.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The file-based email backend raises a confusing `TypeError` instead of a clear `ImproperlyConfigured` error when neither the `file_path` parameter nor the `EMAIL_FILE_PATH` setting is provided.",
      "package": "django",
      "file_name": "bug_report_django_core_mail_backends_filebased_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_mail_backends_filebased_2025-09-25_00-01_x7k9.md",
      "call_id": "c341fff7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.mail.forbid_multi_line_headers Header Injection Vulnerability",
      "target": "django.core.mail.message.forbid_multi_line_headers",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `forbid_multi_line_headers` function fails to prevent newlines in email headers when the header value contains non-ASCII characters. This creates a **header injection vulnerability** that the function is explicitly designed to prevent.",
      "package": "django",
      "file_name": "bug_report_django_mail_forbid_multi_line_headers_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_forbid_multi_line_headers_2025-09-25_00-00_x7k9.md",
      "call_id": "232bcd85",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.management.ManagementUtility.autocomplete Index Bug",
      "target": "django.core.management.ManagementUtility.autocomplete",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The autocomplete() method incorrectly handles the case when COMP_CWORD=0 due to negative indexing behavior in Python, causing it to access the last element of the list instead of setting curr to an empty string.",
      "package": "django",
      "file_name": "bug_report_django_core_management_autocomplete_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_management_autocomplete_2025-09-25_00-00_k3m9.md",
      "call_id": "1a496836",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.management.ManagementUtility.autocomplete prev_opts Index Bug",
      "target": "django.core.management.ManagementUtility.autocomplete",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The autocomplete() method incorrectly computes prev_opts when COMP_CWORD=0, including all previous options instead of an empty set due to negative slice indexing.",
      "package": "django",
      "file_name": "bug_report_django_core_management_autocomplete_prev_opts_2025-09-25_00-00_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_management_autocomplete_prev_opts_2025-09-25_00-00_x8k3.md",
      "call_id": "c112b357",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.management.utils.handle_extensions Empty String Handling",
      "target": "django.core.management.utils.handle_extensions",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `handle_extensions()` function does not filter out empty strings that result from comma-separated extension lists, causing it to return `'.'` as a valid file extension when given inputs with consecutive commas, trailing commas, or comma-separated spaces.",
      "package": "django",
      "file_name": "bug_report_django_core_management_handle_extensions_2025-09-25_02-50_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_management_handle_extensions_2025-09-25_02-50_k3x9.md",
      "call_id": "d22bf04e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.management.utils.handle_extensions Invalid Extension",
      "target": "django.core.management.utils.handle_extensions",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `handle_extensions` function produces an invalid file extension '.' (single dot) when processing comma-separated extension lists that contain empty strings, such as those created by double commas, leading commas, or trailing commas in user input.",
      "package": "django",
      "file_name": "bug_report_django_handle_extensions_empty_2025-09-25_07-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_handle_extensions_empty_2025-09-25_07-30_k3x9.md",
      "call_id": "4f428539",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers.base.ProgressBar Division by Zero",
      "target": "django.core.serializers.base.ProgressBar",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ProgressBar.update() crashes with ZeroDivisionError when total_count is 0, which occurs when serializing empty querysets with progress output enabled.",
      "package": "django",
      "file_name": "bug_report_django_serializers_progressbar_division_by_zero_2025-09-25_04-02_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_serializers_progressbar_division_by_zero_2025-09-25_04-02_k3x9.md",
      "call_id": "5537c5d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers.base.ProgressBar Division by Zero",
      "target": "django.core.serializers.base.ProgressBar",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ProgressBar.update() crashes with ZeroDivisionError when total_count is 0, which can occur when serializing with progress_output but without specifying object_count.",
      "package": "django",
      "file_name": "bug_report_django_serializers_progressbar_division_by_zero_2025-09-25_12-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_serializers_progressbar_division_by_zero_2025-09-25_12-00_k3x9.md",
      "call_id": "162508bb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers.base.ProgressBar Division by Zero",
      "target": "django.core.serializers.base.ProgressBar",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ProgressBar.update()` method crashes with `ZeroDivisionError` when `total_count` is initialized to 0, which is the default value for the `object_count` parameter in `Serializer.serialize()`.",
      "package": "django",
      "file_name": "bug_report_django_serializers_progressbar_2025-09-25_02-25_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_serializers_progressbar_2025-09-25_02-25_x7k9.md",
      "call_id": "aaf0bb7f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers.base.ProgressBar ZeroDivisionError",
      "target": "django.core.serializers.base.ProgressBar.update",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ProgressBar.update() crashes with ZeroDivisionError when total_count is 0, which occurs when running `dumpdata` on an empty database with progress output enabled.",
      "package": "django",
      "file_name": "bug_report_django_progressbar_zerodiv_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_progressbar_zerodiv_2025-09-25_00-00_k3x9.md",
      "call_id": "5b83d40a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers.base.deserialize_m2m_values UnboundLocalError",
      "target": "django.core.serializers.base.deserialize_m2m_values",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `deserialize_m2m_values` function at `/django/core/serializers/base.py:328-361` raises an `UnboundLocalError` when an exception occurs during iteration before the loop variable `pk` is assigned. The bug occurs at line 360 where the exception handler references `pk`, but this variable may not exist if the exception happens before or during the first iteration of the loop.",
      "package": "django",
      "file_name": "bug_report_django_serializers_m2m_unboundlocal_2025-09-25_08-05_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_serializers_m2m_unboundlocal_2025-09-25_08-05_x9k2.md",
      "call_id": "283c0782",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.servers.basehttp.WSGIRequestHandler.get_environ Dictionary Modification During Iteration",
      "target": "django.core.servers.basehttp.WSGIRequestHandler.get_environ",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`WSGIRequestHandler.get_environ()` modifies `self.headers` dictionary while iterating over it, which can cause `RuntimeError` or result in incomplete header removal, leaving security-sensitive headers with underscores intact.",
      "package": "django",
      "file_name": "bug_report_django_servers_get_environ_2025-09-25_14-31_x9p4.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_servers_get_environ_2025-09-25_14-31_x9p4.md",
      "call_id": "dbf12842",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.servers.basehttp.is_broken_pipe_error Crashes Without Active Exception",
      "target": "django.core.servers.basehttp.is_broken_pipe_error",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_broken_pipe_error()` function crashes with `TypeError` when called without an active exception, because it attempts to call `issubclass()` on `None`.",
      "package": "django",
      "file_name": "bug_report_django_core_servers_is_broken_pipe_error_2025-09-25_01-27_yvmp.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_servers_is_broken_pipe_error_2025-09-25_01-27_yvmp.md",
      "call_id": "072121ec",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.signing b62_decode IndexError and Invalid Input Handling",
      "target": "django.core.signing.b62_decode",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `b62_decode` function in `django.core.signing` crashes with `IndexError` when given an empty string, and returns incorrect values for invalid inputs like `\"-\"`. This violates both defensive programming principles and the documented round-trip property between `b62_encode` and `b62_decode`.",
      "package": "django",
      "file_name": "bug_report_django_core_signing_b62_decode_2025-09-25_08-39_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_signing_b62_decode_2025-09-25_08-39_k3x9.md",
      "call_id": "7f1137c7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.signing.b62_decode Invalid Input Handling",
      "target": "django.core.signing.b62_decode",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `b62_decode` function accepts invalid base62 encoded strings (specifically `-` and `-0`) and silently returns 0, violating the decode-encode round-trip property that base encoding functions should satisfy.",
      "package": "django",
      "file_name": "bug_report_django_core_signing_b62_decode_2025-09-25_00-00_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_core_signing_b62_decode_2025-09-25_00-00_k7m9.md",
      "call_id": "c5740599",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.base.schema.truncate_name Idempotence Violation",
      "target": "django.db.backends.base.schema.truncate_name",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_name` function is not idempotent: applying it twice with the same length can produce different results. A function that \"shortens\" identifiers should satisfy `truncate_name(truncate_name(x, L), L) == truncate_name(x, L)`, but this fails when `length < hash_len`.",
      "package": "django",
      "file_name": "bug_report_django_truncate_name_idempotence_2025-09-25_00-00_e5f6.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_truncate_name_idempotence_2025-09-25_00-00_e5f6.md",
      "call_id": "acc94e6b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.dummy Shared Mutable `operators` Dict",
      "target": "django.db.backends.dummy.base.DatabaseWrapper",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DatabaseWrapper` class in `django.db.backends.dummy` uses a class-level mutable dict `operators = {}`, which is shared between all instances. Modifying the `operators` dict on one instance affects all other instances, violating instance isolation.",
      "package": "django",
      "file_name": "bug_report_django_db_backends_dummy_operators_2025-09-25_01-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_db_backends_dummy_operators_2025-09-25_01-00_x7k9.md",
      "call_id": "51d53c92",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.mysql.operations Typo in Error Message",
      "target": "django.db.backends.mysql.operations.DatabaseOperations.date_extract_sql",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `date_extract_sql` method contains a typo in its error message: \"loookup\" instead of \"lookup\" (three o's instead of two).",
      "package": "django",
      "file_name": "bug_report_django_mysql_date_extract_typo_2025-09-25_04-02_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mysql_date_extract_typo_2025-09-25_04-02_k3x9.md",
      "call_id": "e6cb9e01",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.oracle Last Executed Query Duplicate Parameters",
      "target": "django.db.backends.oracle.operations.DatabaseOperations.last_executed_query",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `last_executed_query()` receives a list of parameters with duplicates, it incorrectly uses `dict.fromkeys()` to deduplicate before enumeration, causing parameter index misalignment and leaving some placeholders unreplaced in the returned query string.",
      "package": "django",
      "file_name": "bug_report_django_oracle_last_executed_query_2025-09-25_03-33_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_oracle_last_executed_query_2025-09-25_03-33_k8x2.md",
      "call_id": "d1cbcf43",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.oracle date_extract_sql Typo in Error Message",
      "target": "django.db.backends.oracle.operations.DatabaseOperations.date_extract_sql",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `date_extract_sql` contains a typo: \"Invalid loookup type\" (with 3 o's) instead of \"Invalid lookup type\" (with 2 o's).",
      "package": "django",
      "file_name": "bug_report_django_oracle_date_extract_sql_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_oracle_date_extract_sql_2025-09-25_00-00_a1b2.md",
      "call_id": "4fcfd676",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.oracle.operations.DatabaseOperations.last_executed_query - Incorrect Parameter Substitution with Duplicate Values",
      "target": "django.db.backends.oracle.operations.DatabaseOperations.last_executed_query",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `last_executed_query` method incorrectly handles list/tuple parameters containing duplicate values. It uses `dict.fromkeys()` which removes duplicates, causing parameter indices to be incorrect when substituting placeholders in the SQL statement.",
      "package": "django",
      "file_name": "bug_report_django_oracle_last_executed_query_2025-09-25_03-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_oracle_last_executed_query_2025-09-25_03-45_k3m9.md",
      "call_id": "359653ba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.postgresql date_extract_sql accepts invalid PostgreSQL field names",
      "target": "django.db.backends.postgresql.operations.DatabaseOperations.date_extract_sql",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `date_extract_sql` method accepts invalid PostgreSQL EXTRACT field names (like \"WEEK_DAY\", \"ISO_WEEK_DAY\", \"ISO_YEAR\") that will cause runtime failures when executed against PostgreSQL. The regex validation `[A-Z_]+` is too permissive and doesn't ensure the field name is valid in PostgreSQL.",
      "package": "django",
      "file_name": "bug_report_django_postgresql_date_extract_sql_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_postgresql_date_extract_sql_2025-09-25_00-00_x7k9.md",
      "call_id": "e2658ac0",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.sqlite3 _quote_params_for_last_executed_query Empty List",
      "target": "django.db.backends.sqlite3.operations.DatabaseOperations._quote_params_for_last_executed_query",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_quote_params_for_last_executed_query` method crashes with `sqlite3.OperationalError: incomplete input` when called with an empty parameter tuple or list.",
      "package": "django",
      "file_name": "bug_report_django_sqlite3_quote_params_empty_list_2025-09-25_06-36_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sqlite3_quote_params_empty_list_2025-09-25_06-36_k3x9.md",
      "call_id": "f7b9c636",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.sqlite3 quote_name Missing Quote Escaping",
      "target": "django.db.backends.sqlite3.operations.DatabaseOperations.quote_name",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quote_name` method does not properly escape embedded double quotes in identifier names, creating malformed SQL when identifiers contain quote characters. According to SQLite's syntax, double quotes within quoted identifiers must be escaped by doubling them.",
      "package": "django",
      "file_name": "bug_report_django_sqlite_quote_name_escaping_2025-09-25_03-37_m4n8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sqlite_quote_name_escaping_2025-09-25_03-37_m4n8.md",
      "call_id": "f77961d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.sqlite3._functions._sqlite_sqrt Domain Error",
      "target": "django.db.backends.sqlite3._functions._sqlite_sqrt",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_sqlite_sqrt` function crashes with an unhandled `ValueError` when given negative inputs, instead of gracefully returning `None` to represent SQL NULL as other database systems do for invalid mathematical operations.",
      "package": "django",
      "file_name": "bug_report_django_sqlite3_sqrt_domain_error_2025-09-25_06-35_2xo8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sqlite3_sqrt_domain_error_2025-09-25_06-35_2xo8.md",
      "call_id": "b6d1aeb9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.sqlite3._sqlite_lpad Length Invariant Violation",
      "target": "django.db.backends.sqlite3._functions._sqlite_lpad",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_sqlite_lpad` function violates its fundamental length invariant when `fill_text` is empty. The function should always return a string of exactly `length` characters, but returns a shorter string when `fill_text=\"\"`.",
      "package": "django",
      "file_name": "bug_report_django_sqlite_lpad_2025-09-25_03-33_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sqlite_lpad_2025-09-25_03-33_k7m2.md",
      "call_id": "3a191e48",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.utils.truncate_name Length Invariant Violation",
      "target": "django.db.backends.utils.truncate_name",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_name` function violates its documented contract of shortening an identifier to \"the given length\" when `hash_len >= length`. The function produces identifiers longer than the specified `length` parameter.",
      "package": "django",
      "file_name": "bug_report_django_db_backends_utils_truncate_name_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_db_backends_utils_truncate_name_2025-09-25_12-00_k3m9.md",
      "call_id": "8094b4fb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.utils.truncate_name Length Limit Violation",
      "target": "django.db.backends.utils.truncate_name",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_name` function violates its contract by returning identifiers longer than the specified `length` parameter when `length < hash_len` (default hash_len=4). This breaks the fundamental property that the truncated result should never exceed the requested length.",
      "package": "django",
      "file_name": "bug_report_django_truncate_name_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_truncate_name_2025-09-25_00-00_k3m9.md",
      "call_id": "709cd6e6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.utils.truncate_name Length Violation",
      "target": "django.db.backends.utils.truncate_name",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_name` function violates its documented contract when `length < hash_len` (default 4). It returns identifiers longer than the requested `length`, which can cause issues when database systems enforce strict identifier length limits.",
      "package": "django",
      "file_name": "bug_report_django_db_backends_utils_truncate_name_2025-09-25_01-53_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_db_backends_utils_truncate_name_2025-09-25_01-53_k8x2.md",
      "call_id": "d28c54b1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.backends.utils.typecast_date Poor Error Handling",
      "target": "django.db.backends.utils.typecast_date",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `typecast_date` and `typecast_timestamp` functions crash with confusing `TypeError` messages when given strings that don't match the expected format, instead of raising a clear `ValueError` or returning `None`.",
      "package": "django",
      "file_name": "bug_report_django_backends_typecast_date_2025-09-25_03-33_m4k7.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_backends_typecast_date_2025-09-25_03-33_m4k7.md",
      "call_id": "34fae0d1",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.migrations DictionarySerializer Mixed Key Types",
      "target": "django.db.migrations.serializer.DictionarySerializer",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`DictionarySerializer.serialize()` crashes with a `TypeError` when attempting to serialize dictionaries with mixed-type keys (e.g., integers and strings) because it calls `sorted()` without a key function.",
      "package": "django",
      "file_name": "bug_report_django_migrations_dictionaryserializer_mixed_keys_2025-09-25_01-26_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_dictionaryserializer_mixed_keys_2025-09-25_01-26_a7f2.md",
      "call_id": "0ed77e34",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.migrations.graph.Node Equality Contract Violation",
      "target": "django.db.migrations.graph.Node.__eq__",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Node.__eq__` method in `django/db/migrations/graph.py` violates Python's equality contract by implementing asymmetric equality comparison. When a `Node` is compared to a tuple key, `node == key` evaluates to `True`, but `key == node` evaluates to `False`, breaking the fundamental symmetry requirement.",
      "package": "django",
      "file_name": "bug_report_django_migrations_node_equality_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_node_equality_2025-09-25_00-00_a7f2.md",
      "call_id": "acf48527",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.migrations.operations FieldOperation references_field Case Sensitivity Inconsistency",
      "target": "django.db.migrations.operations.fields.FieldOperation.references_field",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `FieldOperation.references_field()` method uses case-sensitive field name comparison, while other methods in the same class (`is_same_field_operation`, `is_same_model_operation`, `references_model`) use case-insensitive comparison. This inconsistency can break operation optimization when field names differ only in case.",
      "package": "django",
      "file_name": "bug_report_django_migrations_operations_field_case_sensitivity_2025-09-25_07-26_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_operations_field_case_sensitivity_2025-09-25_07-26_k3x9.md",
      "call_id": "b1c796f3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.migrations.operations.AddIndex violates immutability in reduce()",
      "target": "django.db.migrations.operations.AddIndex.reduce()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AddIndex.reduce()` method mutates the operation's `index.name` attribute, violating the documented immutability guarantee of migration operations. This can lead to unexpected behavior when operations are reused or when the optimizer processes migration operations.",
      "package": "django",
      "file_name": "bug_report_django_migrations_AddIndex_reduce_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_migrations_AddIndex_reduce_2025-09-25_00-00_k3m9.md",
      "call_id": "2fbbfed4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.Q Boolean Algebra Violations",
      "target": "django.db.models.Q",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Django's Q object equality comparison is order-dependent when combining Q objects with logical operators (`&`, `|`), violating fundamental boolean algebra properties including commutativity, idempotence, and De Morgan's laws.",
      "package": "django",
      "file_name": "bug_report_django_Q_equality_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_Q_equality_2025-09-25_00-00_k3f9.md",
      "call_id": "a2d7a1bf",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.Q Equality Violates Boolean Algebra Properties",
      "target": "django.db.models.Q",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The Q class implements `__eq__` and `__hash__` using structural comparison rather than logical equivalence, causing Q objects with identical logical meaning but different structure to be treated as unequal. This violates fundamental Boolean algebra properties (commutativity and idempotence) that users would reasonably expect from logical AND/OR operators.",
      "package": "django",
      "file_name": "bug_report_django_q_equality_2025-09-25_14-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_q_equality_2025-09-25_14-30_k7m9.md",
      "call_id": "15ba1519",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.Q Idempotence Violation",
      "target": "django.db.models.Q",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Q objects violate the idempotence property: combining a Q object with itself using `&` or `|` should return an equivalent object, but instead creates redundant conditions in the generated SQL, making queries less efficient.",
      "package": "django",
      "file_name": "bug_report_django_Q_idempotence_2025-09-25_02-58_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_Q_idempotence_2025-09-25_02-58_k3f9.md",
      "call_id": "37cb6f38",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.fields.BlankChoiceIterator Unpacks Tuple",
      "target": "django.db.models.fields.BlankChoiceIterator",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`BlankChoiceIterator.__iter__` incorrectly unpacks the `blank_choice` tuple using `yield from`, resulting in individual tuple elements being yielded instead of the tuple itself. This breaks the expected structure where all choice items should be (value, label) tuples.",
      "package": "django",
      "file_name": "bug_report_django_fields_BlankChoiceIterator_2025-09-25_11-01_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_fields_BlankChoiceIterator_2025-09-25_11-01_k3x9.md",
      "call_id": "a528e33d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.fields.Field validate() Incorrectly Rejects None When null=True, blank=False",
      "target": "django.db.models.fields.Field.validate()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Field.validate()` method incorrectly raises a \"blank\" validation error for `None` values when a field has `null=True` and `blank=False`. This violates the expected behavior where `null=True` should allow None values regardless of the `blank` setting.",
      "package": "django",
      "file_name": "bug_report_django_field_validate_null_blank_2025-09-25_06-35_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_field_validate_null_blank_2025-09-25_06-35_k7x9.md",
      "call_id": "952325a8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.functions NthValue Error Message Typo",
      "target": "django.db.models.functions.window.NthValue.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NthValue` class has a grammatical error in its error message. When validation fails, it produces the message \"NthValue requires a positive integer as for nth\" which contains the incorrect phrase \"as for nth\" instead of the grammatically correct \"for nth\" or \"as nth\".",
      "package": "django",
      "file_name": "bug_report_django_nthvalue_error_message_2025-09-25_16-45_m3k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_nthvalue_error_message_2025-09-25_16-45_m3k2.md",
      "call_id": "78bc4d0a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.functions TruncBase Unreachable Code",
      "target": "django.db.models.functions.datetime.TruncBase.convert_value",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TruncBase.convert_value` method contains unreachable code at line 358 where it checks `if value is None:` inside an `elif isinstance(value, datetime):` block. Since a datetime instance cannot be None, this condition will always be False and the code block will never execute.",
      "package": "django",
      "file_name": "bug_report_django_trunc_unreachable_code_2025-09-25_16-55_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_trunc_unreachable_code_2025-09-25_16-55_x7k9.md",
      "call_id": "53483318",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.functions.Collate - Accepts Invalid Collation Names with Trailing Newlines",
      "target": "django.db.models.functions.Collate",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Collate` function's validation regex incorrectly accepts collation names containing trailing newlines due to Python's `$` anchor matching before a trailing newline. This violates the intended validation contract and could lead to malformed SQL queries.",
      "package": "django",
      "file_name": "bug_report_django_collate_newline_2025-09-25_00-00_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_collate_newline_2025-09-25_00-00_k3n9.md",
      "call_id": "ac2c03ba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.functions.Substr Missing Length Validation",
      "target": "django.db.models.functions.Substr",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Substr` function accepts invalid `length` parameter values (zero and negative integers) without validation, while the similar `Left` function correctly validates that `length` must be greater than 0. This inconsistency violates the expected API contract and could lead to database errors.",
      "package": "django",
      "file_name": "bug_report_django_Substr_length_validation_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_Substr_length_validation_2025-09-25_k3m9.md",
      "call_id": "274dcc6d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.models.sql Join Identity Incomplete",
      "target": "django.db.models.sql.datastructures.Join",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Join.identity` property excludes `join_type`, `table_alias`, and `nullable` fields, causing Join objects with different join types (INNER vs LEFT OUTER) to be considered equal and have identical hashes. This violates the principle that equal objects should be functionally equivalent, as INNER JOIN and LEFT OUTER JOIN produce different SQL results.",
      "package": "django",
      "file_name": "bug_report_django_sql_join_identity_2025-09-25_05-25_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_sql_join_identity_2025-09-25_05-25_k8x3.md",
      "call_id": "94b7bb51",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.utils.ConnectionHandler Type Assumption on TEST Setting",
      "target": "django.db.utils.ConnectionHandler.configure_settings",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ConnectionHandler.configure_settings` method assumes the `TEST` database configuration value is always a dictionary, causing an `AttributeError` when users provide non-dictionary values like empty strings.",
      "package": "django",
      "file_name": "bug_report_django_db_ConnectionHandler_2025-09-25_03-33_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_db_ConnectionHandler_2025-09-25_03-33_x7k9.md",
      "call_id": "945b28c6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.db.utils.ConnectionHandler.configure_settings TEST Setting Type Validation",
      "target": "django.db.utils.ConnectionHandler.configure_settings",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `configure_settings` method in `ConnectionHandler` crashes with an `AttributeError` when the `TEST` setting is provided as a non-dict value (e.g., empty string, integer, or any non-dict type), because it assumes `TEST` is always a dictionary without validation.",
      "package": "django",
      "file_name": "bug_report_django_db_configure_settings_2025-09-25_03-33_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_db_configure_settings_2025-09-25_03-33_k7m9.md",
      "call_id": "eb976391",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch Signal Caching Crashes with Non-Weakrefable Senders",
      "target": "django.dispatch.Signal",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `Signal(use_caching=True)` is used, calling `send()`, `has_listeners()`, or related methods with senders that cannot be weakly referenced (like `None` or plain `object()` instances) causes a `TypeError: cannot create weak reference to 'X' object` crash.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_use_caching_weakref_2025-09-25_03-57_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_use_caching_weakref_2025-09-25_03-57_k7x2.md",
      "call_id": "8394e5c1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch Signal Crashes with None and String Senders When Caching Enabled",
      "target": "django.dispatch.Signal",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Signal crashes when use_caching=True and sender is None or a string, due to WeakKeyDictionary being unable to create weak references to these types. This extends the existing bug with object() instances to cover explicitly documented and commonly used sender types.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_weakkey_none_str_2025-09-25_02-59_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_weakkey_none_str_2025-09-25_02-59_m8k3.md",
      "call_id": "518c672e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch Signal WeakKeyDictionary Caching Issue",
      "target": "django.dispatch.Signal",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `Signal(use_caching=True)` is used, the signal crashes with `TypeError` when the sender is `None` or other non-weakref-able types (like `object()`), despite the API explicitly documenting that `None` is a valid sender.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_weakref_2025-09-25_04-31_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_weakref_2025-09-25_04-31_k3m9.md",
      "call_id": "00f63c1f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch.Signal Crashes with Caching and Non-Weakly-Referenceable Senders",
      "target": "django.dispatch.Signal.send",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a `Signal` is created with `use_caching=True`, calling `send()` with a non-weakly-referenceable sender (such as strings, integers, None, tuples) raises a `TypeError`. This affects common use cases where string senders are used.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_weak_key_cache_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_weak_key_cache_2025-09-25_00-01_k3m9.md",
      "call_id": "1692bca5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch.Signal WeakKeyDictionary Incompatibility",
      "target": "django.dispatch.Signal",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `Signal(use_caching=True)` is used, the signal crashes with `TypeError: cannot create weak reference to 'X' object` for many common sender types, including `None`, strings, and plain `object()` instances. This violates the documented API which explicitly allows `sender=None`.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_weakref_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_weakref_2025-09-25_00-00_k3x9.md",
      "call_id": "b5500435",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch.Signal WeakKeyDictionary with Non-Weakref Senders",
      "target": "django.dispatch.Signal",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `Signal(use_caching=True)` is instantiated, the signal crashes with `TypeError: cannot create weak reference to 'object' object` when using common Python objects (like `object()` instances) as senders.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_weakref_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_weakref_2025-09-25_00-00_k3m9.md",
      "call_id": "0df95568",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.dispatch.Signal WeakKeyDictionary with None Sender",
      "target": "django.dispatch.Signal",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `use_caching=True` is enabled on a Signal, calling any method that checks the cache with `sender=None` raises a `TypeError` because `WeakKeyDictionary` cannot use `None` as a key.",
      "package": "django",
      "file_name": "bug_report_django_dispatch_signal_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_dispatch_signal_2025-09-25_00-00_k3x9.md",
      "call_id": "c43e28fb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.forms.ErrorDict copy() doesn't preserve renderer",
      "target": "django.forms.utils.ErrorDict.copy()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "ErrorDict.copy() fails to preserve the `renderer` attribute because it inherits dict.copy() which only performs a shallow copy of dictionary data, not custom attributes.",
      "package": "django",
      "file_name": "bug_report_django_forms_ErrorDict_copy_renderer_2025-09-25_08-59_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_forms_ErrorDict_copy_renderer_2025-09-25_08-59_a7k3.md",
      "call_id": "f0e79d09",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.forms.IntegerField Rejects Boolean Values",
      "target": "django.forms.IntegerField",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "IntegerField rejects boolean values (True/False) even though Python's `int()` function accepts booleans and the field's docstring states it validates \"that int() can be called on the input.\"",
      "package": "django",
      "file_name": "bug_report_django_forms_IntegerField_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_forms_IntegerField_2025-09-25_14-30_k3m9.md",
      "call_id": "943a856b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.http.parse_cookie Quoted Cookie Values",
      "target": "django.http.parse_cookie",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_cookie` function incorrectly handles quoted cookie values containing semicolons. It splits on semicolons before unquoting, causing quoted values with embedded semicolons to be parsed incorrectly. This violates RFC 6265, which allows quoted cookie values to contain semicolons.",
      "package": "django",
      "file_name": "bug_report_django_http_parse_cookie_2025-09-25_03-35_b90n.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_http_parse_cookie_2025-09-25_03-35_b90n.md",
      "call_id": "9f15df8f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.middleware.common BrokenLinkEmailsMiddleware is_internal_request Incorrectly Classifies URLs Without Trailing Slash",
      "target": "django.middleware.common.BrokenLinkEmailsMiddleware.is_internal_request",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_internal_request()` method incorrectly classifies same-domain URLs without a trailing slash as external requests, causing internal broken link notifications to omit the \"INTERNAL\" label in emails to site managers.",
      "package": "django",
      "file_name": "bug_report_django_middleware_is_internal_request_2025-09-25_06-05_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_middleware_is_internal_request_2025-09-25_06-05_k3m9.md",
      "call_id": "16c108d3",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.Variable Trailing Dot Handling",
      "target": "django.template.Variable",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Variable.__init__() attempts to reject numeric strings with trailing dots (e.g., \"2.\") but incorrectly treats them as valid variable lookups due to improper exception handling.",
      "package": "django",
      "file_name": "bug_report_django_template_Variable_trailing_dot_2025-09-25_09-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_Variable_trailing_dot_2025-09-25_09-00_k3m9.md",
      "call_id": "be135762",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.Variable Trailing Dot Inconsistency",
      "target": "django.template.Variable",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a Variable is initialized with a numeric string ending in a dot (e.g., `'42.'`), the internal state becomes inconsistent with both `literal` and `lookups` attributes set, causing resolution to fail even though the Variable was successfully created.",
      "package": "django",
      "file_name": "bug_report_django_template_Variable_trailing_dot_2025-09-25_01-33_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_Variable_trailing_dot_2025-09-25_01-33_k9x3.md",
      "call_id": "eb283bb6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.Variable Trailing Dot Inconsistency",
      "target": "django.template.Variable",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Variable` class incorrectly handles numeric strings with trailing dots (e.g., \"2.\", \"42.\"). It sets both `literal` and `lookups` attributes, violating the invariant that a Variable should represent either a literal value OR a variable lookup, not both. This causes `resolve()` to fail with a VariableDoesNotExist exception.",
      "package": "django",
      "file_name": "bug_report_django_template_Variable_trailing_dot_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_Variable_trailing_dot_2025-09-25_00-00_k3x9.md",
      "call_id": "452e55ad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.Variable Trailing Period",
      "target": "django.template.Variable",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a Variable is created with a number followed by a trailing period (e.g., \"10.\"), both the `literal` and `lookups` attributes are set, creating an inconsistent internal state. Additionally, calling `resolve()` on such a variable raises `VariableDoesNotExist` instead of returning the literal value.",
      "package": "django",
      "file_name": "bug_report_django_template_variable_trailing_period_2025-09-25_09-59_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_variable_trailing_period_2025-09-25_09-59_k3x9.md",
      "call_id": "2712a138",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.Variable Trailing Period Handling",
      "target": "django.template.Variable",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Variable class attempts to reject numeric strings with trailing periods (e.g., \"1.\", \"2.\") but fails to do so correctly, leaving the Variable object in an inconsistent state that causes crashes when resolved.",
      "package": "django",
      "file_name": "bug_report_django_template_variable_trailing_period_2025-09-25_07-57_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_variable_trailing_period_2025-09-25_07-57_k3x9.md",
      "call_id": "bea6e4b4",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.backends.jinja2 Incorrect Line Count for Empty Source",
      "target": "django.template.backends.jinja2.get_exception_info",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_exception_info` function incorrectly reports that an empty template source has 1 line instead of 0 lines. This happens because `''.strip().split('\\n')` returns `['']` (a list with one empty string) rather than an empty list.",
      "package": "django",
      "file_name": "bug_report_django_jinja2_empty_source_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_jinja2_empty_source_2025-09-25_00-00_x7k9.md",
      "call_id": "ff5a6935",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.backends.jinja2.get_exception_info IndexError",
      "target": "django.template.backends.jinja2.get_exception_info",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_exception_info` function crashes with an `IndexError` when the exception's `lineno` attribute is greater than the actual number of lines in the source code.",
      "package": "django",
      "file_name": "bug_report_django_jinja2_get_exception_info_2025-09-25_02-33_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_jinja2_get_exception_info_2025-09-25_02-33_k3m9.md",
      "call_id": "99649c3a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.backends.jinja2.get_exception_info IndexError on Invalid Line Numbers",
      "target": "django.template.backends.jinja2.get_exception_info",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_exception_info` function crashes with an `IndexError` when the exception's `lineno` attribute is out of bounds for the source code (either greater than the total lines or non-positive).",
      "package": "django",
      "file_name": "bug_report_django_template_backends_jinja2_get_exception_info_2025-09-25_09-04_1zn4.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_backends_jinja2_get_exception_info_2025-09-25_09-04_1zn4.md",
      "call_id": "897f0875",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.backends.jinja2.get_exception_info Line Number Mismatch",
      "target": "django.template.backends.jinja2.get_exception_info",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_exception_info` function incorrectly strips leading/trailing whitespace from template source before indexing lines, causing a mismatch between Jinja2's reported line numbers and the actual line content displayed in error messages.",
      "package": "django",
      "file_name": "bug_report_django_backends_jinja2_get_exception_info_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_backends_jinja2_get_exception_info_2025-09-25_00-00_k3f9.md",
      "call_id": "033e0875",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.defaultfilters.get_digit ValueError on Negative Numbers",
      "target": "django.template.defaultfilters.get_digit",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_digit` filter crashes with `ValueError: invalid literal for int() with base 10: '-'` when given a negative number and a position that accesses the minus sign character.",
      "package": "django",
      "file_name": "bug_report_django_template_get_digit_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_get_digit_2025-09-25_00-00_k3m9.md",
      "call_id": "609d0240",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.loaders.cached Cache Key Collision with Empty Template Name",
      "target": "django.template.loaders.cached.Loader.cache_key",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cache_key` method creates cache key collisions when a template name is an empty string combined with skip origins, and another template whose name equals the hash value with no skip.",
      "package": "django",
      "file_name": "bug_report_django_template_loaders_cache_key_empty_name_2025-09-25_00-01_m8p3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_template_loaders_cache_key_empty_name_2025-09-25_00-01_m8p3.md",
      "call_id": "bdf73913",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.templatetags.i18n GetLanguageInfoListNode IndexError on Empty Input",
      "target": "django.templatetags.i18n.GetLanguageInfoListNode.get_language_info",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `GetLanguageInfoListNode.get_language_info` method crashes with an `IndexError` when passed an empty string or empty sequence, rather than handling these edge cases gracefully.",
      "package": "django",
      "file_name": "bug_report_django_templatetags_i18n_get_language_info_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templatetags_i18n_get_language_info_2025-09-25_00-00_x7k9.md",
      "call_id": "be09eac3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.templatetags.i18n GetLanguageInfoListNode.get_language_info Type Handling",
      "target": "django.templatetags.i18n.GetLanguageInfoListNode.get_language_info",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_language_info()` method uses a fragile heuristic to distinguish between string language codes and sequence inputs. It checks `len(language[0]) > 1` which fails for sequences with single-character first elements, and relies on string indexing behavior rather than proper type checking.",
      "package": "django",
      "file_name": "bug_report_django_templatetags_i18n_language_info_2025-09-25_01-31_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templatetags_i18n_language_info_2025-09-25_01-31_m8k3.md",
      "call_id": "552839a0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.templatetags.i18n.GetLanguageInfoListNode.get_language_info IndexError",
      "target": "django.templatetags.i18n.GetLanguageInfoListNode.get_language_info",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `GetLanguageInfoListNode.get_language_info` method crashes with an `IndexError` when processing empty language codes (empty strings or empty tuples/lists). The method accesses `language[0]` without first checking if `language` is empty.",
      "package": "django",
      "file_name": "bug_report_django_i18n_languageinfolist_2025-09-25_00-00_k3x8.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_i18n_languageinfolist_2025-09-25_00-00_k3x8.md",
      "call_id": "8de1248a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.templatetags.static PrefixNode IndexError",
      "target": "django.templatetags.static.PrefixNode.handle_token",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `PrefixNode.handle_token` method raises an `IndexError` instead of a proper `TemplateSyntaxError` when parsing malformed template tags that have 'as' without a following variable name.",
      "package": "django",
      "file_name": "bug_report_django_templatetags_static_prefixnode_2025-09-25_10-00_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templatetags_static_prefixnode_2025-09-25_10-00_a7k2.md",
      "call_id": "1715176f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.templatetags.static.StaticNode.handle_token IndexError",
      "target": "django.templatetags.static.StaticNode.handle_token",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `StaticNode.handle_token` method raises `IndexError` when parsing template tokens with 3 elements where the second-to-last element is \"as\", due to incorrect bounds checking before accessing `bits[3]`.",
      "package": "django",
      "file_name": "bug_report_django_templatetags_static_2025-09-25_11-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_templatetags_static_2025-09-25_11-00_k3m9.md",
      "call_id": "518b20c7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.urls.IntConverter Accepts Invalid Input",
      "target": "django.urls.converters.IntConverter",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "IntConverter.to_python() accepts negative integers despite its regex pattern `[0-9]+` which only matches non-negative integers, violating the converter's contract.",
      "package": "django",
      "file_name": "bug_report_django_urls_IntConverter_2025-09-25_15-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_urls_IntConverter_2025-09-25_15-30_k7x2.md",
      "call_id": "b7743350",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.html.CountsDict Incorrect kwargs Unpacking",
      "target": "django.utils.html.CountsDict.__init__",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`CountsDict.__init__` uses `*kwargs` instead of `**kwargs` when calling `super().__init__()`, preventing keyword arguments from being passed to the parent `dict` class and violating the expected dict API contract.",
      "package": "django",
      "file_name": "bug_report_django_utils_html_CountsDict_2025-09-25_00-49_k7x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_html_CountsDict_2025-09-25_00-49_k7x3.md",
      "call_id": "8578cda9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.is_same_domain Case Insensitivity",
      "target": "django.utils.http.is_same_domain",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_same_domain` function incorrectly handles case sensitivity in domain comparisons. Since DNS is case-insensitive, the function should treat domains like \"EXAMPLE.COM\" and \"example.com\" as equivalent, but it currently returns False for such comparisons.",
      "package": "django",
      "file_name": "bug_report_django_utils_http_is_same_domain_2025-09-25_04-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_http_is_same_domain_2025-09-25_04-01_k3m9.md",
      "call_id": "fad2efbf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.is_same_domain Case Sensitivity",
      "target": "django.utils.http.is_same_domain",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_same_domain()` function fails to perform case-insensitive domain matching when the host parameter contains uppercase letters. The function only lowercases the pattern but not the host, causing legitimate domain matches to fail.",
      "package": "django",
      "file_name": "bug_report_django_utils_http_is_same_domain_case_sensitivity_2025-09-25_01-31_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_http_is_same_domain_case_sensitivity_2025-09-25_01-31_k7x9.md",
      "call_id": "345a2bda",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.is_same_domain Case Sensitivity Bug",
      "target": "django.utils.http.is_same_domain",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_same_domain` function performs case-sensitive comparison when checking if a host matches a pattern, even though DNS is case-insensitive. The function lowercases the `pattern` parameter but not the `host` parameter, causing identical domains with different casing to be considered non-matching.",
      "package": "django",
      "file_name": "bug_report_django_is_same_domain_case_2025-09-25_01-40_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_is_same_domain_case_2025-09-25_01-40_x9k3.md",
      "call_id": "9aaf51c3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.quote_etag Idempotence Violation",
      "target": "django.utils.http.quote_etag",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quote_etag` function is not idempotent, violating the property implied by its docstring. When called repeatedly on certain inputs (e.g., a single quote character), it continues wrapping the result in additional quotes instead of returning it unchanged.",
      "package": "django",
      "file_name": "bug_report_django_utils_http_quote_etag_idempotence_2025-09-25_05-20_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_http_quote_etag_idempotence_2025-09-25_05-20_k3x9.md",
      "call_id": "7bf24a79",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.quote_etag Idempotence Violation",
      "target": "django.utils.http.quote_etag",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quote_etag` function violates its documented idempotence property. When given an input containing quote characters, repeatedly calling `quote_etag` on its output causes unbounded string growth instead of returning the same value.",
      "package": "django",
      "file_name": "bug_report_django_quote_etag_idempotence_2025-09-25_03-45_k8x4.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_quote_etag_idempotence_2025-09-25_03-45_k8x4.md",
      "call_id": "fba82135",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.quote_etag Violates Idempotence Property",
      "target": "django.utils.http.quote_etag",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `quote_etag` function violates its documented idempotence property when given input strings containing quote characters. The docstring states \"If the provided string is already a quoted ETag, return it\", but calling the function twice on certain inputs produces different results.",
      "package": "django",
      "file_name": "bug_report_django_quote_etag_2025-09-25_05-59_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_quote_etag_2025-09-25_05-59_k3m9.md",
      "call_id": "66c6a9c8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.text.wrap Silently Removes Line Separator Characters",
      "target": "django.utils.text.wrap",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `wrap()` function in `django.utils.text` silently removes non-whitespace line separator characters (U+001C File Separator, U+001D Group Separator, U+001E Record Separator) from input text, violating its documented behavior of preserving content.",
      "package": "django",
      "file_name": "bug_report_django_utils_text_wrap_line_separators_2025-09-25_05-31_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_text_wrap_line_separators_2025-09-25_05-31_k9x3.md",
      "call_id": "128c724e",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.translation.round_away_from_one - Incorrect Rounding for Negative Values",
      "target": "django.utils.translation.round_away_from_one",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `round_away_from_one` function incorrectly rounds negative values in the range (-1, 0) towards zero (closer to 1) instead of away from 1 (towards negative infinity), violating the function's documented behavior as indicated by its name.",
      "package": "django",
      "file_name": "bug_report_django_utils_translation_round_away_from_one_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_translation_round_away_from_one_2025-09-25_k3m9.md",
      "call_id": "5f2ce7a6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.translation.round_away_from_one Incorrect Rounding for Small Negative Numbers",
      "target": "django.utils.translation.round_away_from_one",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `round_away_from_one` function incorrectly handles very small negative numbers (close to zero) due to floating-point precision loss when converting to Decimal, returning 0 instead of -1.",
      "package": "django",
      "file_name": "bug_report_django_utils_translation_round_away_from_one_2025-09-25_02-31_7xop.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_translation_round_away_from_one_2025-09-25_02-31_7xop.md",
      "call_id": "0a5eaa01",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.translation.to_locale Case Handling",
      "target": "django.utils.translation.to_locale",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_locale()` function has inconsistent case handling when processing language codes without a country part. It lowercases only the first 3 characters while leaving the rest unchanged, resulting in mixed-case output like `'gerMAN'` for input `'GerMAN'`.",
      "package": "django",
      "file_name": "bug_report_django_utils_translation_to_locale_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_translation_to_locale_2025-09-25_00-00_x3k9.md",
      "call_id": "f736f53f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.translation.to_locale Case Sensitivity",
      "target": "django.utils.translation.to_locale",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_locale` function produces inconsistent case-handling behavior when the input language name does not contain a dash separator, violating the principle of case-insensitive input handling that works correctly for dash-containing inputs.",
      "package": "django",
      "file_name": "bug_report_django_utils_translation_to_locale_2025-09-25_08-33_xncl.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_translation_to_locale_2025-09-25_08-33_xncl.md",
      "call_id": "012f7357",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.translation.to_locale Incomplete Case Normalization",
      "target": "django.utils.translation.to_locale",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_locale()` function incorrectly handles uppercase characters beyond the third position when no dash is present in the input, resulting in inconsistent case normalization.",
      "package": "django",
      "file_name": "bug_report_django_utils_translation_to_locale_2025-09-25_03-34_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_utils_translation_to_locale_2025-09-25_03-34_k3x9.md",
      "call_id": "f8f7407d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.views.decorators.debug.sensitive_variables Inconsistent Wrapping Behavior",
      "target": "django.views.decorators.debug.sensitive_variables",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `sensitive_variables` decorator exhibits inconsistent behavior between synchronous and asynchronous functions. For sync functions, it creates a wrapper function and sets an attribute on it. For async functions, it returns the original function unchanged and stores metadata in a global dictionary. This violates the decorator contract principle that decorators should behave consistently regardless of whether they decorate sync or async functions.",
      "package": "django",
      "file_name": "bug_report_django_views_decorators_debug_sensitive_variables_2025-09-25_03-01_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_views_decorators_debug_sensitive_variables_2025-09-25_03-01_k3x9.md",
      "call_id": "f2fc90ae",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.views.generic.DeletionMixin URL Format KeyError",
      "target": "django.views.generic.edit.DeletionMixin.get_success_url",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`DeletionMixin.get_success_url` raises an unhandled `KeyError` when the `success_url` template contains placeholders that are not present in `self.object.__dict__`.",
      "package": "django",
      "file_name": "bug_report_django_DeletionMixin_get_success_url_2025-09-25_12-36_p8k1.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_DeletionMixin_get_success_url_2025-09-25_12-36_p8k1.md",
      "call_id": "27be52d2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.views.generic.ModelFormMixin URL Format KeyError",
      "target": "django.views.generic.edit.ModelFormMixin.get_success_url",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ModelFormMixin.get_success_url` raises an unhandled `KeyError` when the `success_url` template contains placeholders that are not present in `self.object.__dict__`.",
      "package": "django",
      "file_name": "bug_report_django_ModelFormMixin_get_success_url_2025-09-25_12-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_ModelFormMixin_get_success_url_2025-09-25_12-35_k3m9.md",
      "call_id": "64b3220f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.views.i18n.JavaScriptCatalog.get_plural IndexError on Malformed Plural-Forms",
      "target": "django.views.i18n.JavaScriptCatalog.get_plural",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_plural()` method in `JavaScriptCatalog` crashes with an `IndexError` when the Plural-Forms header in a translation catalog is malformed (specifically, when it's missing the `plural=` part).",
      "package": "django",
      "file_name": "bug_report_django_views_i18n_get_plural_2025-09-25_00-22_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_views_i18n_get_plural_2025-09-25_00-22_x7k3.md",
      "call_id": "b38d40bf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "mail_admins and mail_managers Don't Return Send Result",
      "target": "django.core.mail.mail_admins",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `mail_admins()` and `mail_managers()` functions don't return the result from `send()`, making them inconsistent with `send_mail()` and `send_mass_mail()` which return the number of messages sent. This prevents users from knowing if their message was successfully sent.",
      "package": "django",
      "file_name": "bug_report_django_mail_admins_managers_return_value_2025-09-25_00-59_m7x3.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_mail_admins_managers_return_value_2025-09-25_00-59_m7x3.md",
      "call_id": "77f8bed6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative step_factor Near 1.0 Crash",
      "target": "scipy.differentiate.derivative",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `derivative` function crashes with `numpy.linalg.LinAlgError: Singular matrix` when `step_factor` is 1.0 or very close to 1.0 (e.g., 1.0003), even though the documentation has no restriction against such values.",
      "package": "django",
      "file_name": "bug_report_scipy_differentiate_step_factor_one_2025-09-25_10-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_scipy_differentiate_step_factor_one_2025-09-25_10-25_k3m9.md",
      "call_id": "9b9a5135",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.correlation Returns NaN for Constant Arrays",
      "target": "scipy.spatial.distance.correlation",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `correlation` distance function returns `nan` when given constant arrays (zero variance), violating the metric property that the distance between identical vectors should be 0.",
      "package": "django",
      "file_name": "bug_report_scipy_spatial_distance_correlation_2025-09-25_03-58_cudw.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_scipy_spatial_distance_correlation_2025-09-25_03-58_cudw.md",
      "call_id": "a6101c0a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "split_tzname_delta Incorrectly Formats HHMM Timezone Offsets",
      "target": "django.db.backends.utils.split_tzname_delta",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `split_tzname_delta` function in Django's database backends incorrectly formats timezone offsets when provided in HHMM format (e.g., '0530'). Instead of converting '0530' to '05:30', it appends ':00' to produce '0530:00', which is not a valid offset format for PostgreSQL's AT TIME ZONE clause.",
      "package": "django",
      "file_name": "bug_report_django_backends_utils_split_tzname_delta_2025-09-25_03-33_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/django/bug_reports/bug_report_django_backends_utils_split_tzname_delta_2025-09-25_03-33_k8m2.md",
      "call_id": "d850110c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Duplicate Headers",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware allows duplicate headers in its `allow_headers` list when users provide headers that differ only in case from the safelisted headers (Accept, Accept-Language, Content-Language, Content-Type).",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_cors_duplicate_headers_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_cors_duplicate_headers_2025-09-25_00-00_k3f9.md",
      "call_id": "75185629",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Case Sensitivity",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CORSMiddleware` class produces inconsistent header ordering and casing in CORS responses depending on the case of input headers. This violates the principle that HTTP headers should be treated case-insensitively.",
      "package": "fastapi",
      "file_name": "bug_report_cors_header_case_sensitivity_2025-09-25_04-19_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_cors_header_case_sensitivity_2025-09-25_04-19_k3m9.md",
      "call_id": "2cdca576",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Case Sensitivity in Sorting",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware produces different `allow_headers` lists when the same header is provided with different capitalization, violating the HTTP specification that headers are case-insensitive.",
      "package": "fastapi",
      "file_name": "bug_report_cors_header_case_2025-09-25_04-24_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_cors_header_case_2025-09-25_04-24_x7k3.md",
      "call_id": "cb544b00",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Case-Sensitivity Issue",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware produces different internal state when configured with headers that differ only in case, violating the HTTP principle that header names are case-insensitive.",
      "package": "fastapi",
      "file_name": "bug_report_cors_header_normalization_2025-09-25_07-56_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_cors_header_normalization_2025-09-25_07-56_k8j3.md",
      "call_id": "c6707065",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Sorting",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `allow_headers` list in CORSMiddleware is not sorted after lowercasing, violating the code's intent to maintain sorted order.",
      "package": "fastapi",
      "file_name": "bug_report_cors_header_sort_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_cors_header_sort_2025-09-25_00-00_k3m9.md",
      "call_id": "0eaf1919",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Rejects Valid Requests with Empty Header Values",
      "target": "starlette.middleware.cors.CORSMiddleware.preflight_response",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The CORSMiddleware incorrectly rejects preflight requests when the `Access-Control-Request-Headers` contains empty values from consecutive commas or trailing commas, even though such requests should be valid according to HTTP header parsing rules.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_cors_empty_headers_2025-09-25_14-35_x7n9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_cors_empty_headers_2025-09-25_14-35_x7n9.md",
      "call_id": "3da2149e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware allow_headers Not Sorted and Contains Duplicates",
      "target": "starlette.middleware.cors.CORSMiddleware.__init__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware's `allow_headers` attribute can contain duplicates and is not properly sorted when user-provided headers differ only in case. The code attempts to deduplicate via `set()` and sort via `sorted()`, but these operations occur before case normalization, causing both to fail.",
      "package": "fastapi",
      "file_name": "bug_report_cors_middleware_allow_headers_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_cors_middleware_allow_headers_2025-09-25_00-00_k3m9.md",
      "call_id": "ed9f9cef",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI Dependencies _get_multidict_value TypeError",
      "target": "fastapi.dependencies.utils._get_multidict_value",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_get_multidict_value` function crashes with `TypeError` when processing sequence fields (e.g., `List[str]`) that receive non-sequence values from a regular `Mapping`, attempting to call `len()` on objects that don't support it.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_multidict_len_2025-09-25_04-25_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_multidict_len_2025-09-25_04-25_x7m9.md",
      "call_id": "ad28a10d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI Dependencies get_flat_dependant Infinite Recursion",
      "target": "fastapi.dependencies.utils.get_flat_dependant",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_flat_dependant` function causes infinite recursion (RecursionError) when processing circular dependencies with `skip_repeats=False`.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_circular_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_circular_2025-09-25_00-00_x7k3.md",
      "call_id": "2444454e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI Dependencies is_union_of_base_models Logic Error",
      "target": "fastapi.dependencies.utils.is_union_of_base_models",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_union_of_base_models` function has a logic error where it would incorrectly return `True` for a Union type with empty arguments, when it should return `False`.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_is_union_of_base_models_2025-09-25_00-00_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_is_union_of_base_models_2025-09-25_00-00_x8k3.md",
      "call_id": "ab3289e0",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI HTTPBasic UTF-8 Credential Decoding Failure",
      "target": "fastapi.security.http.HTTPBasic",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "FastAPI's HTTPBasic authentication crashes with UnicodeDecodeError when credentials contain non-ASCII UTF-8 characters, violating RFC 7617 which requires UTF-8 support for HTTP Basic Authentication.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_httpbasic_utf8_2025-09-25_07-15_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_httpbasic_utf8_2025-09-25_07-15_x9k2.md",
      "call_id": "ad82e9e7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI HTTPException Invalid Status Code",
      "target": "fastapi.exceptions.HTTPException",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "HTTPException crashes with ValueError when initialized with a non-standard HTTP status code (e.g., 104, 599) and no detail parameter, despite accepting any integer as status_code according to its type signature.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_HTTPException_invalid_status_2025-09-25_21-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_HTTPException_invalid_status_2025-09-25_21-45_k3m9.md",
      "call_id": "9c648a03",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI OAuth2 Bearer Returns Empty String Instead of None",
      "target": "fastapi.security.oauth2.OAuth2PasswordBearer",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When the Authorization header contains only the scheme \"Bearer\" without a token (e.g., `Authorization: Bearer`), OAuth2PasswordBearer and OAuth2AuthorizationCodeBearer return an empty string `\"\"` instead of `None`, creating inconsistent behavior with the case where the Authorization header is missing entirely.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_oauth2_empty_token_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_oauth2_empty_token_2025-09-25_14-30_k3x9.md",
      "call_id": "2bb8188b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI ResponseValidationError Grammar Error",
      "target": "fastapi.exceptions.ResponseValidationError.__str__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ResponseValidationError.__str__` method always uses plural \"errors\" even when there is exactly one validation error, resulting in grammatically incorrect output like \"1 validation errors:\" instead of \"1 validation error:\".",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_ResponseValidationError_grammar_2025-09-25_10-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_ResponseValidationError_grammar_2025-09-25_10-00_k3m9.md",
      "call_id": "3aa0f355",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI get_path_param_names Empty Parameter Names",
      "target": "fastapi.utils.get_path_param_names",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_path_param_names` function incorrectly accepts and returns empty strings when paths contain empty braces `{}`, violating the semantic requirement that path parameters must have non-empty names.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_utils_get_path_param_names_2025-09-25_xk3n.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_utils_get_path_param_names_2025-09-25_xk3n.md",
      "call_id": "6be2ee1f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI is_body_allowed_for_status_code ValueError on Invalid Strings",
      "target": "fastapi.utils.is_body_allowed_for_status_code",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_body_allowed_for_status_code` function crashes with `ValueError` when given string status codes that are not in the predefined set and cannot be converted to integers, violating the function's type signature which accepts `Union[int, str, None]`.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_utils_is_body_allowed_for_status_code_2025-09-25_m7k2.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_utils_is_body_allowed_for_status_code_2025-09-25_m7k2.md",
      "call_id": "7d5cc6ea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FastAPI jsonable_encoder Tuple Dict Keys",
      "target": "fastapi.encoders.jsonable_encoder",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `jsonable_encoder` function crashes with a `TypeError: unhashable type: 'list'` when encoding dictionaries with tuple keys, because it recursively encodes the keys which converts tuples to lists, and lists cannot be used as dictionary keys.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_encoders_tuple_keys_2025-09-25_01-30_k8x4.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_encoders_tuple_keys_2025-09-25_01-30_k8x4.md",
      "call_id": "647e445c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "GZipMiddleware Invalid compresslevel Causes ValueError",
      "target": "fastapi.middleware.gzip.GZipMiddleware",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `GZipMiddleware` accepts any integer value for `compresslevel` parameter without validation. When a value outside the valid range (-1 to 9) is provided, the middleware crashes with `ValueError: Invalid initialization option` when processing a request with gzip encoding.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_gzip_compresslevel_2025-09-25_02-26_oba4.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_gzip_compresslevel_2025-09-25_02-26_oba4.md",
      "call_id": "0930bd51",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "HTTPBasic Rejects Valid UTF-8 Credentials",
      "target": "fastapi.security.http.HTTPBasic",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "HTTPBasic authentication incorrectly decodes credentials as ASCII instead of UTF-8, causing it to reject valid credentials containing non-ASCII characters (e.g., accented letters, emoji, or international scripts), despite RFC 7617 requiring UTF-8 encoding.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_httpbasic_utf8_2025-09-25_14-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_httpbasic_utf8_2025-09-25_14-30_k7m9.md",
      "call_id": "75348b19",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "HTTPSRedirectMiddleware Incorrect Port Handling",
      "target": "starlette.middleware.httpsredirect.HTTPSRedirectMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "HTTPSRedirectMiddleware incorrectly drops port 443 when redirecting from HTTP to HTTPS, even when port 443 was explicitly specified for HTTP (a non-standard but valid configuration).",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_httpsredirect_2025-09-25_08-55_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_httpsredirect_2025-09-25_08-55_k3m9.md",
      "call_id": "e7829e9c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "HTTPSRedirectMiddleware Incorrect Port Stripping",
      "target": "fastapi.middleware.httpsredirect.HTTPSRedirectMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The HTTPSRedirectMiddleware incorrectly strips port 443 from URLs when redirecting from HTTP to HTTPS, even though port 443 is a non-standard port for HTTP. This causes HTTP services running on port 443 to lose their port number when redirected to HTTPS.",
      "package": "fastapi",
      "file_name": "bug_report_https_redirect_port_2025-09-25_10-28_8y9l.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_https_redirect_port_2025-09-25_10-28_8y9l.md",
      "call_id": "8240dcd1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "OAuth2PasswordRequestForm Scope Parsing Violates OAuth2 Specification",
      "target": "fastapi.security.OAuth2PasswordRequestForm",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`OAuth2PasswordRequestForm` uses `split()` instead of `split(\" \")` to parse the scope parameter, which violates the OAuth2 specification (RFC 6749) and can lead to incorrect scope parsing when non-space whitespace characters are present.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_oauth2_scope_parsing_2025-09-25_23-59_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_oauth2_scope_parsing_2025-09-25_23-59_k3m9.md",
      "call_id": "6bdeed3a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SecurityScopes Scope String Round-Trip Failure",
      "target": "fastapi.security.oauth2.SecurityScopes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`SecurityScopes.scope_str` uses `' '.join()` to create a space-separated string of scopes, but if the scopes are later parsed using `.split()` (as done in `OAuth2PasswordRequestForm`), scopes containing Unicode whitespace characters are lost due to the inconsistency between `.split()` (which splits on ALL whitespace) and `' '.join()` (which only uses spaces).",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_SecurityScopes_scope_roundtrip_2025-09-25_10-56_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_SecurityScopes_scope_roundtrip_2025-09-25_10-56_k3x9.md",
      "call_id": "00f45a86",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Address Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware incorrectly parses IPv6 addresses in the Host header, causing all IPv6 requests to be rejected even when the address is in the allowed_hosts list.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_trustedhost_ipv6_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_trustedhost_ipv6_2025-09-25_00-01_x7k9.md",
      "call_id": "b02a5a2e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Address Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TrustedHostMiddleware` incorrectly parses IPv6 addresses in the Host header, causing valid IPv6 requests to be rejected. The bug occurs because the code uses `.split(\":\")[0]` to extract the hostname, which breaks IPv6 addresses that contain multiple colons.",
      "package": "fastapi",
      "file_name": "bug_report_starlette_trustedhost_ipv6_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_starlette_trustedhost_ipv6_2025-09-25_k3x9.md",
      "call_id": "cf8acedd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Host Parsing",
      "target": "fastapi.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware incorrectly parses IPv6 addresses from the Host header, causing all IPv6 requests to be rejected even when the IPv6 address is in the allowed_hosts list.",
      "package": "fastapi",
      "file_name": "bug_report_trustedhost_ipv6_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_trustedhost_ipv6_2025-09-25_00-00_k3x9.md",
      "call_id": "0e55e91d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware Incorrectly Parses IPv6 Addresses",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware.__call__",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The TrustedHostMiddleware incorrectly extracts the hostname from the Host header when the header contains an IPv6 address, causing all IPv6-based requests to be rejected even when they should be allowed.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_trustedhost_ipv6_2025-09-25_14-40_j6z8.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_trustedhost_ipv6_2025-09-25_14-40_j6z8.md",
      "call_id": "720bb2d3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "decimal_encoder Crashes on Special Decimal Values",
      "target": "fastapi.encoders.decimal_encoder",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function crashes with a TypeError when given special Decimal values like `Infinity`, `-Infinity`, or `NaN`. This violates the function's implicit contract of handling all Decimal values.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_decimal_encoder_2025-09-25_00-00_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_decimal_encoder_2025-09-25_00-00_a7k3.md",
      "call_id": "ee873c52",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "deep_dict_update Non-Idempotent List Handling",
      "target": "fastapi.openapi.utils.deep_dict_update",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `deep_dict_update` function exhibits inconsistent idempotence behavior: nested dictionaries are merged idempotently, but lists are concatenated non-idempotently, causing duplicate entries when the same update is applied multiple times.",
      "package": "fastapi",
      "file_name": "bug_report_deep_dict_update_idempotence_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_deep_dict_update_idempotence_2025-09-25_00-00_k3x9.md",
      "call_id": "34543c1a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies Path Parameter Default Value Inconsistency",
      "target": "fastapi.dependencies.utils.analyze_param",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `analyze_param` function exhibits inconsistent behavior when handling path parameters with default values. When using plain type annotations, it silently allows default values for path parameters. However, when using `Annotated` with `Path()`, it raises an `AssertionError`. This violates the documented constraint that \"Path parameters cannot have default values\" and breaks the principle of least surprise.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_path_param_default_2025-09-25_10-25_x4m2.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_path_param_default_2025-09-25_10-25_x4m2.md",
      "call_id": "205d0e9d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies Uncopyable Default Crash",
      "target": "fastapi.dependencies.utils._get_multidict_value",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "FastAPI crashes with `TypeError` when a query parameter with an uncopyable default value is not provided in the request. The bug occurs in `_get_multidict_value` which attempts to deepcopy the default value, failing for objects that don't support deepcopy.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_uncopyable_default_2025-09-25_02-55_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_uncopyable_default_2025-09-25_02-55_k3x9.md",
      "call_id": "2fe45099",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies get_flat_dependant Circular Dependency",
      "target": "fastapi.dependencies.utils.get_flat_dependant",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`get_flat_dependant()` does not detect or handle circular dependencies, leading to RecursionError when dependency graphs contain cycles.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_circular_2025-09-25_06-29_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_circular_2025-09-25_06-29_x7k3.md",
      "call_id": "722e095f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies get_typed_annotation Unsafe Evaluation",
      "target": "fastapi.dependencies.utils.get_typed_annotation",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`get_typed_annotation()` evaluates string annotations as Python code without proper validation, which can lead to crashes (ZeroDivisionError, etc.) when invalid expressions are provided as type annotations.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_forwardref_2025-09-25_06-30_m9p2.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_forwardref_2025-09-25_06-30_m9p2.md",
      "call_id": "79a83113",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies.utils - Crash on Keyword String Annotations",
      "target": "fastapi.dependencies.utils.get_typed_annotation",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "FastAPI crashes with `SyntaxError` when processing endpoint functions that use Python keywords as string type annotations (e.g., `def foo(x: \"if\"): pass`). While unusual, such annotations are syntactically valid Python and should not cause FastAPI to crash.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_keyword_annotation_2025-09-25_03-54_lh7h.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_keyword_annotation_2025-09-25_03-54_lh7h.md",
      "call_id": "1d537098",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies.utils.get_path_param_names Inconsistent Newline Handling",
      "target": "fastapi.dependencies.utils.get_path_param_names",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_path_param_names` function uses a regex pattern that inconsistently handles whitespace characters in path parameter names. Specifically, it extracts spaces and tabs but fails to extract newlines, due to the regex pattern `{(.*?)}` where `.` doesn't match newlines by default.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_get_path_param_names_newline_2025-09-25_19-36_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_get_path_param_names_newline_2025-09-25_19-36_k7x2.md",
      "call_id": "dc439571",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.dependencies.utils.get_typed_annotation Crashes with Keyword String Annotations",
      "target": "fastapi.dependencies.utils.get_typed_annotation",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_typed_annotation` function crashes with a `SyntaxError` when processing string annotations that are Python keywords (e.g., \"if\", \"class\", \"def\"). This causes FastAPI applications to fail during startup if a route handler has a parameter with such an annotation.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_dependencies_get_typed_annotation_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_dependencies_get_typed_annotation_2025-09-25_00-00_k3m9.md",
      "call_id": "e57d6734",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.encoders.decimal_encoder TypeError with NaN and Infinity",
      "target": "fastapi.encoders.decimal_encoder",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function crashes with a `TypeError` when given Decimal values of NaN, Infinity, or -Infinity because it attempts to compare the exponent (which is a string for these special values) with an integer.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_decimal_encoder_nan_infinity_2025-09-25_10-58_oabb.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_decimal_encoder_nan_infinity_2025-09-25_10-58_oabb.md",
      "call_id": "c81bd488",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.middleware.Middleware Leading Comma in __repr__",
      "target": "fastapi.middleware.Middleware",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces invalid Python syntax with a leading comma when the middleware callable lacks a `__name__` attribute.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_repr_2025-09-25_11-23_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_repr_2025-09-25_11-23_k3f9.md",
      "call_id": "2130eeef",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.middleware.gzip Invalid Compression Level Acceptance",
      "target": "fastapi.middleware.gzip.GZipMiddleware",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`GZipMiddleware` accepts invalid `compresslevel` values in `__init__`, but these values cause crashes when the middleware is actually invoked, leading to delayed error detection.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_middleware_gzip_2025-09-25_03-55_x0a6.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_middleware_gzip_2025-09-25_03-55_x0a6.md",
      "call_id": "c21ea7a0",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi GET and HEAD Request Bodies",
      "target": "fastapi.openapi.constants.METHODS_WITH_BODY",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The constant `METHODS_WITH_BODY` incorrectly includes HTTP methods GET and HEAD, allowing request bodies to be documented in the OpenAPI schema for these methods. This violates HTTP best practices as defined in RFC 7231 and goes against OpenAPI 3.1.0 recommendations.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_methods_with_body_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_methods_with_body_2025-09-25_14-30_k3m9.md",
      "call_id": "45415a39",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi HTML/JavaScript Injection Vulnerabilities",
      "target": "fastapi.openapi.docs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_swagger_ui_html()` and `get_redoc_html()` functions in `fastapi.openapi.docs` are vulnerable to HTML and JavaScript injection attacks due to unescaped user input being directly interpolated into HTML and JavaScript contexts using f-strings.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_html_injection_2025-09-25_14-30_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_html_injection_2025-09-25_14-30_k3j9.md",
      "call_id": "bf1fd171",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi XSS Vulnerabilities in HTML Documentation Functions",
      "target": "fastapi.openapi.docs.get_swagger_ui_html",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_swagger_ui_html` and `get_redoc_html` functions in `fastapi.openapi.docs` do not properly escape user-controlled input parameters (`title` and `openapi_url`), allowing for Cross-Site Scripting (XSS) attacks. Attackers can inject arbitrary JavaScript code that executes in the browser when users visit the API documentation pages.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_xss_2025-09-25_09-55_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_xss_2025-09-25_09-55_k3m9.md",
      "call_id": "bbb1378b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi.models.Schema ref Field Attribute Access",
      "target": "fastapi.openapi.models.Schema",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ref` field in the `Schema` model cannot be accessed after setting it using the field name in the constructor. When creating `Schema(ref='value')`, the value is stored internally (visible in `model_dump()`) but accessing `schema.ref` returns `None` instead of the stored value.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_schema_ref_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_schema_ref_2025-09-25_00-00_x7k9.md",
      "call_id": "cfcb3175",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi.utils.get_openapi Empty List Filtering",
      "target": "fastapi.openapi.utils.get_openapi",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_openapi` function incorrectly filters out empty list values for `servers` and `tags` parameters, making it impossible to distinguish between \"field not provided\" and \"field explicitly empty\".",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_empty_list_filtering_2025-09-25_03-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_empty_list_filtering_2025-09-25_03-30_x7k9.md",
      "call_id": "c7121e8a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.openapi.utils.get_openapi Empty String Filtering for terms_of_service",
      "target": "fastapi.openapi.utils.get_openapi",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_openapi` function incorrectly filters out empty string values for the `terms_of_service` parameter. This is the same bug pattern as the already-reported issue with `description` and `summary` fields.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_terms_of_service_filtering_2025-09-25_03-32_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_terms_of_service_filtering_2025-09-25_03-32_m3p7.md",
      "call_id": "6f73ddf2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security API Key Whitespace Validation",
      "target": "fastapi.security.api_key.APIKeyBase.check_api_key",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_api_key` method incorrectly accepts whitespace-only API keys (e.g., `\" \"`, `\"\\t\"`) as valid, while rejecting empty strings. This inconsistent validation creates a security/logic gap where whitespace strings bypass authentication checks.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_api_key_whitespace_2025-09-25_02-54_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_api_key_whitespace_2025-09-25_02-54_x3k9.md",
      "call_id": "e66244a0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security APIKey Whitespace Validation",
      "target": "fastapi.security.api_key.APIKeyBase.check_api_key",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_api_key` method accepts whitespace-only strings as valid API keys, creating a security vulnerability where authentication can succeed with keys like `\"   \"`, `\"\\t\"`, `\"\\r\"`, or any of 29 Unicode whitespace characters.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_apikey_whitespace_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_apikey_whitespace_2025-09-25_00-00_k3m9.md",
      "call_id": "1a83309a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security get_authorization_scheme_param Multiple Spaces",
      "target": "fastapi.security.utils.get_authorization_scheme_param",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_authorization_scheme_param` function incorrectly handles Authorization headers with multiple spaces between the scheme and credentials, causing leading whitespace to be included in the returned parameter value. This breaks authentication for OAuth2PasswordBearer, OAuth2AuthorizationCodeBearer, HTTPBearer, and HTTPDigest when extra spaces are present.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_get_authorization_scheme_param_2025-09-25_02-57_lm9o.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_get_authorization_scheme_param_2025-09-25_02-57_lm9o.md",
      "call_id": "a845077f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security.HTTPBasic realm Parameter Not Escaped",
      "target": "fastapi.security.http.HTTPBasic",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `realm` parameter in `HTTPBasic` is inserted directly into the `WWW-Authenticate` HTTP header without proper escaping. According to RFC 7235, realm values must be quoted-strings where quotes (`\"`) and backslashes (`\\`) must be escaped with backslashes. The current implementation violates this specification, producing malformed headers.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_HTTPBasic_realm_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_HTTPBasic_realm_2025-09-25_00-00_x7k9.md",
      "call_id": "4239e01b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security.SecurityScopes Invalid Scope Handling",
      "target": "fastapi.security.SecurityScopes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `SecurityScopes` class accepts whitespace-only or empty strings in its `scopes` parameter but produces an inconsistent `scope_str` that cannot be parsed back to the original scopes list, violating the expected round-trip property for OAuth2 scope handling.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_security_SecurityScopes_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_security_SecurityScopes_2025-09-25_14-30_k3m9.md",
      "call_id": "55f4eb2d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.utils.deep_dict_update Idempotence Violation",
      "target": "fastapi.utils.deep_dict_update",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `deep_dict_update` function violates idempotence when merging dictionaries containing list values. Calling the function multiple times with the same arguments produces different results each time, as lists are concatenated rather than merged idempotently.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_utils_deep_dict_update_2025-09-25_02-54_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_utils_deep_dict_update_2025-09-25_02-54_x3k9.md",
      "call_id": "f554a8bc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.utils.is_body_allowed_for_status_code Invalid String Handling",
      "target": "fastapi.utils.is_body_allowed_for_status_code",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_body_allowed_for_status_code` function crashes with a `ValueError` when given an invalid string status code that is not in the predefined pattern list and cannot be converted to an integer.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_is_body_allowed_for_status_code_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_is_body_allowed_for_status_code_2025-09-25_00-00_k3m9.md",
      "call_id": "10f67c2b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "generate_operation_id_for_path Incomplete Special Character Replacement",
      "target": "fastapi.openapi.utils.generate_operation_id_for_path",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `generate_operation_id_for_path` function inconsistently handles special character replacement. It replaces non-word characters with underscores in the `name` and `path` parameters, but fails to do so for the `method` parameter, allowing special characters to appear in the final operation ID.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_openapi_generate_operation_id_for_path_2025-09-25_09-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_openapi_generate_operation_id_for_path_2025-09-25_09-00_k3m9.md",
      "call_id": "479921e7",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "jsonable_encoder Nested Exclude Excludes Entire Parent Key",
      "target": "fastapi.encoders.jsonable_encoder",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using dict-form `exclude` parameter with nested keys (e.g., `exclude={\"user\": {\"password\"}}`), `jsonable_encoder` incorrectly excludes the entire parent key instead of just the specified nested fields.",
      "package": "fastapi",
      "file_name": "bug_report_fastapi_jsonable_encoder_nested_exclude_2025-09-25_06-29_yiu0.md",
      "file_path": "sonnet-4.5/results_verify/fastapi/bug_reports/bug_report_fastapi_jsonable_encoder_nested_exclude_2025-09-25_06-29_yiu0.md",
      "call_id": "51469169",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask Config.from_mapping Misleading Docstring",
      "target": "flask.Config.from_mapping",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Config.from_mapping()` method has a misleading docstring that claims it \"Updates the config like :meth:`update` ignoring items with non-upper keys.\" However, the `update()` method does NOT ignore non-uppercase keys, making this comparison incorrect and potentially confusing to users.",
      "package": "flask",
      "file_name": "bug_report_flask_config_from_mapping_docstring_2025-09-25_14-10_a3b7.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_config_from_mapping_docstring_2025-09-25_14-10_a3b7.md",
      "call_id": "10f5c144",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask Config.from_prefixed_env Crashes on Conflicting Keys",
      "target": "flask.config.Config.from_prefixed_env",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Config.from_prefixed_env` method crashes with a `TypeError` when environment variables create a conflict between a simple key and a nested key structure. For example, setting `FLASK_DB=\"value\"` and `FLASK_DB__NAME=\"nested\"` causes a crash because the code tries to traverse `DB` as a dictionary when it's already set to a simple string value.",
      "package": "flask",
      "file_name": "bug_report_flask_config_from_prefixed_env_2025-09-25_17-30_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_config_from_prefixed_env_2025-09-25_17-30_x9k2.md",
      "call_id": "81a81fdf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask Config.from_prefixed_env Type Collision",
      "target": "flask.Config.from_prefixed_env",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`Config.from_prefixed_env()` crashes with `TypeError` when environment variables define both a flat key and a nested key with the same prefix (e.g., `FLASK_DATABASE=123` and `FLASK_DATABASE__HOST=localhost`).",
      "package": "flask",
      "file_name": "bug_report_flask_config_from_prefixed_env_2025-09-25_05-27_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_config_from_prefixed_env_2025-09-25_05-27_k8x3.md",
      "call_id": "2370df46",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask Environment Helpers Whitespace Handling",
      "target": "flask.helpers.get_debug_flag",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Flask's `get_debug_flag()` and `get_load_dotenv()` functions incorrectly handle environment variable values with leading/trailing whitespace, causing values like `\" false \"` or `\"\\tno\\t\"` to be misinterpreted.",
      "package": "flask",
      "file_name": "bug_report_flask_env_helpers_whitespace_2025-09-25_00-57_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_env_helpers_whitespace_2025-09-25_00-57_k3m9.md",
      "call_id": "0a02244f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask Environment Variable Parsers Don't Strip Whitespace",
      "target": "flask.helpers.get_debug_flag",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The environment variable parsing functions `get_debug_flag()` and `get_load_dotenv()` fail to strip whitespace from environment variable values, causing unexpected behavior when users accidentally include leading or trailing spaces.",
      "package": "flask",
      "file_name": "bug_report_flask_env_var_whitespace_2025-09-25_06-29_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_env_var_whitespace_2025-09-25_06-29_k3n9.md",
      "call_id": "c27b103b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask TaggedJSONSerializer Datetime Microseconds Loss",
      "target": "flask.sessions.TaggedJSONSerializer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TaggedJSONSerializer silently loses microsecond precision when serializing and deserializing datetime objects, violating the round-trip property that serializers should maintain.",
      "package": "flask",
      "file_name": "bug_report_flask_datetime_microseconds_2025-09-25_03-58_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_datetime_microseconds_2025-09-25_03-58_a7f2.md",
      "call_id": "8e20da62",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask TaggedJSONSerializer Naive Datetime Corruption",
      "target": "flask.json.tag.TaggedJSONSerializer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TaggedJSONSerializer violates its \"lossless serialization\" contract by adding UTC timezone information to naive datetime objects during deserialization, corrupting the original data.",
      "package": "flask",
      "file_name": "bug_report_flask_taggedjson_datetime_roundtrip_2025-09-25_11-01_k9f3.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_taggedjson_datetime_roundtrip_2025-09-25_11-01_k9f3.md",
      "call_id": "1d8178c5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask TaggedJSONSerializer Naive Datetime Round-Trip Failure",
      "target": "flask.json.tag.TaggedJSONSerializer",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "TaggedJSONSerializer fails to preserve timezone-awareness for naive datetime objects during serialization round-trips. Naive datetimes are incorrectly converted to UTC-aware datetimes.",
      "package": "flask",
      "file_name": "bug_report_flask_json_taggedjsonserializer_datetime_2025-09-25_02-59_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_json_taggedjsonserializer_datetime_2025-09-25_02-59_k3x9.md",
      "call_id": "e66375c5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask get_root_path Documentation Violation",
      "target": "flask.helpers.get_root_path",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `get_root_path` function violates its documented contract by raising `RuntimeError` for built-in modules without a `__file__` attribute, instead of returning the current working directory as the docstring claims.",
      "package": "flask",
      "file_name": "bug_report_flask_get_root_path_2025-09-25_01-03_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_get_root_path_2025-09-25_01-03_k8m2.md",
      "call_id": "8c3e0240",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask json.dumps() Sort Keys Inconsistency",
      "target": "flask.json.dumps",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`flask.json.dumps()` produces different output for the same dict depending on whether an app context is active. With an app context, keys are sorted alphabetically. Without an app context, keys maintain insertion order. This behavioral inconsistency violates the principle of least surprise.",
      "package": "flask",
      "file_name": "bug_report_flask_json_dumps_sort_keys_inconsistency_2025-09-25_07-05_m8p4.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_json_dumps_sort_keys_inconsistency_2025-09-25_07-05_m8p4.md",
      "call_id": "e41b869e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask select_jinja_autoescape Case Sensitivity Security Issue",
      "target": "Flask.select_jinja_autoescape",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Flask's `select_jinja_autoescape` method performs case-sensitive file extension matching, which causes autoescaping to be incorrectly disabled for uppercase or mixed-case HTML/XML file extensions (e.g., `.HTML`, `.XML`). This is a **security vulnerability** as it can lead to XSS attacks on Windows systems where file extensions are case-insensitive.",
      "package": "flask",
      "file_name": "bug_report_flask_select_jinja_autoescape_case_sensitivity_2025-09-25_03-32_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_select_jinja_autoescape_case_sensitivity_2025-09-25_03-32_x7k9.md",
      "call_id": "8672c2ff",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Flask send_from_directory Crashes on Filenames with Newline Characters",
      "target": "flask.helpers.send_from_directory",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`send_from_directory` crashes with a `ValueError` when attempting to serve files whose names contain newline characters (`\\r` or `\\n`), even though such files can exist on Unix filesystems and pass all security checks.",
      "package": "flask",
      "file_name": "bug_report_flask_send_from_directory_newline_2025-09-25_09-58_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_send_from_directory_newline_2025-09-25_09-58_a7f2.md",
      "call_id": "d8d4efa4",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "flask.config.import_string Silent Mode Fails",
      "target": "flask.config.import_string",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `import_string` function violates its documented contract when `silent=True` by raising a `ValueError` instead of returning `None` for certain invalid inputs. Specifically, when the input is a single colon (`':'`), the function raises `ValueError: Empty module name` even when `silent=True`.",
      "package": "flask",
      "file_name": "bug_report_flask_import_string_silent_mode_2025-09-25_02-31_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/flask/bug_reports/bug_report_flask_import_string_silent_mode_2025-09-25_02-31_k3x9.md",
      "call_id": "52762c34",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "AsyncChat Duplicate Code",
      "target": "llm.default_plugins.openai_models.AsyncChat.execute",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AsyncChat.execute` method contains duplicate code that checks and assigns `chunk.usage` twice in succession, resulting in redundant operations during streaming responses.",
      "package": "llm",
      "file_name": "bug_report_async_chat_duplicate_code_2025-09-25_05-05_7x2n.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_async_chat_duplicate_code_2025-09-25_05-05_7x2n.md",
      "call_id": "51c37087",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "combine_chunks Role Loss",
      "target": "llm.default_plugins.openai_models.combine_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `combine_chunks` function incorrectly handles the `role` field when combining streaming chunks, causing the role to be lost when subsequent chunks have `role=None`.",
      "package": "llm",
      "file_name": "bug_report_llm_combine_chunks_role_2025-09-25_00-00_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_combine_chunks_role_2025-09-25_00-00_k7x9.md",
      "call_id": "0b17c168",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm cosine_similarity Division by Zero",
      "target": "llm.cosine_similarity()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity()` function crashes with `ZeroDivisionError` when either input vector is all zeros, instead of handling this edge case gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_02-29_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_02-29_k9m2.md",
      "call_id": "1c61f17f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm encode/decode Precision Loss",
      "target": "llm.encode()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `encode()` and `decode()` functions lose precision for very small float values, causing them to underflow to zero. This violates the round-trip property that `decode(encode(values)) == values`.",
      "package": "llm",
      "file_name": "bug_report_llm_encode_decode_2025-09-25_02-29_a7x3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_encode_decode_2025-09-25_02-29_a7x3.md",
      "call_id": "49fd3752",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm utils.truncate_string Violates Length Invariant",
      "target": "llm.utils.truncate_string()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_string()` function violates its documented contract by returning strings longer than `max_length` when `max_length < 3`. The docstring states \"Truncate a string to a maximum length\" and describes `max_length` as \"Maximum length of the result string\", but the function can return strings of length 3 or 4 even when `max_length=1` or `max_length=2`.",
      "package": "llm",
      "file_name": "bug_report_llm_truncate_string_2025-09-25_02-29_p3k7.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_truncate_string_2025-09-25_02-29_p3k7.md",
      "call_id": "cf41e17a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity - Division by Zero on Zero Vectors",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with `ZeroDivisionError` when either input vector has zero magnitude, making it unable to handle valid mathematical inputs.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_07-29_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_07-29_x7k9.md",
      "call_id": "43f7419d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Crashes on Zero Vectors",
      "target": "llm.cosine_similarity",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when either input vector has zero magnitude, instead of handling this edge case gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_zero_vector_2025-09-25_03-58_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_zero_vector_2025-09-25_03-58_x7k9.md",
      "call_id": "dea0b053",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Division By Zero",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when given vectors with very small magnitudes that underflow to zero during computation.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_07-01_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_07-01_k3f8.md",
      "call_id": "93d43a45",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Division by Zero",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when either input vector contains all zeros or is empty, which are valid inputs that should be handled gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_zero_division_2025-09-25_01-59_h7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_zero_division_2025-09-25_01-59_h7k2.md",
      "call_id": "d00110b9",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Division by Zero and Incorrect Results",
      "target": "llm.cosine_similarity",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function has two critical bugs: (1) it crashes with `ZeroDivisionError` when either input vector has magnitude 0, and (2) it produces mathematically incorrect results when input vectors have different lengths due to mismatched iteration (using `zip`) for dot product vs full iteration for magnitudes.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_09-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_09-00_x3k9.md",
      "call_id": "8079a7fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Division by Zero with Zero Vectors",
      "target": "llm.cosine_similarity",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when either input vector is the zero vector, instead of handling this edge case gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_zero_vector_2025-09-25_05-29_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_zero_vector_2025-09-25_05-29_a7k2.md",
      "call_id": "0228eca8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Silent Mismatched Length Handling",
      "target": "llm.cosine_similarity",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function silently produces mathematically incorrect results when given vectors of different lengths, due to using `zip()` which truncates to the shorter length without warning.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_length_mismatch_2025-09-25_01-59_p3m8.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_length_mismatch_2025-09-25_01-59_p3m8.md",
      "call_id": "89ec6cf3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Violates Symmetry Property",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function in the llm module violates the fundamental mathematical property that cosine similarity must be symmetric. When given vectors of different lengths, `cosine_similarity(a, b) \u2260 cosine_similarity(b, a)`.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_03-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_03-58_k3m9.md",
      "call_id": "c3c076d4",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Zero Vector Division",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with `ZeroDivisionError` when either input vector contains all zeros, which is a valid input that should be handled gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_10-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_10-00_k3m9.md",
      "call_id": "a801a290",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity Zero Vector Division Error",
      "target": "llm.cosine_similarity",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when either input vector is a zero vector (all elements are zero), instead of handling this edge case gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_zero_vector_2025-09-25_05-02_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_zero_vector_2025-09-25_05-02_x7k9.md",
      "call_id": "45d05c85",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.cosine_similarity ZeroDivisionError with Zero Vectors",
      "target": "llm.cosine_similarity",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with `ZeroDivisionError` when either input vector contains all zeros, which is a valid mathematical input that should be handled gracefully.",
      "package": "llm",
      "file_name": "bug_report_llm_cosine_similarity_2025-09-25_00-24_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_cosine_similarity_2025-09-25_00-24_k3m9.md",
      "call_id": "83297d90",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.decode Silent Data Truncation",
      "target": "llm.decode",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `decode` function silently truncates input data when the binary length is not a multiple of 4, potentially hiding data corruption or incorrect usage without any warning or error.",
      "package": "llm",
      "file_name": "bug_report_llm_decode_silent_truncation_2025-09-25_10-00_a3f9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_decode_silent_truncation_2025-09-25_10-00_a3f9.md",
      "call_id": "263a02a9",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins AsyncChat Duplicate Usage Assignment",
      "target": "llm.default_plugins.openai_models.AsyncChat.execute",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AsyncChat.execute` method contains duplicate code that checks and assigns `chunk.usage` twice in a row, which is redundant and differs from the synchronous `Chat.execute` implementation.",
      "package": "llm",
      "file_name": "bug_report_llm_AsyncChat_duplicate_usage_2025-09-25_01-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_AsyncChat_duplicate_usage_2025-09-25_01-30_k3f9.md",
      "call_id": "73cb2db6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins AsyncChat Duplicate Usage Check",
      "target": "llm.default_plugins.openai_models.AsyncChat.execute",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AsyncChat.execute` method contains duplicate code that checks and assigns `chunk.usage` twice in succession, which is redundant and inefficient.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_asyncchat_2025-09-25_05-04_zp1s.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_asyncchat_2025-09-25_05-04_zp1s.md",
      "call_id": "a87709dd",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins not_nulls Function Incorrect Iteration",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function crashes when filtering model options because it attempts to iterate and unpack Pydantic model field names (or dict keys) as (key, value) tuples, causing a `ValueError`.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_05-08_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_05-08_x7k9.md",
      "call_id": "5480b4db",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins._attachment Unsupported MIME Types Treated as Audio",
      "target": "llm.default_plugins.openai_models._attachment",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_attachment` function incorrectly treats unsupported MIME types (e.g., `text/plain`, `video/mp4`) as audio attachments due to an unconditional else block that assumes all non-image types are audio.",
      "package": "llm",
      "file_name": "bug_report_llm_attachment_unsupported_type_2025-09-25_05-29_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_attachment_unsupported_type_2025-09-25_05-29_x3k9.md",
      "call_id": "0921a91a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models combine_chunks Role Overwrite",
      "target": "llm.default_plugins.openai_models.combine_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `combine_chunks` function unconditionally overwrites the `role` field with each chunk's `delta.role`, even when it's `None`. In typical OpenAI streaming responses, only the first chunk has `role=\"assistant\"` and subsequent chunks have `role=None`, causing the final combined result to have `role=None` instead of `role=\"assistant\"`.",
      "package": "llm",
      "file_name": "bug_report_llm_combine_chunks_role_2025-09-25_10-59_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_combine_chunks_role_2025-09-25_10-59_m3p7.md",
      "call_id": "d82e065e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models not_nulls Function",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls()` function expects an iterable of (key, value) tuples but is called with `prompt.options` which can be a dict. When a non-empty dict is passed, Python's iteration yields keys only (not key-value pairs), causing a ValueError when the dict comprehension tries to unpack each key string into two variables.",
      "package": "llm",
      "file_name": "bug_report_llm_not_nulls_2025-09-25_04-29_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_not_nulls_2025-09-25_04-29_k3x9.md",
      "call_id": "04f81e97",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models not_nulls Function",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls()` function crashes with a `ValueError: too many values to unpack` when called with a dictionary because it attempts to iterate over the dictionary directly instead of calling `.items()`.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_02-30_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_02-30_k3n9.md",
      "call_id": "638c0f73",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models not_nulls Function",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function has a misleading type signature that claims to accept a `dict` but only works with Pydantic BaseModel instances that yield `(key, value)` tuples when iterated. When called with an actual Python dict, it raises a `ValueError`.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_10-59_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_10-59_k9f2.md",
      "call_id": "def56f3a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models not_nulls Function Incompatible with Pydantic v2",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function in `openai_models.py` is incompatible with Pydantic v2's BaseModel iteration behavior, causing a `ValueError` when attempting to filter None values from model options.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_02-02_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_02-02_k7m3.md",
      "call_id": "5710638c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models validate_logit_bias Error Message",
      "target": "llm.default_plugins.openai_models.SharedOptions.validate_logit_bias",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validate_logit_bias` validator has a catch-all `except ValueError` that shadows the specific error message \"Value must be between -100 and 100\". When a value is out of range, users see the generic \"Invalid key-value pair in logit_bias dictionary\" instead of the helpful range error.",
      "package": "llm",
      "file_name": "bug_report_llm_validate_logit_bias_2025-09-25_10-59_a7x2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_validate_logit_bias_2025-09-25_10-59_a7x2.md",
      "call_id": "3e360800",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.AsyncChat Duplicate Usage Check",
      "target": "llm.default_plugins.openai_models.AsyncChat.execute",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AsyncChat.execute()` method contains duplicate code that checks and assigns `chunk.usage` twice in the streaming response loop, causing unnecessary overhead.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_asyncchat_duplicate_2025-09-25_03-00_a7x2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_asyncchat_duplicate_2025-09-25_03-00_a7x2.md",
      "call_id": "6fee8232",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.SharedOptions.validate_logit_bias Error Handling",
      "target": "llm.default_plugins.openai_models.SharedOptions.validate_logit_bias",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validate_logit_bias()` field validator catches and masks specific error messages about out-of-range values, providing only a generic error message to users.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_validate_logit_bias_2025-09-25_03-00_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_validate_logit_bias_2025-09-25_03-00_m3k8.md",
      "call_id": "7b1b4936",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.combine_chunks Loses Role",
      "target": "llm.default_plugins.openai_models.combine_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `combine_chunks()` function incorrectly overwrites the role field with None when processing streaming responses, causing response metadata to be lost.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_combine_chunks_2025-09-25_03-00_k9f3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_combine_chunks_2025-09-25_03-00_k9f3.md",
      "call_id": "a1a6a281",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.not_nulls - Incorrect dict iteration",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "Critical",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function attempts to iterate over a dict as if it were an iterable of (key, value) tuples, causing a `ValueError` when the function is called with a dict input. This function is used in `build_kwargs` and will crash whenever called.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_07-33_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_07-33_k3m9.md",
      "call_id": "e37a6080",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.not_nulls - TypeError when called with Pydantic BaseModel",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function crashes with a `TypeError` when called with a Pydantic v2 BaseModel instance because it attempts to unpack field names as `(key, value)` tuples, but Pydantic v2 iteration yields only field names.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_06-29_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_06-29_x8k3.md",
      "call_id": "e5ce7ed1",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.not_nulls Function",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function crashes when called with its expected input types (dict or Pydantic model) due to incorrect iteration syntax. The function attempts to unpack key-value pairs from a dict/model by iterating directly over it (`for key, value in data`), but this syntax only works with iterables of tuples like `dict.items()`.",
      "package": "llm",
      "file_name": "bug_report_not_nulls_2025-09-25_03-58_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_not_nulls_2025-09-25_03-58_x7k9.md",
      "call_id": "9b49f958",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.not_nulls Incorrect Dict Iteration",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls` function crashes with a `ValueError` when called with any dictionary because it incorrectly iterates over the dictionary without calling `.items()`.",
      "package": "llm",
      "file_name": "bug_report_llm_not_nulls_2025-09-25_06-02_lxpu.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_not_nulls_2025-09-25_06-02_lxpu.md",
      "call_id": "bc1de553",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.not_nulls ValueError",
      "target": "llm.default_plugins.openai_models.not_nulls",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_nulls()` function crashes when called with a Pydantic model (its intended input type) due to incorrect iteration syntax, causing all OpenAI model executions to fail.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_not_nulls_2025-09-25_03-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_not_nulls_2025-09-25_03-00_x7k9.md",
      "call_id": "86ee2047",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.redact_data - Incomplete Nested Redaction",
      "target": "llm.default_plugins.openai_models.redact_data",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `redact_data` function fails to recursively redact sensitive data (image URLs and audio data) when they are nested inside already-redacted structures. After redacting a top-level `image_url` or `input_audio` field, the function does not continue to recursively process nested children, leaving nested sensitive data exposed.",
      "package": "llm",
      "file_name": "bug_report_llm_redact_data_2025-09-25_01-03_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_redact_data_2025-09-25_01-03_k7m2.md",
      "call_id": "aff85b75",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.default_plugins.openai_models.redact_data Input Mutation",
      "target": "llm.default_plugins.openai_models.redact_data",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `redact_data()` function mutates its input dictionary instead of creating a copy, violating the principle of immutability and causing unexpected side effects when the input data is reused.",
      "package": "llm",
      "file_name": "bug_report_llm_default_plugins_redact_data_2025-09-25_09-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_default_plugins_redact_data_2025-09-25_09-01_k3m9.md",
      "call_id": "216d4114",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils._parse_kwargs Confusing Errors on Unbalanced Brackets",
      "target": "llm.utils._parse_kwargs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_parse_kwargs` function allows the bracket depth counter to become negative when parsing input with unbalanced closing brackets. This causes the parser to incorrectly group tokens, leading to confusing error messages that don't clearly indicate the root cause (unbalanced brackets).",
      "package": "llm",
      "file_name": "bug_report_llm_parse_kwargs_2025-09-25_09-02_m8n3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_parse_kwargs_2025-09-25_09-02_m8n3.md",
      "call_id": "18c8e87d",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.cosine_similarity Division by Zero",
      "target": "llm.utils.cosine_similarity",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cosine_similarity` function crashes with a `ZeroDivisionError` when either input vector has zero magnitude (all zeros or empty).",
      "package": "llm",
      "file_name": "bug_report_llm_utils_cosine_similarity_2025-09-25_04-29_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_cosine_similarity_2025-09-25_04-29_k3m9.md",
      "call_id": "129ce301",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.monotonic_ulid - Violates Monotonicity When Clock Goes Backwards",
      "target": "llm.utils.monotonic_ulid",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `monotonic_ulid` function violates its strict monotonicity guarantee when the system clock goes backwards (e.g., due to NTP adjustments). It generates a fresh ULID with a smaller timestamp instead of continuing to increment the randomness part.",
      "package": "llm",
      "file_name": "bug_report_llm_monotonic_ulid_2025-09-25_07-29_b8n4.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_monotonic_ulid_2025-09-25_07-29_b8n4.md",
      "call_id": "3e0cb40d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.monotonic_ulid Clock Backward Violation",
      "target": "llm.utils.monotonic_ulid",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `monotonic_ulid()` function violates its monotonicity guarantee when the system clock moves backward, returning a ULID that is smaller than a previously returned one.",
      "package": "llm",
      "file_name": "bug_report_llm_monotonic_ulid_2025-09-25_03-32_k7m4.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_monotonic_ulid_2025-09-25_03-32_k7m4.md",
      "call_id": "3534295d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.monotonic_ulid Clock Skew Violation",
      "target": "llm.utils.monotonic_ulid",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `monotonic_ulid` function violates its documented guarantee of returning \"strictly larger\" ULIDs when the system clock moves backwards (due to NTP adjustments, manual changes, or other clock skew).",
      "package": "llm",
      "file_name": "bug_report_llm_monotonic_ulid_clock_skew_2025-09-25_10-00_m7k3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_monotonic_ulid_clock_skew_2025-09-25_10-00_m7k3.md",
      "call_id": "c22299d0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.monotonic_ulid Monotonicity Violation on Clock Regression",
      "target": "llm.utils.monotonic_ulid",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `monotonic_ulid` function violates its monotonicity guarantee when the system clock moves backward (e.g., due to NTP adjustment or manual clock changes). The function promises to return ULIDs that are \"strictly larger\" than all previously returned ULIDs, but it generates ULIDs based on the current timestamp without checking if the clock has regressed.",
      "package": "llm",
      "file_name": "bug_report_llm_monotonic_ulid_2025-09-25_09-01_p7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_monotonic_ulid_2025-09-25_09-01_p7k2.md",
      "call_id": "7fdfd2bb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.monotonic_ulid Violates Monotonicity with Clock Skew",
      "target": "llm.utils.monotonic_ulid",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `monotonic_ulid` function violates its monotonicity guarantee when the system clock goes backwards (e.g., due to NTP adjustments or manual time changes). It generates ULIDs with earlier timestamps than previously generated ULIDs, breaking the \"strictly larger\" invariant.",
      "package": "llm",
      "file_name": "bug_report_llm_monotonic_ulid_2025-09-25_00-26_b4j8.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_monotonic_ulid_2025-09-25_00-26_b4j8.md",
      "call_id": "19e7de7c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.remove_dict_none_values - None Values Remain in Lists",
      "target": "llm.utils.remove_dict_none_values",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `remove_dict_none_values` function fails to remove `None` values from lists, despite recursively processing list elements. This causes `None` values to remain in the output structure, contradicting the function's purpose of cleaning up data structures.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_remove_dict_none_values_2025-09-25_05-59_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_remove_dict_none_values_2025-09-25_05-59_k3m9.md",
      "call_id": "2116e19a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.remove_dict_none_values Doesn't Remove None from Lists",
      "target": "llm.utils.remove_dict_none_values",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `remove_dict_none_values` function's docstring claims it \"Recursively remove keys with value of None\", but it fails to remove `None` values that appear inside lists.",
      "package": "llm",
      "file_name": "bug_report_llm_remove_dict_none_values_2025-09-25_03-58_p7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_remove_dict_none_values_2025-09-25_03-58_p7k2.md",
      "call_id": "e6d55527",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.remove_dict_none_values Inconsistent List Handling",
      "target": "llm.utils.remove_dict_none_values",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `remove_dict_none_values` function inconsistently handles None values and empty dicts when they appear in lists versus when they appear as direct dict values. Empty dicts that result from removing None values are filtered out for direct dict values but preserved inside lists.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_remove_dict_none_values_2025-09-25_01-59_q8w3.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_remove_dict_none_values_2025-09-25_01-59_q8w3.md",
      "call_id": "4eb19397",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.schema_dsl Crashes on Empty Fields",
      "target": "llm.utils.schema_dsl",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `schema_dsl` function crashes with an `IndexError` when the input contains empty field specifications (e.g., consecutive commas or leading/trailing commas with whitespace).",
      "package": "llm",
      "file_name": "bug_report_llm_utils_schema_dsl_2025-09-25_04-29_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_schema_dsl_2025-09-25_04-29_x9k2.md",
      "call_id": "fade49bf",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.schema_dsl IndexError on Empty Field Name",
      "target": "llm.utils.schema_dsl",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `schema_dsl()` function crashes with an `IndexError` when given a field specification with only a description (empty or whitespace-only field name before the colon).",
      "package": "llm",
      "file_name": "bug_report_llm_schema_dsl_2025-09-25_03-35_p2h7.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_schema_dsl_2025-09-25_03-35_p2h7.md",
      "call_id": "497f91da",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.schema_dsl IndexError with Description-Only Fields",
      "target": "llm.utils.schema_dsl",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `schema_dsl` function crashes with `IndexError` when a field specification contains only a description (i.e., starts with `:`) without a field name.",
      "package": "llm",
      "file_name": "bug_report_llm_schema_dsl_2025-09-25_00-25_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_schema_dsl_2025-09-25_00-25_x7k2.md",
      "call_id": "2daeb4d2",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string - Violates Length Invariant for Small max_length",
      "target": "llm.utils.truncate_string",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented invariant `len(result) <= max_length` when `max_length` is 1 or 2, returning \"...\" (3 characters) which exceeds the specified maximum.",
      "package": "llm",
      "file_name": "bug_report_llm_truncate_string_2025-09-25_07-29_p3m1.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_truncate_string_2025-09-25_07-29_p3m1.md",
      "call_id": "02bc9793",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Incorrect Separator Length",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function with `keep_end=True` returns strings shorter than `max_length` due to an incorrect calculation that assumes the separator is 5 characters when it's actually 4 characters.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_10-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_10-00_k3x9.md",
      "call_id": "89a2bd5b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Length Constraint Violation",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented contract when `max_length` is less than 3, returning strings longer than the specified `max_length`.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_00-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_00-58_k3m9.md",
      "call_id": "5c99e321",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Length Constraint Violation",
      "target": "llm.utils.truncate_string",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its fundamental contract when `max_length < 3`: it returns strings longer than the specified `max_length`, directly contradicting the parameter's documented purpose.",
      "package": "llm",
      "file_name": "bug_report_llm_truncate_string_2025-09-25_10-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_truncate_string_2025-09-25_10-00_x7k2.md",
      "call_id": "51ffbaf1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Length Invariant Violation",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented length invariant when `max_length < 3`, returning strings that exceed the specified maximum length instead of truncating them.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_04-59_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_04-59_k3m9.md",
      "call_id": "c5ed1524",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Max Length Violation",
      "target": "llm.utils.truncate_string",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented contract by returning strings longer than the specified `max_length` parameter when `max_length < 3`.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_01-59_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_01-59_k3x9.md",
      "call_id": "30c71bf4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates Length Constraint",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its core contract by returning strings longer than `max_length` when `max_length < 3`.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_04-29_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_04-29_a7f2.md",
      "call_id": "a8163af2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates Length Constraint",
      "target": "llm.utils.truncate_string",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented contract by returning strings longer than `max_length` when `max_length` is very small (< 3).",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_07-01_m9x2.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_07-01_m9x2.md",
      "call_id": "473e7e01",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates Length Contract",
      "target": "llm.utils.truncate_string",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented contract when `max_length < 3`, returning strings that exceed the specified maximum length. The function's docstring states \"max_length: Maximum length of the result string\", but for values 1 and 2, it returns strings much longer than the specified maximum.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_08-03_gun7.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_08-03_gun7.md",
      "call_id": "53e45f28",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates Length Invariant",
      "target": "llm.utils.truncate_string",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its core invariant when `max_length < 3`: the returned string can be longer than `max_length`.",
      "package": "llm",
      "file_name": "bug_report_llm_truncate_string_2025-09-25_03-58_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_truncate_string_2025-09-25_03-58_m3p7.md",
      "call_id": "48f1d7b3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates max_length Constraint",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its documented contract by returning strings longer than `max_length` when `max_length < 3`.",
      "package": "llm",
      "file_name": "bug_report_llm_utils_truncate_string_2025-09-25_06-29_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_utils_truncate_string_2025-09-25_06-29_x7k9.md",
      "call_id": "3d381c8e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "llm.utils.truncate_string Violates max_length Contract",
      "target": "llm.utils.truncate_string",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate_string` function violates its contract by returning strings longer than the specified `max_length` when `max_length < 3`.",
      "package": "llm",
      "file_name": "bug_report_llm_truncate_string_max_length_2025-09-25_05-29_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_llm_truncate_string_max_length_2025-09-25_05-29_k3x9.md",
      "call_id": "1bc63141",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "validate_logit_bias Exception Handling",
      "target": "llm.default_plugins.openai_models.SharedOptions.validate_logit_bias",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validate_logit_bias` method's exception handling swallows specific error messages and replaces them with a generic error, providing poor user feedback when values are out of range.",
      "package": "llm",
      "file_name": "bug_report_validate_logit_bias_exception_2025-09-25_05-05_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/llm/bug_reports/bug_report_validate_logit_bias_exception_2025-09-25_05-05_k3m9.md",
      "call_id": "7fbd5624",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "EngFormatter Silently Loses Precision for Numbers Outside [-24, 24] Exponent Range",
      "target": "pandas.io.formats.format.EngFormatter",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `EngFormatter` class clamps exponents to the range [-24, 24] even when `use_eng_prefix=False`, causing silent data loss for very small or very large numbers. Numbers like 1e-50 are incorrectly formatted as \"0.0E-24\", losing all significant information.",
      "package": "numpy",
      "file_name": "bug_report_pandas_io_formats_EngFormatter_2025-09-25_02-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_io_formats_EngFormatter_2025-09-25_02-17_k3m9.md",
      "call_id": "387b89c7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Null Byte Removal in String Operations",
      "target": "numpy.strings",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple `numpy.strings` functions incorrectly remove standalone null bytes (`\\x00`), treating them as empty strings instead of preserving them like Python's string methods do.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_null_bytes_2025-09-25_08-21_v755.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_null_bytes_2025-09-25_08-21_v755.md",
      "call_id": "44f7b7a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy Array Null Character Truncation",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy arrays silently truncate strings at trailing null characters (`\\x00`), causing data corruption. When a string ending with one or more null characters is stored in a numpy array, all trailing null characters are lost.",
      "package": "numpy",
      "file_name": "bug_report_numpy_array_null_truncation_2025-09-25_03-14_hbpc.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_array_null_truncation_2025-09-25_03-14_hbpc.md",
      "call_id": "956bd31c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy String Array - Trailing Null Character Truncation",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy silently truncates trailing null characters (`\\x00`) when creating string arrays, causing data corruption. Strings ending with null characters lose those trailing nulls, while null characters in the middle of strings are preserved.",
      "package": "numpy",
      "file_name": "bug_report_numpy_string_null_truncation_2025-09-25_06-52_x7n9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_string_null_truncation_2025-09-25_06-52_x7n9.md",
      "call_id": "5740d982",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy String Arrays Truncate at Trailing Null Characters",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy string arrays silently truncate strings at trailing null characters (`\\x00`), causing data loss. Null characters in the middle of strings are preserved, but trailing nulls are removed, which violates Python's string semantics.",
      "package": "numpy",
      "file_name": "bug_report_numpy_array_string_trailing_null_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_array_string_trailing_null_2025-09-25_00-00_k3m9.md",
      "call_id": "6d6a6a08",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy String Dtype Trailing Null Truncation",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy silently truncates trailing null characters when storing strings in unicode ('U') or byte ('S') dtype arrays, but preserves leading and embedded null characters. This inconsistent behavior causes silent data loss.",
      "package": "numpy",
      "file_name": "bug_report_numpy_string_dtype_trailing_null_2025-09-25_04-22_k7n3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_string_dtype_trailing_null_2025-09-25_04-22_k7n3.md",
      "call_id": "9fddb244",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy Unicode Array - Trailing Null Byte Truncation",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy silently truncates trailing null bytes when creating Unicode string arrays, causing data corruption for any string ending with '\\x00'.",
      "package": "numpy",
      "file_name": "bug_report_numpy_unicode_array_null_byte_truncation_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_unicode_array_null_byte_truncation_2025-09-25_00-00_x7k9.md",
      "call_id": "dab6870f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "NumPy Unicode String Null Character Truncation",
      "target": "numpy.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy silently truncates Unicode strings containing trailing null characters (`\\x00`) when creating arrays. This causes data loss and affects all `numpy.char` string manipulation functions.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_truncation_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_truncation_2025-09-25_00-01_x7k9.md",
      "call_id": "1ae01995",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray concatenation loses data with different fill values",
      "target": "pandas.core.arrays.sparse.SparseArray._concat_same_type",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When concatenating SparseArrays with different `fill_value` settings, data is silently lost. The method only uses the first array's fill value, causing values from other arrays that match their own fill value (but not the first's) to disappear.",
      "package": "numpy",
      "file_name": "bug_report_pandas_sparse_concat_2025-09-25_00-01_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_sparse_concat_2025-09-25_00-01_m3k8.md",
      "call_id": "8377a14a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray fill_value setter corrupts array values",
      "target": "pandas.core.arrays.sparse.SparseArray.fill_value",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Setting the `fill_value` property on a `SparseArray` corrupts the logical array values. The setter only updates the dtype's fill_value but does not update the sparse representation, causing `to_dense()` to return incorrect values.",
      "package": "numpy",
      "file_name": "bug_report_pandas_sparse_fill_value_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_sparse_fill_value_2025-09-25_00-00_x7k9.md",
      "call_id": "b158a53a",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.lorem_ipsum.words Negative Count Handling",
      "target": "django.utils.lorem_ipsum.words()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `words()` function incorrectly handles negative count values when `common=True`, returning unexpected words instead of empty string or raising an error.",
      "package": "numpy",
      "file_name": "bug_report_django_lorem_ipsum_words_negative_count_2025-09-25_06-36_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_django_lorem_ipsum_words_negative_count_2025-09-25_06-36_x7k9.md",
      "call_id": "0d1e9a4e",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "format_percentiles produces 'nan%' output",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`format_percentiles()` produces invalid 'nan%' output when given valid percentiles that include extremely small values mixed with normal values. This occurs due to numeric overflow in the precision calculation.",
      "package": "numpy",
      "file_name": "bug_report_format_percentiles_nan_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_format_percentiles_nan_2025-09-25_00-00_k3m9.md",
      "call_id": "559a6b66",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.array_equiv Violates Reflexivity with NaN",
      "target": "numpy.array_equiv",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.array_equiv(arr, arr)` returns `False` when `arr` contains NaN values, violating the reflexivity property that any array should be equivalent to itself.",
      "package": "numpy",
      "file_name": "bug_report_numpy_array_equiv_reflexivity_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_array_equiv_reflexivity_2025-09-25_k3m9.md",
      "call_id": "4154664c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.base_repr Padding Inconsistency with Zero",
      "target": "numpy.base_repr",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `number=0` and `padding=1`, `numpy.base_repr` returns `'0'` instead of the expected `'00'`, failing to add the requested padding zero. This inconsistency only occurs when both conditions are met: the number is zero and padding is exactly 1.",
      "package": "numpy",
      "file_name": "bug_report_numpy_base_repr_padding_2025-09-25_07-14_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_base_repr_padding_2025-09-25_07-14_k9x2.md",
      "call_id": "654be22f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Conversion Functions Don't Handle Expanding Unicode Mappings",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The case conversion functions (`upper`, `lower`, `swapcase`) in `numpy.char` don't correctly handle Unicode characters that expand when case-converted. They claim to call `str.upper`/`str.lower`/`str.swapcase` element-wise but truncate the results to single characters.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_conversion_2025-09-25_00-00_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_conversion_2025-09-25_00-00_k8m2.md",
      "call_id": "43772f56",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Conversion Silent Truncation",
      "target": "numpy.char.upper()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper()` and `numpy.char.lower()` silently truncate results when case conversion expands character count, violating the documented contract that they call `str.upper()` and `str.lower()` element-wise.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_conversion_2025-09-25_06-14_k3x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_conversion_2025-09-25_06-14_k3x7.md",
      "call_id": "8fa16e0e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Conversion Truncates Multi-Character Results",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy's `char.upper()`, `char.lower()`, and `char.swapcase()` truncate results to a single character when Unicode case conversion produces multiple characters (e.g., '\u00df'.upper() should return 'SS' but returns 'S').",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_upper_truncation_2025-09-25_10-12_uxkh.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_upper_truncation_2025-09-25_10-12_uxkh.md",
      "call_id": "b0ee3cf1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Functions Don't Expand Characters Like Python",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Multiple numpy.char case conversion functions (upper, capitalize, title, swapcase) claim to call their Python str equivalents element-wise, but fail to properly handle characters that expand to multiple characters during case conversion, such as German \u00df.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_functions_2025-09-25_04-26_m8n2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_functions_2025-09-25_04-26_m8n2.md",
      "call_id": "e6b136f3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Functions Truncate Unicode Expansions",
      "target": "numpy.char.upper()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper()`, `numpy.char.capitalize()`, and `numpy.char.swapcase()` truncate Unicode characters that expand in length during case conversion (e.g., '\u00df' \u2192 'SS', '\ufb01' \u2192 'FI'), causing silent data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_truncation_2025-09-25_02-46_m8k4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_truncation_2025-09-25_02-46_m8k4.md",
      "call_id": "394fadda",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Operations Silent Truncation",
      "target": "numpy.char.upper",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Case transformation operations silently truncate results when Unicode characters expand during case conversion (e.g., '\u00df' \u2192 'SS'), producing incorrect output without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_upper_truncation_2025-09-25_00-00_ax7k.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_upper_truncation_2025-09-25_00-00_ax7k.md",
      "call_id": "7d056eb6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Operations Strip Null Characters",
      "target": "numpy.char.upper",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Case transformation operations silently strip null characters (`\\x00`) from strings, causing data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_stripping_2025-09-25_00-00_b9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_stripping_2025-09-25_00-00_b9k2.md",
      "call_id": "993f3e00",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Transformation Functions Silently Truncate Unicode",
      "target": "numpy.char.upper()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Case transformation functions (`upper()`, `lower()`, `title()`, `capitalize()`) silently truncate results when Unicode case mapping produces strings longer than the input array's dtype can accommodate, causing data corruption for characters like \u00df (German eszett), \u0130 (Turkish I with dot), and ligatures (\ufb01, \ufb02, etc.).",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_truncation_2025-09-25_15-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_truncation_2025-09-25_15-30_k7m2.md",
      "call_id": "b9294f0a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Case Transformation Functions Truncate Multi-Character Results",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy's case transformation functions silently truncate results when Unicode case transformations produce multi-character outputs, violating their documented contracts to call Python's `str.upper()`, `str.swapcase()`, etc. element-wise.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_case_truncation_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_case_truncation_2025-09-25_00-00_x7k9.md",
      "call_id": "5449d509",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Functions Truncate Results When Strings Expand",
      "target": "numpy.char.upper()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple `numpy.char` functions silently truncate results when operations would expand strings beyond their original width. This affects `upper()`, `swapcase()`, `replace()`, and `translate()`, causing data loss for Unicode ligatures (\ufb00, \ufb01, \ufb02, etc.), German sharp S (\u00df), string replacements, and character translations.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_truncation_2025-09-25_05-16_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_truncation_2025-09-25_05-16_x7k9.md",
      "call_id": "17513384",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Null Byte Handling",
      "target": "numpy.char",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "String functions in `numpy.char` incorrectly treat the null byte character (`\\x00`) as an empty string, affecting 11 functions with wrong results or crashes.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_byte_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_byte_2025-09-25_00-00_x9k2.md",
      "call_id": "f2fae3d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Null Byte Handling in String Functions",
      "target": "numpy.char.find",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple numpy.char string functions incorrectly handle null bytes (`\\x00`) in Unicode strings, treating them as string terminators similar to C strings rather than as regular characters. This affects at least 6 functions: `find`, `rfind`, `count`, `index`, `startswith`, and `endswith`, causing completely incorrect results.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_byte_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_byte_2025-09-25_00-00_k3x9.md",
      "call_id": "b50a0d27",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Null Character Handling",
      "target": "numpy.char.find",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Multiple numpy.char string search functions incorrectly handle null characters (`'\\x00'`), returning wrong values that don't match the documented behavior of calling Python's str methods element-wise.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_handling_2025-09-25_07-46_harv.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_handling_2025-09-25_07-46_harv.md",
      "call_id": "c796ee5c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char Trailing Null Character Truncation",
      "target": "numpy.char",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When creating numpy string arrays, trailing null characters (`\\x00`) are silently truncated, causing data loss. This affects all numpy.char operations and violates the expected behavior that strings should be preserved intact.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_null_truncation_2025-09-25_00-00_n7k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_null_truncation_2025-09-25_00-00_n7k3.md",
      "call_id": "2140958a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char partition/rpartition Lose Null Characters",
      "target": "numpy.char.partition",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `partition` and `rpartition` functions lose null characters (`'\\x00'`) from strings, violating the fundamental property that partitioning should preserve the original string content when parts are concatenated.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_partition_null_2025-09-25_00-01_x7n3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_partition_null_2025-09-25_00-01_x7n3.md",
      "call_id": "6df53541",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.array Trailing Whitespace and Null Byte Truncation",
      "target": "numpy.char.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.array` silently strips trailing whitespace characters and truncates trailing null bytes, violating the contract that it should faithfully represent Python strings element-wise. Whitespace-only strings become empty strings.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_array_trailing_whitespace_2025-09-25_10-43_1xqe.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_array_trailing_whitespace_2025-09-25_10-43_1xqe.md",
      "call_id": "f87b49bc",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.array and asarray Strip Whitespace Characters",
      "target": "numpy.char.array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.array()` and `numpy.char.asarray()` silently strip whitespace characters including `\\r`, `\\n`, `\\t`, and `\\x00` from input strings, causing data loss.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_array_whitespace_stripping_2025-09-25_00-01_a3m8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_array_whitespace_stripping_2025-09-25_00-01_a3m8.md",
      "call_id": "320d2564",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.capitalize Truncates Unicode Characters That Expand During Case Conversion",
      "target": "numpy.char.capitalize",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.capitalize` silently truncates results when Unicode case conversion expands the character count, producing incorrect results without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_capitalize_2025-09-25_00-03_j4n7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_capitalize_2025-09-25_00-03_j4n7.md",
      "call_id": "7ef73a43",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.find/rfind Always Return 0 for Null Byte Searches",
      "target": "numpy.char.find",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.find()` and `numpy.char.rfind()` always return 0 when searching for null bytes (`\\x00`), even when the null byte is not present in the string. This violates Python's `str.find()` behavior, which correctly returns -1 when the substring is not found.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_find_null_2025-09-25_06-52_a7m1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_find_null_2025-09-25_06-52_a7m1.md",
      "call_id": "b9c0631f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.index/rindex Don't Raise ValueError for Null Byte Searches",
      "target": "numpy.char.index",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.char.index()` and `numpy.char.rindex()` fail to raise `ValueError` when searching for null bytes that don't exist in strings. Instead, they return invalid positions (0 for index, string length for rindex), violating Python's `str.index()` contract.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_index_null_2025-09-25_06-54_b3x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_index_null_2025-09-25_06-54_b3x7.md",
      "call_id": "37c89906",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.join Strips Null Byte Separators",
      "target": "numpy.char.join",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.join` silently strips null byte characters when used as a separator, producing empty separators instead and corrupting the join operation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_join_2025-09-25_00-00_p8q2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_join_2025-09-25_00-00_p8q2.md",
      "call_id": "f50254a4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.lower Truncates Unicode Characters That Expand When Lowercased",
      "target": "numpy.char.lower",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.lower` silently truncates results when Unicode case conversion expands the character count, producing incorrect results without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_lower_2025-09-25_00-02_p3k8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_lower_2025-09-25_00-02_p3k8.md",
      "call_id": "ae30bdf6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.mod Tuple Argument Handling",
      "target": "numpy.char.mod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.mod` fails to handle tuple arguments for format strings with multiple placeholders, while Python's built-in `%` operator handles them correctly.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_mod_tuple_2025-09-25_01-18_p0np.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_mod_tuple_2025-09-25_01-18_p0np.md",
      "call_id": "efe8b894",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.multiply Strips Trailing Null Bytes",
      "target": "numpy.char.multiply",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.multiply` silently strips trailing null bytes from strings during multiplication, producing incorrect output that differs from Python's native string repetition.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_multiply_2025-09-25_00-00_j5n8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_multiply_2025-09-25_00-00_j5n8.md",
      "call_id": "a2c24372",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.partition and rpartition Lose Null Bytes",
      "target": "numpy.char.partition",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.partition()` and `numpy.char.rpartition()` strip null bytes (`\\x00`) from their results, causing silent data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_partition_null_bytes_2025-09-25_00-03_q9m1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_partition_null_bytes_2025-09-25_00-03_q9m1.md",
      "call_id": "d1a31931",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.partition/rpartition Incorrectly Rejects Null Byte Separator",
      "target": "numpy.char.partition",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.char.partition()` and `numpy.char.rpartition()` incorrectly treat null bytes (`\\x00`) as empty separators and raise `ValueError`, while Python's `str.partition()` and `str.rpartition()` accept null bytes as valid separators. This violates the documented contract that these functions call the corresponding str methods element-wise.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_partition_null_2025-09-25_06-49_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_partition_null_2025-09-25_06-49_x7n2.md",
      "call_id": "50f42980",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.replace Catastrophically Mishandles Null Bytes",
      "target": "numpy.char.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.replace()` has catastrophic bugs when handling null bytes (`\\x00`), producing completely incorrect results that bear no resemblance to Python's `str.replace()` behavior. This causes severe data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_replace_null_2025-09-25_06-51_p8x3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_replace_null_2025-09-25_06-51_p8x3.md",
      "call_id": "3472f4ea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.replace Incorrectly Matches Patterns Longer Than String",
      "target": "numpy.char.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.replace()` incorrectly performs replacements when the search pattern is longer than the string being searched, returning truncated replacement text. Python's `str.replace()` correctly returns the original string unchanged when the pattern cannot possibly match.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_replace_length_2025-09-25_06-53_n9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_replace_length_2025-09-25_06-53_n9k2.md",
      "call_id": "d87beed5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.replace() Truncates Results",
      "target": "numpy.char.replace()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.replace()` silently truncates results when the replacement would make the string longer than the original, causing data loss and incorrect output.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_replace_truncation_2025-09-25_02-46_n5p1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_replace_truncation_2025-09-25_02-46_n5p1.md",
      "call_id": "d6488b12",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.replace() Truncates When Result Expands",
      "target": "numpy.char.replace()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.replace()` silently truncates results when operating on a `chararray` and the replacement causes the string to expand beyond the original dtype size.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_replace_truncation_2025-09-25_01-41_p9x4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_replace_truncation_2025-09-25_01-41_p9x4.md",
      "call_id": "735da58c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.rpartition Crashes on Null Byte Separator",
      "target": "numpy.char.rpartition",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.char.rpartition()` raises `ValueError: empty separator` when given `\\x00` as separator, while Python's `str.rpartition()` handles it correctly.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_rpartition_null_crash_2025-09-25_00-02_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_rpartition_null_crash_2025-09-25_00-02_k7x2.md",
      "call_id": "9fa9b132",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.split/rsplit/splitlines Return Non-Iterable 0-d Arrays",
      "target": "numpy.char.split",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `numpy.char.split()`, `rsplit()`, or `splitlines()` are called on scalar strings, they return 0-dimensional arrays that cannot be iterated, violating the documented behavior and user expectations. This makes these functions unusable in common iteration patterns.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_split_0d_2025-09-25_06-55_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_split_0d_2025-09-25_06-55_k8m3.md",
      "call_id": "d8bc84ea",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.str_len Truncates at Trailing Null Characters",
      "target": "numpy.char.str_len",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.str_len()` incorrectly treats trailing null characters (`\\x00`) as C-style string terminators, returning incorrect string lengths. This contradicts Python's string semantics where `\\x00` is a valid character.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_str_len_2025-09-25_04-27_p3k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_str_len_2025-09-25_04-27_p3k9.md",
      "call_id": "b59da6b9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.swapcase Truncates Multi-Character Case Mappings",
      "target": "numpy.char.swapcase",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.swapcase` truncates the output when Unicode case conversion produces more characters than the input, unlike Python's `str.swapcase()`. This affects characters like German \u00df and ligatures.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_swapcase_truncation_2025-09-25_00-01_m8j4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_swapcase_truncation_2025-09-25_00-01_m8j4.md",
      "call_id": "db64096e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.swapcase Truncates Unicode Characters That Expand During Case Conversion",
      "target": "numpy.char.swapcase",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.swapcase` silently truncates results when Unicode case conversion expands the character count, producing incorrect results without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_swapcase_2025-09-25_00-05_r8d2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_swapcase_2025-09-25_00-05_r8d2.md",
      "call_id": "6f835923",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.title Truncates Unicode Characters That Expand During Case Conversion",
      "target": "numpy.char.title",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.title` silently truncates results when Unicode case conversion expands the character count, producing incorrect results without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_title_2025-09-25_00-04_w5q1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_title_2025-09-25_00-04_w5q1.md",
      "call_id": "7a867f08",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.translate deletechars Parameter Non-Functional for Unicode Strings",
      "target": "numpy.char.translate",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `deletechars` parameter in `numpy.char.translate` is documented and present in the function signature, but completely non-functional for Unicode strings (str dtype). It works correctly for bytes arrays but has no effect on string arrays.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_translate_deletechars_2025-09-25_00-06_m9k4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_translate_deletechars_2025-09-25_00-06_m9k4.md",
      "call_id": "02763477",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.upper Truncates Unicode Characters That Expand When Uppercased",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper` silently truncates results when Unicode case conversion expands the character count, producing incorrect results without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_upper_2025-09-25_00-01_x9m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_upper_2025-09-25_00-01_x9m2.md",
      "call_id": "2adf01c1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.upper() and char.lower() Silently Truncate Unicode Case Conversions",
      "target": "numpy.char.upper()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper()` and `char.lower()` silently truncate the results when Unicode case conversion produces strings longer than the input array's dtype can hold, causing data loss without warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_upper_lower_truncation_2025-09-25_09-41_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_upper_lower_truncation_2025-09-25_09-41_k3m9.md",
      "call_id": "11257eec",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.upper/lower Unicode Case Transformation",
      "target": "numpy.char.upper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper` and `numpy.char.lower` incorrectly handle Unicode case transformations that change the number of characters, such as Greek characters with iota subscripts, causing data loss.",
      "package": "numpy",
      "file_name": "bug_report_numpy_char_upper_unicode_2025-09-25_10-44_7xk2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_char_upper_unicode_2025-09-25_10-44_7xk2.md",
      "call_id": "e91c2322",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.core.busday_count Antisymmetry Violation",
      "target": "numpy.core.busday_count",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.core.busday_count` violates the antisymmetry property when the begin date is a non-business day and the end date is a business day. The function uses inconsistent interval semantics for forward vs backward counting, causing `busday_count(a, b) + busday_count(b, a) \u2260 0`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_core_busday_count_2025-09-25_10-24_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_core_busday_count_2025-09-25_10-24_x7k9.md",
      "call_id": "07f51976",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_array Incorrect Shape When Converting Pointers to Multi-Dimensional Arrays",
      "target": "numpy.ctypeslib.as_array",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ctypeslib.as_array()` produces arrays with incorrect shapes when called with pointers to multi-dimensional ctypes arrays. For example, converting a pointer to a `(1, 1)` array produces a `(1, 1, 1)` array instead.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_array_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_array_2025-09-25_k3x9.md",
      "call_id": "d970ae18",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Fails on Structured Arrays",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ctypeslib.as_ctypes()` fails with `NotImplementedError` when given structured arrays, even though `as_ctypes_type()` successfully handles structured dtypes. This is an inconsistency that breaks the expected workflow for converting structured NumPy arrays to ctypes for C library interop.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_00-00_x7k2.md",
      "call_id": "09419d65",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Fortran-Ordered Arrays",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`as_ctypes()` incorrectly rejects Fortran-ordered (column-major) arrays as \"strided arrays not supported\", even though F-contiguous arrays are just as valid and contiguous as C-contiguous arrays.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_fortran_2025-09-25_07-45_f9x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_fortran_2025-09-25_07-45_f9x2.md",
      "call_id": "f3e381ba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Structured Array Support",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.ctypeslib.as_ctypes` fails to convert numpy arrays with structured dtypes to ctypes objects, even though the underlying `as_ctypes_type` function fully supports structured dtypes. The bug occurs because `as_ctypes` passes the typestr from `__array_interface__` (e.g., '|V12') instead of the actual dtype object.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_00-00_p7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_00-00_p7k2.md",
      "call_id": "c4e9b679",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Structured Array Support",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.ctypeslib.as_ctypes()` fails to convert structured numpy arrays to ctypes objects, despite `numpy.ctypeslib.as_ctypes_type()` supporting structured dtypes. This inconsistency breaks the expected API contract and prevents valid use cases.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_05-47_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_05-47_x9k2.md",
      "call_id": "5b8222e7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Structured Dtype",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`as_ctypes()` fails with NotImplementedError on structured dtypes, even though the companion function `as_ctypes_type()` successfully handles them and the docstring claims to accept \"anything that exposes the __array_interface__\".",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_07-45_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_structured_2025-09-25_07-45_k8m3.md",
      "call_id": "8847c5c0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Structured Dtype Support",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`as_ctypes` fails to convert arrays with structured dtypes, even though `as_ctypes_type` supports them, because it uses the wrong field from `__array_interface__`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_2025-09-25_00-00_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_2025-09-25_00-00_m3k8.md",
      "call_id": "be7b2b92",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.as_ctypes Undocumented Limitations",
      "target": "numpy.ctypeslib.as_ctypes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `numpy.ctypeslib.as_ctypes` function's docstring claims \"anything that exposes the __array_interface__ is accepted\", but the function actually rejects strided (non-contiguous) and readonly arrays without documenting these limitations.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_as_ctypes_undocumented_limitations_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_as_ctypes_undocumented_limitations_2025-09-25_00-00_x7k9.md",
      "call_id": "627453b5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.load_library TypeError when EXT_SUFFIX is None",
      "target": "numpy.ctypeslib.load_library",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`load_library` crashes with a TypeError when `sysconfig.get_config_var(\"EXT_SUFFIX\")` returns None, instead of gracefully handling the missing configuration.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_load_library_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_load_library_2025-09-25_00-00_k3m9.md",
      "call_id": "89a7d23c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.ndpointer Duplicate Flags",
      "target": "numpy.ctypeslib.ndpointer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ndpointer` incorrectly adds duplicate flags multiple times, causing incorrect validation that rejects valid arrays.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_ndpointer_flags_2025-09-25_00-02_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_ndpointer_flags_2025-09-25_00-02_k7m3.md",
      "call_id": "56ab35e4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.ndpointer Empty Flag Error",
      "target": "numpy.ctypeslib.ndpointer",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ndpointer` function raises an unhelpful `KeyError('')` when given empty flag strings (e.g., '', ',', 'FLAG,,FLAG'), instead of the expected `TypeError` with message \"invalid flags specification\".",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_ndpointer_flags_2025-09-25_04-52_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_ndpointer_flags_2025-09-25_04-52_k3m9.md",
      "call_id": "748d7ccf",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.ndpointer Negative Shape Dimensions",
      "target": "numpy.ctypeslib.ndpointer",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ndpointer` function accepts negative values in `shape` parameter without validation, leading to confusing error messages during array validation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_ndpointer_shape_2025-09-25_04-52_b8g3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_ndpointer_shape_2025-09-25_04-52_b8g3.md",
      "call_id": "d45fe01e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.ndpointer Negative ndim",
      "target": "numpy.ctypeslib.ndpointer",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ndpointer` function accepts negative `ndim` values without validation, leading to confusing error messages during array validation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_ndpointer_ndim_2025-09-25_04-52_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_ndpointer_ndim_2025-09-25_04-52_a7f2.md",
      "call_id": "033aaeea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ctypeslib.ndpointer ndim Type Validation",
      "target": "numpy.ctypeslib.ndpointer",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`ndpointer` accepts non-integer `ndim` values (floats, inf, nan) without validation, causing crashes or incorrect behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ctypeslib_ndpointer_ndim_2025-09-25_00-01_p8x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ctypeslib_ndpointer_ndim_2025-09-25_00-01_p8x2.md",
      "call_id": "ce943c3e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.einsum dtype inconsistency with sum/trace",
      "target": "numpy.einsum",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.einsum` performs reduction operations without dtype promotion, causing silent integer overflow, while equivalent numpy functions (`sum`, `trace`) correctly promote int32 to int64 to preserve accuracy.",
      "package": "numpy",
      "file_name": "bug_report_numpy_einsum_dtype_2025-09-25_03-23_k4x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_einsum_dtype_2025-09-25_03-23_k4x9.md",
      "call_id": "aeae444e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.capi_maps load_f2cmap_file Incorrect Lowercasing",
      "target": "numpy.f2py.capi_maps.load_f2cmap_file",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_f2cmap_file` function incorrectly lowercases the entire f2cmap file content, including C type names (values), when only Fortran type names and kind selectors (keys) should be lowercased. This breaks custom type mappings that use mixed-case C type names.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_capi_maps_lowercase_2025-09-25_14-30_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_capi_maps_lowercase_2025-09-25_14-30_k9x3.md",
      "call_id": "66c01311",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.crackfortran.markoutercomma Assertion Failure",
      "target": "numpy.f2py.crackfortran.markoutercomma",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `markoutercomma` function crashes with an AssertionError when given strings with unbalanced parentheses, providing an unclear error message for a public API function.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_markoutercomma_2025-09-25_10-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_markoutercomma_2025-09-25_10-30_k3x9.md",
      "call_id": "19da0c77",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.crackfortran.removespaces strips all whitespace",
      "target": "numpy.f2py.crackfortran.removespaces",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `removespaces` function incorrectly removes all leading/trailing whitespace characters (newlines, tabs, carriage returns), not just spaces, due to using `str.strip()` before processing.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_crackfortran_removespaces_2025-09-25_06-18_wxo0.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_crackfortran_removespaces_2025-09-25_06-18_wxo0.md",
      "call_id": "f63fff29",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Addition Associativity Violation",
      "target": "numpy.f2py.symbolic.Expr.__add__",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Addition operation violates associativity when operands have different integer kinds, leading to different results based on evaluation order.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_addition_associativity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_addition_associativity_2025-09-25_00-00_k3m9.md",
      "call_id": "a9e7480a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Crash on Unbalanced Parentheses",
      "target": "numpy.f2py.symbolic.fromstring",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Parsing strings with unbalanced opening parentheses causes infinite recursion and crashes instead of raising a proper `ValueError`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_unbalanced_paren_2025-09-25_07-15_p9k1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_unbalanced_paren_2025-09-25_07-15_p9k1.md",
      "call_id": "9f0ed782",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Division Round-Trip Failure",
      "target": "numpy.f2py.symbolic.Expr.tostring()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `tostring()` method for division expressions produces `ArithOp.DIV(x, y)` syntax for Fortran and Python languages, which cannot be parsed back correctly, breaking the fundamental round-trip property.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_division_2025-09-25_02-43_qdbu.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_division_2025-09-25_02-43_qdbu.md",
      "call_id": "7a093502",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Negative Number Addition Parsing",
      "target": "numpy.f2py.symbolic.fromstring",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The parser incorrectly handles expressions like `-1 + -1`, creating a phantom empty symbol instead of correctly evaluating to `-2`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_negative_2025-09-25_07-15_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_negative_2025-09-25_07-15_m3x7.md",
      "call_id": "221d9cbb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Nested Factors Not Normalized",
      "target": "numpy.f2py.symbolic.normalize",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalize` function fails to simplify nested `FACTORS` expressions with negative exponents, violating the mathematical property that `(x ** a) ** b = x ** (a*b)`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_nested_factors_2025-09-25_00-00_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_nested_factors_2025-09-25_00-00_a7k3.md",
      "call_id": "e29a2351",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Power Operator Malformed Output",
      "target": "numpy.f2py.symbolic.Expr.tostring()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `tostring()` method for power expressions produces syntactically invalid output `x * *N` instead of the correct `x**N` for Fortran/Python or `pow(x, N)` for C.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_power_2025-09-25_02-43_id91.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_power_2025-09-25_02-43_id91.md",
      "call_id": "3061f86c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Power Operator Round-Trip Failure",
      "target": "numpy.f2py.symbolic.fromstring",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The power operator (`**`) is correctly generated in `Expr.tostring()` output but incorrectly parsed by `fromstring()`, breaking the round-trip property for expressions with exponentiation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_power_2025-09-25_07-15_k8p3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_power_2025-09-25_07-15_k8p3.md",
      "call_id": "5d0fc780",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Round-trip Equality Failure",
      "target": "numpy.f2py.symbolic.Expr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse/tostring` round-trip violates equality for certain expressions involving division with negative denominators, causing `parse(expr.tostring()) != expr` even though the expressions are semantically equivalent.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_roundtrip_2025-09-25_00-01_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_roundtrip_2025-09-25_00-01_c3d4.md",
      "call_id": "800e33af",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic Round-trip Failure for Division and Relational Operators",
      "target": "numpy.f2py.symbolic.Expr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Expr.parse()` and `__str__()` methods violate the round-trip property for division and relational operators due to mismatched default languages between parsing (C) and serialization (Fortran).",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_roundtrip_2025-09-25_06-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_roundtrip_2025-09-25_06-47_k3m9.md",
      "call_id": "760c7619",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic String Concatenation Not Associative",
      "target": "numpy.f2py.symbolic.normalize",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `normalize` function fails to flatten nested `CONCAT` expressions, violating the mathematical property that string concatenation is associative: `(a // b) // c == a // (b // c)`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_concat_2025-09-25_00-01_b8m4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_concat_2025-09-25_00-01_b8m4.md",
      "call_id": "c5c8b3d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.Expr - Parse/Tostring Round-trip Failure for Exponentiation",
      "target": "numpy.f2py.symbolic.Expr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Expr.parse()` function incorrectly interprets the exponentiation operator `**` as multiplication followed by the dereference operator, breaking the round-trip property between `tostring()` and `parse()`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_parse_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_parse_2025-09-25_00-00_x7k9.md",
      "call_id": "84213b56",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.Expr.parse Power Operator Parsing",
      "target": "numpy.f2py.symbolic.Expr.parse",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Expr.parse()` method incorrectly parses the Fortran power operator `**`, treating it as two separate operators: multiplication `*` followed by dereference `*`. This breaks the fundamental round-trip property and causes incorrect expression parsing.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_symbolic_Expr_parse_2025-09-25_00-00_k9x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_symbolic_Expr_parse_2025-09-25_00-00_k9x7.md",
      "call_id": "9cb0052b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.eliminate_quotes Assertion Failure on Unmatched Quotes",
      "target": "numpy.f2py.symbolic.eliminate_quotes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`eliminate_quotes()` raises AssertionError on strings containing unmatched quote characters, violating the documented inverse relationship with `insert_quotes()`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_eliminate_quotes_2025-09-25_10-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_eliminate_quotes_2025-09-25_10-16_k3m9.md",
      "call_id": "32ebbf8d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.eliminate_quotes Assertion Failure on Unterminated Quotes",
      "target": "numpy.f2py.symbolic.eliminate_quotes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`eliminate_quotes()` crashes with AssertionError when given a string containing unterminated quote characters, violating its claimed round-trip property with `insert_quotes()`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_eliminate_quotes_2025-09-25_11-13_b04s.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_eliminate_quotes_2025-09-25_11-13_b04s.md",
      "call_id": "4da2b4a2",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.eliminate_quotes AssertionError on Unmatched Quotes",
      "target": "numpy.f2py.symbolic.eliminate_quotes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `eliminate_quotes` function crashes with an AssertionError when given a string containing a single unmatched quote character (`\"` or `'`), rather than raising a proper exception or handling the input gracefully.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_eliminate_quotes_2025-09-25_05-45_khjj.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_eliminate_quotes_2025-09-25_05-45_khjj.md",
      "call_id": "7916ddf1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.eliminate_quotes AssertionError on Unpaired Quotes",
      "target": "numpy.f2py.symbolic.eliminate_quotes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `eliminate_quotes` function crashes with an AssertionError when given input strings containing unpaired quote characters, which can legitimately occur in Fortran source code (e.g., in comments).",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_eliminate_quotes_2025-09-25_02-14_wkzv.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_eliminate_quotes_2025-09-25_02-14_wkzv.md",
      "call_id": "2ca6f6b4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.replace_parenthesis Infinite Recursion on Unmatched Opening Parenthesis",
      "target": "numpy.f2py.symbolic.replace_parenthesis",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `replace_parenthesis` function enters infinite recursion when given a string with an unmatched opening parenthesis, leading to a RecursionError instead of raising a proper ValueError.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_replace_parenthesis_2025-09-25_05-45_ysmt.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_replace_parenthesis_2025-09-25_05-45_ysmt.md",
      "call_id": "9403e069",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.f2py.symbolic.replace_parenthesis RecursionError and COUNTER Corruption",
      "target": "numpy.f2py.symbolic.replace_parenthesis",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`replace_parenthesis()` causes infinite recursion on unmatched opening brackets, and the resulting RecursionError corrupts the module-level COUNTER generator, breaking all subsequent calls to functions that use it.",
      "package": "numpy",
      "file_name": "bug_report_numpy_f2py_replace_parenthesis_2025-09-25_10-17_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_f2py_replace_parenthesis_2025-09-25_10-17_x7k2.md",
      "call_id": "3cacb14a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft hfft/ihfft Even Case Round-Trip Failure",
      "target": "numpy.fft.hfft",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The documented round-trip property for the even case `ihfft(hfft(a, 2*len(a) - 2)) == a` fails, with the last element of the Hermitian array losing its imaginary part.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_ihfft_roundtrip_2025-09-25_05-18_7xp7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_ihfft_roundtrip_2025-09-25_05-18_7xp7.md",
      "call_id": "299e9372",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft irfft Family Functions Crash on Single-Element Arrays",
      "target": "numpy.fft.irfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Multiple inverse real FFT functions crash with ValueError when the size parameter is not explicitly provided for single-element arrays. The functions `irfft`, `irfft2`, `irfftn`, and `hfft` all fail due to computing a default size of 0.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_irfft_family_single_element_2025-09-25_01-15_l7ms.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_irfft_family_single_element_2025-09-25_01-15_l7ms.md",
      "call_id": "19353b7d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.hfft Crashes on Length-1 Input Without n Parameter",
      "target": "numpy.fft.hfft",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.hfft()` crashes with a confusing error message when called on length-1 arrays without specifying the `n` parameter, despite working correctly when `n=1` is explicitly provided.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_2025-09-25_10-16_nt6w.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_2025-09-25_10-16_nt6w.md",
      "call_id": "ee4b7242",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.hfft Single-Element Array Crash",
      "target": "numpy.fft.hfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.hfft` crashes with ValueError when given a single-element array, while all other FFT functions in numpy.fft handle single-element arrays correctly. This is inconsistent API behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_single_element_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_single_element_2025-09-25_00-00_x9k2.md",
      "call_id": "55e9c3b3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.hfft Single-Element Array Crash",
      "target": "numpy.fft.hfft",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.hfft` crashes with a `ValueError` when given a single-element complex array due to an incorrect default `n` calculation that produces `n=0`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_2025-09-25_08-13_80mx.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_2025-09-25_08-13_80mx.md",
      "call_id": "14b55980",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.hfft ValueError on Single-Element Arrays",
      "target": "numpy.fft.hfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.hfft` crashes with a `ValueError` when given a single-element array without explicitly specifying the `n` parameter, while other FFT functions and its inverse `ihfft` handle single-element arrays correctly.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_2025-09-25_07-43_417n.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_2025-09-25_07-43_417n.md",
      "call_id": "e7134744",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.hfft/ihfft Inverse Property Violation",
      "target": "numpy.fft.hfft",
      "severity": "High",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The documentation for `numpy.fft.hfft` and `numpy.fft.ihfft` claims that `ihfft(hfft(a, 2*len(a) - 2)) == a` for even-length outputs, but this property does not hold even for simple inputs. The inverse transformation fails to recover the original array.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_hfft_ihfft_inverse_2025-09-25_10-53_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_hfft_ihfft_inverse_2025-09-25_10-53_k3m9.md",
      "call_id": "c58b7fda",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.irfft Crash on Single-Element Array",
      "target": "numpy.fft.irfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `irfft` without the `n` parameter on the output of `rfft` with a single-element array causes a ValueError with a confusing error message.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_irfft_2025-09-25_04-46_xlps.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_irfft_2025-09-25_04-46_xlps.md",
      "call_id": "812fb3e8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.irfft Single-Element Array Crash",
      "target": "numpy.fft.irfft",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.irfft` raises ValueError when called without the `n` parameter on single-element arrays, even though this is valid input from `rfft`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_irfft_2025-09-25_01-13_rfz3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_irfft_2025-09-25_01-13_rfz3.md",
      "call_id": "3b644f4c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.irfftn Crashes with Size-1 Arrays",
      "target": "numpy.fft.irfftn",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.fft.irfftn` (and `numpy.fft.irfft`) crash with a `ValueError` when attempting to invert the FFT of a size-1 array. This violates the round-trip property for valid input data.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_irfftn_size1_crash_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_irfftn_size1_crash_2025-09-25_00-00_k3m9.md",
      "call_id": "884d1de3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.rfft Documentation Contract Violation",
      "target": "numpy.fft.rfft",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `numpy.fft.rfft` function documentation claims that imaginary parts of complex input are \"silently discarded\", but the implementation actually raises a TypeError when given complex input. This is a contract violation between documented and actual behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_rfft_contract_2025-09-25_10-53_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_rfft_contract_2025-09-25_10-53_x7k9.md",
      "call_id": "c2f2a11b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.rfft/irfft Round-Trip Fails for Odd-Length Arrays",
      "target": "numpy.fft.rfft",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `irfft(rfft(a))` fails to return the original array when the input has odd length. Instead, it returns an array with one fewer element, causing data loss and breaking a fundamental invariant that users expect from inverse transform operations.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_rfft_irfft_roundtrip_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_rfft_irfft_roundtrip_2025-09-25_00-00_x7k9.md",
      "call_id": "ea730426",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.fft.rfftfreq Accepts Negative n Values",
      "target": "numpy.fft.rfftfreq",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.fft.rfftfreq` silently accepts negative `n` values and returns an empty array, while the related function `fftfreq` correctly raises ValueError for negative n.",
      "package": "numpy",
      "file_name": "bug_report_numpy_fft_rfftfreq_negative_2025-09-25_01-14_1fu4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_fft_rfftfreq_negative_2025-09-25_01-14_1fu4.md",
      "call_id": "0dcef8f7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.lcm Silent Integer Overflow",
      "target": "numpy.lcm",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.lcm` silently overflows when computing the LCM of large integers, returning negative values instead of raising an error or using a larger dtype.",
      "package": "numpy",
      "file_name": "bug_report_numpy_lcm_overflow_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_lcm_overflow_2025-09-25_00-00_k3m9.md",
      "call_id": "415ca347",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.lib.format.dtype_to_descr Loses Subdtype Information",
      "target": "numpy.lib.format.dtype_to_descr",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.lib.format.dtype_to_descr` fails to preserve shape information for subdtypes (dtypes with shapes), violating its documented contract that the result can be passed to `numpy.dtype()` to replicate the input dtype.",
      "package": "numpy",
      "file_name": "bug_report_numpy_lib_format_dtype_to_descr_subdtype_2025-09-25_11-14_5rua.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_lib_format_dtype_to_descr_subdtype_2025-09-25_11-14_5rua.md",
      "call_id": "0274f1ed",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.lib.format.dtype_to_descr Sub-Array Dtype Round-Trip Failure",
      "target": "numpy.lib.format.dtype_to_descr",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `dtype_to_descr` function loses shape information for sub-array dtypes, violating its documented contract that the result \"can be passed to `numpy.dtype()` in order to replicate the input dtype\". The round-trip `descr_to_dtype(dtype_to_descr(dtype))` fails for dtypes with shapes.",
      "package": "numpy",
      "file_name": "bug_report_numpy_lib_format_dtype_to_descr_2025-09-25_18-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_lib_format_dtype_to_descr_2025-09-25_18-30_k3m9.md",
      "call_id": "570d3765",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.lib.scimath.power NaN in Imaginary Part for Overflow Cases",
      "target": "numpy.lib.scimath.power",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `scimath.power` raises a small negative number to a negative even power that causes overflow/underflow, it returns a complex number with NaN in the imaginary part (`inf+nanj`) instead of a valid result.",
      "package": "numpy",
      "file_name": "bug_report_numpy_lib_scimath_power_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_lib_scimath_power_2025-09-25_00-00_k3m9.md",
      "call_id": "1d7a630b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.lib.scimath.power Returns NaN Imaginary Part for Small Negative Base",
      "target": "numpy.lib.scimath.power",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.lib.scimath.power()` returns a complex number with NaN imaginary part when given a very small negative base and a negative even integer power, instead of returning a proper complex number with 0 or finite imaginary part like it does for other negative bases.",
      "package": "numpy",
      "file_name": "bug_report_numpy_lib_scimath_power_2025-09-25_11-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_lib_scimath_power_2025-09-25_11-30_k3x9.md",
      "call_id": "e41e0a8f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.det - Multiplicative Property Violation",
      "target": "numpy.linalg.det",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.det()` violates the fundamental mathematical property det(AB) = det(A) * det(B) when computing determinants of rank-deficient matrix products. When both det(A) and det(B) are correctly computed as 0.0 for singular matrices, det(AB) sometimes returns a non-zero value (e.g., -0.0475 or -1.525e-06) instead of 0.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_det_multiplicative_2025-09-25_10-15_kj2b.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_det_multiplicative_2025-09-25_10-15_kj2b.md",
      "call_id": "ea0e6136",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.det Determinant Sign Inconsistency with Transpose",
      "target": "numpy.linalg.det",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "numpy.linalg.det violates the fundamental mathematical property det(A) = det(A.T) for certain singular matrices, computing the same magnitude but opposite signs.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_det_transpose_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_det_transpose_2025-09-25_00-00_x7k9.md",
      "call_id": "03358d1e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.eig Incorrect Eigenpairs for Subnormal Matrices",
      "target": "numpy.linalg.eig",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.eig` computes incorrect eigenpairs for matrices containing subnormal floating-point values, violating the fundamental eigenvalue property `A @ v = \u03bb @ v`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_eig_subnormal_2025-09-25_07-44_o39d.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_eig_subnormal_2025-09-25_07-44_o39d.md",
      "call_id": "1d726a09",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.eig Returns Incorrect Eigenvector",
      "target": "numpy.linalg.eig",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.eig` returns an eigenvector that violates the fundamental eigenvalue equation A @ v = \u03bb * v for ill-conditioned matrices with extreme value ranges, producing mathematically incorrect results without raising an error.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_eig_2025-09-25_08-44_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_eig_2025-09-25_08-44_k3m9.md",
      "call_id": "6456b94f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.eig Returns Incorrect Eigenvector",
      "target": "numpy.linalg.eig",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.eig` returns eigenvectors that violate the fundamental eigenvalue equation A @ v = \u03bb * v for certain matrices, producing mathematically incorrect results.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_eig_2025-09-25_08-44_tinj.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_eig_2025-09-25_08-44_tinj.md",
      "call_id": "75dd53df",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.eig Returns Invalid Eigenvectors",
      "target": "numpy.linalg.eig",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.eig` returns eigenvector/eigenvalue pairs that violate the fundamental eigenvalue equation `A @ v = \u03bb * v` for certain matrices with very small (but non-zero) off-diagonal elements. The error can be as large as 1.0, making the eigenvector completely invalid.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_eig_2025-09-25_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_eig_2025-09-25_k3j9.md",
      "call_id": "78ec36cb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.matrix_rank Incorrect Rank for Subnormal Matrices",
      "target": "numpy.linalg.matrix_rank",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.matrix_rank` incorrectly reports full rank for singular matrices containing subnormal floating-point values due to broken default tolerance calculation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_matrix_rank_subnormal_2025-09-25_07-44_hotv.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_matrix_rank_subnormal_2025-09-25_07-44_hotv.md",
      "call_id": "60baa295",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.matrix_rank Tolerance Calculation",
      "target": "numpy.linalg.matrix_rank",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The default tolerance calculation in `matrix_rank` is scale-dependent, causing it to violate the fundamental mathematical property that rank(A @ A) \u2264 rank(A) when matrices contain extremely small values.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_matrix_rank_2025-09-25_01-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_matrix_rank_2025-09-25_01-48_k3m9.md",
      "call_id": "9b2949ac",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.matrix_rank Violates Rank Product Inequality",
      "target": "numpy.linalg.matrix_rank",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.matrix_rank` violates the fundamental mathematical property that rank(A @ A) \u2264 rank(A) when using default tolerances on matrices with extreme (but valid) floating-point values.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_matrix_rank_2025-09-25_08-17_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_matrix_rank_2025-09-25_08-17_k9x2.md",
      "call_id": "d2e1f881",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.linalg.pinv Subnormal Value Overflow",
      "target": "numpy.linalg.pinv",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.linalg.pinv` produces NaN and inf values when given matrices containing subnormal (denormalized) floating point numbers, violating the documented property `a @ pinv(a) @ a == a`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_linalg_pinv_2025-09-25_06-48_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_linalg_pinv_2025-09-25_06-48_x7k9.md",
      "call_id": "52777e03",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma Fill Value Functions Fail With Dtype Classes",
      "target": "numpy.ma.default_fill_value",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The fill value functions raise `AttributeError` when passed numpy dtype classes (like `np.int32`, `np.float64`) instead of dtype instances, despite NumPy conventionally accepting both forms interchangeably.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_fill_value_dtype_2025-09-25_08-27_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_fill_value_dtype_2025-09-25_08-27_m3x7.md",
      "call_id": "42e374e9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma Shrink Parameter Does Not Compress Scalar False Masks",
      "target": "numpy.ma.array",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When creating a masked array with `mask=False` (Python bool) and `shrink=True`, the mask is incorrectly expanded to a boolean array instead of being compressed to `nomask`, unlike the behavior with `mask=np.False_`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_shrink_2025-09-25_07-44_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_shrink_2025-09-25_07-44_x7k9.md",
      "call_id": "d23d2ec9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma clump_masked/clump_unmasked IndexError on Empty Arrays",
      "target": "numpy.ma.clump_masked",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`clump_masked()` and `clump_unmasked()` crash with IndexError when given empty masked arrays because the underlying `_ezclump()` function attempts to access `mask[0]` without checking if the mask is empty.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_clump_empty_2025-09-25_04-51_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_clump_empty_2025-09-25_04-51_x7k9.md",
      "call_id": "f39b302f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma compress_rows/compress_cols/compress_rowcols Dimensionality Loss",
      "target": "numpy.ma.compress_rows",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The compress_rows, compress_cols, and compress_rowcols functions lose dimensionality when all rows/columns are removed, returning 1D arrays instead of maintaining 2D structure.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_dimensionality_2025-09-25_09-46_d7x3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_dimensionality_2025-09-25_09-46_d7x3.md",
      "call_id": "f68dc45d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.allclose Asymmetric Behavior with Masked Values and Infinity",
      "target": "numpy.ma.allclose",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.allclose(x, y)` violates the symmetry property when one array has an unmasked infinity value and the other has that position masked. Specifically, `allclose(x, y) != allclose(y, x)` in these cases, violating the fundamental mathematical property that comparison operations should be commutative.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_allclose_2025-09-25_04-49_h8m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_allclose_2025-09-25_04-49_h8m3.md",
      "call_id": "2a499381",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.allequal Incorrect Logic with fill_value=False",
      "target": "numpy.ma.allequal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.allequal(a, b, fill_value=False)` returns `False` without comparing unmasked values when arrays contain any masked elements, even when all unmasked values are identical.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_allequal_fillvalue_2025-09-25_14-30_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_allequal_fillvalue_2025-09-25_14-30_k9m3.md",
      "call_id": "c25f543c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_cols Dimensionality Loss",
      "target": "numpy.ma.compress_cols",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When all rows/columns are removed, `compress_cols`, `compress_rows`, and `compress_nd` return 1D arrays instead of preserving the 2D structure, violating the documented contract that these functions operate on 2D arrays.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_cols_2025-09-25_01-49_g9fq.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_cols_2025-09-25_01-49_g9fq.md",
      "call_id": "63a5788c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_nd Family Dimensionality Inconsistency",
      "target": "numpy.ma.compress_nd",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `compress_nd` function family returns inconsistent array dimensions: fully masked arrays return 1D empty arrays, while partially masked arrays that result in complete removal return properly shaped empty arrays.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_nd_2025-09-25_08-27_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_nd_2025-09-25_08-27_k8j3.md",
      "call_id": "46670478",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_rowcols Dimensionality Loss",
      "target": "numpy.ma.compress_rowcols",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.compress_rowcols` returns a 1D empty array when all rows/columns are masked, but returns a 2D array when only some are masked. This inconsistent dimensionality can break downstream code expecting consistent array shapes.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_rowcols_2025-09-25_01-15_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_rowcols_2025-09-25_01-15_k9m3.md",
      "call_id": "2853a6d3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_rows and compress_cols Shape Inconsistency",
      "target": "numpy.ma.compress_rows",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`compress_rows` and `compress_cols` return inconsistent shapes when operating on fully-masked 2-D arrays. When all values in the input array are masked, these functions return a 1-D array with shape `(0,)` instead of maintaining the 2-D structure with shapes `(0, cols)` or `(rows, 0)` respectively.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_2025-09-25_11-22_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_2025-09-25_11-22_k3m9.md",
      "call_id": "bf94aacb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_rows/compress_cols Dimensionality Loss",
      "target": "numpy.ma.compress_rows",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When all rows/columns are masked, `compress_rows` and `compress_cols` return a 1D empty array instead of a 2D array with one dimension being 0, breaking dimensionality invariants and causing inconsistency with numpy's own `compress` function.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_compress_rows_cols_2025-09-25_05-49_8nc2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_compress_rows_cols_2025-09-25_05-49_8nc2.md",
      "call_id": "b09ffaeb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.default_fill_value Type Object Crash",
      "target": "numpy.ma.default_fill_value",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`default_fill_value` crashes with AttributeError when passed numpy type objects (e.g., `np.float32`, `np.int64`) instead of dtype instances.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_default_fill_value_2025-09-25_01-47_bliv.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_default_fill_value_2025-09-25_01-47_bliv.md",
      "call_id": "a673c48f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.intersect1d Multiple Masked Values",
      "target": "numpy.ma.intersect1d",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ma.intersect1d()` violates its documented behavior by returning multiple masked elements instead of treating all masked values as equal.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_intersect1d_2025-09-25_00-01_p4q8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_intersect1d_2025-09-25_00-01_p4q8.md",
      "call_id": "c3ea29d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.make_mask Shape Inconsistency",
      "target": "numpy.ma.make_mask",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ma.make_mask()` inconsistently returns a scalar when the input is a single-element array containing only False, violating shape preservation guarantees.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_make_mask_2025-09-25_04-19_j8k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_make_mask_2025-09-25_04-19_j8k3.md",
      "call_id": "88e64eb2",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.mask_or AttributeError with array_like inputs",
      "target": "numpy.ma.mask_or",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.ma.mask_or` crashes with `AttributeError: 'NoneType' object has no attribute 'names'` when passed plain Python lists, despite its docstring claiming to accept `array_like` inputs.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_mask_or_2025-09-25_10-43_wiu6.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_mask_or_2025-09-25_10-43_wiu6.md",
      "call_id": "27ff6653",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.mask_or Crashes on List Inputs",
      "target": "numpy.ma.mask_or",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.ma.mask_or` crashes with `AttributeError` when given Python lists as inputs, despite its docstring explicitly stating it accepts \"array_like\" inputs.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_mask_or_2025-09-25_02-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_mask_or_2025-09-25_02-20_k3m9.md",
      "call_id": "99649138",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.masked_equal Mask Type Inconsistency",
      "target": "numpy.ma.masked_equal",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `mask` attribute of masked arrays returned by `ma.masked_equal` is sometimes a scalar `numpy.bool` and sometimes an `ndarray`, depending on whether any elements match the masking condition. This inconsistency breaks code that expects to index the mask.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_masked_equal_2025-09-25_10-46_qcex.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_masked_equal_2025-09-25_10-46_qcex.md",
      "call_id": "e0b60861",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.unique Multiple Masked Values",
      "target": "numpy.ma.unique",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.unique()` violates its documented contract by returning multiple masked values instead of treating all masked values as a single element.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_unique_2025-09-25_04-16_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_unique_2025-09-25_04-16_k7m2.md",
      "call_id": "ddfa8947",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.unique Multiple Masked Values",
      "target": "numpy.ma.unique",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ma.unique()` violates its documented behavior by returning multiple masked elements instead of treating all masked values as a single element.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_unique_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_unique_2025-09-25_00-00_x7k9.md",
      "call_id": "c1d6a389",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.var() and std() Auto-Mask Overflow in Unmasked Data",
      "target": "numpy.ma.var()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.var()` and `numpy.ma.std()` return masked scalars (MaskedConstant) when intermediate calculations overflow, even when all input data is unmasked. This is inconsistent with the documented behavior and with regular `numpy.var()`/`numpy.std()` which return inf.",
      "package": "numpy",
      "file_name": "bug_report_numpy_ma_var_std_overflow_2025-09-25_06-11_k3n8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_ma_var_std_overflow_2025-09-25_06-11_k3n8.md",
      "call_id": "dc034c71",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrix.__getitem__ Allows 3D Matrix Creation",
      "target": "numpy.matrixlib.defmatrix.matrix.__getitem__",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `matrix.__getitem__` method allows creation of 3-dimensional matrix objects through `np.newaxis` indexing, violating the documented constraint that matrices must be 2-dimensional.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_newaxis_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_newaxis_2025-09-25_00-00_x7k9.md",
      "call_id": "3fab4e33",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib Dead Code in matrix.__new__",
      "target": "numpy.matrixlib.defmatrix.matrix.__new__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Line 166 in `defmatrix.py` contains a logic error that makes the copy operation on line 167 unreachable dead code.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_defmatrix_2025-09-25_05-50_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_defmatrix_2025-09-25_05-50_x7k9.md",
      "call_id": "1d41834a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib Empty String Parsing Creates Degenerate Matrices",
      "target": "numpy.matrixlib.matrix",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The matrix string parser allows creation of matrices with zero-size dimensions when given empty or whitespace-only strings, violating the invariant that matrices should have positive dimensions.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_empty_string_2025-09-25_07-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_empty_string_2025-09-25_07-47_k3m9.md",
      "call_id": "3ea89262",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.bmat Crashes When gdict Provided Without ldict",
      "target": "numpy.matrixlib.bmat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.bmat` crashes with `TypeError: 'NoneType' object is not subscriptable` when `gdict` is provided without `ldict`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_08-15_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_08-15_x7k9.md",
      "call_id": "7bd4df0b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.bmat Crashes When gdict Provided Without ldict",
      "target": "numpy.matrixlib.bmat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.bmat` crashes with `TypeError: 'NoneType' object is not subscriptable` when `gdict` is provided without `ldict`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_08-15_5oqn.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_08-15_5oqn.md",
      "call_id": "b4819c4e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.bmat TypeError with gdict but no ldict",
      "target": "numpy.matrixlib.bmat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`bmat()` crashes with TypeError when `gdict` is provided but `ldict` is `None` (or not provided), despite both parameters being documented as optional.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_bmat_2025-09-25_03-43_spwp.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_bmat_2025-09-25_03-43_spwp.md",
      "call_id": "3f40e49d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.bmat gdict Parameter Crash",
      "target": "numpy.matrixlib.bmat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `bmat` function crashes with `TypeError: 'NoneType' object is not subscriptable` when `gdict` is provided without `ldict`, even though the API allows `ldict` to be optional.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_bmat_ldict_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_bmat_ldict_2025-09-25_00-00_k3m9.md",
      "call_id": "84f273f1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.bmat gdict parameter",
      "target": "numpy.matrixlib.defmatrix.bmat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When calling `np.bmat()` with a string and providing only the `gdict` parameter (without `ldict`), the function crashes with a `TypeError` instead of correctly looking up variables in the provided global dictionary.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_17-52_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_bmat_gdict_2025-09-25_17-52_k3x9.md",
      "call_id": "8160fd74",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.matrix - Inconsistent 3D Input Handling",
      "target": "numpy.matrixlib.matrix",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `matrix` constructor handles 3D input inconsistently: 3D numpy arrays may succeed (after dimension squeezing) while equivalent 3D lists always fail, violating the principle that behavior should be input-type independent.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_3d_input_2025-09-25_05-12_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_3d_input_2025-09-25_05-12_x3k9.md",
      "call_id": "df81c2e5",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.matrix Reduction Methods Ignore out Parameter Return Value",
      "target": "numpy.matrixlib.defmatrix.matrix",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `axis=None`, matrix reduction methods (`sum`, `mean`, `std`, `var`, `prod`, `max`, `min`) populate the `out` parameter but return a scalar instead of returning the `out` parameter, violating NumPy's API contract.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_collapse_2025-09-25_00-01_m8x4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_collapse_2025-09-25_00-01_m8x4.md",
      "call_id": "91ca51d0",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.matrix.I Fails to Raise LinAlgError for Singular Matrices",
      "target": "numpy.matrixlib.defmatrix.matrix.I",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `matrix.I` property is documented to raise `numpy.linalg.LinAlgError` for singular matrices, but instead returns incorrect inverse matrices that violate the identity property `m.I @ m == I`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_matrix_I_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_matrix_I_2025-09-25_00-00_x7k9.md",
      "call_id": "5459957d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.matrix.I Pseudoinverse Documentation",
      "target": "numpy.matrixlib.defmatrix.matrix.I",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `matrix.I` property claims that for both square and non-square matrices, `ret * self == self * ret == np.matrix(np.eye(self[0,:].size))` all return True. This claim is mathematically impossible for non-square matrices due to shape mismatch.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_matrix_I_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_matrix_I_2025-09-25_00-00_x9k2.md",
      "call_id": "ffa4a4c0",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.matrixlib.matrix.ptp Crashes with out Parameter",
      "target": "numpy.matrixlib.defmatrix.matrix.ptp",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `matrix.ptp()` method crashes with a ValueError when called with an `out` parameter, regardless of the axis value.",
      "package": "numpy",
      "file_name": "bug_report_numpy_matrixlib_ptp_2025-09-25_00-00_k7n3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_matrixlib_ptp_2025-09-25_00-00_k7n3.md",
      "call_id": "0081da34",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.mean Violates Min-Max Bounds",
      "target": "numpy.mean",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.mean` can return values outside the range `[min, max]` of the input array due to floating-point accumulation errors, violating a fundamental statistical property.",
      "package": "numpy",
      "file_name": "bug_report_numpy_mean_bounds_2025-09-25_04-52_ub7z.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_mean_bounds_2025-09-25_04-52_ub7z.md",
      "call_id": "5120605a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial Divmod Property Violation",
      "target": "numpy.polynomial.Polynomial.__divmod__",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `divmod` operation on polynomial instances violates the fundamental mathematical property `a == b*q + r`, introducing spurious coefficients in the reconstruction. This affects `Polynomial`, `Chebyshev`, and potentially other polynomial types.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_divmod_2025-09-25_10-49_x3p9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_divmod_2025-09-25_10-49_x3p9.md",
      "call_id": "af8f81b9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial Polynomial.__pow__ Inconsistent Trimming",
      "target": "numpy.polynomial.Polynomial.__pow__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `__pow__` operator produces polynomials with trailing zero coefficients that differ in length from equivalent polynomials produced by repeated multiplication, causing equality checks to fail even though the polynomials are mathematically equivalent.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_pow_2025-09-25_01-46_tiq2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_pow_2025-09-25_01-46_tiq2.md",
      "call_id": "f6be972f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial Power Operator Inconsistency",
      "target": "numpy.polynomial.Polynomial",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `**` operator produces different coefficient arrays than repeated `*` operations when polynomial multiplication results in numerical underflow. This violates the mathematical identity that `p**n` should equal `p*p*...*p` (n times).",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_power_operator_2025-09-25_05-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_power_operator_2025-09-25_05-15_k3x9.md",
      "call_id": "5591f7bf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial cast() Method Crashes When Used as Instance Method",
      "target": "numpy.polynomial.Polynomial.cast()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cast()` classmethod crashes with a confusing AttributeError when called as an instance method (e.g., `polynomial_instance.cast(TargetClass)`), even though Python allows classmethods to be called on instances.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_cast_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_cast_2025-09-25_00-00_x7k9.md",
      "call_id": "f674c8da",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial polydiv Numerical Overflow",
      "target": "numpy.polynomial.polynomial.polydiv",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `polydiv` function produces NaN and inf values when dividing polynomials where the divisor has a very small (but non-zero) leading coefficient, causing numerical overflow.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polydiv_2025-09-25_11-11_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polydiv_2025-09-25_11-11_x7k9.md",
      "call_id": "1fd9eff4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial truncate() Doesn't Match Documented Behavior",
      "target": "numpy.polynomial.polynomial.Polynomial.truncate",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `truncate(size)` method's docstring states it will \"Truncate series to length `size`\", but when `size` is greater than the current coefficient array length, it returns a polynomial with length less than `size`, violating the documented contract.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_truncate_2025-09-25_07-14_3fcy.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_truncate_2025-09-25_07-14_3fcy.md",
      "call_id": "8b6aab18",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.Chebyshev Divmod Property Violation",
      "target": "numpy.polynomial.Chebyshev.__divmod__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `divmod` operation on Chebyshev polynomial instances violates the fundamental property `a == b*q + r`, introducing spurious coefficients in the reconstruction due to numerical errors in the z-series conversion algorithm.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_chebyshev_divmod_2025-09-25_10-49_b4k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_chebyshev_divmod_2025-09-25_10-49_b4k2.md",
      "call_id": "97dd0bf9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.Polynomial divmod Numerical Instability",
      "target": "numpy.polynomial.polynomial.polydiv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `divmod` operation on polynomials produces incorrect results when the divisor has a very small (but non-zero) leading coefficient, causing numerical overflow and violating the fundamental property that `p1 = q*p2 + r`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_divmod_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_divmod_2025-09-25_00-00_x7k9.md",
      "call_id": "4ef53067",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.Polynomial divmod Numerical Instability",
      "target": "numpy.polynomial.Polynomial.__divmod__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `divmod` operation produces incorrect results when the divisor has a very small (near-zero) leading coefficient, violating the fundamental division property `dividend = quotient * divisor + remainder`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_divmod_2025-09-25_01-18_phl9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_divmod_2025-09-25_01-18_phl9.md",
      "call_id": "60d7d3f4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.Polynomial.roots() Returns Complex Type for Real Roots",
      "target": "numpy.polynomial.Polynomial.roots()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`Polynomial.roots()` returns `complex128` dtype when computing roots of polynomials with repeated real roots, violating its documented contract that \"If all the roots are real, then `out` is also real\".",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_roots_dtype_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_roots_dtype_2025-09-25_00-00_x7k9.md",
      "call_id": "029cbd6f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.Polynomial.roots() Returns Invalid Roots",
      "target": "numpy.polynomial.Polynomial.roots()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a Polynomial has tiny leading coefficients (e.g., from floating-point arithmetic), `roots()` returns numerically unstable values that don't satisfy the fundamental property p(root) \u2248 0.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_roots_2025-09-25_09-47_dl9l.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_roots_2025-09-25_09-47_dl9l.md",
      "call_id": "23167e7a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polyint crashes on empty input",
      "target": "numpy.polynomial.polynomial.polyint",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`polyint` crashes with `IndexError` when given an empty coefficient array, while the related function `polyder` handles empty input gracefully.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polyint_empty_2025-09-25_01-50_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polyint_empty_2025-09-25_01-50_k3m9.md",
      "call_id": "be8ff979",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polymul Associativity Violation",
      "target": "numpy.polynomial.polynomial.polymul",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`polymul` violates associativity when multiplying polynomials with denormal (subnormal) coefficients. Due to inconsistent handling of floating-point underflow and trailing zero trimming, `(c1 * c2) * c3` can produce a different result than `c1 * (c2 * c3)`, breaking a fundamental mathematical property.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polymul_associativity_2025-09-25_06-45_ohgq.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polymul_associativity_2025-09-25_06-45_ohgq.md",
      "call_id": "dd0e3162",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polynomial.polydiv - Catastrophic Cancellation Violates Division Property",
      "target": "numpy.polynomial.polynomial.polydiv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`polydiv` violates the fundamental polynomial division property `dividend = quotient * divisor + remainder` when the divisor contains very small coefficients, causing catastrophic cancellation that loses significant digits.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polydiv_2025-09-25_00-44_3i6j.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polydiv_2025-09-25_00-44_3i6j.md",
      "call_id": "50c78e5c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polynomial.polydiv Near-Zero Trailing Coefficient",
      "target": "numpy.polynomial.polynomial.polydiv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`polydiv` produces incorrect results when the divisor has a near-zero (but non-zero) trailing coefficient, violating the fundamental division property: `dividend = quotient \u00d7 divisor + remainder`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polydiv_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polydiv_2025-09-25_00-00_k3x9.md",
      "call_id": "f8e09478",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polyutils.mapparms Zero Division",
      "target": "numpy.polynomial.polyutils.mapparms",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `mapparms` and `mapdomain` functions crash with `ZeroDivisionError` when given a zero-width domain (where `old[0] == old[1]`).",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_mapparms_2025-09-25_01-18_qxhw.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_mapparms_2025-09-25_01-18_qxhw.md",
      "call_id": "7a2cf674",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.polynomial.polyval crashes on empty coefficients",
      "target": "numpy.polynomial.polynomial.polyval",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`polyval` and related functions crash with `IndexError` when given an empty coefficient array instead of raising a clear `ValueError` or handling the edge case gracefully.",
      "package": "numpy",
      "file_name": "bug_report_numpy_polynomial_polyval_empty_2025-09-25_01-51_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_polynomial_polyval_empty_2025-09-25_01-51_x7k2.md",
      "call_id": "fae7e4a3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.dirichlet NaN/Inf Values with Small Alpha",
      "target": "numpy.random.dirichlet",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.random.dirichlet` function produces NaN and infinity values when given very small alpha parameters, violating the fundamental property that Dirichlet samples must be valid probability vectors summing to 1.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_dirichlet_2025-09-25_00-00_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_dirichlet_2025-09-25_00-00_x9k3.md",
      "call_id": "aa71c7a4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.dirichlet Zero Alpha Parameters",
      "target": "numpy.random.Generator.dirichlet",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dirichlet` distribution accepts zero or negative alpha values without validation and produces mathematically invalid output. When all alpha values are zero, it returns an array that sums to 0 instead of 1, violating the fundamental simplex constraint of the Dirichlet distribution.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_dirichlet_zero_alpha_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_dirichlet_zero_alpha_2025-09-25_00-01_k3m9.md",
      "call_id": "1ea8c84d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.exponential Zero Scale Parameter",
      "target": "numpy.random.Generator.exponential",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `exponential` distribution accepts `scale=0` without validation and returns 0.0, despite the exponential distribution being mathematically undefined at scale=0. The function validates negative scales but inconsistently allows zero.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_exponential_zero_2025-09-25_00-02_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_exponential_zero_2025-09-25_00-02_a7b3.md",
      "call_id": "df32562c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.gamma Produces Zero Values",
      "target": "numpy.random.Generator.gamma",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The gamma distribution implementation produces exact zero values with very small shape parameters, violating the mathematical requirement that the gamma distribution has support (0, \u221e).",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_gamma_2025-09-25_00-00_gam1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_gamma_2025-09-25_00-00_gam1.md",
      "call_id": "62cd119f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.geometric Integer Overflow with Small Probabilities",
      "target": "numpy.random.geometric()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.random.geometric()` returns the minimum int64 value (-9223372036854775808) instead of valid positive integers when the probability parameter `p` is very small (approximately p < 1e-100). This violates the fundamental contract of the geometric distribution, which must always return values >= 1.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_geometric_2025-09-25_08-15_s024.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_geometric_2025-09-25_08-15_s024.md",
      "call_id": "382bb581",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.geometric Integer Overflow with Small Probabilities",
      "target": "numpy.random.geometric",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.random.geometric()` returns the minimum int64 value (-9223372036854775808) instead of valid positive integers when given very small probability values (approximately p < 1e-30), causing silent data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_geometric_2025-09-25_05-43_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_geometric_2025-09-25_05-43_k3x9.md",
      "call_id": "5b31205e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.multinomial Silently Produces Incorrect Distribution",
      "target": "numpy.random.multinomial",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `numpy.random.multinomial` is called with probabilities that don't sum to 1, it silently accepts them and produces an incorrect distribution instead of either raising a ValueError or properly normalizing the probabilities.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_multinomial_2025-09-25_07-18_m3k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_multinomial_2025-09-25_07-18_m3k9.md",
      "call_id": "ace11c0d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.uniform Violates Upper Bound Exclusion",
      "target": "numpy.random.uniform",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.random.uniform(low, high)` is documented to return values in the half-open interval `[low, high)` (excludes high), but violates this contract by returning exactly `high` when the range is very small (on the order of 5e-324).",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_uniform_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_uniform_2025-09-25_00-00_k3x9.md",
      "call_id": "d091d454",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.random.weibull Produces Zero and Infinite Values",
      "target": "numpy.random.Generator.weibull",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Weibull distribution implementation produces both exact zero values and infinite values with very small shape parameters, violating the mathematical requirement that the Weibull distribution has support (0, \u221e) and should produce finite positive values.",
      "package": "numpy",
      "file_name": "bug_report_numpy_random_weibull_2025-09-25_00-00_wei1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_random_weibull_2025-09-25_00-00_wei1.md",
      "call_id": "6b4f5162",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.array Empty List Crash",
      "target": "numpy.rec.array",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.array` crashes with `IndexError` when passed an empty list, instead of handling it gracefully or returning an empty record array.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_array_empty_list_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_array_empty_list_2025-09-25_00-01_x7k9.md",
      "call_id": "0fc4dfb2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.array Empty List IndexError",
      "target": "numpy.rec.array",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.array()` crashes with `IndexError` when passed an empty list or tuple, attempting to access `obj[0]` without checking if the sequence is empty.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_array_empty_list_2025-09-25_00-00_a3x7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_array_empty_list_2025-09-25_00-00_a3x7.md",
      "call_id": "903e7a9e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.array IndexError on Empty List/Tuple",
      "target": "numpy.rec.array",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.array([])` and `numpy.rec.array(())` crash with IndexError when called with an empty list or tuple, but should return an empty recarray.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_array_empty_2025-09-25_05-48_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_array_empty_2025-09-25_05-48_x7k2.md",
      "call_id": "a43027fd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.format_parser Inconsistent Whitespace Handling",
      "target": "numpy.rec.format_parser",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`format_parser` crashes with cryptic errors (TypeError or SyntaxError) when format strings have leading or trailing whitespace, despite handling whitespace around commas correctly.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_format_parser_whitespace_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_format_parser_whitespace_2025-09-25_00-01_k3m9.md",
      "call_id": "dd640a89",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.format_parser Poor Error Message for Non-String Names",
      "target": "numpy.rec.format_parser",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`format_parser` crashes with an unhelpful `AttributeError` when given non-string field names, instead of raising a clear `TypeError` or `ValueError` explaining the input requirement.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_format_parser_2025-09-25_08-14_r3ar.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_format_parser_2025-09-25_08-14_r3ar.md",
      "call_id": "86987e54",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.format_parser Strips Whitespace from Field Names",
      "target": "numpy.rec.format_parser",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_parser` class strips whitespace from field names even when names are provided as a list (not comma-separated string), leading to unexpected field names. Whitespace-only names like `'\\r'`, `' '`, `'\\t'` are converted to empty strings, causing inconsistency between user input and actual field names.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_format_parser_2025-09-25_00-50_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_format_parser_2025-09-25_00-50_x7k9.md",
      "call_id": "2f2667e3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromarrays Empty List IndexError",
      "target": "numpy.rec.fromarrays",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.fromarrays()` crashes with `IndexError` when passed an empty list, attempting to access `arrayList[0].shape` to infer the shape without checking if the list is empty.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromarrays_empty_2025-09-25_00-01_b7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromarrays_empty_2025-09-25_00-01_b7k2.md",
      "call_id": "f7c47ab4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromarrays Silent Data Corruption with Dtype Mismatch",
      "target": "numpy.rec.fromarrays",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `fromarrays` is called with an explicit `dtype` parameter that has a smaller range than the input data's natural dtype, it silently corrupts data through integer overflow/underflow instead of raising an error or preserving the original values.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromarrays_dtype_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromarrays_dtype_2025-09-25_00-00_x9k2.md",
      "call_id": "48b12022",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromrecords Empty List Handling",
      "target": "numpy.rec.fromrecords",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.fromrecords()` and `numpy.rec.fromarrays()` crash with IndexError when given empty input lists, despite regular NumPy arrays handling empty lists correctly.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromrecords_empty_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromrecords_empty_2025-09-25_00-00_x7k9.md",
      "call_id": "7dcd7806",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromrecords Empty Tuples Crash",
      "target": "numpy.rec.fromrecords",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.fromrecords` crashes with `IndexError: list index out of range` when given a list of empty tuples, even though NumPy supports structured arrays with no fields.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromrecords_empty_tuples_2025-09-25_01-15_k3p9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromrecords_empty_tuples_2025-09-25_01-15_k3p9.md",
      "call_id": "ba154125",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromrecords IndexError on Empty List",
      "target": "numpy.rec.fromrecords",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`numpy.rec.fromrecords([])` crashes with IndexError when called with an empty list, but should return an empty recarray.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromrecords_empty_2025-09-25_05-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromrecords_empty_2025-09-25_05-48_k3m9.md",
      "call_id": "122d8d72",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromrecords Null Character Truncation",
      "target": "numpy.rec.fromrecords",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.rec.fromrecords()` silently truncates null characters (`\\x00`) from string fields, causing data loss when storing strings containing null bytes.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromrecords_null_truncation_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromrecords_null_truncation_2025-09-25_00-00_x7k9.md",
      "call_id": "cc04b7af",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.fromrecords Null Character Truncation",
      "target": "numpy.rec.fromrecords",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `numpy.rec.fromrecords` processes text data containing strings with trailing null characters (`\\x00`), it silently truncates them, causing data corruption. Null characters are only preserved when followed by non-null characters.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_fromrecords_2025-09-25_04-14_i7xr.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_fromrecords_2025-09-25_04-14_i7xr.md",
      "call_id": "124363ed",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.recarray Field Name Conflicts with Methods",
      "target": "numpy.rec.recarray",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `recarray` class fails to provide attribute access to fields when the field name conflicts with existing method names (e.g., 'field', 'item', 'copy', 'view', etc.), violating its documented API contract that \"allows field access using attributes\".",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_recarray_field_name_conflicts_2025-09-25_04-45_x5j9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_recarray_field_name_conflicts_2025-09-25_04-45_x5j9.md",
      "call_id": "04e5ca1d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.recarray.field() Unhelpful Error Message",
      "target": "numpy.rec.recarray.field()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `recarray.field()` method raises an unhelpful `IndexError: tuple index out of range` when given an out-of-bounds field index, instead of a clear error indicating which index was invalid and how many fields exist.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_recarray_field_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_recarray_field_2025-09-25_00-00_x7k9.md",
      "call_id": "89c462c2",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.rec.record.pprint crashes on empty records",
      "target": "numpy.rec.record.pprint",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pprint()` method of `numpy.record` crashes with a ValueError when called on a record with no fields, instead of gracefully handling the empty case.",
      "package": "numpy",
      "file_name": "bug_report_numpy_rec_pprint_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_rec_pprint_2025-09-25_00-00_k3m9.md",
      "call_id": "b4ab21ff",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings Comparison Operators Ignore Trailing Null Characters",
      "target": "numpy.strings.not_equal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple comparison operators in numpy.strings (`not_equal`, `less`, `greater_equal`) incorrectly treat strings with trailing null characters as equal to their counterparts without those nulls, producing incorrect comparison results.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_comparisons_2025-09-25_00-10_w9k5.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_comparisons_2025-09-25_00-10_w9k5.md",
      "call_id": "f0e44eb7",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings Null Character Handling",
      "target": "numpy.strings",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple functions in `numpy.strings` incorrectly handle null characters (`\\x00`), treating them as C-style string terminators instead of valid Unicode characters. This affects `str_len`, `capitalize`, `find`, `slice`, and likely other functions.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_null_chars_2025-09-25_04-49_2196.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_null_chars_2025-09-25_04-49_2196.md",
      "call_id": "7e845c2e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings Null Character Truncation",
      "target": "numpy.strings",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NumPy strings functions incorrectly treat `\\x00` (null character) as a C-style string terminator, truncating strings when null appears at the end. This violates consistency with Python's string methods, which correctly handle null characters as regular Unicode characters.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_null_terminator_2025-09-25_05-43_vrit.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_null_terminator_2025-09-25_05-43_vrit.md",
      "call_id": "42b63e42",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings strip() Incorrectly Strips Null Bytes",
      "target": "numpy.strings.strip()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.strings.strip()` (and its variants `lstrip()` and `rstrip()`) incorrectly strip null bytes (`\\x00`) from strings, while Python's `str.strip()` does not. This violates the documented behavior that these functions should match Python's string methods.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_strip_2025-09-25_10-12_xcd6.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_strip_2025-09-25_10-12_xcd6.md",
      "call_id": "59a3e85f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings swapcase/upper Truncation with German Eszett",
      "target": "numpy.strings.swapcase",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.swapcase()` and `numpy.strings.upper()` silently truncate strings when Unicode case conversion increases string length, specifically with German eszett (\u00df -> SS).",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_swapcase_upper_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_swapcase_upper_2025-09-25_00-00_k3x9.md",
      "call_id": "4f45f595",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings upper/lower Return Empty String for Null-Only Strings",
      "target": "numpy.strings.upper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.upper()` and `numpy.strings.lower()` return empty string for strings consisting only of null characters, instead of preserving them unchanged.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_null_only_2025-09-25_00-03_p5q8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_null_only_2025-09-25_00-03_p5q8.md",
      "call_id": "50dae6ce",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.add Violates Associativity",
      "target": "numpy.strings.add",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.strings.add` function violates the associativity property when null characters are involved: `add(add(x, a), b) \u2260 add(x, a+b)` when `a` ends with null characters.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_add_2025-09-25_01-18_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_add_2025-09-25_01-18_a1b2.md",
      "call_id": "f6386a3d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.capitalize/title Null Character Removal",
      "target": "numpy.strings.capitalize",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.strings.capitalize` and `numpy.strings.title` incorrectly remove null characters when the null character is the only character in the string, differing from Python's behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_capitalize_null_2025-09-25_01-41_p7m4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_capitalize_null_2025-09-25_01-41_p7m4.md",
      "call_id": "fc32c6e1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.count Treats Null Character as Matching Everywhere",
      "target": "numpy.strings.count",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When counting occurrences of a null character (`'\\x00'`), `numpy.strings.count()` incorrectly treats it as matching between every character in the string, returning `len(s) + 1` instead of the actual count of null characters.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_count_2025-09-25_00-02_p9kx.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_count_2025-09-25_00-02_p9kx.md",
      "call_id": "673a2e5e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.endswith Always Returns True for Null Character",
      "target": "numpy.strings.endswith",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.endswith()` incorrectly returns `True` for all strings when checking if they end with a null character (`'\\x00'`), even when the null character is not present at the end of the string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_endswith_2025-09-25_00-06_x3p9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_endswith_2025-09-25_00-06_x3p9.md",
      "call_id": "8f2e40c2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.endswith Incorrect Behavior with Null Characters",
      "target": "numpy.strings.endswith",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `endswith` function incorrectly returns `True` when checking if an empty string ends with `'\\x00'`. The related `rfind` function returns `0` instead of `-1`. Both violate Python's string semantics.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_endswith_2025-09-25_01-18_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_endswith_2025-09-25_01-18_c3d4.md",
      "call_id": "f9ece3d1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.equal Ignores Trailing Null Characters",
      "target": "numpy.strings.equal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.equal()` incorrectly treats strings with trailing null characters as equal to their counterparts without those trailing nulls. For example, `'a'` and `'a\\x00'` are considered equal when they should not be.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_equal_2025-09-25_00-07_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_equal_2025-09-25_00-07_k8m2.md",
      "call_id": "c0d56521",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.find Returns 0 Instead of -1 for Null Character",
      "target": "numpy.strings.find",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When searching for a null character (`'\\x00'`) that is not present in the string, `numpy.strings.find()` incorrectly returns 0 (found at beginning) instead of -1 (not found), violating the function's documented behavior and Python's `str.find()` semantics.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_find_2025-09-25_00-03_k2m7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_find_2025-09-25_00-03_k2m7.md",
      "call_id": "a1db7c45",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.index - Inconsistent ValueError Behavior",
      "target": "numpy.strings.index",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.strings.index` and `numpy.strings.rindex` raise `ValueError` when ANY element in the input array doesn't contain the substring, making them unusable for vectorized operations with mixed results. This is inconsistent with `find`/`rfind` which return -1 for elements where the substring is not found.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_index_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_index_2025-09-25_00-00_x7k9.md",
      "call_id": "d4805cc9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.mod - Incorrect %r/%a Format Specifier Behavior",
      "target": "numpy.strings.mod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.strings.mod` function produces incorrect output when using `%r` or `%a` format specifiers. Instead of returning the standard Python repr/ascii representation (e.g., `\"'test'\"`), it includes the numpy type wrapper (e.g., `\"np.str_('test')\"`), breaking compatibility with Python's string formatting behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_mod_repr_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_mod_repr_2025-09-25_00-00_k3x9.md",
      "call_id": "dca00f2d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.mod Null Character Truncation",
      "target": "numpy.strings.mod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.strings.mod` function incorrectly truncates strings at null characters (`\\x00`) when performing string formatting, treating null as a string terminator instead of a valid Unicode character. This behavior differs from Python's built-in `%` operator.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_mod_null_truncation_2025-09-25_00-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_mod_null_truncation_2025-09-25_00-48_k3m9.md",
      "call_id": "ac130ca1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.multiply Returns Empty String for Null Characters",
      "target": "numpy.strings.multiply",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.multiply()` incorrectly returns an empty string when multiplying strings that consist only of null characters, instead of repeating them as expected.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_multiply_2025-09-25_00-09_b3w1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_multiply_2025-09-25_00-09_b3w1.md",
      "call_id": "918bc7f8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace Incorrectly Handles Null Character Search",
      "target": "numpy.strings.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When searching for a null character (`'\\x00'`) as the substring to replace, `numpy.strings.replace()` incorrectly inserts the replacement text between every character in the string, rather than only replacing actual occurrences of `'\\x00'`.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_2025-09-25_00-01_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_2025-09-25_00-01_m3k8.md",
      "call_id": "766c3c79",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace Silent Truncation",
      "target": "numpy.strings.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.replace` silently truncates replacement results when the input array's dtype is too small to hold the replaced string, causing data corruption.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_2025-09-25_00-00_x7k9.md",
      "call_id": "392ff7d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace Single-Character String Bug",
      "target": "numpy.strings.replace",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.strings.replace` function fails to replace text when the entire string is a single character being replaced with a longer string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_2025-09-25_04-50_cd2y.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_2025-09-25_04-50_cd2y.md",
      "call_id": "fe8353ae",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace String Truncation",
      "target": "numpy.strings.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.replace()` silently truncates results when the replacement string is longer than the original, due to insufficient output array dtype allocation.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_2025-09-25_05-14_r7x2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_2025-09-25_05-14_r7x2.md",
      "call_id": "bc9aed0b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace Truncates Replacement String",
      "target": "numpy.strings.replace",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `replace()` is called with scalar string arguments for `old` and `new`, the `new` string is incorrectly truncated to the input array's dtype width before buffer size calculation, causing silent data loss when the replacement string is longer than the original array's element width.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_2025-09-25_00-00_a7f2.md",
      "call_id": "e1c5e870",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.replace Truncates When Whole String Expands",
      "target": "numpy.strings.replace",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.replace()` silently truncates output when replacing the entire string with a longer replacement, returning the original string instead of the expected replacement.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_replace_truncate_2025-09-25_00-02_m9k4.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_replace_truncate_2025-09-25_00-02_m9k4.md",
      "call_id": "1da44c4a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.rfind Returns String Length Instead of -1 for Null Character",
      "target": "numpy.strings.rfind",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When searching for a null character (`'\\x00'`) that is not present in the string, `numpy.strings.rfind()` incorrectly returns the string's length instead of -1, violating the function's contract and Python's `str.rfind()` behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_rfind_2025-09-25_00-04_n8fx.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_rfind_2025-09-25_00-04_n8fx.md",
      "call_id": "c91006cf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.rpartition Truncates Separator",
      "target": "numpy.strings.rpartition",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `rpartition()` is called with a separator longer than the input string's dtype width, the separator is silently truncated to the input array's dtype width, causing incorrect partitioning behavior where the function incorrectly finds the truncated separator in the string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_rpartition_2025-09-25_00-16_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_rpartition_2025-09-25_00-16_m3p7.md",
      "call_id": "6bf0eb82",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice Explicit None Parameter Handling",
      "target": "numpy.strings.slice",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `None` is explicitly passed as the `stop` parameter to `numpy.strings.slice(a, start, None)`, the function incorrectly treats it as a single-argument call, interpreting the `start` as `stop`, instead of treating `None` as \"end of string\" per Python slice semantics.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_none_2025-09-25_08-21_v755.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_none_2025-09-25_08-21_v755.md",
      "call_id": "1b990b6e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice Negative Start with None Stop",
      "target": "numpy.strings.slice",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.slice` incorrectly handles negative `start` indices when `stop=None`. Instead of slicing from the negative index to the end `[start:]`, it incorrectly slices from the beginning to the negative index `[:start]`, returning the wrong portion of the string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_negative_start_2025-09-25_03-17_q05a.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_negative_start_2025-09-25_03-17_q05a.md",
      "call_id": "e1d98087",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice None End Parameter",
      "target": "numpy.strings.slice",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `numpy.strings.slice` function incorrectly handles the case where `stop=None` is explicitly passed with a `step` parameter, returning empty strings instead of slicing to the end of the string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_2025-09-25_04-50_ab1x.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_2025-09-25_04-50_ab1x.md",
      "call_id": "3f3a333b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice Returns Empty String with None Stop",
      "target": "numpy.strings.slice",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.strings.slice()` returns an empty string when `stop=None` is explicitly passed, instead of slicing to the end of the string like Python's slice behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_2025-09-25_05-14_p9q1.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_2025-09-25_05-14_p9q1.md",
      "call_id": "97221dae",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice with stop=None",
      "target": "numpy.strings.slice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `numpy.strings.slice` is called with `stop=None` explicitly, it incorrectly treats it as if only `start` was specified, causing the start and stop parameters to be swapped. This results in empty or truncated strings instead of slicing to the end.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_2025-09-25_07-41_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_2025-09-25_07-41_k3m9.md",
      "call_id": "cb06f7a5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice() Mishandles `None` as Stop Parameter",
      "target": "numpy.strings.slice()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `stop=None` is explicitly passed to `numpy.strings.slice()`, the function incorrectly treats `start` as `stop`, returning only the first `start` characters instead of slicing from `start` to the end of the string.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_slice_none_2025-09-25_17-52_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_slice_none_2025-09-25_17-52_k3f9.md",
      "call_id": "e484a7a3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.swapcase Unicode Character Handling",
      "target": "numpy.strings.swapcase",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.strings.swapcase` incorrectly handles special Unicode characters that have multi-character case mappings, producing different results than Python's `str.swapcase` despite documentation claiming it \"calls str.swapcase element-wise.\"",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_swapcase_unicode_2025-09-25_01-41_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_swapcase_unicode_2025-09-25_01-41_k9m2.md",
      "call_id": "7bdbf668",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.upper Unicode Character Expansion",
      "target": "numpy.strings.upper",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.strings.upper` incorrectly handles Unicode characters that expand to multiple characters when uppercased, producing incomplete results that differ from Python's `str.upper` despite documentation claiming element-wise behavior.",
      "package": "numpy",
      "file_name": "bug_report_numpy_strings_upper_unicode_2025-09-25_01-41_x3k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_strings_upper_unicode_2025-09-25_01-41_x3k2.md",
      "call_id": "6220df6f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Fires",
      "target": "numpy.typing.__getattr__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `__getattr__` function in `numpy.typing` contains code to issue a deprecation warning when accessing `NBitBase`, but this warning will never fire because `NBitBase` is already in the module's global namespace via a direct import.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_2025-09-25_00-00_x7k3.md",
      "call_id": "674cddc0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Fires",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NBitBase` class in `numpy.typing` is supposed to emit a `DeprecationWarning` when accessed, but the warning is never emitted because `NBitBase` is directly imported into the module's namespace, bypassing the `__getattr__` hook that contains the warning logic.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_deprecation_2025-09-25_09-51_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_deprecation_2025-09-25_09-51_k3m9.md",
      "call_id": "9acc5489",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Shown",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The deprecation warning for `NBitBase` is never triggered when users access it via `numpy.typing.NBitBase` because the name is imported directly into the module namespace, preventing `__getattr__` from ever being called.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_2025-09-25_00-00_x7k9.md",
      "call_id": "7d251801",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Triggered",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NBitBase` class in `numpy.typing` is intended to show a deprecation warning when accessed, but the warning is never triggered because the attribute is found via normal module lookup before `__getattr__` is called.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_2025-09-25_04-13_up12.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_2025-09-25_04-13_up12.md",
      "call_id": "5e555711",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Triggers",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `numpy.typing` module contains a `__getattr__` implementation intended to emit a deprecation warning when accessing `NBitBase`. However, because `NBitBase` is imported at module level and exists in the module's namespace, Python's attribute lookup finds it directly and never invokes `__getattr__`, causing the deprecation warning to never be shown to users.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_2025-09-25_14-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_2025-09-25_14-30_k7m9.md",
      "call_id": "1031a704",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Never Triggers",
      "target": "numpy.typing.__getattr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NBitBase` deprecation warning defined in `numpy.typing.__getattr__` never triggers because `NBitBase` is imported at module level, bypassing `__getattr__` entirely.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_nbitbase_deprecation_2025-09-25_00-00_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_nbitbase_deprecation_2025-09-25_00-00_x7m9.md",
      "call_id": "fa2f4aab",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Not Emitted",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NBitBase` attribute is documented as deprecated with an intended deprecation warning, but accessing `numpy.typing.NBitBase` does not emit any warning because the attribute is directly imported into the module namespace, bypassing the `__getattr__` hook that should emit the warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_nbitbase_2025-09-25_01-42_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_nbitbase_2025-09-25_01-42_k7x9.md",
      "call_id": "64e51268",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Not Triggered",
      "target": "numpy.typing.NBitBase",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The deprecation warning for `NBitBase` is never triggered when users access `numpy.typing.NBitBase`, despite there being code in `__getattr__` intended to emit such a warning.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_nbitbase_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_nbitbase_2025-09-25_00-00_k3m9.md",
      "call_id": "8771671a",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Not Triggered",
      "target": "numpy.typing.NBitBase",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `numpy.typing` module has a `__getattr__` method designed to emit a `DeprecationWarning` when `NBitBase` is accessed, but the warning is never triggered because `NBitBase` is directly imported into the module's global namespace.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_2025-09-25_09-43_gfrs.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_2025-09-25_09-43_gfrs.md",
      "call_id": "81d604c4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing NBitBase Deprecation Warning Not Triggered",
      "target": "numpy.typing.NBitBase",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `NBitBase` attribute is deprecated according to the `__getattr__` implementation in `numpy.typing`, but the deprecation warning is never triggered because `NBitBase` is imported at module level, making the warning code unreachable.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_NBitBase_deprecation_2025-09-25_02-12_djtx.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_NBitBase_deprecation_2025-09-25_02-12_djtx.md",
      "call_id": "3bb12686",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.typing __getattr__ NameError",
      "target": "numpy.typing.__getattr__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `numpy.typing.__getattr__` function crashes with `NameError` when attempting to return `NBitBase` because the name is not defined in the function's scope.",
      "package": "numpy",
      "file_name": "bug_report_numpy_typing_getattr_nameerror_2025-09-25_00-00_k3p2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_numpy_typing_getattr_nameerror_2025-09-25_00-00_k3p2.md",
      "call_id": "918ac55c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray argmin/argmax Crash on All Fill Values",
      "target": "pandas.core.arrays.sparse.array.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `argmin()` and `argmax()` methods crash with `ValueError` when all elements in the SparseArray equal the fill value (i.e., when `npoints == 0`), instead of returning a valid index.",
      "package": "numpy",
      "file_name": "bug_report_pandas_sparse_argmin_2025-09-25_10-18_m7p2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_sparse_argmin_2025-09-25_10-18_m7p2.md",
      "call_id": "1ad29d93",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray cumsum() Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on SparseArray causes infinite recursion when the fill value is not a null value (e.g., 0 for integers). This happens because the method recursively calls itself without a proper base case.",
      "package": "numpy",
      "file_name": "bug_report_pandas_sparse_cumsum_recursion_2025-09-25_02-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_sparse_cumsum_recursion_2025-09-25_02-46_k3m9.md",
      "call_id": "fe690ea8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` enters infinite recursion when the fill value is not null (e.g., integer arrays with fill_value=0), causing a `RecursionError` instead of computing the cumulative sum.",
      "package": "numpy",
      "file_name": "bug_report_pandas_sparse_cumsum_2025-09-25_10-18_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_sparse_cumsum_2025-09-25_10-18_k3x9.md",
      "call_id": "336a6648",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings.accessor.cat_core Null Byte Separator Silently Dropped",
      "target": "pandas.core.strings.accessor.cat_core",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cat_core` function silently drops null byte (`\\x00`) characters when used as separators, resulting in incorrect concatenation. All other characters work correctly, but null bytes are completely omitted from the output.",
      "package": "numpy",
      "file_name": "bug_report_pandas_strings_cat_core_null_byte_2025-09-25_09-47_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_strings_cat_core_null_byte_2025-09-25_09-47_x8k3.md",
      "call_id": "1549e9fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.combine_hash_arrays Bypasses Assertion on Empty Iterator",
      "target": "pandas.core.util.hashing.combine_hash_arrays",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `combine_hash_arrays` function contains an assertion to validate that the number of items processed matches the expected `num_items` parameter. However, this assertion is bypassed when the input iterator is empty, allowing inconsistent state where `num_items > 0` but zero arrays are actually processed.",
      "package": "numpy",
      "file_name": "bug_report_pandas_combine_hash_arrays_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_combine_hash_arrays_2025-09-25_00-00_k3x9.md",
      "call_id": "5b80d73a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel OverflowError Reading Large Floats",
      "target": "pandas.io.excel",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Reading Excel files containing very large float values (near `sys.float_info.max`) causes an `OverflowError` in the openpyxl reader when attempting to convert infinity values to integers.",
      "package": "numpy",
      "file_name": "bug_report_pandas_io_excel_large_float_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_io_excel_large_float_2025-09-25_00-00_k9x3.md",
      "call_id": "d29305bc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._range2cols Reversed Range Bug",
      "target": "pandas.io.excel._util._range2cols",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_range2cols` function silently returns an empty list when given a reversed Excel column range (e.g., \"C:A\" instead of \"A:C\"), instead of either handling the range correctly or raising a clear error. This leads to unexpected behavior where users might think they're selecting columns but get nothing.",
      "package": "numpy",
      "file_name": "bug_report_pandas_excel_range2cols_reversed_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_excel_range2cols_reversed_2025-09-25_00-00_x7k9.md",
      "call_id": "566f82b2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing.pprint_thing KeyError with Custom Escape Characters",
      "target": "pandas.io.formats.printing.pprint_thing",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pprint_thing` raises `KeyError` when `escape_chars` is a list containing characters other than `\\t`, `\\n`, or `\\r`, despite the docstring indicating that any list of characters is acceptable.",
      "package": "numpy",
      "file_name": "bug_report_pandas_pprint_thing_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_pprint_thing_2025-09-25_00-00_k3x9.md",
      "call_id": "1f8b9af1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Round-Trip String Index Conversion",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame has string indices or columns that look like numbers (e.g., '0', '1'), round-tripping through `to_json()` and `read_json()` with `orient='index'` or `orient='columns'` silently converts them to integers, violating the documented claim that \"Compatible JSON strings can be produced by `to_json()` with a corresponding orient value.\"",
      "package": "numpy",
      "file_name": "bug_report_pandas_io_json_roundtrip_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_io_json_roundtrip_2025-09-25_00-00_k3m9.md",
      "call_id": "ddb8ab99",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Series dtype coercion in round-trip",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When round-tripping a Series with float64 dtype through JSON serialization, integer-valued floats are coerced to int64, violating the dtype preservation property expected from round-trip operations.",
      "package": "numpy",
      "file_name": "bug_report_pandas_series_dtype_coercion_2025-09-25_02-19_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_series_dtype_coercion_2025-09-25_02-19_k3m9.md",
      "call_id": "df348fed",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inverse Property Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` violate the fundamental inverse property: when `is_subperiod(A, B)` returns True, `is_superperiod(B, A)` should also return True (and vice versa). However, multiple frequency pairs violate this property, including daily ('D'), business day ('B'), custom business day ('C'), and yearly ('Y') frequencies.",
      "package": "numpy",
      "file_name": "bug_report_pandas_tseries_frequencies_inverse_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_tseries_frequencies_inverse_2025-09-25_00-00_k3x9.md",
      "call_id": "2ff42eca",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies.get_period_alias Idempotence Violation",
      "target": "pandas.tseries.frequencies.get_period_alias",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The function `get_period_alias` violates the idempotence property: applying the function twice should yield the same result as applying it once (i.e., `f(f(x)) == f(x)`). However, when 'MS', 'QS', 'BQE', or 'BQS' are passed, the function returns 'M' or 'Q', but applying it again to 'M' or 'Q' returns None instead of 'M' or 'Q'.",
      "package": "numpy",
      "file_name": "bug_report_pandas_tseries_get_period_alias_idempotence_2025-09-25_00-01_j7k2.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_pandas_tseries_get_period_alias_idempotence_2025-09-25_00-01_j7k2.md",
      "call_id": "90fc04f5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "zsqrt fails on scalar inputs",
      "target": "pandas.core.window.common.zsqrt",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `zsqrt` function crashes with `AttributeError` when called with scalar float values instead of Series/DataFrame objects.",
      "package": "numpy",
      "file_name": "bug_report_zsqrt_scalar_2025-09-25_11-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/numpy/bug_reports/bug_report_zsqrt_scalar_2025-09-25_11-30_k3f9.md",
      "call_id": "5968eeeb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "AbstractMethodError Crashes When methodtype='classmethod' Used With Instance",
      "target": "pandas.errors.AbstractMethodError.__str__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `AbstractMethodError` is created with `methodtype='classmethod'` but passed an instance instead of a class, calling `str()` on the error raises an `AttributeError` because it tries to access `__name__` on an instance.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_classmethod_2025-09-25_07-15_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_classmethod_2025-09-25_07-15_x7k9.md",
      "call_id": "51bbe687",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "AbstractMethodError Validation Error Message Has Swapped Variables",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `AbstractMethodError` is initialized with an invalid `methodtype`, the validation error message has the variable names swapped, making it confusing and misleading.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_message_2025-09-25_07-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_message_2025-09-25_07-15_k3m9.md",
      "call_id": "69ed5b4e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray fillna fails on null-typed arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.fillna",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ArrowExtensionArray.fillna() crashes with \"Invalid null value\" when called on an array with PyArrow null type (inferred from all-None data).",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_fillna_null_type_2025-09-25_16-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_fillna_null_type_2025-09-25_16-30_k7x2.md",
      "call_id": "df6e65af",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray fillna raises ArrowInvalid on null-type arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.fillna",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When calling `fillna()` on an `ArrowExtensionArray` containing only `None` values (which results in a PyArrow null type), the method raises an uncaught `pyarrow.lib.ArrowInvalid` exception instead of either handling the conversion gracefully or providing a clear error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_fillna_2025-09-25_00-00_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_fillna_2025-09-25_00-00_k8f3.md",
      "call_id": "a6cdde31",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.all() and .any() Fail on Null-Type Arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.all",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Calling `all()` or `any()` on an ArrowExtensionArray with dtype null (containing only None values) raises a `TypeError` instead of returning the documented behavior. According to the docstrings, when `skipna=True` and the entire array is NA, `all()` should return True and `any()` should return False (as for an empty array).",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrowextensionarray_all_any_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrowextensionarray_all_any_2025-09-25_00-01_x7k9.md",
      "call_id": "877ba6c6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.fillna Fails on Null Type Arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.fillna",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ArrowExtensionArray.fillna()` crashes with `ArrowInvalid` when called on arrays with PyArrow `null` type, which occurs when creating arrays from all-null data without an explicit type.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_fillna_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_fillna_2025-09-25_00-00_k3m9.md",
      "call_id": "39084d8b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.insert() Fails on Null-Type Arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.insert",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Inserting a non-None value into an ArrowExtensionArray with dtype null (i.e., containing only None values) raises `ArrowNotImplementedError` instead of successfully inserting the value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrowextensionarray_insert_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrowextensionarray_insert_2025-09-25_00-00_k3m9.md",
      "call_id": "c6eff576",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.take() Crashes on Empty Index List",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.take",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ArrowExtensionArray.take()` raises an unexpected `ArrowNotImplementedError` when called with an empty list of indices, instead of returning an empty array.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_array_take_2025-09-25_07-17_lths.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_array_take_2025-09-25_07-17_lths.md",
      "call_id": "cac9740b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.take() Crashes with Empty Indices",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.take()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ArrowExtensionArray.take([])` crashes with `ArrowNotImplementedError` when passed an empty list of indices, while other pandas array types handle this correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_take_empty_2025-09-25_10-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_take_empty_2025-09-25_10-30_k3m9.md",
      "call_id": "8bfbef11",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ArrowExtensionArray.take() Empty List TypeError",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.take()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `ArrowExtensionArray.take([])` with an empty Python list crashes with `ArrowNotImplementedError` because numpy converts the empty list to a float64 array instead of an integer array, which PyArrow's `array_take` function doesn't accept.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_take_empty_2025-09-25_13-37_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_take_empty_2025-09-25_13-37_k3m9.md",
      "call_id": "186b5c1f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "BooleanArray any()/all() Violate Kleene Logic",
      "target": "pandas.arrays.BooleanArray.any()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "BooleanArray's docstring states it \"implements Kleene logic (sometimes called three-value logic)\" but the `any()` and `all()` methods violate Kleene logic when all values are NA or when mixing known values with NA.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_BooleanArray_kleene_any_all_2025-09-25_10-46_k7x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_BooleanArray_kleene_any_all_2025-09-25_10-46_k7x3.md",
      "call_id": "859fb198",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build parse_list Comment Handling",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When parsing distutils directive values that contain inline comments, `parse_list` incorrectly includes the comment text as a label placeholder (`#__Pyx_L1_`) instead of stripping it. This causes invalid entries in configuration lists like `libraries`, `include_dirs`, etc.",
      "package": "pandas",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_05-13_kfj1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_build_parse_list_2025-09-25_05-13_kfj1.md",
      "call_id": "170a5d85",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Cache.load_from_cache Incorrect Zip Extraction",
      "target": "Cython.Build.Cache.load_from_cache",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_from_cache` method incorrectly uses `zipfile.ZipFile.extract()` by passing a file path as the extraction directory instead of a directory path. This causes extraction to fail with \"Not a directory\" errors when trying to load cached compilation artifacts from zip files.",
      "package": "pandas",
      "file_name": "bug_report_Cython_Build_Cache_load_from_cache_2025-09-25_00-50_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Build_Cache_load_from_cache_2025-09-25_00-50_x7k9.md",
      "call_id": "d78b2ec3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.DistutilsInfo.merge List Aliasing",
      "target": "Cython.Build.Dependencies.DistutilsInfo.merge",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DistutilsInfo.merge` method fails to create copies of `transitive_list` values when the key doesn't exist in `self`. This causes list aliasing where modifications to the merged object's lists also modify the source object's lists, violating the documented intent to \"change a *copy* of the list\" (as noted in comment on line 224).",
      "package": "pandas",
      "file_name": "bug_report_Cython_Build_DistutilsInfo_merge_2025-09-25_00-55_j3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Build_DistutilsInfo_merge_2025-09-25_00-55_j3k8.md",
      "call_id": "ea843ca0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Comment Filtering",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_list` function fails to filter out comments from parsed lists, instead returning substitution labels like `#__Pyx_L1_` that were created by `strip_string_literals`. This violates the expected behavior for parsing Cython directive values where comments should be ignored.",
      "package": "pandas",
      "file_name": "bug_report_Cython_Build_parse_list_2025-09-25_00-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Build_parse_list_2025-09-25_00-45_k3m9.md",
      "call_id": "122db54a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list KeyError on Quoted Strings",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list()` function crashes with `KeyError` when parsing quoted strings due to a mismatch between the label format created by `strip_string_literals()` (with trailing underscore) and the label format expected by the internal `unquote()` function (without trailing underscore).",
      "package": "pandas",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_07-14_e70a.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_build_parse_list_2025-09-25_07-14_e70a.md",
      "call_id": "7620421b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Dependencies.parse_list Unclosed Quote Handling",
      "target": "Cython.Build.Dependencies.parse_list",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_list` function crashes with a KeyError when given a string containing an unclosed quote character (`\"` or `'`), which can occur when parsing malformed distutils/cython directives from source file comments.",
      "package": "pandas",
      "file_name": "bug_report_cython_build_parse_list_2025-09-25_00-00_xk3p.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_build_parse_list_2025-09-25_00-00_xk3p.md",
      "call_id": "7d293ef1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Build.Inline strip_common_indent Comment Mangling",
      "target": "Cython.Build.Inline.strip_common_indent",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `strip_common_indent` function mangles comment lines when they are indented differently than the last non-comment line, causing the '#' character to be stripped and the comment to become regular code.",
      "package": "pandas",
      "file_name": "bug_report_cython_inline_strip_common_indent_2025-09-25_01-04_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_inline_strip_common_indent_2025-09-25_01-04_x3k9.md",
      "call_id": "0589952a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Exceeds max_len",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cap_length` function fails to cap string length to `max_len` when `max_len < 17`, instead producing strings significantly longer than the specified limit.",
      "package": "pandas",
      "file_name": "bug_report_cython_pyrextypes_cap_length_2025-09-25_07-15_9kib.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_pyrextypes_cap_length_2025-09-25_07-15_9kib.md",
      "call_id": "f9e35165",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.PyrexTypes.cap_length Unicode Crash",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cap_length` function crashes with `UnicodeEncodeError` when given a string containing non-ASCII characters that exceeds `max_len`.",
      "package": "pandas",
      "file_name": "bug_report_cython_cap_length_2025-09-25_10-44_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_cap_length_2025-09-25_10-44_k3x9.md",
      "call_id": "5b3c2048",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Compiler.Scanning.StringSourceDescriptor Hash-Equality Contract Violation",
      "target": "Cython.Compiler.Scanning.StringSourceDescriptor",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`StringSourceDescriptor` violates Python's hash-equality contract: equal objects have different hashes, breaking set/dict operations.",
      "package": "pandas",
      "file_name": "bug_report_cython_scanning_stringsourcedescriptor_hash_equality_2025-09-25_01-02_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_scanning_stringsourcedescriptor_hash_equality_2025-09-25_01-02_x7k9.md",
      "call_id": "6daa497b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Debugger.libpython.TruncatedStringIO Maxlen Zero Handling",
      "target": "Cython.Debugger.libpython.TruncatedStringIO",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TruncatedStringIO.write()` method incorrectly treats `maxlen=0` as unlimited writes due to using a truthiness check instead of an explicit None check, violating the class's truncation contract.",
      "package": "pandas",
      "file_name": "bug_report_cython_debugger_truncatedstringio_maxlen_zero_2025-09-25_02-34_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_debugger_truncatedstringio_maxlen_zero_2025-09-25_02-34_k7x2.md",
      "call_id": "4f3e7d27",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex InvalidToken Raised with Wrong Signature",
      "target": "Cython.Plex.Lexicons.parse_token_definition",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_token_definition` method raises `InvalidToken` exceptions with only one argument (message), but `InvalidToken.__init__` requires two arguments (token_number, message), causing TypeError instead of proper error handling.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_invalidtoken_signature_2025-09-25_08-11_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_invalidtoken_signature_2025-09-25_08-11_k3m9.md",
      "call_id": "d5a09ad7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Range() Unhelpful Error for Odd-Length Strings",
      "target": "Cython.Plex.Range",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Range()` function raises an unhelpful `IndexError: string index out of range` when given an odd-length string, instead of a clear error message explaining the input requirement.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_range_odd_length_2025-09-25_06-46_m7p3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_range_odd_length_2025-09-25_06-46_m7p3.md",
      "call_id": "5505ddc1",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Scanner Infinite Loop with Nullable Patterns",
      "target": "Cython.Plex.Scanner",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Scanner.read() enters an infinite loop when the Lexicon contains nullable patterns (patterns that can match empty strings) like `Rep()` or `Opt()`. The scanner repeatedly returns empty tokens instead of advancing or raising an error.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-48_grgq.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-48_grgq.md",
      "call_id": "e8cb02f3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex Scanner Infinite Loop with Nullable Patterns",
      "target": "Cython.Plex.Scanner",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Scanner.read() enters an infinite loop when the Lexicon contains nullable patterns (patterns that can match empty strings) like `Rep()` or `Opt()`. The scanner repeatedly returns empty tokens instead of advancing or raising an error.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-45_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_scanner_infinite_loop_2025-09-25_06-45_x3k9.md",
      "call_id": "30bb22f3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Actions.Call.__repr__ Crashes on Callable Objects",
      "target": "Cython.Plex.Actions.Call.__repr__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Call.__repr__` method assumes all callables have a `__name__` attribute, causing crashes when used with callable objects, functools.partial, or other callables lacking this attribute.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_actions_call_repr_2025-09-25_08-11_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_actions_call_repr_2025-09-25_08-11_x3k9.md",
      "call_id": "c58003d9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Lexicons.parse_token_definition Incorrect InvalidToken Usage",
      "target": "Cython.Plex.Lexicons.parse_token_definition",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_token_definition` method raises `InvalidToken` exceptions with incorrect arguments, causing `TypeError` instead of the intended validation error when users provide malformed token specifications.",
      "package": "pandas",
      "file_name": "bug_report_Cython_Plex_InvalidToken_2025-09-25_03-16_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Plex_InvalidToken_2025-09-25_03-16_m3p7.md",
      "call_id": "e62eab59",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.Range IndexError on Odd-Length String",
      "target": "Cython.Plex.Regexps.Range",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Range` function crashes with `IndexError` when given an odd-length string in single-argument form, instead of validating the input and raising a proper error.",
      "package": "pandas",
      "file_name": "bug_report_Cython_Plex_Range_odd_length_2025-09-25_03-17_j4k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Plex_Range_odd_length_2025-09-25_03-17_j4k8.md",
      "call_id": "758ba850",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Regexps.chars_to_ranges Incorrect Range Merging",
      "target": "Cython.Plex.Regexps.chars_to_ranges",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `chars_to_ranges` function incorrectly merges character ranges when the input contains duplicate characters, causing it to cover characters not present in the input string.",
      "package": "pandas",
      "file_name": "bug_report_Cython_Plex_chars_to_ranges_2025-09-25_03-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_Cython_Plex_chars_to_ranges_2025-09-25_03-15_k3x9.md",
      "call_id": "a3ecfcbc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Plex.Scanner Missing Documented Methods",
      "target": "Cython.Plex.Scanners.Scanner",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Scanner` class docstring documents two methods (`begin()` and `produce()`) that do not exist in the actual implementation, violating the API contract.",
      "package": "pandas",
      "file_name": "bug_report_cython_plex_scanner_missing_methods_2025-09-25_09-46_i56q.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_plex_scanner_missing_methods_2025-09-25_09-46_i56q.md",
      "call_id": "e554aabe",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Shadow.index_type Step Validation Failure",
      "target": "Cython.Shadow.index_type",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `index_type` function fails to properly validate that step is provided only once in multi-dimensional array type specifications, allowing invalid specifications like `double[:, :]` (step in both dimensions) to pass validation.",
      "package": "pandas",
      "file_name": "bug_report_cython_shadow_index_type_step_validation_2025-09-25_06-15_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_shadow_index_type_step_validation_2025-09-25_06-15_k3x9.md",
      "call_id": "3be78607",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.build_hex_version Version Collision and Overflow",
      "target": "Cython.Utils.build_hex_version",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`build_hex_version` incorrectly adds release status bytes and serial numbers, causing version collisions and byte overflow that violate monotonicity and PY_VERSION_HEX compatibility.",
      "package": "pandas",
      "file_name": "bug_report_cython_utils_build_hex_version_2025-09-25_01-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_utils_build_hex_version_2025-09-25_01-02_k3m9.md",
      "call_id": "ac827d91",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Cython.Utils.strip_py2_long_suffix Empty String Crash",
      "target": "Cython.Utils.strip_py2_long_suffix",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`strip_py2_long_suffix` crashes with IndexError when given an empty string input.",
      "package": "pandas",
      "file_name": "bug_report_cython_utils_strip_py2_long_suffix_2025-09-25_01-02_a3f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_utils_strip_py2_long_suffix_2025-09-25_01-02_a3f2.md",
      "call_id": "93ed6a77",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "DeepChainMap.__delitem__ Violates Deletion Invariant",
      "target": "pandas.core.computation.scope.DeepChainMap.__delitem__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DeepChainMap.__delitem__` method only deletes a key from the first map where it's found, but if the same key exists in multiple maps, the key remains accessible from subsequent maps. This violates the fundamental deletion invariant: after `del container[key]`, `key` should not be accessible via `key in container`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_deepchainmap_delitem_2025-09-25_02-13_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_deepchainmap_delitem_2025-09-25_02-13_x7k9.md",
      "call_id": "81f0014c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ExcelWriter.check_extension Accepts Invalid Extensions",
      "target": "pandas.io.excel.ExcelWriter.check_extension",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `check_extension` method uses substring matching instead of exact matching to validate file extensions. This causes it to incorrectly accept invalid extensions like `.l`, `.x`, `.s`, `.m`, etc., because they are substrings of valid extensions like `.xlsx`, `.xlsm`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excelwriter_check_extension_2025-09-25_03-20_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excelwriter_check_extension_2025-09-25_03-20_x7k9.md",
      "call_id": "a785fdf9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ExtensionDtype.construct_from_string AssertionError with property-based name",
      "target": "pandas.api.extensions.ExtensionDtype.construct_from_string",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "ExtensionDtype.construct_from_string() fails with an AssertionError when a subclass implements `name` as a property instead of a class attribute, despite the base class defining `name` as an abstract property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_extensions_construct_from_string_2025-09-25_00-00_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_extensions_construct_from_string_2025-09-25_00-00_x9k3.md",
      "call_id": "0c63df4e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Accepts Invalid Negative Window Sizes",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` accepts negative `window_size` values and produces invalid window bounds where `start[i] > end[i]`, violating the fundamental invariant that window boundaries must satisfy `start <= end`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_07-43_4cns.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_07-43_4cns.md",
      "call_id": "3c99f6e6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Accepts Negative window_size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer accepts negative window_size values and produces invalid window bounds where start[i] > end[i], leading to incorrect rolling window calculations that silently return all NaN values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_window_2025-09-25_06-15_8sdg.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_window_2025-09-25_06-15_8sdg.md",
      "call_id": "dac349e5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Integer Overflow",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer crashes with OverflowError when given extremely large negative window_size values during window bounds calculation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_overflow_2025-09-25_06-46_wqfd.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_overflow_2025-09-25_06-46_wqfd.md",
      "call_id": "0f96bc59",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Invalid Bounds with Negative window_size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` produces invalid window bounds (start > end) when initialized with a negative `window_size`, violating the fundamental invariant that window boundaries must satisfy `start[i] <= end[i]`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_k3x9.md",
      "call_id": "900af25c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Invalid Bounds with Negative window_size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer produces invalid window bounds when instantiated with a negative `window_size`, violating the fundamental invariant that `start[i] <= end[i]` for all windows.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_k3m9.md",
      "call_id": "545b9a57",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Invalid Window Bounds with Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer produces invalid window bounds (start > end) when initialized with a negative window_size, violating the fundamental invariant that window start indices must be less than or equal to end indices.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_07-13_hmpx.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_07-13_hmpx.md",
      "call_id": "67e34aae",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer` accepts negative `window_size` values but produces invalid window bounds where `start[i] > end[i]`, violating a fundamental invariant and causing empty windows in rolling operations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_2025-09-25_10-41_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_2025-09-25_10-41_k7x9.md",
      "call_id": "af6ef882",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` produces invalid window bounds when `window_size` is negative, resulting in `start[i] > end[i]` for some indices, which violates the fundamental invariant that window start positions must not exceed window end positions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_08-16_aanp.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_08-16_aanp.md",
      "call_id": "abc941eb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` accepts negative `window_size` values and produces invalid window bounds where `end < start`, violating the fundamental invariant that window boundaries should always satisfy `start <= end`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_FixedForwardWindowIndexer_negative_window_size_2025-09-25_invalid_bounds.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_FixedForwardWindowIndexer_negative_window_size_2025-09-25_invalid_bounds.md",
      "call_id": "9469cb55",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Negative Window Size Invariant Violation",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer with negative window_size produces invalid window bounds where start[i] > end[i], violating the fundamental invariant that window start indices must be less than or equal to end indices.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_window_2025-09-25_06-45_p42l.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_negative_window_2025-09-25_06-45_p42l.md",
      "call_id": "f9afe519",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Negative Window Size Invariant Violation",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer accepts negative window_size values and produces invalid window bounds where end < start, violating the fundamental window bounds invariant.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_08-45_spbt.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_08-45_spbt.md",
      "call_id": "31097e70",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Step Zero Causes Unclear Error",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer.get_window_bounds",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "FixedForwardWindowIndexer.get_window_bounds raises an unclear ZeroDivisionError when step=0 instead of a descriptive ValueError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_step_zero_2025-09-25_08-47_9anf.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_step_zero_2025-09-25_08-47_9anf.md",
      "call_id": "6936fc49",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedForwardWindowIndexer Step Zero Crash",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` crashes with `ZeroDivisionError` when `step=0` is passed, instead of raising an informative `ValueError` explaining that step must be positive.",
      "package": "pandas",
      "file_name": "bug_report_pandas_FixedForwardWindowIndexer_step_zero_2025-09-25_crash.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_FixedForwardWindowIndexer_step_zero_2025-09-25_crash.md",
      "call_id": "10206042",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FixedWindowIndexer Violates start <= end Invariant",
      "target": "pandas.core.indexers.objects.FixedWindowIndexer.get_window_bounds",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedWindowIndexer.get_window_bounds` produces window bounds where `start[i] > end[i]`, violating the fundamental invariant that window start must be less than or equal to window end. This occurs when `window_size=0` and `closed='neither'`.",
      "package": "pandas",
      "file_name": "bug_report_fixedwindowindexer_invariant_2025-09-25_00-00_m9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_fixedwindowindexer_invariant_2025-09-25_00-00_m9x2.md",
      "call_id": "38b97c60",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FrozenList.union Incorrect Docstring",
      "target": "pandas.core.indexes.frozen.FrozenList.union",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `FrozenList.union` method's docstring incorrectly states it returns \"The collection difference between self and other\" when it actually returns the concatenation/union.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexes_frozen_union_docstring_2025-09-25_02-48_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexes_frozen_union_docstring_2025-09-25_02-48_x7k9.md",
      "call_id": "68993fc9",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "IntegerArray Power Operation with Base=1 and Negative Exponent",
      "target": "pandas.arrays.IntegerArray.__pow__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "IntegerArray raises ValueError when computing `1 ** (negative integer)`, even though this operation is mathematically well-defined and always equals 1. The code has special-case handling for this scenario but applies it after the computation, which fails first.",
      "package": "pandas",
      "file_name": "bug_report_pandas_IntegerArray_pow_2025-09-25_12-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_IntegerArray_pow_2025-09-25_12-30_k3x9.md",
      "call_id": "bdb86dd4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "IntegerArray fillna/setitem Overflow Validation",
      "target": "pandas.arrays.IntegerArray.fillna",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "IntegerArray's `fillna()` and `__setitem__()` methods crash with an obscure OverflowError when given integer values outside the int64 range, instead of raising a clear validation error like other methods do.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_IntegerArray_overflow_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_IntegerArray_overflow_2025-09-25_00-00_k3m9.md",
      "call_id": "47574b51",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ListAccessor.__getitem__ Crashes on Empty Lists",
      "target": "pandas.core.arrays.arrow.accessors.ListAccessor.__getitem__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When accessing elements from a Series containing PyArrow list arrays, the `ListAccessor.__getitem__` method crashes with an `ArrowInvalid` error when the Series contains any empty lists, even though the documentation doesn't warn about this limitation and other list accessor methods handle empty lists correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_list_accessor_empty_lists_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_list_accessor_empty_lists_2025-09-25_k3m9.md",
      "call_id": "93bafbf0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Null Byte Removal in String Operations",
      "target": "numpy.strings",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple `numpy.strings` functions incorrectly remove standalone null bytes (`\\x00`), treating them as empty strings instead of preserving them like Python's string methods do.",
      "package": "pandas",
      "file_name": "bug_report_numpy_strings_null_bytes_2025-09-25_08-19_e8nq.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_strings_null_bytes_2025-09-25_08-19_e8nq.md",
      "call_id": "a8e90acf",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "PyrexTypes.cap_length Violates Length Contract",
      "target": "Cython.Compiler.PyrexTypes.cap_length",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cap_length` function violates its contract by returning strings longer than `max_len` when the input string exceeds `max_len`. The function adds a fixed-size prefix and suffix that can exceed the specified maximum length.",
      "package": "pandas",
      "file_name": "bug_report_cython_cap_length_2025-09-25_01-47_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_cython_cap_length_2025-09-25_01-47_x3k9.md",
      "call_id": "87ba6639",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex._concat Ignores Name Parameter",
      "target": "pandas.core.indexes.range.RangeIndex._concat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `RangeIndex._concat` method fails to apply the `name` parameter when concatenating a single index, violating the API contract and creating inconsistent behavior with the base `Index` class.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rangeindex_concat_2025-09-25_13-37_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rangeindex_concat_2025-09-25_13-37_k9m2.md",
      "call_id": "7d07d9e5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex._shallow_copy Returns Index for Single-Element Ranges",
      "target": "pandas.core.indexes.range.RangeIndex._shallow_copy",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeIndex._shallow_copy` returns a regular `Index` instead of the memory-efficient `RangeIndex` for single-element equally-spaced arrays, violating its documented optimization goal.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexes_rangeindex_shallow_copy_2025-09-25_02-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexes_rangeindex_shallow_copy_2025-09-25_02-48_k3m9.md",
      "call_id": "1ef14eea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex._shallow_copy Returns Index for Single-Element Ranges",
      "target": "pandas.core.indexes.range.RangeIndex._shallow_copy",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeIndex._shallow_copy` returns a regular `Index` instead of the memory-efficient `RangeIndex` for single-element equally-spaced arrays, violating its documented optimization goal.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexes_rangeindex_shallow_copy.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexes_rangeindex_shallow_copy.md",
      "call_id": "5a172778",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray Boolean Comparison Missing Implementation",
      "target": "pandas.core.arrays.sparse.array._sparse_array_op",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Comparing two boolean `SparseArray` objects using comparison operators (`==`, `!=`, `<`, `>`, etc.) crashes with `AttributeError` because the required Cython functions (e.g., `sparse_eq_bool`, `sparse_ne_bool`) are not implemented in `pandas._libs.sparse`.",
      "package": "pandas",
      "file_name": "bug_report_sparse_array_bool_comparison_2025-09-25_00-00_b9k4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_array_bool_comparison_2025-09-25_00-00_b9k4.md",
      "call_id": "123907b1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray argmin/argmax Crash on All-Fill-Value Arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`SparseArray.argmin()` and `SparseArray.argmax()` crash with `ValueError: attempt to get argmin of an empty sequence` when all array values equal the fill value, instead of returning the index of the first occurrence like numpy does.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_argmin_argmax_crash_2025-09-25_06-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_argmin_argmax_crash_2025-09-25_06-45_x7k9.md",
      "call_id": "1d2153e1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "SparseArray.cumsum() causes infinite recursion for arrays with non-null fill values (e.g., fill_value=0), leading to RecursionError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_cumsum_infinite_recursion_2025-09-25_03-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_cumsum_infinite_recursion_2025-09-25_03-17_k3m9.md",
      "call_id": "a8ca6891",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray cumsum() Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` with a non-NA fill value causes infinite recursion, leading to a `RecursionError` crash.",
      "package": "pandas",
      "file_name": "bug_report_sparse_cumsum_infinite_recursion_2025-09-25_09-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_cumsum_infinite_recursion_2025-09-25_09-46_k3m9.md",
      "call_id": "14d9619b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray max/min Incorrect Behavior with skipna=False",
      "target": "pandas.core.arrays.sparse.SparseArray._min_max",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `SparseArray.max()` or `SparseArray.min()` is called with `skipna=False` on an array containing NaN values and a non-null fill_value, the methods incorrectly ignore the NaN values and return a numeric result instead of NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_max_min_skipna_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_max_min_skipna_2025-09-25_12-00_k3m9.md",
      "call_id": "63203ba5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray operations create invalid sparse representation",
      "target": "pandas.core.arrays.sparse.array._sparse_array_op",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When performing binary operations between SparseArrays where one array has no gaps (`ngaps == 0`), the result can have an invalid sparse representation with fill values appearing in `sp_values`, violating the core invariant of sparse arrays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_operation_2025-09-25_00-02_k7n4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_operation_2025-09-25_00-02_k7n4.md",
      "call_id": "9f92be11",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype Silently Corrupts Data When Changing Dtype",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When converting a SparseArray to a different dtype using `astype(SparseDtype(...))`, the method fails to preserve the fill_value, causing data corruption. Values that were stored as the fill_value are replaced with the new dtype's default fill_value instead of being properly converted.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_astype_fill_value_2025-09-25_16-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_astype_fill_value_2025-09-25_16-30_x7k9.md",
      "call_id": "60ff9814",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype() Contract Violation",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`SparseArray.astype()` violates its documented contract by returning a numpy array instead of a SparseArray when given a non-sparse dtype. The docstring explicitly states \"The output will always be a SparseArray\", but passing numpy dtypes like `np.float64` or string dtypes like `'float64'` returns a regular numpy.ndarray.",
      "package": "pandas",
      "file_name": "bug_report_sparse_astype_contract_2025-09-25_04-11_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_astype_contract_2025-09-25_04-11_k3m9.md",
      "call_id": "766a835f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype() Contract Violation",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`SparseArray.astype()` violates its documented contract by returning a `numpy.ndarray` instead of a `SparseArray` when given a NumPy dtype (e.g., `np.int64`). The docstring explicitly states \"The output will always be a SparseArray.\"",
      "package": "pandas",
      "file_name": "bug_report_sparse_astype_contract_2025-09-25_04-43_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_astype_contract_2025-09-25_04-43_k3m9.md",
      "call_id": "4cc94d6c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype() Returns Dense Array Instead of SparseArray",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`SparseArray.astype()` violates its documented contract by returning a dense numpy array instead of a SparseArray when given a numpy dtype (e.g., `np.float64`). The documentation explicitly states \"The output will always be a SparseArray\" but this is not the case.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_astype_2025-09-25_05-20_4ptg.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_astype_2025-09-25_05-20_4ptg.md",
      "call_id": "18e44f93",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype() Returns ndarray Instead of SparseArray",
      "target": "pandas.arrays.SparseArray.astype()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "SparseArray.astype() docstring explicitly states \"The output will always be a SparseArray\", but when called with a NumPy dtype (e.g., 'int64'), it returns a numpy.ndarray instead.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_SparseArray_astype_2025-09-25_10-46_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_SparseArray_astype_2025-09-25_10-46_x9k2.md",
      "call_id": "2a1e8756",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype() Returns ndarray Instead of SparseArray",
      "target": "pandas.core.arrays.sparse.array.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Calling `astype()` with a non-SparseDtype returns a numpy ndarray instead of a SparseArray, violating the documented contract that states \"The output will always be a SparseArray.\"",
      "package": "pandas",
      "file_name": "bug_report_sparse_astype_2025-09-25_00-01_a3f8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_astype_2025-09-25_00-01_a3f8.md",
      "call_id": "f96cd359",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.SparseArray.cumsum",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` enters infinite recursion when called on arrays with non-null fill values (e.g., integer arrays with fill_value=0, or any boolean array), causing `RecursionError` and crashing the application.",
      "package": "pandas",
      "file_name": "bug_report_sparse_array_cumsum_recursion_2025-09-25_00-00_r7x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_array_cumsum_recursion_2025-09-25_00-00_r7x3.md",
      "call_id": "d2e6667e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.cumsum() Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` causes infinite recursion when called on arrays with non-null fill values (e.g., `fill_value=0`), leading to `RecursionError`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_cumsum_2025-09-25_06-21_qwgp.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_cumsum_2025-09-25_06-21_qwgp.md",
      "call_id": "3e1c2076",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.cumsum() Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `cumsum()` on a SparseArray with a non-null fill value causes infinite recursion, eventually leading to a RecursionError.",
      "package": "pandas",
      "file_name": "bug_report_sparse_cumsum_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_cumsum_2025-09-25_00-00_x9k2.md",
      "call_id": "8aa0ab63",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.density ZeroDivisionError on Empty Array",
      "target": "pandas.core.arrays.SparseArray.density",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Accessing the `density` property on an empty SparseArray causes a `ZeroDivisionError` instead of returning a sensible value (0.0 or NaN).",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_density_2025-09-25_01-12_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_density_2025-09-25_01-12_x7m9.md",
      "call_id": "9bf093d1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.density ZeroDivisionError on Empty Array",
      "target": "pandas.core.arrays.sparse.SparseArray.density",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `density` property of `SparseArray` crashes with a `ZeroDivisionError` when called on an empty array, rather than returning a sensible value like 0.0 or raising a more informative error.",
      "package": "pandas",
      "file_name": "bug_report_sparse_array_density_empty_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_array_density_empty_2025-09-25_00-00_k3m9.md",
      "call_id": "0135558c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.map() Density Preservation",
      "target": "pandas.core.arrays.sparse.SparseArray.map",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `SparseArray.map()` method's docstring claims \"The output array will have the same density as the input\", but the implementation raises a `ValueError` when a mapping would naturally change the density by transforming a sparse value into the fill value.",
      "package": "pandas",
      "file_name": "bug_report_sparse_map_density_2025-09-25_02-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_map_density_2025-09-25_02-12_k3m9.md",
      "call_id": "3c9bbb82",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseDtype Equality Not Symmetric",
      "target": "pandas.core.dtypes.dtypes.SparseDtype.__eq__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "SparseDtype's equality operator is not symmetric: `dtype1 == dtype2` can return a different result than `dtype2 == dtype1`, violating a fundamental property of equality.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsedtype_equality_asymmetric_2025-09-25_00-05_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsedtype_equality_asymmetric_2025-09-25_00-05_x7k9.md",
      "call_id": "41eb858c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Address Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TrustedHostMiddleware` incorrectly parses IPv6 addresses in the Host header, causing valid IPv6 requests to be rejected. The bug occurs because the code uses `.split(\":\")[0]` to extract the hostname, which breaks IPv6 addresses that contain multiple colons.",
      "package": "pandas",
      "file_name": "bug_report_trustedhost_ipv6_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_trustedhost_ipv6_2025-09-25_k3x9.md",
      "call_id": "ad932029",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Unknown",
      "target": "Unknown",
      "severity": "N/A",
      "bug_type": "Unknown",
      "date": "Unknown",
      "summary": "",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_07-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_07-20_k3m9.md",
      "call_id": "1331c057",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Unknown",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The interchange protocol's categorical column handler incorrectly maps null sentinel values (-1) to actual category values through a modulo operation, causing silent data corruption where null values become non-null categorical values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_sentinel_2025-09-25_03-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_sentinel_2025-09-25_03-17_k3m9.md",
      "call_id": "c6a7798d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "WSL Clipboard Paste Data Corruption",
      "target": "pandas.io.clipboard.init_wsl_clipboard().paste_wsl",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The WSL clipboard `paste_wsl()` function unconditionally removes the last 2 bytes from PowerShell output, assuming it always ends with `\\r\\n`. This causes silent data corruption when the output doesn't end with `\\r\\n`, and can cause `UnicodeDecodeError` crashes when the slicing splits multi-byte UTF-8 characters.",
      "package": "pandas",
      "file_name": "bug_report_wsl_paste_data_corruption_2025-09-25_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_wsl_paste_data_corruption_2025-09-25_k3n9.md",
      "call_id": "a3e2383c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "create_valid_python_identifier Control Character Crash",
      "target": "pandas.core.computation.parsing.create_valid_python_identifier",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `create_valid_python_identifier` function crashes with a SyntaxError when given column names containing control characters, non-ASCII characters, or other characters not in its hardcoded replacement dictionary. This affects DataFrame.query() operations on columns with such names.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_computation_parsing_create_valid_python_identifier_2025-09-25_08-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_computation_parsing_create_valid_python_identifier_2025-09-25_08-14_k3m9.md",
      "call_id": "af180d41",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_python_int Silent Precision Loss",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ensure_python_int` silently accepts float values that have lost precision during conversion, returning an incorrect integer value instead of raising a TypeError as intended by the assertion at line 117.",
      "package": "pandas",
      "file_name": "bug_report_ensure_python_int_precision_loss_2025-09-25_01-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_ensure_python_int_precision_loss_2025-09-25_01-30_x7k9.md",
      "call_id": "1b1106d2",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_python_int Type Signature Mismatch and Precision Issues",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "High",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function has a type signature that says it accepts `int | np.integer`, but its implementation also accepts floats. This creates two bugs: (1) type signature mismatch with runtime behavior, and (2) the function fails for floats with decimal parts or large integers that lose precision when converted to float.",
      "package": "pandas",
      "file_name": "bug_report_ensure_python_int_2025-09-25_04-48_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_ensure_python_int_2025-09-25_04-48_k9x3.md",
      "call_id": "9b8b0e98",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ensure_python_int raises OverflowError instead of TypeError",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function raises `OverflowError` when given infinity values instead of the documented `TypeError`. This violates the function's API contract which states it only raises `TypeError`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_ensure_python_int_OverflowError_2025-09-25_05-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_ensure_python_int_OverflowError_2025-09-25_05-20_k3m9.md",
      "call_id": "f350676c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "fastapi.security get_authorization_scheme_param Multiple Spaces",
      "target": "fastapi.security.utils.get_authorization_scheme_param",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_authorization_scheme_param` function incorrectly handles Authorization headers with multiple spaces between the scheme and credentials, causing leading whitespace to be included in the returned parameter value. This breaks authentication for OAuth2 and HTTP Bearer when extra spaces are present.",
      "package": "pandas",
      "file_name": "bug_report_fastapi_security_get_authorization_scheme_param_2025-09-25_02-55_yyh1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_fastapi_security_get_authorization_scheme_param_2025-09-25_02-55_yyh1.md",
      "call_id": "9496c9d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "format_percentiles Violates Uniqueness and Boundary Guarantees",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates two properties explicitly stated in its docstring when given extremely small percentile values: (1) it fails to preserve uniqueness of distinct inputs, and (2) it rounds non-zero values to 0%.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_format_percentiles_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_format_percentiles_2025-09-25_00-00_k3x9.md",
      "call_id": "cffdd12d",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "get_level_lengths IndexError on Variable-Length Levels",
      "target": "pandas.io.formats.excel.get_level_lengths",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`get_level_lengths` crashes with an `IndexError` when processing levels of different lengths, despite the function signature and documentation not requiring uniform lengths.",
      "package": "pandas",
      "file_name": "bug_report_get_level_lengths_2025-09-25_00-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_get_level_lengths_2025-09-25_00-00_a7b3.md",
      "call_id": "4b5b23f1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "import_optional_dependency raises with errors='ignore'",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`import_optional_dependency` raises `ImportError` even when `errors='ignore'` if a module lacks a `__version__` attribute and `min_version` is specified.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_15-30_k8j2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_15-30_k8j2.md",
      "call_id": "baac98f0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "is_dtype_equal raises ValueError instead of returning False",
      "target": "pandas.core.dtypes.common.is_dtype_equal",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_dtype_equal` function raises `ValueError` when comparing certain invalid dtype strings instead of returning `False` as intended. This violates the function's documented behavior and the pattern established by similar dtype checking functions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_is_dtype_equal_ValueError_2025-09-25_05-20_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_is_dtype_equal_ValueError_2025-09-25_05-20_x7k9.md",
      "call_id": "d1bd09d6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "is_integer() and is_integer_dtype() Inconsistency",
      "target": "pandas.api.types.is_integer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`is_integer(x)` returns `True` for Python integers that don't fit in int64, but `is_integer_dtype(np.array([x]))` returns `False` for the same value. This creates an inconsistency between the scalar type checker and the dtype checker.",
      "package": "pandas",
      "file_name": "bug_report_is_integer_dtype_consistency_2025-09-25_04-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_is_integer_dtype_consistency_2025-09-25_04-00_k3f9.md",
      "call_id": "b00c4f13",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "is_re_compilable Crashes on Invalid Regex Patterns",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable` function is supposed to check if an object can be compiled into a regex pattern and return a boolean. However, it crashes with `re.PatternError` when given invalid regex patterns instead of returning `False`.",
      "package": "pandas",
      "file_name": "bug_report_is_re_compilable_2025-09-25_07-15_m0v3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_is_re_compilable_2025-09-25_07-15_m0v3.md",
      "call_id": "2240d498",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "length_of_indexer Negative Step Calculation",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns incorrect (negative) length when given a slice with a negative step and `None` stop value on certain target lengths.",
      "package": "pandas",
      "file_name": "bug_report_length_of_indexer_negative_step_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_length_of_indexer_negative_step_2025-09-25_00-00_k3f9.md",
      "call_id": "ce272419",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.replace() Truncates Results",
      "target": "numpy.char.replace()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.replace()` silently truncates results when the replacement would make the string longer than the original, causing silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_numpy_char_replace_truncation_2025-09-25_00-00_b9f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_char_replace_truncation_2025-09-25_00-00_b9f2.md",
      "call_id": "59afc711",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.str_len Truncates at Trailing Null Characters",
      "target": "numpy.char.str_len",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.str_len()` incorrectly treats null characters (`\\x00`) at the end of strings as C-style string terminators, returning incorrect string lengths. This contradicts Python's string semantics where `\\x00` is a valid character.",
      "package": "pandas",
      "file_name": "bug_report_numpy_char_str_len_2025-09-25_04-21_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_char_str_len_2025-09-25_04-21_k3m9.md",
      "call_id": "5c1c9c2f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.title Does Not Match Python str.title for Ligatures",
      "target": "numpy.char.title",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`numpy.char.title()` claims to call `str.title` element-wise (per its documentation), but produces different results than Python's `str.title()` for ligatures and certain special characters like \u00df.",
      "package": "pandas",
      "file_name": "bug_report_numpy_char_title_2025-09-25_04-25_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_char_title_2025-09-25_04-25_x7k9.md",
      "call_id": "cad66f1f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.char.upper() Truncates Unicode Case Expansions",
      "target": "numpy.char.upper()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.char.upper()` and `numpy.char.swapcase()` truncate Unicode characters that expand in length during case conversion (e.g., German sharp s '\u00df' \u2192 'SS'), silently corrupting data.",
      "package": "pandas",
      "file_name": "bug_report_numpy_char_upper_unicode_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_char_upper_unicode_2025-09-25_00-00_k3m9.md",
      "call_id": "192a004c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.allequal fill_value=False Logic Error",
      "target": "numpy.ma.allequal",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`numpy.ma.allequal(a, b, fill_value=False)` returns `False` without checking unmasked values when arrays have any masked elements, even when all unmasked values are identical.",
      "package": "pandas",
      "file_name": "bug_report_numpy_ma_allequal_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_ma_allequal_2025-09-25_00-00_x7k9.md",
      "call_id": "255ca6f8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_nd Family Dimensionality Inconsistency",
      "target": "numpy.ma.compress_nd",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `compress_nd` function family returns inconsistent array dimensions: fully masked arrays return 1D empty arrays, while partially masked arrays that result in complete removal return properly shaped empty arrays. This affects `compress_nd`, `compress_rowcols`, `compress_rows`, and `compress_cols`.",
      "package": "pandas",
      "file_name": "bug_report_numpy_ma_compress_rowcols_2025-09-25_08-11_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_ma_compress_rowcols_2025-09-25_08-11_k8j3.md",
      "call_id": "5bc8ac5a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.ma.compress_rows and compress_cols Shape Inconsistency",
      "target": "numpy.ma.compress_rows",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`compress_rows` and `compress_cols` return inconsistent shapes when operating on fully-masked 2-D arrays. When all values in the input array are masked, these functions return a 1-D array with shape `(0,)` instead of maintaining the 2-D structure with shapes `(0, cols)` or `(rows, 0)` respectively.",
      "package": "pandas",
      "file_name": "bug_report_numpy_ma_compress_rows_cols_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_ma_compress_rows_cols_2025-09-25_14-30_x7k9.md",
      "call_id": "2cc4dcc6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "numpy.strings.slice Explicit None Parameter Handling",
      "target": "numpy.strings.slice",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `None` is explicitly passed as the `stop` parameter to `numpy.strings.slice(a, start, None)`, the function incorrectly treats it as a single-argument call, interpreting the `start` as `stop`, instead of treating `None` as \"end of string\" per Python slice semantics.",
      "package": "pandas",
      "file_name": "bug_report_numpy_strings_slice_none_2025-09-25_08-20_6ey7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_numpy_strings_slice_none_2025-09-25_08-20_6ey7.md",
      "call_id": "a0e42d2f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas CSV Round-Trip Data Corruption with Tab Character in Column Name",
      "target": "pandas.DataFrame.to_csv",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame column name contains only a tab character (`'\\t'`), CSV round-trip silently corrupts data: the data value becomes the column name, and all actual data is lost.",
      "package": "pandas",
      "file_name": "bug_report_pandas_csv_tab_column_2025-09-25_10-18_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_csv_tab_column_2025-09-25_10-18_k3m9.md",
      "call_id": "5b78d02b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas CSV Round-Trip Loses Null Character Column Names",
      "target": "pandas.DataFrame.to_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame column name is the null character (`'\\x00'`), CSV round-trip fails to preserve the column name, replacing it with 'Unnamed: 0'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_csv_null_column_2025-09-25_10-18_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_csv_null_column_2025-09-25_10-18_x7n2.md",
      "call_id": "7e9b3c55",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame to_dict/from_dict Column Loss",
      "target": "pandas.DataFrame.to_dict",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Empty DataFrames lose all column information when round-tripped through `to_dict(orient='index')` and `from_dict(..., orient='index')`, resulting in a DataFrame with no columns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_to_dict_index_columns_2025-09-25_08-13_c31p.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_to_dict_index_columns_2025-09-25_08-13_c31p.md",
      "call_id": "c03a986e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame to_dict/from_dict Dtype Loss",
      "target": "pandas.DataFrame.to_dict",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Empty DataFrames lose dtype information when round-tripped through `to_dict(orient='tight')` and `from_dict(..., orient='tight')`, converting all columns to object dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_to_dict_tight_dtype_2025-09-25_08-13_wwy7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_to_dict_tight_dtype_2025-09-25_08-13_wwy7.md",
      "call_id": "ba4634a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame transpose dtype loss on empty DataFrames",
      "target": "pandas.DataFrame.T",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Empty DataFrames with integer columns lose their dtype when transposed twice (df.T.T), converting int64 columns to float64.",
      "package": "pandas",
      "file_name": "bug_report_pandas_transpose_dtype_loss_2025-09-25_06-13_n5m7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_transpose_dtype_loss_2025-09-25_06-13_n5m7.md",
      "call_id": "5f6e2189",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame.T.T Loses Integer Dtype",
      "target": "pandas.DataFrame.T",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Double transposing a DataFrame with integer columns converts int64 dtypes to float64, violating the mathematical property that transpose is an involution.",
      "package": "pandas",
      "file_name": "bug_report_pandas_transpose_dtype_2025-09-25_09-48_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_transpose_dtype_2025-09-25_09-48_x7k2.md",
      "call_id": "050c3c89",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame.nlargest() Index Ordering Inconsistency",
      "target": "pandas.core.methods.selectn.SelectNFrame.compute",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`DataFrame.nlargest(n, columns)` produces different index ordering than the semantically equivalent `DataFrame.sort_values(columns, ascending=False).head(n)` when there are tied values. This violates user expectations that these two operations should be equivalent.",
      "package": "pandas",
      "file_name": "bug_report_pandas_nlargest_sort_inconsistency_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_nlargest_sort_inconsistency_2025-09-25_14-30_k3x9.md",
      "call_id": "637771ca",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame.to_dict dtype loss on empty DataFrames",
      "target": "pandas.DataFrame.to_dict",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Empty DataFrames with integer columns lose their dtype when round-tripped through `to_dict(orient='list')` and `from_dict()`, converting int64 columns to float64.",
      "package": "pandas",
      "file_name": "bug_report_pandas_to_dict_dtype_loss_2025-09-25_06-12_x4p9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_to_dict_dtype_loss_2025-09-25_06-12_x4p9.md",
      "call_id": "7d66b8c2",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas DataFrame.to_dict index type loss on empty DataFrames",
      "target": "pandas.DataFrame.to_dict",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Empty DataFrames with RangeIndex lose their index type when round-tripped through `to_dict(orient='dict')` and `from_dict()`, converting from RangeIndex to Index with dtype='object' and inferred_type='empty'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_to_dict_index_loss_2025-09-25_06-12_w8k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_to_dict_index_loss_2025-09-25_06-12_w8k2.md",
      "call_id": "60317114",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Index.union Inconsistent Duplicate Handling",
      "target": "pandas.core.indexes.base.Index.union",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Index.union()` method inconsistently preserves duplicates, while other set operations (`intersection`, `difference`, `symmetric_difference`) correctly remove duplicates. This violates mathematical set theory principles and creates unexpected behavior for users.",
      "package": "pandas",
      "file_name": "bug_report_pandas_index_union_2025-09-25_14-30_k3x7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_index_union_2025-09-25_14-30_k3x7.md",
      "call_id": "03cdde60",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Index.unique() Null Byte Deduplication",
      "target": "pandas.Index.unique()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an Index contains both empty string `''` and null byte `'\\x00'`, AND contains duplicate values of any kind, `.unique()` incorrectly deduplicates `'\\x00'` as if it were `''`, causing silent data loss.",
      "package": "pandas",
      "file_name": "bug_report_pandas_Index_unique_null_byte_2025-09-25_05-56_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_Index_unique_null_byte_2025-09-25_05-56_k3m9.md",
      "call_id": "290f9194",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas JSON Empty DataFrame Index Dtype",
      "target": "pandas.api.typing.JsonReader",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an empty DataFrame is serialized to JSON with `orient='split'` or `orient='columns'` and then deserialized, the index dtype changes from `int64` to `float64` and the index type changes from `RangeIndex` to `Index`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_empty_index_dtype_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_empty_index_dtype_2025-09-25_00-00_x7k9.md",
      "call_id": "5000af66",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas JSON Integer Overflow Crash",
      "target": "pandas.api.typing.JsonReader",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a Series or DataFrame containing integers outside the int64 range (< -2^63 or >= 2^63) is serialized to JSON and then deserialized, ujson raises a `ValueError: Value is too small` or `Value is too large` error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_int_overflow_2025-09-25_00-00_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_int_overflow_2025-09-25_00-00_m3p7.md",
      "call_id": "548bb32b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas JSON Round-Trip Fails for Integers Below int64.min",
      "target": "pandas.DataFrame.to_json()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "DataFrames containing integers smaller than int64.min can be serialized with `to_json()` but cannot be deserialized with `read_json()`, violating the fundamental round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_int_overflow_2025-09-25_10-18_x4k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_int_overflow_2025-09-25_10-18_x4k9.md",
      "call_id": "46af3bcb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas ListAccessor Empty Slice Crash",
      "target": "pandas.core.arrays.arrow.accessors.ListAccessor.__getitem__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ListAccessor.__getitem__` method crashes with `ArrowInvalid` when slicing with equal start and stop values (e.g., `[n:n]`), which should return an empty list according to Python slice semantics.",
      "package": "pandas",
      "file_name": "bug_report_pandas_list_accessor_empty_slice_2025-09-25_09-14_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_list_accessor_empty_slice_2025-09-25_09-14_x7k9.md",
      "call_id": "6a337165",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Rolling Mean Precision Loss with Subnormal Numbers",
      "target": "pandas.core.window.rolling.Rolling.mean",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`Series.rolling().mean()` produces severely incorrect results when processing very small floating-point numbers near the subnormal range, with errors approaching 100%.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_precision_2025-09-25_00-01_b8k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_precision_2025-09-25_00-01_b8k3.md",
      "call_id": "8ca8826f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Rolling Variance Returns Negative Values",
      "target": "pandas.core.window.rolling.Rolling.var",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The rolling variance calculation in pandas can return negative values, violating the mathematical property that variance must always be non-negative. This occurs when processing data containing very large values followed by much smaller values, likely due to numerical precision issues in the variance algorithm.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_negative_variance_2025-09-25_04-49_m8x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_negative_variance_2025-09-25_04-49_m8x2.md",
      "call_id": "dc41cfb1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Series.abs() integer overflow on min int64",
      "target": "pandas.Series.abs",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`Series.abs()` returns a negative value for the minimum int64 value (-9223372036854775808), violating the mathematical property that absolute value is always non-negative.",
      "package": "pandas",
      "file_name": "bug_report_pandas_abs_int64_overflow_2025-09-25_06-14_q7r3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_abs_int64_overflow_2025-09-25_06-14_q7r3.md",
      "call_id": "8e882ef0",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas Series.str.slice_replace Data Loss",
      "target": "pandas.core.strings.object_array.ObjectStringArrayMixin._str_slice_replace",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Series.str.slice_replace()` method silently loses data when `start > stop`, causing characters between `stop` and `start` to be deleted from the result.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_slice_replace_2025-09-25_08-57_8fui.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_slice_replace_2025-09-25_08-57_8fui.md",
      "call_id": "3a7a0c1e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas SparseArray density property returns NaN for empty arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.density",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `density` property of `SparseArray` returns `NaN` (or potentially raises `ZeroDivisionError`) when called on an empty array due to division by zero (`0 / 0`). This violates mathematical expectations and can cause issues in downstream code that expects a valid float or proper error handling.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_density_empty_array_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_density_empty_array_2025-09-25_00-00_k3m9.md",
      "call_id": "99f9b01a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas get_dummies/from_dummies Empty DataFrame Round-Trip",
      "target": "pandas.get_dummies",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `from_dummies(get_dummies(df)) == df` fails for empty DataFrames, losing column information.",
      "package": "pandas",
      "file_name": "bug_report_pandas_get_dummies_from_dummies_2025-09-25_04-43_vmay.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_get_dummies_from_dummies_2025-09-25_04-43_vmay.md",
      "call_id": "1c404171",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas qcut Crashes on Edge Case With Duplicate Values",
      "target": "pandas.qcut",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.qcut` crashes with a ValueError when given a Series with mostly identical values and one very small different value, even when using `duplicates='drop'`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_qcut_2025-09-25_09-48_a3b7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_qcut_2025-09-25_09-48_a3b7.md",
      "call_id": "0ab27ef4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas to_json/read_json Converts Max Float64 to Infinity",
      "target": "pandas.DataFrame.to_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Round-trip serialization through JSON (to_json \u2192 read_json) silently corrupts the maximum float64 value by converting it to infinity. This causes data loss for valid finite floating-point values near the upper limit of float64.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_infinity_2025-09-25_14-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_infinity_2025-09-25_14-45_x7k9.md",
      "call_id": "e479a203",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.Categorical Null Character Handling",
      "target": "pandas.Categorical",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.Categorical` treats strings that differ only by trailing null characters (`\\x00`) as identical, causing silent data corruption. When creating a Categorical from `['', '\\x00']` or `['a', 'a\\x00']`, both values are assigned to the same category, and the null character is lost during reconstruction.",
      "package": "pandas",
      "file_name": "bug_report_pandas_categorical_null_2025-09-25_02-55_p3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_categorical_null_2025-09-25_02-55_p3k8.md",
      "call_id": "82403723",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.Categorical.remove_categories Unexpectedly Sorts Categories",
      "target": "pandas.core.arrays.Categorical.remove_categories",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `remove_categories` method on unordered Categorical objects unexpectedly sorts the remaining categories alphabetically, which is undocumented and inconsistent with other category manipulation methods and with ordered Categoricals.",
      "package": "pandas",
      "file_name": "bug_report_pandas_Categorical_remove_categories_sorting_2025-09-25_11-22_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_Categorical_remove_categories_sorting_2025-09-25_11-22_k3m9.md",
      "call_id": "55966571",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.DataFrame.T Loses Dtype Information on Mixed-Type DataFrames",
      "target": "pandas.core.internals",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When transposing a DataFrame with mixed dtypes (e.g., int64 and float64), the transpose operation loses dtype information. Specifically, `df.T.T` does not preserve the original dtypes, violating the mathematical property that transpose is self-inverse.",
      "package": "pandas",
      "file_name": "bug_report_pandas_transpose_dtype_loss_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_transpose_dtype_loss_2025-09-25_15-30_k3m9.md",
      "call_id": "3adc8cc7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.Index.insert Large Integer ValueError",
      "target": "pandas.core.indexes.base.Index.insert",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Inserting a very large integer (beyond int64 range) into an int64 Index causes a cryptic `ValueError: Invalid integer data type 'O'` instead of either succeeding by upcasting to object dtype or failing with a clear TypeError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_Index_insert_large_int_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_Index_insert_large_int_2025-09-25_00-00_x7k9.md",
      "call_id": "61039545",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `cumsum()` on a SparseArray with a non-null fill value (e.g., fill_value=0) causes infinite recursion and crashes with RecursionError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_cumsum_recursion_2025-09-25_11-20_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_cumsum_recursion_2025-09-25_11-20_x8k2.md",
      "call_id": "a9753a40",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions register_*_accessor Invalid Identifier Acceptance",
      "target": "pandas.api.extensions.register_series_accessor",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `register_*_accessor` functions accept invalid Python identifiers as accessor names, including empty strings, names starting with digits, and names containing special characters. This violates the expectation that accessor names should be valid Python identifiers usable with normal attribute syntax.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_extensions_register_accessor_2025-09-25_10-15_1gp4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_extensions_register_accessor_2025-09-25_10-15_1gp4.md",
      "call_id": "b85db461",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.ExtensionDtype Hash-Equality Contract Violation",
      "target": "pandas.api.extensions.ExtensionDtype",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "ExtensionDtype violates Python's hash-equality contract: when `dtype == string` is True (via string comparison), `hash(dtype) == hash(string)` is False. This breaks fundamental Python semantics and can cause subtle bugs when using dtypes in dictionaries or sets.",
      "package": "pandas",
      "file_name": "bug_report_pandas_extensiondtype_hash_equality_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_extensiondtype_hash_equality_2025-09-25_00-00_k3x9.md",
      "call_id": "d2fb4813",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.take Inconsistent Behavior with Series/Index and allow_fill",
      "target": "pandas.api.extensions.take",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `take` function has inconsistent and buggy behavior when passed Series or Index with `allow_fill=True`, despite documentation explicitly stating these are supported input types. For Series it crashes with TypeError, and for Index it silently ignores allow_fill or raises confusing errors.",
      "package": "pandas",
      "file_name": "bug_report_pandas_take_series_2025-09-25_00-15_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_take_series_2025-09-25_00-15_m3k8.md",
      "call_id": "185a0806",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.take OverflowError Instead of ValueError",
      "target": "pandas.api.extensions.take",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `take` function raises `OverflowError` instead of the documented `ValueError` when `allow_fill=True` and indices contain extremely large negative values beyond the C long range.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_extensions_take_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_extensions_take_2025-09-25_00-00_x7k9.md",
      "call_id": "444ed14e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.take raises OverflowError instead of IndexError for very large indices",
      "target": "pandas.api.extensions.take",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `pandas.api.extensions.take()` is called with an index value larger than `sys.maxsize` (2^63-1 on 64-bit systems), it raises `OverflowError` instead of the documented `IndexError`. This is inconsistent with the function's contract and behavior for smaller out-of-bounds indices.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_extensions_take_overflow_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_extensions_take_overflow_2025-09-25_12-00_k3m9.md",
      "call_id": "c1a4ca32",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.take with Index and fill_value=None",
      "target": "pandas.api.extensions.take",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `pandas.api.extensions.take()` is called with a `pd.Index` and `allow_fill=True, fill_value=None`, the function incorrectly treats `-1` in indices as a regular negative index (referring to the last element) instead of as a missing value indicator. This violates the documented behavior and creates an inconsistency with how the function behaves on numpy arrays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_take_index_fillvalue_none_2025-09-25_12-00_a7x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_take_index_fillvalue_none_2025-09-25_12-00_a7x3.md",
      "call_id": "ac07a488",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.extensions.take() Fails with SparseArray",
      "target": "pandas.api.extensions.take",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pandas.api.extensions.take()` crashes with TypeError when given a SparseArray input and `allow_fill=False`, despite documentation explicitly listing ExtensionArray as a supported input type.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_extensions_take_sparsearray_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_extensions_take_sparsearray_2025-09-25_00-00_x7k9.md",
      "call_id": "97dad45c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers length_of_indexer Empty Slice",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer()` function incorrectly returns -1 for empty slices (where start > stop), but should return 0 to match Python's slice behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_length_of_indexer_slice_2025-09-25_02-41_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_length_of_indexer_slice_2025-09-25_02-41_k9x2.md",
      "call_id": "5d4d7452",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers length_of_indexer Range Length Calculation",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer()` function uses incorrect formula for calculating range lengths, causing it to return 0 for ranges like `range(0, 1, 2)` which actually have length 1.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_length_of_indexer_range_2025-09-25_02-41_p3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_length_of_indexer_range_2025-09-25_02-41_p3k8.md",
      "call_id": "4987a57e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers.FixedForwardWindowIndexer Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds` produces invalid window bounds (where `end[i] < start[i]`) when initialized with a negative `window_size`, violating the fundamental invariant that window bounds should satisfy `start[i] <= end[i]`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_00-00_x7k9.md",
      "call_id": "f597f602",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers.FixedForwardWindowIndexer Negative Window Size",
      "target": "pandas.api.indexers.FixedForwardWindowIndexer.get_window_bounds",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedForwardWindowIndexer.get_window_bounds()` accepts negative `window_size` values without validation, producing invalid window bounds where `end < start`, violating the fundamental invariant of window indexing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_04-44_l1bq.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_FixedForwardWindowIndexer_2025-09-25_04-44_l1bq.md",
      "call_id": "5173777d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers.check_array_indexer Empty Pandas Array Handling",
      "target": "pandas.api.indexers.check_array_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`check_array_indexer` incorrectly rejects empty pandas arrays as invalid indexers, despite correctly handling empty Python lists and having special logic for empty array handling.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_check_array_indexer_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_check_array_indexer_2025-09-25_00-00_x3k9.md",
      "call_id": "c6ce260c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers.check_array_indexer rejects empty float arrays",
      "target": "pandas.api.indexers.check_array_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pandas.api.indexers.check_array_indexer` rejects empty numpy arrays with float dtype, even though: 1. Empty Python lists are accepted and converted to integer arrays 2. Empty integer numpy arrays are accepted 3. An empty array has no elements, so its dtype should not matter This creates an inconsistency where `np.array([])` (which creates a float64 array by default) is rejected, but `[]` is accepted.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_check_array_indexer_empty_2025-09-25_12-15_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_check_array_indexer_empty_2025-09-25_12-15_x3k9.md",
      "call_id": "e93717d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.indexers.length_of_indexer Negative Length Return",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns negative values for slices with negative stop indices when the target is empty, violating its contract to return the expected length of `target[indexer]`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "call_id": "87e09d55",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Boolean Null Values Silently Converted to False",
      "target": "pandas.core.interchange.from_dataframe.set_nulls",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Null values in nullable boolean columns are silently converted to `False` instead of being preserved as null/NA when using the DataFrame interchange protocol. This happens because NumPy silently converts `None` to `False` in boolean arrays instead of raising a TypeError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_boolean_null_2025-09-25_15-45_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_boolean_null_2025-09-25_15-45_m3x7.md",
      "call_id": "f350ce5e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Missing Values Corrupted",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Missing values in categorical columns are silently converted to actual category values during interchange protocol conversion, resulting in data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_null_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_null_2025-09-25_15-30_x7k9.md",
      "call_id": "2963dc26",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Null Value Loss",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When converting a pandas DataFrame with categorical columns containing null values through the interchange protocol, null values are incorrectly mapped to valid category values instead of being preserved as NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_01-14_qqvd.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_01-14_qqvd.md",
      "call_id": "86809b4f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Null Values Incorrectly Converted",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When converting categorical data through the DataFrame interchange protocol, null values (represented by code -1) are incorrectly mapped to actual category values instead of being preserved as nulls. This is caused by a modulo operation that wraps -1 to 0, silently corrupting data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_06-57_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_06-57_k3m9.md",
      "call_id": "e044c69c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Null Values Incorrectly Mapped",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The interchange protocol's categorical column handler incorrectly maps null sentinel values (-1) to actual category values through a modulo operation, causing silent data corruption where null values become non-null categorical values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_2025-09-25_03-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_2025-09-25_03-17_k3m9.md",
      "call_id": "fbf495d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Null Values Lost",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Null values in categorical columns are incorrectly converted to actual category values when round-tripping through the DataFrame interchange protocol. This causes silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_09-30_k7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_09-30_k7f2.md",
      "call_id": "5acf365b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Null Values Lost in Round-Trip",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Null values in categorical columns are incorrectly converted to the first category value when using the DataFrame interchange protocol round-trip conversion.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_null_2025-09-25_15-30_k9x4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_null_2025-09-25_15-30_k9x4.md",
      "call_id": "b791495a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Categorical Nulls Lost in Round-Trip",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Null values in categorical columns are lost when round-tripping through the DataFrame interchange protocol. The `from_dataframe` function incorrectly maps null sentinel values to valid category values due to a modulo operation that wraps out-of-bounds indices.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_13-00_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_13-00_k8f3.md",
      "call_id": "1c5fe8f0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Converts Int64 with NA to float64",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `from_dataframe` function converts nullable Int64 columns containing NA values to float64, losing both type information and converting integers to floating-point numbers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_interchange_int64_na_2025-09-25_01-46_b4v1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_interchange_int64_na_2025-09-25_01-46_b4v1.md",
      "call_id": "9090d0f9",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Integer Overflow in Day-to-Second Conversion",
      "target": "pandas.core.interchange.from_dataframe.parse_datetime_format_str",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `parse_datetime_format_str` function silently overflows when converting very large day values to seconds, producing negative datetime values instead of raising an error or handling the overflow correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_overflow_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_overflow_2025-09-25_00-00_x7k9.md",
      "call_id": "4dc07c3a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Large Integer Round-Trip Failure",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The interchange protocol fails to round-trip pandas DataFrames containing integers that exceed int64 range, raising `NotImplementedError: Non-string object dtypes are not supported yet`. This violates the expected behavior that a pandas DataFrame should be convertible through the interchange protocol and back.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_large_integers_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_large_integers_2025-09-25_00-00_x9k2.md",
      "call_id": "d0cc8a15",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Object Dtype Validation",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`from_dataframe()` fails with `NotImplementedError` when given an interchange object created from a DataFrame with object dtype containing non-string values (e.g., large integers). The error occurs late in the conversion process rather than when the interchange object is created, leading to poor user experience.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_interchange_object_dtype_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_interchange_object_dtype_2025-09-25_00-00_k3m9.md",
      "call_id": "f53456fb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Silently Converts NA to False in Boolean Columns",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `from_dataframe` function silently converts NA values to False in boolean columns, causing silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_interchange_boolean_na_2025-09-25_01-46_3jmj.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_interchange_boolean_na_2025-09-25_01-46_3jmj.md",
      "call_id": "53cb2499",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange String Encoding Crash with Surrogate Characters",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The interchange protocol crashes with a `UnicodeEncodeError` when attempting to convert DataFrames containing string columns with Unicode surrogate characters (U+D800 to U+DFFF), which are valid Python strings but cannot be encoded to UTF-8.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_surrogates_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_surrogates_2025-09-25_00-00_k3m9.md",
      "call_id": "1e875437",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Surrogate Character Encoding",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The pandas interchange protocol crashes with `UnicodeEncodeError` when attempting to convert a DataFrame containing surrogate characters in string columns back from the interchange format.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_surrogate_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_surrogate_2025-09-25_00-00_k3x9.md",
      "call_id": "1628b2aa",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange Surrogate Character Encoding",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The interchange protocol crashes with a `UnicodeEncodeError` when attempting to convert pandas DataFrames containing surrogate characters (U+D800 through U+DFFF) back to pandas through `from_dataframe()`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_surrogate_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_surrogate_2025-09-25_00-00_k3f9.md",
      "call_id": "a24b9127",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange UnicodeEncodeError on Surrogate Characters",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `from_dataframe` function crashes with `UnicodeEncodeError` when processing DataFrames containing string columns with UTF-16 surrogate characters (U+D800 to U+DFFF), violating the round-trip conversion property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_interchange_2025-09-25_01-44_cyib.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_interchange_2025-09-25_01-44_cyib.md",
      "call_id": "9280a135",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange UnicodeEncodeError with Surrogate Characters",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The pandas interchange protocol crashes with a `UnicodeEncodeError` when attempting to convert DataFrames containing string columns with Unicode surrogate characters (U+D800 to U+DFFF). This prevents round-trip conversion of valid pandas DataFrames through the interchange protocol.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_interchange_2025-09-25_04-14_bw58.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_interchange_2025-09-25_04-14_bw58.md",
      "call_id": "055ca14d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange UnicodeEncodeError with Surrogate Characters",
      "target": "pandas.api.interchange.from_dataframe",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The DataFrame interchange protocol crashes with a `UnicodeEncodeError` when attempting to convert DataFrames containing strings with UTF-16 surrogate characters (U+D800 to U+DFFF). While pandas DataFrames can store these strings, the interchange protocol fails to handle them, causing an unhandled exception.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_surrogate_2025-09-25_06-04_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_surrogate_2025-09-25_06-04_x3m9.md",
      "call_id": "4b4b651c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange get_chunks Creates Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `n_chunks` exceeds the number of rows in a DataFrame, `get_chunks()` creates empty chunks instead of capping the number of chunks at the row count.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_15-00_k8j3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_15-00_k8j3.md",
      "call_id": "e5ba9c78",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange get_chunks produces empty chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `get_chunks(n_chunks)` is called with `n_chunks` greater than the number of rows in the DataFrame, it produces empty chunks, which violates the expectation that chunks contain actual data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_11-30_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_11-30_k8m3.md",
      "call_id": "278a7345",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.interchange get_chunks yields empty chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `n_chunks` exceeds the number of rows in a DataFrame, `get_chunks()` yields empty chunks at the end, violating the reasonable expectation that chunks should contain data when the DataFrame itself is non-empty.",
      "package": "pandas",
      "file_name": "bug_report_pandas_get_chunks_2025-09-25_01-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_get_chunks_2025-09-25_01-12_k3m9.md",
      "call_id": "6b5bc8f6",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.infer_dtype Crashes on Python Numeric Scalars",
      "target": "pandas.api.types.infer_dtype",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `infer_dtype` function is documented to accept \"scalar\" values but crashes with `TypeError: 'X' object is not iterable` when given Python built-in numeric scalars (int, float, bool, complex, None), while working correctly for string scalars and NumPy scalars.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_infer_dtype_2025-09-25_00-01_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_infer_dtype_2025-09-25_00-01_a7f2.md",
      "call_id": "6c72b325",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Patterns",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`is_re_compilable` crashes with `re.PatternError` when given invalid regex patterns instead of returning False as documented. The function signature indicates it returns bool, but it raises exceptions on inputs that cannot be compiled as regex patterns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_is_re_compilable_2025-09-25_15-35_j8x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_is_re_compilable_2025-09-25_15-35_j8x2.md",
      "call_id": "620745b1",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Regex",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`is_re_compilable` raises `re.PatternError` for invalid regex patterns instead of returning `False` as its contract implies.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_04-40_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_04-40_x3k9.md",
      "call_id": "d833984c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Regex",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`is_re_compilable()` crashes with `re.PatternError` when given invalid regex patterns, instead of returning `False` as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_k3m9.md",
      "call_id": "832a8669",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Regex Patterns",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable()` function crashes with `re.PatternError` on invalid regex patterns like `'\\'` and `'['` instead of returning `False`. The function only catches `TypeError` but `re.compile()` can also raise `re.PatternError` for malformed patterns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_09-42_66ct.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_09-42_66ct.md",
      "call_id": "4be8bcde",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Regex Patterns",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable` function is documented to \"Check if the object can be compiled into a regex pattern instance\" and return a boolean. However, it crashes with `re.PatternError` when given invalid regex patterns instead of returning `False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "call_id": "85a5c92c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Crashes on Invalid Regex Patterns",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable` function crashes with `re.PatternError` when given invalid regex patterns instead of returning `False` as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_00-00_k3x9.md",
      "call_id": "fda89131",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Raises Exception Instead of Returning False",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`is_re_compilable()` raises `re.PatternError` for invalid regex patterns instead of returning `False` as documented. The function only catches `TypeError` but not `re.error`, violating its contract to always return a bool.",
      "package": "pandas",
      "file_name": "bug_report_pandas_is_re_compilable_2025-09-25_12-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_is_re_compilable_2025-09-25_12-00_a7f2.md",
      "call_id": "3e7086fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Raises Exception Instead of Returning False",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable` function is documented to return a boolean indicating whether an object can be compiled as a regex pattern. However, it raises `re.PatternError` for invalid regex strings instead of returning `False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_is_re_compilable_2025-09-25_00-00_x7k9.md",
      "call_id": "34fd3c0b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Raises Exception Instead of Returning False",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable()` function is documented to return a boolean indicating whether an object can be compiled as a regex pattern. However, it raises `re.PatternError` for invalid regex patterns instead of returning `False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_is_re_compilable_2025-09-25_06-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_is_re_compilable_2025-09-25_06-30_k3m9.md",
      "call_id": "2286a594",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Raises Exception on Invalid Regex",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The is_re_compilable function raises re.PatternError exceptions for invalid regex patterns instead of returning False, violating its documented contract to return a bool.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_is_re_compilable_2025-09-25_03-16_5qz1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_is_re_compilable_2025-09-25_03-16_5qz1.md",
      "call_id": "ae825739",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.is_re_compilable Raises Instead of Returning False",
      "target": "pandas.api.types.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`is_re_compilable()` is supposed to return True if a string can be compiled as a regex and False otherwise. However, it raises `re.PatternError` for invalid regex patterns instead of returning False, violating its documented contract.",
      "package": "pandas",
      "file_name": "bug_report_is_re_compilable_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_is_re_compilable_2025-09-25_00-00_a7f2.md",
      "call_id": "a041e06f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.union_categoricals Associativity Violation and Data Loss",
      "target": "pandas.api.types.union_categoricals",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`union_categoricals` violates associativity and silently converts valid categorical values to NaN when the first categorical has fewer categories than subsequent categoricals.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_union_categoricals_2025-09-25_08-13_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_union_categoricals_2025-09-25_08-13_x7k9.md",
      "call_id": "488c8376",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.union_categoricals Missing Categories",
      "target": "pandas.api.types.union_categoricals",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`union_categoricals` silently drops categories and converts values to NaN when combining 3+ categoricals with specific overlapping category patterns. Categories are lost when the first categorical contains category 'X', the second contains both 'X' and 'Y\\x00' (with null byte), and the third contains 'Y'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_union_categoricals_2025-09-25_15-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_union_categoricals_2025-09-25_15-30_k3f9.md",
      "call_id": "c1891b54",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.types.union_categoricals Null Character Corruption",
      "target": "pandas.api.types.union_categoricals",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`union_categoricals` silently corrupts data by converting the null character (`'\\x00'`) to `NaN` when combining categorical arrays. This leads to silent data loss when the input categoricals contain the null character as a valid category.",
      "package": "pandas",
      "file_name": "bug_report_pandas_union_categoricals_null_char_2025-09-25_05-27_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_union_categoricals_null_char_2025-09-25_05-27_x9k3.md",
      "call_id": "8a60d5c0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NAType Comparison Inconsistency",
      "target": "pandas.api.typing.NAType",
      "severity": "Invalid",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NA comparisons (`==` and `!=`) return `bool` instead of `NAType` when comparing with container types (lists, dicts, tuples, sets), None, and generic objects. This violates the documented three-valued logic semantics where all comparisons should return NA.",
      "package": "pandas",
      "file_name": "bug_report_pandas_NAType_comparison_inconsistency_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_NAType_comparison_inconsistency_2025-09-25_00-00_x7k9.md",
      "call_id": "e247c8a7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Constructor Does Not Return Singleton",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "NaTType() constructor creates new instances on each call instead of returning the singleton pd.NaT, inconsistent with NAType's singleton behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_02-13_wn0c.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_02-13_wn0c.md",
      "call_id": "ea275f06",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Constructor Inconsistency",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`NaTType()` constructor creates new instances instead of returning the singleton `pd.NaT`, inconsistent with `NAType()` which correctly returns the `pd.NA` singleton.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_05-14_musg.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_05-14_musg.md",
      "call_id": "c35017c4",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Constructor Inconsistency",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`NaTType()` creates new distinct instances instead of returning the singleton `pd.NaT`, unlike the consistent behavior of `NAType()` which returns the singleton `pd.NA`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_04-40_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_04-40_x3k9.md",
      "call_id": "25e4e1b7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Constructor Not Singleton",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`NaTType()` constructor creates new instances on each call, inconsistent with `NAType()` which returns a singleton. This violates API consistency and user expectations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_00-00_k3j9.md",
      "call_id": "7d661342",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Creates Unrecognized NaT Instances",
      "target": "pandas.api.typing.NaTType",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Calling `NaTType()` creates new NaT-like instances that are not recognized by `pd.isna()` and are not identical to the `pd.NaT` singleton, unlike the correctly-behaving `NAType()` which returns the `pd.NA` singleton.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_08-43_f7oa.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_08-43_f7oa.md",
      "call_id": "b24b26ed",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Singleton Inconsistency",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `NaTType()` constructor creates new instances instead of returning the `pd.NaT` singleton, causing inconsistent behavior with `NAType()` and breaking pandas missing value detection.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_03-16_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_03-16_k3x9.md",
      "call_id": "abf487cb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Singleton Inconsistency",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`NaTType()` creates new instances instead of returning the singleton `pd.NaT`, inconsistent with the similar `NAType()` which correctly returns the singleton `pd.NA`. This violates the expected singleton pattern and creates unexpected duplicates in collections.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_singleton_2025-09-25_00-44_c1qm.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_singleton_2025-09-25_00-44_c1qm.md",
      "call_id": "3d4993e1",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Singleton Pattern Violation",
      "target": "pandas.api.typing.NaTType",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`NaTType()` creates distinct instances on each call instead of returning the singleton `pd.NaT`, violating the expected singleton pattern and creating inconsistency with `NAType`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_NaTType_singleton_2025-09-25_09-00_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_NaTType_singleton_2025-09-25_09-00_k3n9.md",
      "call_id": "f384dee5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Singleton Violation",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "NaTType() constructor creates new instances instead of returning the singleton pd.NaT, inconsistent with NAType behavior and causing identity check failures.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_singleton_2025-09-25_11-21_prp5.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_singleton_2025-09-25_11-21_prp5.md",
      "call_id": "ff2467a5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.api.typing.NaTType Singleton Violation",
      "target": "pandas.api.typing.NaTType",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "NaTType() creates a new instance on each call instead of returning the singleton `pd.NaT`, violating the singleton pattern that NAType correctly implements.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_typing_NaTType_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_typing_NaTType_2025-09-25_00-00_k9x2.md",
      "call_id": "a1e4a19b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays factorize() IndexError on all-NA arrays",
      "target": "pandas.arrays",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `factorize()` is called on masked array types where all values are NA (missing), it returns codes containing -1 (the NA sentinel) and an empty uniques array. This breaks the standard reconstruction pattern `uniques[codes]`, causing an IndexError. Bug affects BooleanArray, IntegerArray, FloatingArray, and ArrowStringArray.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_factorize_all_na_2025-09-25_07-13_0hdf.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_factorize_all_na_2025-09-25_07-13_0hdf.md",
      "call_id": "25c51a90",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays.IntervalArray.overlaps NotImplementedError",
      "target": "pandas.arrays.IntervalArray.overlaps",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`IntervalArray.overlaps()` raises `NotImplementedError` when passed another `IntervalArray`, despite the documentation explicitly stating it accepts `IntervalArray` as a parameter.",
      "package": "pandas",
      "file_name": "bug_report_pandas_IntervalArray_overlaps_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_IntervalArray_overlaps_2025-09-25_00-00_k3m9.md",
      "call_id": "e93c5c61",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays.NumpyExtensionArray Dtype Equality",
      "target": "pandas.arrays.NumpyExtensionArray",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`NumpyExtensionArray.dtype` returns a `NumpyEADtype` wrapper that is not equal to the underlying numpy dtype, breaking expected equality semantics for arrays wrapping numpy data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_NumpyExtensionArray_dtype_equality_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_NumpyExtensionArray_dtype_equality_2025-09-25_00-00_k3m9.md",
      "call_id": "c43abe96",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.arrays.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `cumsum()` on any `SparseArray` causes infinite recursion and crashes with `RecursionError`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_cumsum_2025-09-25_04-11_r9f3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_cumsum_2025-09-25_04-11_r9f3.md",
      "call_id": "6d3557f4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.arrays.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "SparseArray.cumsum() causes infinite recursion and crashes when the fill_value is not NaN/null.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_cumsum_2025-09-25_01-47_hmih.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_cumsum_2025-09-25_01-47_hmih.md",
      "call_id": "2a308576",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.arrays.SparseArray.cumsum() Infinite Recursion",
      "target": "pandas.arrays.SparseArray.cumsum()",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `SparseArray.cumsum()` method causes infinite recursion when called on a SparseArray with a non-null fill value (e.g., fill_value=0 for integer arrays).",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_cumsum_2025-09-25_06-50_2y3u.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_cumsum_2025-09-25_06-50_2y3u.md",
      "call_id": "29f62c16",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat ARGSORT_DEFAULTS duplicate key assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary has duplicate assignment to the `\"kind\"` key, where it's first set to `\"quicksort\"` and then immediately overwritten with `None`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_argsort_defaults_2025-09-25_00-02_c9d4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_argsort_defaults_2025-09-25_00-02_c9d4.md",
      "call_id": "566c0e39",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat import_optional_dependency Contract Violation",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `errors=\"ignore\"` and the module version is too old, `import_optional_dependency` returns `None` instead of returning the module as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_05-56_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_05-56_m3p7.md",
      "call_id": "d78d4249",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat import_optional_dependency errors='ignore' Contract Violation",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`import_optional_dependency` with `errors='ignore'` violates its documented contract by returning `None` when a module's version is too old, and by raising `ImportError` when a module lacks a `__version__` attribute. The docstring explicitly states that with `errors='ignore'`, the function should \"return the module, even if the version is too old.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_01-12_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_01-12_k3x9.md",
      "call_id": "97bd1746",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat is_platform_power docstring mismatch",
      "target": "pandas.compat.is_platform_power",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_platform_power` function has a docstring that incorrectly states it returns \"True if the running platform uses ARM architecture\", when it actually checks for Power architecture (ppc64/ppc64le).",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_00-01_b3x8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_00-01_b3x8.md",
      "call_id": "815c985f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional Version Checking Skipped for Submodules",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Version checking is completely bypassed for submodules like `lxml.etree` because the code looks up version requirements using the parent module name in the VERSIONS dict, but VERSIONS contains the full submodule name as the key.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_lxml_version_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_lxml_version_2025-09-25_00-00_a1b2.md",
      "call_id": "3f49b79e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.get_version IndexError on Whitespace-Only Version",
      "target": "pandas.compat._optional.get_version",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_version` function crashes with an unhelpful `IndexError` when called on a module named \"psycopg2\" that has a whitespace-only `__version__` string, instead of raising the more appropriate `ImportError` with a clear message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_get_version_whitespace_2025-09-25_04-11_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_get_version_whitespace_2025-09-25_04-11_x7k9.md",
      "call_id": "a6add197",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.get_version Returns Non-String for Non-String __version__",
      "target": "pandas.compat._optional.get_version",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`get_version` returns non-string values when a module's `__version__` attribute is not a string, violating its return type annotation and causing downstream crashes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_get_version_2025-09-25_01-12_b4f3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_get_version_2025-09-25_01-12_b4f3.md",
      "call_id": "a7c0f667",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.get_version Whitespace Handling",
      "target": "pandas.compat._optional.get_version",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_version()` function incorrectly handles psycopg2 version strings that contain whitespace characters other than spaces (e.g., `\\r`, `\\n`, `\\t`) in the version portion, splitting on any whitespace instead of just the first space.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_get_version_2025-09-25_05-56_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_get_version_2025-09-25_05-56_x7k2.md",
      "call_id": "51530b6e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.import_optional_dependency Returns None Instead of Module",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `errors='ignore'` is used with an outdated module version, `import_optional_dependency` returns `None` instead of returning the module as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_00-00_k3m9.md",
      "call_id": "639a6b17",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.import_optional_dependency ValueError on Invalid Module Names",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`import_optional_dependency` with `errors=\"ignore\"` raises `ValueError` or `TypeError` for invalid module names instead of returning `None` as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_01-12_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_01-12_x7k9.md",
      "call_id": "179a1818",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat._optional.import_optional_dependency errors='ignore' Returns None for Old Versions",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `errors='ignore'` and a module's version is too old, `import_optional_dependency()` returns `None` instead of returning the module, violating its documented contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_ignore_2025-09-25_00-00_m3x8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_ignore_2025-09-25_00-00_m3x8.md",
      "call_id": "14034e17",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.import_optional_dependency KeyError for Submodules",
      "target": "pandas.compat._optional.import_optional_dependency",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `import_optional_dependency` is called with a submodule name and `min_version` is specified, if the parent module is not in `sys.modules`, the function raises `KeyError` instead of the documented `ImportError`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_import_optional_dependency_2025-09-25_05-56_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_import_optional_dependency_2025-09-25_05-56_k3j9.md",
      "call_id": "cfc2c48e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.is_platform_power Docstring Mismatch",
      "target": "pandas.compat.is_platform_power",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_platform_power()` function has incorrect documentation that states it returns \"True if the running platform uses ARM architecture\" when it actually checks for Power architecture.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_02-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_02-30_k3m9.md",
      "call_id": "a1832bef",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.is_platform_power Documentation Error",
      "target": "pandas.compat.is_platform_power",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_platform_power()` function has incorrect documentation in its Returns section, claiming it returns \"True if the running platform uses ARM architecture\" when it actually checks for Power architecture.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_is_platform_power_2025-09-25_00-00_k3p9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_is_platform_power_2025-09-25_00-00_k3p9.md",
      "call_id": "79142bf8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.is_platform_power Documentation Incorrect",
      "target": "pandas.compat.is_platform_power",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `is_platform_power()` incorrectly states it returns \"True if the running platform uses ARM architecture\", but the implementation actually checks for Power architecture (PowerPC: ppc64, ppc64le).",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_is_platform_power_2025-09-25_00-00_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_is_platform_power_2025-09-25_00-00_x9k2.md",
      "call_id": "6890b0e3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.is_platform_power Incorrect Docstring",
      "target": "pandas.compat.is_platform_power",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring for `is_platform_power()` incorrectly states it returns \"True if the running platform uses ARM architecture\" when it actually checks for Power architecture.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_is_platform_power_docstring_2025-09-25_00-00_k3m9.md",
      "call_id": "f6760586",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Dead Code",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary in `pandas/compat/numpy/function.py` contains dead code: line 138 sets `kind='quicksort'`, but line 140 immediately overwrites it with `kind=None`. This is confusing and violates code clarity principles.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_00-00_k3x9.md",
      "call_id": "22a42cbc",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Duplicate Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ARGSORT_DEFAULTS[\"kind\"]` is assigned twice in consecutive lines, overwriting the correct numpy default value `\"quicksort\"` with `None`, causing validation to incorrectly reject the numpy default value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_kind_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_kind_2025-09-25_00-00_k3x9.md",
      "call_id": "2fc72429",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Duplicate Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary in `pandas/compat/numpy/function.py` has a duplicate assignment for the `\"kind\"` key, where line 137 sets it to `\"quicksort\"` and line 139 immediately overwrites it to `None`, making line 137 dead code.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_10-46_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_10-46_x3k9.md",
      "call_id": "3cd178eb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Duplicate Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary contains dead code where the `\"kind\"` key is assigned twice (lines 138 and 140), with the second assignment immediately overwriting the first. This results in `kind=None` being the default instead of `kind=\"quicksort\"`, making the first assignment meaningless.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_01-13_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_01-13_k7m2.md",
      "call_id": "980baf1d",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary in `pandas/compat/numpy/function.py` has a duplicate key assignment where `\"kind\"` is first set to `\"quicksort\"` (line 138) and then immediately overwritten with `None` (line 140), causing the initial value to be silently discarded.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_12-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_12-00_k3f9.md",
      "call_id": "7aa0ceb9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary has the `\"kind\"` key assigned twice (lines 138 and 140), causing the second assignment to overwrite the first. This results in `kind` defaulting to `None` instead of `\"quicksort\"`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_05-56_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_05-56_k3x9.md",
      "call_id": "d2f66f24",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS Inconsistency",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "ARGSORT_DEFAULTS contains dead code and an inconsistency with SORT_DEFAULTS for the 'kind' parameter, despite both tracking the same numpy default value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_2025-09-25_00-00_k3m9.md",
      "call_id": "7168d0e9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy ARGSORT_DEFAULTS_KIND Missing 'kind' Parameter",
      "target": "pandas.compat.numpy.function.validate_argsort_kind",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validate_argsort_kind` validator is documented as being used \"when the `kind` param is supported\" but its defaults dictionary `ARGSORT_DEFAULTS_KIND` is missing the 'kind' key, causing it to incorrectly reject valid `kind` parameter values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_kind_2025-09-25_05-26_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_kind_2025-09-25_05-26_k3m9.md",
      "call_id": "6e31b82f",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy CompatValidator Method Validation Bypass",
      "target": "pandas.compat.numpy.function.CompatValidator.__call__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CompatValidator silently accepts invalid method values when called with empty args and kwargs, bypassing validation that should always occur.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_CompatValidator_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_CompatValidator_2025-09-25_00-00_k3m9.md",
      "call_id": "cb09ba48",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy SORT_DEFAULTS Kind Mismatch",
      "target": "pandas.compat.numpy.function.SORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "SORT_DEFAULTS['kind'] is set to 'quicksort', but numpy.sort's actual default for the 'kind' parameter is None. This causes validate_sort to reject numpy's actual default value (kind=None) while accepting 'quicksort', which is incorrect validation behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_sort_kind_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_sort_kind_2025-09-25_00-00_k9x3.md",
      "call_id": "3d2c25ca",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy Validation Defaults Include Non-Existent Parameters",
      "target": "pandas.compat.numpy.function",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Multiple validation default dictionaries incorrectly include parameters that don't exist in the corresponding numpy function signatures, causing pandas to silently accept invalid parameters instead of raising TypeError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_validation_defaults_2025-09-25_08-20_rfo2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_validation_defaults_2025-09-25_08-20_rfo2.md",
      "call_id": "3d5079e7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function ARGSORT_DEFAULTS Duplicate Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary has a duplicate assignment for the `\"kind\"` key on lines 138 and 140, causing the first value (`\"quicksort\"`) to be immediately overwritten by `None`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_argsort_defaults_2025-09-25_05-56_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_argsort_defaults_2025-09-25_05-56_x7k9.md",
      "call_id": "e8b1f8ee",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary has a duplicate key assignment for \"kind\", where line 138 assigns `\"quicksort\"` and line 140 immediately overrides it with `None`. This appears to be a copy-paste error.",
      "package": "pandas",
      "file_name": "bug_report_argsort_defaults_duplicate_2025-09-25_14-30_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_argsort_defaults_duplicate_2025-09-25_14-30_x7k2.md",
      "call_id": "50aab105",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary in `pandas.compat.numpy.function` contains a duplicate assignment to the `\"kind\"` key, where it is first set to `\"quicksort\"` and then immediately overwritten with `None`, causing incorrect default validation behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_argsort_defaults_2025-09-25_15-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_argsort_defaults_2025-09-25_15-30_k7m9.md",
      "call_id": "c0a99da9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary in `pandas/compat/numpy/function.py` assigns the `\"kind\"` key twice (lines 138 and 140), causing the second assignment (`None`) to overwrite the intended default value (`\"quicksort\"`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_argsort_2025-09-25_11-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_argsort_2025-09-25_11-14_k3m9.md",
      "call_id": "ca00d82b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function ARGSORT_DEFAULTS Duplicate Key Assignment",
      "target": "pandas.compat.numpy.function.ARGSORT_DEFAULTS",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ARGSORT_DEFAULTS` dictionary has the `'kind'` key assigned twice (lines 138 and 140), with the second assignment overwriting the first.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_argsort_defaults_2025-09-25_00-00_x7k9.md",
      "call_id": "fdb20430",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.compat.numpy.function.validate_argsort_with_ascending rejects valid axis=None",
      "target": "pandas.compat.numpy.function.validate_argsort_with_ascending",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validate_argsort_with_ascending` function claims to handle numpy-style calls to `Categorical.argsort` where the first parameter is `axis` instead of `ascending`. However, it rejects valid numpy arguments when `axis=None` is passed (interpreted as `ascending=None`), even though `axis=None` is a valid numpy parameter.",
      "package": "pandas",
      "file_name": "bug_report_pandas_compat_numpy_validate_argsort_with_ascending_2025-09-25_06-14_t1ur.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_compat_numpy_validate_argsort_with_ascending_2025-09-25_06-14_t1ur.md",
      "call_id": "9f6d96a7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms String Collision in factorize/unique/duplicated",
      "target": "pandas.core.algorithms.factorize",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `factorize()`, `unique()`, and `duplicated()` functions incorrectly treat the empty string `''` and the string `'\\x000'` (containing null character followed by '0') as identical values, violating their documented behavior of correctly identifying unique values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_factorize_string_collision_2025-09-25_15-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_factorize_string_collision_2025-09-25_15-30_k7m2.md",
      "call_id": "7fb4d50f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.factorize Big-Endian Array Support",
      "target": "pandas.core.algorithms.factorize",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pandas.core.algorithms.factorize()` crashes with a ValueError when given numpy arrays with big-endian byte order, even though pandas generally supports big-endian arrays (Series and DataFrame constructors accept them without issue).",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_factorize_bigendian_2025-09-25_08-45_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_factorize_bigendian_2025-09-25_08-45_k3f9.md",
      "call_id": "e62e7c7e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.factorize Null Character String Collision",
      "target": "pandas.core.algorithms.factorize",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `factorize` function incorrectly treats strings containing only null characters (`\\x00`) as identical to the empty string or other null-character-only strings, violating its documented round-trip property that \"uniques.take(codes) will have the same values as values\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_factorize_2025-09-25_14-30_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_factorize_2025-09-25_14-30_k9f2.md",
      "call_id": "ba290aad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.factorize Treats Empty String and Null Character as Same Value",
      "target": "pandas.core.algorithms.factorize",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `factorize` function incorrectly treats the empty string `''` and the null character `'\\x00'` as the same value, violating its documented round-trip property that `uniques.take(codes)` should reconstruct the original values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_factorize_null_char_2025-09-25_22-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_factorize_null_char_2025-09-25_22-30_k7x2.md",
      "call_id": "1c75acd9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.factorize null character handling",
      "target": "pandas.core.algorithms.factorize",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `factorize` function incorrectly handles strings that contain only null characters (`\\x00`), stripping them to empty strings in the returned uniques array, which breaks the round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_factorize_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_factorize_2025-09-25_00-00_k3m9.md",
      "call_id": "34cc5d39",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.unique Null Character Data Corruption",
      "target": "pandas.core.algorithms.unique",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `unique` function incorrectly transforms strings containing null characters (`'\\x00'`) into empty strings, causing silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_unique_null_character_2025-09-25_06-13_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_unique_null_character_2025-09-25_06-13_x7k9.md",
      "call_id": "e6ec6f4d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.algorithms.unique Null Character String Collision",
      "target": "pandas.core.algorithms.unique",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `unique` function incorrectly treats strings containing only null characters (`\\x00`) as identical to the empty string or other null-character-only strings, failing to return all distinct values. This bug is related to the same underlying issue affecting `factorize` (see separate bug report).",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_algorithms_unique_2025-09-25_14-35_m7p3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_algorithms_unique_2025-09-25_14-35_m7p3.md",
      "call_id": "6cde87d9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_accumulations Input Array Mutation",
      "target": "pandas.core.array_algos.masked_accumulations.cumsum",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The masked accumulation functions (`cumsum`, `cumprod`, `cummin`, `cummax`) unexpectedly modify the input array when mask contains `True` values, despite returning a new array as the result. This violates the principle of least surprise and can lead to subtle bugs in calling code.",
      "package": "pandas",
      "file_name": "bug_report_pandas_masked_accumulations_input_mutation_2025-09-25_07-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_masked_accumulations_input_mutation_2025-09-25_07-48_k3m9.md",
      "call_id": "057e934a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_accumulations Input Array Mutation",
      "target": "pandas.core.array_algos.masked_accumulations",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The accumulation functions (`cumsum`, `cumprod`, `cummin`, `cummax`) in `masked_accumulations.py` mutate the input `values` array, violating the fundamental expectation that function arguments should remain unchanged unless explicitly intended as in-place operations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_array_algos_masked_accumulations_2025-09-25_08-11_a3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_array_algos_masked_accumulations_2025-09-25_08-11_a3x9.md",
      "call_id": "afd85b2a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_accumulations Input Mutation",
      "target": "pandas.core.array_algos.masked_accumulations",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "All accumulation functions in `masked_accumulations` (`cumsum`, `cumprod`, `cummin`, `cummax`) mutate the input `values` array in-place, violating the fundamental expectation that input arrays should remain unchanged unless explicitly documented as in-place operations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_array_algos_masked_accumulations_input_mutation_2025-09-25_07-11_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_array_algos_masked_accumulations_input_mutation_2025-09-25_07-11_k3m9.md",
      "call_id": "6eabf461",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_reductions Inconsistent NA Handling",
      "target": "pandas.core.array_algos.masked_reductions.sum",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When all values are masked, `sum()` returns 0.0 and `prod()` returns 1.0 instead of NA, creating inconsistency with other reduction functions (`min`, `max`, `mean`) which correctly return NA in the same scenario.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_array_algos_masked_sum_2025-09-25_02-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_array_algos_masked_sum_2025-09-25_02-14_k3m9.md",
      "call_id": "7334fdb8",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_reductions Inconsistent NA Handling",
      "target": "pandas.core.array_algos.masked_reductions.sum",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sum` and `prod` functions in `pandas.core.array_algos.masked_reductions` return numeric values (0.0 for sum, 1.0 for prod) when all values are masked, while `mean`, `min`, and `max` correctly return `NA` in the same scenario. This is an inconsistency in the API.",
      "package": "pandas",
      "file_name": "bug_report_pandas_masked_reductions_sum_prod_all_masked_2025-09-25_04-40_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_masked_reductions_sum_prod_all_masked_2025-09-25_04-40_k3m9.md",
      "call_id": "0a3b6663",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_reductions Object Dtype Axis Error",
      "target": "pandas.core.array_algos.masked_reductions",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The masked reduction functions (sum, prod, mean, var, std) crash when called on 2D object-dtype arrays with a non-None axis parameter. This is due to incorrect handling of object dtype arrays where the mask is applied via fancy indexing, flattening the array to 1D, before passing it to numpy functions that expect the original dimensionality.",
      "package": "pandas",
      "file_name": "bug_report_pandas_array_algos_masked_object_axis_2025-09-25_02-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_array_algos_masked_object_axis_2025-09-25_02-30_k3m9.md",
      "call_id": "b5f74976",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.masked_reductions min/max axis parameter",
      "target": "pandas.core.array_algos.masked_reductions.min",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `min()` and `max()` functions in `pandas.core.array_algos.masked_reductions` incorrectly handle the `axis` parameter for multi-dimensional arrays when `skipna=True` and there are no masked values. The functions flatten the input array via boolean indexing, causing the axis parameter to become invalid.",
      "package": "pandas",
      "file_name": "bug_report_pandas_masked_reductions_minmax_axis_2025-09-25_03-18_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_masked_reductions_minmax_axis_2025-09-25_03-18_k7m2.md",
      "call_id": "0ebf0d00",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.putmask_without_repeat Allows Repetition with Length-1 Arrays",
      "target": "pandas.core.array_algos.putmask.putmask_without_repeat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `putmask_without_repeat` function violates its documented contract by allowing numpy's `putmask` to repeat values when `new` has length 1, despite the documentation stating \"We require an exact match.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_putmask_without_repeat_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_putmask_without_repeat_2025-09-25_00-00_k3m9.md",
      "call_id": "fb11c424",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.quantile int8 dtype",
      "target": "pandas.core.array_algos.quantile.quantile_compat",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quantile_compat` function produces incorrect and non-monotonic quantile values for int8 arrays due to NumPy's `percentile` function mishandling int8 dtype. This results in quantile values that violate the fundamental property that quantiles should be monotonically increasing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_quantile_int8_2025-09-25_10-17_x696.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_quantile_int8_2025-09-25_10-17_x696.md",
      "call_id": "3742305b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.array_algos.take - Incorrect mask handling in _take_preprocess_indexer_and_fill_value",
      "target": "pandas.core.array_algos.take._take_preprocess_indexer_and_fill_value",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_take_preprocess_indexer_and_fill_value` function incorrectly assumes that masking is needed (`needs_masking=True`) when an explicit mask is passed, even if the mask contains no True values. This causes unnecessary dtype promotion and inconsistent behavior compared to when `mask=None` is passed.",
      "package": "pandas",
      "file_name": "bug_report_pandas_take_mask_2025-09-25_11-20_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_take_mask_2025-09-25_11-20_x7k9.md",
      "call_id": "25ec1dcb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays IntervalArray.unique() Drops Intervals with Negative Breaks",
      "target": "pandas.core.arrays.IntervalArray.unique()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`IntervalArray.unique()` incorrectly drops distinct intervals when all break values are negative. For example, an array with intervals `[-3, -2)` and `[-2, -1)` returns only `[-3, -2)` after calling `unique()`, silently losing the second interval.",
      "package": "pandas",
      "file_name": "bug_report_pandas_intervalarray_unique_negative_2025-09-25_08-23_j4n2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_intervalarray_unique_negative_2025-09-25_08-23_j4n2.md",
      "call_id": "c0aa5797",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.Categorical Null Character Data Corruption",
      "target": "pandas.core.arrays.Categorical",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Categorical silently corrupts data by treating the null character `'\\x00'` as equivalent to the empty string `''`, causing distinct string values to be merged into a single category and resulting in data loss.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_arrays_Categorical_null_char_2025-09-25_06-56_2ckr.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_arrays_Categorical_null_char_2025-09-25_06-56_2ckr.md",
      "call_id": "7a9e7971",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.SparseArray Fill Value Change Corrupts Data",
      "target": "pandas.core.arrays.SparseArray",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When constructing a `SparseArray` from another `SparseArray` with a different `fill_value`, the actual data values are corrupted and replaced with the new fill value instead of being preserved.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_fill_value_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_fill_value_2025-09-25_00-00_x7k9.md",
      "call_id": "f904e94f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays._utils.to_numpy_dtype_inference Incorrect dtype_given Logic",
      "target": "pandas.core.arrays._utils.to_numpy_dtype_inference",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_numpy_dtype_inference` function incorrectly sets `dtype_given = True` when `dtype=None` for non-numeric array types (e.g., string arrays), preventing proper dtype inference and returning `None` as the dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrays_to_numpy_dtype_inference_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrays_to_numpy_dtype_inference_2025-09-25_00-00_k3x9.md",
      "call_id": "53e835f1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.arrow ArrowExtensionArray.fillna Crashes on Null-Typed Arrays",
      "target": "pandas.core.arrays.arrow.ArrowExtensionArray.fillna",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ArrowExtensionArray.fillna() crashes with an unhelpful error message when called on arrays with PyArrow's `null` type, which occurs when arrays are created from all-None values without an explicit type.",
      "package": "pandas",
      "file_name": "bug_report_pandas_arrow_fillna_null_type_2025-09-25_04-43_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_arrow_fillna_null_type_2025-09-25_04-43_k3m9.md",
      "call_id": "1694aab8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.arrow ListAccessor.__getitem__ Crashes on Variable-Length Lists",
      "target": "pandas.core.arrays.arrow.accessors.ListAccessor.__getitem__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When using `ListAccessor.__getitem__()` with an integer index on a Series containing lists of different lengths, the method raises an `ArrowInvalid` exception if the index is out of bounds for any list, even though the docstring suggests it should \"access from each list\" independently.",
      "package": "pandas",
      "file_name": "bug_report_pandas_list_accessor_getitem_2025-09-25_14-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_list_accessor_getitem_2025-09-25_14-30_k7m2.md",
      "call_id": "1813e4ac",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse - argmin/argmax crash on all-fill-value arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "SparseArray's `argmin()` and `argmax()` methods crash with `ValueError: attempt to get argmin of an empty sequence` when the array contains only fill values (i.e., when all values equal the fill_value).",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_argmin_argmax_2025-09-25_01-44_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_argmin_argmax_2025-09-25_01-44_k9m3.md",
      "call_id": "0124fb8f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray argmin/argmax Empty Sequence",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`SparseArray.argmin()` and `SparseArray.argmax()` crash with \"ValueError: attempt to get argmin/argmax of an empty sequence\" when the array contains only fill_value elements (i.e., when `npoints == 0`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_argmin_argmax_2025-09-25_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_argmin_argmax_2025-09-25_x7m9.md",
      "call_id": "2f646ee2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.argmax/argmin crash on all-fill arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.argmax()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When calling `argmax()` or `argmin()` on a SparseArray where all values equal the fill_value, the methods crash with `ValueError: attempt to get argmax of an empty sequence`. This happens because the implementation tries to find the argmax/argmin of an empty `sp_values` array.",
      "package": "pandas",
      "file_name": "bug_report_sparse_argmax.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_argmax.md",
      "call_id": "68b42b07",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.argmin Crash on All-Fill-Value Arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`SparseArray.argmin()` and `argmax()` crash with ValueError when called on arrays where all values equal the non-NA fill value, because they attempt to compute argmin/argmax on an empty array of sparse values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_argmin_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_argmin_2025-09-25_00-00_a1b2.md",
      "call_id": "53c3b17e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.astype Contract Violation",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`SparseArray.astype()` violates its documented contract by returning a dense `numpy.ndarray` instead of a `SparseArray` when given a numpy dtype (e.g., `'float64'`) rather than a `SparseDtype`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_astype_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_astype_2025-09-25_k3m9.md",
      "call_id": "31f33d84",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.astype Returns ndarray",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `SparseArray.astype()` method returns a numpy ndarray instead of a SparseArray when the input array contains only fill values, violating its documented contract that \"The output will always be a SparseArray.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_astype_2025-09-25_00-07_a3b8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_astype_2025-09-25_00-07_a3b8.md",
      "call_id": "567bb759",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.astype() loses data when changing fill_value",
      "target": "pandas.core.arrays.sparse.SparseArray.astype()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When calling `SparseArray.astype()` with a `SparseDtype` that has a different `fill_value` than the original array, the actual values in the array are lost and replaced with the new fill_value. This violates the fundamental contract of `astype()` which should preserve array values while changing only the dtype.",
      "package": "pandas",
      "file_name": "bug_report_sparse_astype.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_sparse_astype.md",
      "call_id": "6cdf66b2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.SparseArray.cumsum",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` causes infinite recursion when called on arrays with non-null fill values (e.g., `fill_value=0`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_cumsum_2025-09-25_03-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_cumsum_2025-09-25_03-00_k9x2.md",
      "call_id": "9c33e8f6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`SparseArray.cumsum()` enters infinite recursion when called on arrays with non-NA fill values (e.g., fill_value=0 for integers), causing a RecursionError and making the method completely unusable for such arrays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_cumsum_2025-09-25_00-00_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_cumsum_2025-09-25_00-00_c3d4.md",
      "call_id": "f85077a8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`SparseArray.cumsum()` causes infinite recursion (RecursionError) when the fill_value is not NA/NaN, which is the default behavior for integer arrays (fill_value=0).",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_cumsum_2025-09-25_r3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_cumsum_2025-09-25_r3k9.md",
      "call_id": "2b140353",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.nonzero Incorrect Logic",
      "target": "pandas.core.arrays.sparse.SparseArray.nonzero",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `nonzero()` method returns incorrect indices when the fill value is nonzero. It returns indices of non-fill values instead of indices of nonzero values, causing it to miss positions where the value equals a nonzero fill value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_nonzero_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_nonzero_2025-09-25_00-01_x7k9.md",
      "call_id": "f58d7c18",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.nonzero Missing Nonzero Fill Values",
      "target": "pandas.core.arrays.sparse.SparseArray.nonzero",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `SparseArray.nonzero()` method fails to count positions filled with a nonzero fill_value, returning inconsistent results compared to `to_dense().nonzero()`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_nonzero_2025-09-25_00-07_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_nonzero_2025-09-25_00-07_x7k9.md",
      "call_id": "df5384c5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays.sparse.SparseArray.sum() ignores NaN in sp_values when skipna=False",
      "target": "pandas.core.arrays.sparse.SparseArray.sum()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `SparseArray.sum(skipna=False)` is called and the sparse values contain NaN, it incorrectly returns a numeric result instead of NaN. This violates the expected pandas behavior where `skipna=False` should propagate NaN values in reduction operations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_sum_skipna_2025-09-25_03-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_sum_skipna_2025-09-25_03-47_k3m9.md",
      "call_id": "5372516c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.common.is_full_slice - Doesn't Recognize Canonical Full Slice",
      "target": "pandas.core.common.is_full_slice",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_full_slice` function incorrectly returns `False` for `slice(None, None)`, even though this is the canonical Python representation of a full slice and is semantically equivalent to `slice(0, length)`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_common_is_full_slice_2025-09-25_01-42_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_common_is_full_slice_2025-09-25_01-42_k3m9.md",
      "call_id": "1e5063bb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.common.ensure_decoded - Invalid UTF-8 bytes cause UnicodeDecodeError",
      "target": "pandas.core.computation.common.ensure_decoded",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ensure_decoded` function crashes with `UnicodeDecodeError` when given bytes that are not valid UTF-8, instead of handling the error gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_ensure_decoded_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_ensure_decoded_2025-09-25_00-00_k3f9.md",
      "call_id": "3e1a89ad",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.common.ensure_decoded UnicodeDecodeError",
      "target": "pandas.core.computation.common.ensure_decoded",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ensure_decoded` function crashes with `UnicodeDecodeError` when given bytes that are not valid UTF-8, violating its contract to always return a `str`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_ensure_decoded_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_ensure_decoded_2025-09-25_15-30_x7k9.md",
      "call_id": "59fe0d02",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.common.ensure_decoded UnicodeDecodeError",
      "target": "pandas.core.computation.common.ensure_decoded",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ensure_decoded` function crashes with `UnicodeDecodeError` when given bytes containing invalid UTF-8 sequences, instead of handling the error gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_ensure_decoded_2025-09-25_03-17_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_ensure_decoded_2025-09-25_03-17_k3m9.md",
      "call_id": "2270e8e7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.eval Inconsistent Empty Expression Handling",
      "target": "pandas.core.computation.eval.eval",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `eval` function inconsistently handles empty vs whitespace-only expressions. Empty strings raise `ValueError`, but whitespace-only strings silently return `None`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_eval_whitespace_2025-09-25_15-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_eval_whitespace_2025-09-25_15-35_k3m9.md",
      "call_id": "3c1bd7ce",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.eval Whitespace-Only Expression Validation",
      "target": "pandas.core.computation.eval.eval",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`pd.eval()` accepts whitespace-only expressions (e.g., `\"   \\n\\t  \"`) and returns `None` instead of raising a `ValueError`, violating the documented contract that empty expressions should raise an error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_eval_whitespace_2025-09-25_01-50_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_eval_whitespace_2025-09-25_01-50_k3m9.md",
      "call_id": "b3392654",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name Exception Handling",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function fails to handle `TokenError` exceptions, violating its documented behavior of returning the name unmodified when conversion fails.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_06-47_qxvu.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_06-47_qxvu.md",
      "call_id": "de988ab8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function crashes with `TokenError` when given column names containing null bytes, instead of returning the name unmodified as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_clean_column_name_tokenerror_2025-09-25_09-48_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_clean_column_name_tokenerror_2025-09-25_09-48_k7m2.md",
      "call_id": "672a7150",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function crashes with `TokenError` when given column names containing null bytes, violating its documented behavior of returning names unmodified when they cannot be converted.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_00-00_x3k9.md",
      "call_id": "0dc30df9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`clean_column_name` crashes with `TokenError` when given column names containing null bytes, instead of returning the name unmodified as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_parsing_clean_column_name_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_parsing_clean_column_name_2025-09-25_00-00_k3m9.md",
      "call_id": "25d150ac",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function crashes with a `TokenError` when passed a column name containing null bytes, violating its documented behavior of returning the name unmodified when tokenization fails.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clean_column_name_2025-09-25_12-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clean_column_name_2025-09-25_12-00_k3f9.md",
      "call_id": "130b63ef",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError Not Caught",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function fails to catch `TokenError` exceptions, causing it to crash when given column names containing null bytes, despite its docstring claiming it handles tokenization failures gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_01-40_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_01-40_k3m9.md",
      "call_id": "84876e20",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.parsing.clean_column_name TokenError Not Caught",
      "target": "pandas.core.computation.parsing.clean_column_name",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clean_column_name` function crashes with `TokenError` when given strings containing null bytes, violating its documented contract which states it should return the name unmodified when tokenization fails.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_07-15_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_computation_parsing_clean_column_name_2025-09-25_07-15_x9k2.md",
      "call_id": "e69ec263",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.computation.scope.Scope.swapkey Fails to Remove Old Key",
      "target": "pandas.core.computation.scope.Scope.swapkey",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Scope.swapkey()` method is documented to \"Replace a variable name\" but it only adds the new key without removing the old key, violating its contract and causing both keys to coexist in the scope.",
      "package": "pandas",
      "file_name": "bug_report_pandas_scope_swapkey_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_scope_swapkey_2025-09-25_00-00_x7k9.md",
      "call_id": "7b863f5c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_python_int OverflowError",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function violates its documented contract by raising `OverflowError` instead of `TypeError` when given infinity values. The docstring states it \"Raises TypeError if the value isn't an int or can't be converted to one\", but passing `float('inf')` or `float('-inf')` results in an uncaught `OverflowError`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_dtypes_ensure_python_int_overflow_2025-09-25_08-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_dtypes_ensure_python_int_overflow_2025-09-25_08-14_k3m9.md",
      "call_id": "4229b988",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_python_int Raises Wrong Exception Type",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function raises `OverflowError` instead of `TypeError` when given infinity values, violating its documented contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_ensure_python_int_2025-09-25_05-19_kx3m.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_ensure_python_int_2025-09-25_05-19_kx3m.md",
      "call_id": "3c5a0dc6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_python_int Type Signature Mismatch",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function has a type signature `value: int | np.integer` but the implementation accepts float values, creating a mismatch between the declared API and actual behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_dtypes_common_ensure_python_int_2025-09-25_08-49_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_dtypes_common_ensure_python_int_2025-09-25_08-49_k3m9.md",
      "call_id": "7322a714",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_python_int Type Signature Mismatch",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function has a type signature `value: int | np.integer` but the implementation accepts float values, creating a mismatch between the declared API and actual behavior.",
      "package": "pandas",
      "file_name": "bug_report_ensure_python_int.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_ensure_python_int.md",
      "call_id": "f9a08c66",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_python_int raises OverflowError instead of TypeError",
      "target": "pandas.core.dtypes.common.ensure_python_int",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ensure_python_int` function raises `OverflowError` when given infinity values, but its docstring promises to raise `TypeError` for values that can't be converted to int.",
      "package": "pandas",
      "file_name": "bug_report_pandas_dtypes_ensure_python_int_overflow_2025-09-25_00-05_p9k1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_dtypes_ensure_python_int_overflow_2025-09-25_00-05_p9k1.md",
      "call_id": "57fe41a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.common.ensure_str Invalid UTF-8 Decode",
      "target": "pandas.core.dtypes.common.ensure_str",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ensure_str` function crashes when given bytes that are not valid UTF-8, violating its documented behavior of ensuring \"bytes and non-strings get converted into str objects.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_dtypes_ensure_str_2025-09-25_02-17_ifus.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_dtypes_ensure_str_2025-09-25_02-17_ifus.md",
      "call_id": "e279166a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.dtypes.inference.is_re_compilable crashes on invalid regex patterns",
      "target": "pandas.core.dtypes.inference.is_re_compilable",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_re_compilable()` function crashes with `re.PatternError` when given invalid regex patterns like `\"(\"`, `\")\"`, `\"?\"`, or `\"*\"`, instead of returning `False` as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_dtypes_is_re_compilable_2025-09-25_03-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_dtypes_is_re_compilable_2025-09-25_03-14_k3m9.md",
      "call_id": "33711592",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.groupby Categorical Ordering with sort=False",
      "target": "pandas.core.groupby.DataFrameGroupBy",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When grouping by a categorical column with `observed=False` and `sort=False`, pandas incorrectly orders the result index by placing observed categories first (in appearance order), followed by unobserved categories. This violates the categorical ordering and creates inconsistent behavior compared to `sort=True`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_groupby_categorical_sort_2025-09-25_11-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_groupby_categorical_sort_2025-09-25_11-20_k3m9.md",
      "call_id": "c61cc092",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.groupby Mean Violates Mathematical Invariant",
      "target": "pandas.core.groupby.GroupBy.mean()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `mean()` aggregation in pandas GroupBy can produce values that exceed the maximum value in the group, violating the fundamental mathematical property that min \u2264 mean \u2264 max.",
      "package": "pandas",
      "file_name": "bug_report_pandas_groupby_mean_2025-09-25_10-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_groupby_mean_2025-09-25_10-30_k3m9.md",
      "call_id": "b28078df",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.groupby diff() Precision Loss",
      "target": "pandas.core.groupby.DataFrameGroupBy.diff()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `diff()` method on grouped data produces different results than `diff()` on ungrouped data for large integer values (> 2^53). This occurs because grouped `diff()` converts values to float64 before computing differences, while ungrouped `diff()` computes differences in int64 before converting to float64, leading to different precision loss patterns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_groupby_diff_2025-09-25_05-21_xk4m.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_groupby_diff_2025-09-25_05-21_xk4m.md",
      "call_id": "50711bc6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers length_of_indexer Returns Negative Length",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns `-1` for empty slices where `start > stop` (with positive step), but these slices produce 0 elements when actually used.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "call_id": "d13a0a34",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers length_of_indexer negative step",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function incorrectly calculates the expected length for slices with negative steps when `start` or `stop` are `None`. This results in returning negative lengths or incorrect values instead of the actual slice length.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_06-15_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_06-15_x7k9.md",
      "call_id": "3f1189fd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.FixedWindowIndexer Invariant Violation",
      "target": "pandas.core.indexers.objects.FixedWindowIndexer.get_window_bounds",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`FixedWindowIndexer.get_window_bounds` violates the invariant that `start[i] <= end[i]` for all indices when `window_size=0` and `closed='neither'`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_FixedWindowIndexer_2025-09-25_00-00_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_FixedWindowIndexer_2025-09-25_00-00_c3d4.md",
      "call_id": "81ffa647",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Incorrect Length for Negative Step Slices",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns incorrect (negative) lengths for slices with negative steps when `start` and/or `stop` are `None`. For example, `slice(None, None, -1)` on a list of length 5 returns -5 instead of 5.",
      "package": "pandas",
      "file_name": "bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_k3x9.md",
      "call_id": "0ddae8b7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Length for Empty Ranges",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns negative lengths for empty `range` objects (where `stop <= start` with positive step), when it should return 0 to match Python's `len(range(...))` behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_indexers_length_of_indexer_range_2025-09-25_09-46_n0ko.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_indexers_length_of_indexer_range_2025-09-25_09-46_n0ko.md",
      "call_id": "ac33520c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Length for Empty Slices",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns negative lengths for slices with negative stop indices on empty targets, when it should return 0 to match Python's actual slicing behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_indexers_length_of_indexer_slice_2025-09-25_09-46_b1bv.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_indexers_length_of_indexer_slice_2025-09-25_09-46_b1bv.md",
      "call_id": "3d74f301",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Length for Out-of-Bounds Slice",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative lengths for slices with out-of-bounds start indices, which is nonsensical. Lengths must be non-negative.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_out_of_bounds_2025-09-25_01-31_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_out_of_bounds_2025-09-25_01-31_x7k9.md",
      "call_id": "442d8807",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Out-of-Bounds Slice",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative lengths for slices with out-of-bounds negative indices, violating the fundamental property that `length_of_indexer(indexer, target) == len(target[indexer])`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_negative_oob_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_negative_oob_2025-09-25_00-00_x3k9.md",
      "call_id": "3dae2709",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Return Value",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative values when given a slice with `start > len(target)`, instead of returning 0 as expected.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_a1b2.md",
      "call_id": "d1264301",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Negative Step Slice",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns incorrect (negative) values for slices with negative steps and None start/stop values, such as `slice(None, None, -1)` (equivalent to `[::-1]`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_negative_step_2025-09-25_10-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_negative_step_2025-09-25_10-16_k3m9.md",
      "call_id": "5e77884b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Range Empty Check",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative lengths for empty ranges (where start > stop), violating the fundamental property that `length_of_indexer(indexer, target) == len(indexer)`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_range_2025-09-25_00-01_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_range_2025-09-25_00-01_k9x3.md",
      "call_id": "ab85303f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Returns Negative Length",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer` returns negative values for certain valid slices, when it should return 0 or positive integers representing the actual length of the sliced result.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexers_length_of_indexer_2025-09-25_00-00_a7f2.md",
      "call_id": "b0ed9cd3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Returns Negative Length",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`length_of_indexer()` returns negative values for empty slices where `start > stop`, violating the fundamental property that length must be non-negative.",
      "package": "pandas",
      "file_name": "bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_x7k9.md",
      "call_id": "d0ef1143",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Returns Negative Length",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer()` function incorrectly returns negative values when computing the length of a slice where `start >= len(target)`. In such cases, the actual slice produces an empty result (length 0), but the function returns negative numbers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_length_of_indexer_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_length_of_indexer_2025-09-25_00-00_k3m9.md",
      "call_id": "93e63963",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.length_of_indexer Returns Negative Values",
      "target": "pandas.core.indexers.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative integers for slices that produce empty results, instead of returning 0. This violates the fundamental invariant that a length cannot be negative.",
      "package": "pandas",
      "file_name": "bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_indexers_length_of_indexer_2025-09-25_00-00_k3m9.md",
      "call_id": "f7961b66",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.utils.length_of_indexer Incorrect Length for Negative Step Slices",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function returns negative lengths when computing the length of slices with negative steps and `None` for start/stop values (e.g., `slice(None, None, -1)`). This causes incorrect validation in `check_setitem_lengths` and violates the function's documented contract of returning the expected length.",
      "package": "pandas",
      "file_name": "bug_report_length_of_indexer_negative_step_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_length_of_indexer_negative_step_2025-09-25_14-30_k3m9.md",
      "call_id": "e9b81516",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexers.utils.length_of_indexer Returns Negative Length",
      "target": "pandas.core.indexers.utils.length_of_indexer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `length_of_indexer` function incorrectly returns negative values when computing the length of a slice with a negative stop index on an empty or small target sequence, violating its contract to return \"the expected length of target[indexer]\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_length_of_indexer_2025-09-25_10-47_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_length_of_indexer_2025-09-25_10-47_k3x9.md",
      "call_id": "134e7019",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexes Variable Scoping Bug",
      "target": "pandas.core.indexes.api.union_indexes._find_common_index_dtype",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The nested function `_find_common_index_dtype` inside `union_indexes` uses the wrong variable name, referencing the outer scope `indexes` instead of its parameter `inds`, leading to incorrect behavior when the function is called with different arguments.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexes_api_scoping_2025-09-25_04-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexes_api_scoping_2025-09-25_04-45_x7k9.md",
      "call_id": "8bcfe14f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexes.api.safe_sort_index Documentation Mismatch",
      "target": "pandas.core.indexes.api.safe_sort_index",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `safe_sort_index` function's docstring claims it \"Returns the sorted index\" but it may actually return an unsorted index when the elements are not comparable (e.g., mixed int and string types).",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_indexes_safe_sort_index_2025-09-25_02-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_indexes_safe_sort_index_2025-09-25_02-15_k3m9.md",
      "call_id": "621999f2",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.indexes.api.union_indexes Fails to Remove Duplicates",
      "target": "pandas.core.indexes.api.union_indexes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `union_indexes` function fails to remove duplicate values when all input indexes are equal, violating the expected behavior of a union operation which should return unique elements.",
      "package": "pandas",
      "file_name": "bug_report_pandas_union_indexes_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_union_indexes_2025-09-25_00-00_k3f9.md",
      "call_id": "d7b43aee",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Categorical Missing Value Corruption",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The interchange protocol corrupts categorical data with missing values. Code -1 (the pandas sentinel for missing categorical values) is incorrectly mapped to a valid category instead of being preserved as NaN.",
      "package": "pandas",
      "file_name": "bug_report_categorical_sentinel_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_categorical_sentinel_2025-09-25_00-00_k3m9.md",
      "call_id": "1081ddb0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Categorical Null Values Corrupted",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Converting categorical data with null values through the DataFrame interchange protocol corrupts null values, replacing them with valid category values. The modulo operation used to handle out-of-bounds codes inadvertently transforms the null sentinel value (-1) into a valid category index.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_12-00_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_12-00_a7k3.md",
      "call_id": "2686efd9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Categorical Null Values Lost",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When converting categorical data with null values through the DataFrame interchange protocol, null values are incorrectly mapped to actual category values instead of being preserved as NaN. This causes silent data corruption where null values become non-null categorical values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_nulls_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_nulls_2025-09-25_14-30_k3m9.md",
      "call_id": "2d3ceed5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Categorical Sentinel Value Corruption",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `categorical_column_to_series` function incorrectly handles sentinel values (specifically -1) in categorical codes by using modulo arithmetic, which silently converts null/missing values into incorrect category values instead of preserving them as NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_categorical_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_categorical_2025-09-25_00-00_x7k3.md",
      "call_id": "473ce4c9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Column Name Type Conversion",
      "target": "pandas.core.interchange",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The DataFrame interchange protocol converts non-string column names to strings during `__dataframe__()` creation, but doesn't restore the original column name types when converting back via `from_dataframe()`. This violates the roundtrip property: `from_dataframe(df.__dataframe__()) \u2260 df` when column names are not strings.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_column_names_2025-09-25_01-19_j0c8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_column_names_2025-09-25_01-19_j0c8.md",
      "call_id": "f0371ea9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Crashes on Strings with Lone Surrogates",
      "target": "pandas.core.interchange.column.PandasColumn._get_data_buffer",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The pandas interchange protocol implementation crashes with a `UnicodeEncodeError` when attempting to convert DataFrames containing strings with lone surrogate characters (e.g., `\\ud800`). While such strings are uncommon, they are legal in Python and can occur when reading files with broken encodings.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_surrogate_2025-09-25_12-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_surrogate_2025-09-25_12-00_k3x9.md",
      "call_id": "935f7117",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Empty DataFrame/Column Chunking Crash",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_chunks` method crashes with `ValueError: range() arg 3 must not be zero` when attempting to chunk an empty DataFrame or Series with `n_chunks > 1`. This bug affects both `PandasDataFrameXchg` and `PandasColumn` classes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_chunking_2025-09-25_00-01_m8q4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_chunking_2025-09-25_00-01_m8q4.md",
      "call_id": "92d66daf",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Get Chunks Creates Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_chunks` method creates empty chunks when requested chunk count exceeds the number of rows in the DataFrame. This wastes computation resources and violates the reasonable expectation that chunks should contain data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_00-10_q4r9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_00-10_q4r9.md",
      "call_id": "4a0686b6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Loses Nullable Integer Dtype",
      "target": "pandas.core.interchange.from_dataframe.set_nulls",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The pandas interchange protocol loses nullable integer dtypes (Int64, Int32, etc.) during round-trip conversion, incorrectly converting them to float64 when null values are present. This causes data type information loss.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_nullable_int_2025-09-25_12-15_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_nullable_int_2025-09-25_12-15_x7m9.md",
      "call_id": "c5b67c48",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Nullable Integer Dtype Loss",
      "target": "pandas.core.interchange.from_dataframe.set_nulls",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Nullable integer dtypes (`Int64`, `Int32`, etc.) are incorrectly converted to `float64` during round-trip operations through the pandas interchange protocol, violating the expectation that data interchange should preserve dtype information.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_nullable_int_2025-09-25_10-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_nullable_int_2025-09-25_10-47_k3m9.md",
      "call_id": "60ff8404",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Object Dtype Integers Not Supported",
      "target": "pandas.core.interchange",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The DataFrame interchange protocol crashes when attempting to convert DataFrames containing integers outside the int64 range (-2^63 to 2^63-1). These values are stored with object dtype by pandas, which causes `__dataframe__()` to succeed but `from_dataframe()` to fail with NotImplementedError.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_object_dtype_2025-09-25_12-30_k8x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_object_dtype_2025-09-25_12-30_k8x9.md",
      "call_id": "a9107b59",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange Unicode Surrogate Encoding Crash",
      "target": "pandas.core.interchange.column.PandasColumn._get_data_buffer",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The pandas interchange protocol crashes with a `UnicodeEncodeError` when attempting to encode strings containing Unicode surrogate characters (U+D800-U+DFFF) during DataFrame interchange conversion.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_unicode_surrogates_2025-09-25_02-52_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_unicode_surrogates_2025-09-25_02-52_x7k9.md",
      "call_id": "998bef82",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange categorical_column_to_series Modulo Silently Corrupts Data",
      "target": "pandas.core.interchange.from_dataframe.categorical_column_to_series",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `categorical_column_to_series` function uses modulo arithmetic (`codes % len(categories)`) to index into categories, which silently remaps out-of-bounds categorical codes instead of raising an error. This causes data corruption when the interchange protocol provides invalid codes.",
      "package": "pandas",
      "file_name": "bug_report_interchange_categorical_modulo_2025-09-25_07-46_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_interchange_categorical_modulo_2025-09-25_07-46_x3k9.md",
      "call_id": "12eac9e4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange get_chunks Creates Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_chunks()` method in `PandasDataFrameXchg` creates empty chunks when `n_chunks >= n_rows`, violating the reasonable expectation that chunking should not produce empty data chunks.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_08-51_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_08-51_k3x9.md",
      "call_id": "1cacb7cc",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange get_chunks Incorrect Range Calculation",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_chunks` method in both `PandasDataFrameXchg` and `PandasColumn` uses an incorrect range calculation that can produce chunk boundaries extending beyond the data size. While pandas' `iloc` handles this gracefully, the implementation is mathematically incorrect and could cause issues in other DataFrame implementations following the interchange protocol.",
      "package": "pandas",
      "file_name": "bug_report_interchange_chunking_range_2025-09-25_07-46_p2k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_interchange_chunking_range_2025-09-25_07-46_p2k9.md",
      "call_id": "3a684c6c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange get_chunks Produces Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_chunks` method produces empty chunks when the requested number of chunks cannot evenly divide the DataFrame/Column size. This bug affects both `PandasDataFrameXchg.get_chunks` (dataframe.py:98-113) and `PandasColumn.get_chunks` (column.py:250-265).",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_18-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_18-30_k3x9.md",
      "call_id": "20c73f34",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange.parse_datetime_format_str Invalid Timezone Handling",
      "target": "pandas.core.interchange.from_dataframe.parse_datetime_format_str",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parse_datetime_format_str` function crashes with unhelpful error messages when given invalid timezone strings through the DataFrame interchange protocol. This can happen when receiving data from external libraries with malformed timezone information.",
      "package": "pandas",
      "file_name": "bug_report_pandas_interchange_timezone_2025-09-25_00-10_a3b7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_interchange_timezone_2025-09-25_00-10_a3b7.md",
      "call_id": "7347a680",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.internals.base.ensure_np_dtype Fixed-Length Unicode Strings",
      "target": "pandas.core.internals.base.ensure_np_dtype",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ensure_np_dtype` function fails to convert fixed-length Unicode string dtypes (e.g., `dtype('<U10')`, `dtype('<U100')`) to `object` dtype, while it correctly converts the variable-length Unicode dtype `dtype('<U')` (returned by `np.dtype(str)`). This inconsistency can cause downstream issues in pandas internals that expect all string types to be represented as `object` dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_internals_ensure_np_dtype_2025-09-25_03-52_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_internals_ensure_np_dtype_2025-09-25_03-52_x7k9.md",
      "call_id": "7f7e6538",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.internals.concat Complex dtype NaN",
      "target": "pandas.core.internals.concat._dtype_to_na_value",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_dtype_to_na_value` function crashes when called with complex dtypes (complex64, complex128) because it attempts to construct a complex number from the string \"NaN\", which is invalid in Python/NumPy.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_internals_concat_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_internals_concat_2025-09-25_14-30_k3x9.md",
      "call_id": "8f35498d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.methods format_percentiles produces 'nan%' labels",
      "target": "pandas.core.methods.describe.format_percentiles",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function in pandas.core.methods.describe produces invalid 'nan%' labels when given percentiles with very small differences, causing corrupted output in `Series.describe()` and `DataFrame.describe()`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_format_percentiles_nan_2025-09-25_01-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_format_percentiles_nan_2025-09-25_01-30_k3m9.md",
      "call_id": "d6c26f17",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.methods.describe Quantiles Not Sorted for Extreme Int64 Values",
      "target": "pandas.core.methods.describe.describe_numeric_1d",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `describe()` is called on a Series containing extreme int64 values, the computed quantiles are not sorted in ascending order. Specifically, the 25% quantile can be greater than the 50% and 75% quantiles, violating the fundamental property that quantiles must be monotonically increasing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_describe_quantiles_2025-09-25_08-20_1i8x.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_describe_quantiles_2025-09-25_08-20_1i8x.md",
      "call_id": "ca5c6901",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.methods.describe.format_percentiles - Violates Uniqueness Property for Tiny Differences",
      "target": "pandas.core.methods.describe.format_percentiles",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates two documented properties when handling extremely small values (below approximately 1e-10): 1. **Uniqueness violation**: Different percentiles collapse to the same formatted string, violating the claim that \"if any two elements of percentiles differ, they remain different after rounding\" 2. **Rounding to 0%**: Non-zero percentiles get rounded to \"0%\", violating the claim that \"no entry is *rounded* to 0% or 100%\" unless exactly 0.0 or 1.0",
      "package": "pandas",
      "file_name": "bug_report_pandas_methods_format_percentiles_2025-09-25_07-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_methods_format_percentiles_2025-09-25_07-15_k3m9.md",
      "call_id": "c37aa452",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.methods.describe.format_percentiles Uniqueness Preservation Violation",
      "target": "pandas.core.methods.describe.format_percentiles",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates its documented contract by failing to preserve uniqueness when formatting very small percentile values (around 1e-38 or smaller). The function's docstring explicitly promises \"if any two elements of percentiles differ, they remain different after rounding\", but this property fails for extremely small but distinct values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_format_percentiles_uniqueness_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_format_percentiles_uniqueness_2025-09-25_k3x9.md",
      "call_id": "d31414ee",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.methods.to_dict 'tight' Orient Unused Variable",
      "target": "pandas.core.methods.to_dict",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_dict` function's 'tight' orient implementation computes a `data` variable using an optimized helper method but never uses it, instead recomputing the data less efficiently. This wastes computation and bypasses important performance optimizations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_to_dict_tight_2025-09-25_12-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_to_dict_tight_2025-09-25_12-00_k3x9.md",
      "call_id": "c9e0cd5c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops Kleene Operations RecursionError",
      "target": "pandas.core.ops.kleene_and",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When both `left_mask` and `right_mask` are `None`, the Kleene logic functions (`kleene_and`, `kleene_or`, `kleene_xor`) enter infinite recursion and crash with `RecursionError`. According to the docstring, \"Only one of these may be None\", but the functions don't validate this precondition and instead infinitely swap arguments.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_kleene_recursion_2025-09-25_09-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_kleene_recursion_2025-09-25_09-46_k3m9.md",
      "call_id": "8f8e72a3",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops kleene_and/kleene_or/kleene_xor RecursionError",
      "target": "pandas.core.ops.kleene_and",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The kleene logic functions (`kleene_and`, `kleene_or`, `kleene_xor`) in `pandas.core.ops` cause infinite recursion and crash with a `RecursionError` when called with scalar boolean arguments and `None` masks.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_kleene_and_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_kleene_and_2025-09-25_00-00_k3x9.md",
      "call_id": "8163b3a7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops._masked_arith_op rpow with base=1",
      "target": "pandas.core.ops.array_ops._masked_arith_op",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using `_masked_arith_op` with the `rpow` operator and a base of 1, the function incorrectly returns NaN instead of 1.0. Since 1**x = 1 for any value of x (including NaN), the result should always be 1.0, not NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_rpow_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_rpow_2025-09-25_12-00_x7k9.md",
      "call_id": "95b5c859",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops._maybe_match_name Array Comparison",
      "target": "pandas.core.ops.common._maybe_match_name",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When both objects have numpy array names with more than one element that are equal, `_maybe_match_name` incorrectly returns `None` instead of returning the shared name.",
      "package": "pandas",
      "file_name": "bug_report_pandas_ops_maybe_match_name_2025-09-25_15-30_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_ops_maybe_match_name_2025-09-25_15-30_k9x2.md",
      "call_id": "ccd3fa7a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops.kleene_xor Commutativity Violation",
      "target": "pandas.core.ops.kleene_xor",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `kleene_xor` function violates commutativity by returning different result values for `X ^ NA` vs `NA ^ X` when both are masked (NA), contradicting the explicit claim in the code comment that \"A ^ B == B ^ A\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_kleene_xor_2025-09-25_03-23_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_kleene_xor_2025-09-25_03-23_k9x2.md",
      "call_id": "5ab625de",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops.kleene_xor NA ^ NA Returns NA Instead of False",
      "target": "pandas.core.ops.kleene_xor",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `kleene_xor` function incorrectly returns NA for `NA ^ NA` when it should return False, violating the fundamental XOR property that `x ^ x = False` for all x.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_kleene_xor_2025-09-25_02-20_wjum.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_kleene_xor_2025-09-25_02-20_wjum.md",
      "call_id": "bb7b39de",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.ops.make_flex_doc Missing 'div' Support",
      "target": "pandas.core.ops.make_flex_doc",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`make_flex_doc()` raises `KeyError` for the operation name 'div', despite 'div' being a documented flexible wrapper method on both Series and DataFrame alongside other operations like 'add', 'sub', 'mul', 'truediv', etc.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_ops_make_flex_doc_div_2025-09-25_08-16_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_ops_make_flex_doc_div_2025-09-25_08-16_k9m3.md",
      "call_id": "4ef75b4c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile qcut() Uneven Quartile Distribution",
      "target": "pandas.core.reshape.tile.qcut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `qcut()` function with `q=4` and `duplicates='drop'` produces significantly uneven quartiles when the input data contains duplicate values. For example, with 5 values including duplicates, it creates quartiles of sizes [3, 1, 1], where the difference between largest and smallest quartiles is 2, violating the expected equal-sized distribution property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_qcut_uneven_quartiles_2025-09-25_14-31_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_qcut_uneven_quartiles_2025-09-25_14-31_x7n2.md",
      "call_id": "237a60a5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut - Crash with Mixed Sign Tiny Floats",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pd.cut()` function crashes with a `ValueError` when given valid input containing very small positive and negative float values, rather than handling them gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_tiny_floats_crash_2025-09-25_05-19_x7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_tiny_floats_crash_2025-09-25_05-19_x7m2.md",
      "call_id": "8d87459d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut - Data Loss with Tiny Float Values",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `pd.cut()` function silently loses all data (returns all NaN values) when binning very small positive float values near machine epsilon, resulting in silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_tiny_floats_data_loss_2025-09-25_05-18_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_tiny_floats_data_loss_2025-09-25_05-18_k3f9.md",
      "call_id": "0b781335",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut - Duplicate Bins from Small Value Ranges",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.cut()` crashes with a `ValueError` about duplicate bins when called with an integer number of bins on arrays with extremely small value ranges. The underlying issue is that `np.linspace()` produces duplicate values when the range is smaller than floating-point precision allows, but `pd.cut()` doesn't automatically apply the `duplicates='drop'` behavior that users might expect.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_duplicate_bins_2025-09-25_00-01_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_duplicate_bins_2025-09-25_00-01_k9x3.md",
      "call_id": "9f1fe9f4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut Precision Causes Values Outside Bin Boundaries",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `pd.cut()` function with default `precision=3` can assign values to bins that don't actually contain them. When bin boundaries are rounded for display/storage, values near the boundary may fall outside their assigned bin's interval.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_precision_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_precision_2025-09-25_14-30_x7k9.md",
      "call_id": "96ecf36e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut Precision Handling",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.cut()` silently converts all valid numeric data to NaN when the data range is extremely small (< 1e-300), due to a precision handling bug in the `_round_frac` function that produces NaN bin edges.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_precision_2025-09-25_11-30_k4x7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_precision_2025-09-25_11-30_k4x7.md",
      "call_id": "ef0f0ec2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.cut Silently Returns All NaN for Tiny Data Ranges",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.cut()` silently returns all NaN values with 0 categories when the data range is extremely small (on the order of 1e-308), instead of either binning the data or raising an informative error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_tiny_range_2025-09-25_04-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_tiny_range_2025-09-25_04-16_k3m9.md",
      "call_id": "daa788bf",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.qcut Numerical Precision Issues and Unequal Bins",
      "target": "pandas.core.reshape.tile.qcut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `qcut` function has two related issues when dealing with data near float64 precision limits or with many duplicate values: 1. Crashes with ValueError when quantile boundaries result in extremely small differences 2. Produces severely unequal bin sizes despite claiming to create \"equal-sized buckets\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_reshape_qcut_precision_2025-09-25_07-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_reshape_qcut_precision_2025-09-25_07-45_x7k9.md",
      "call_id": "cf40ed0a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.reshape.tile.qcut crashes with duplicates='drop' on skewed data",
      "target": "pandas.core.reshape.tile.qcut",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.qcut()` with `duplicates='drop'` crashes with `ValueError: missing values must be missing in the same location both left and right sides` when applied to data with many duplicate values and quantile bins that collapse to nearly identical edges.",
      "package": "pandas",
      "file_name": "bug_report_pandas_qcut_duplicates_drop_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_qcut_duplicates_drop_2025-09-25_12-00_x7k9.md",
      "call_id": "fe3abecf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sample Error Message Typo",
      "target": "pandas.core.sample.preprocess_weights",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Error message in `preprocess_weights` function contains a typo: \"many\" instead of \"may\" on line 70.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_sample_typo_2025-09-25_08-11_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_sample_typo_2025-09-25_08-11_x3k9.md",
      "call_id": "889aa7be",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sample Typo in Error Message",
      "target": "pandas.core.sample.preprocess_weights",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message for negative weights contains a typo: \"many\" instead of \"may\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_sample_typo_2025-09-25_00-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_sample_typo_2025-09-25_00-45_k3m9.md",
      "call_id": "7a914234",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sorting.compress_group_index Uniqueness Violation",
      "target": "pandas.core.sorting.compress_group_index",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `compress_group_index` function violates its uniqueness invariant when processing unsorted arrays containing only distinct negative values. Different input values are incorrectly mapped to the same compressed ID.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_sorting_compress_group_index_2025-09-25_07-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_sorting_compress_group_index_2025-09-25_07-45_k3m9.md",
      "call_id": "2362af33",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray argmin/argmax Crash on All Fill Values",
      "target": "pandas.core.arrays.sparse.array.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `argmin()` and `argmax()` methods crash with `ValueError` when all elements in the SparseArray equal the fill value (i.e., when `npoints == 0`), instead of returning a valid index.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_argmin_2025-09-25_10-18_m7p2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_argmin_2025-09-25_10-18_m7p2.md",
      "call_id": "bbb52cce",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray argmin/argmax Empty Values",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When all values in a SparseArray are equal to the fill_value (resulting in zero sparse values), calling `argmin()` or `argmax()` raises a ValueError instead of returning a valid index.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_sparse_argmin_argmax_2025-09-25_02-19_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_sparse_argmin_argmax_2025-09-25_02-19_k3x9.md",
      "call_id": "e65fa19f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray argmin/argmax ValueError on All-Fill-Value Arrays",
      "target": "pandas.core.arrays.sparse.SparseArray.argmin",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "SparseArray.argmin() and argmax() raise ValueError when called on an array where all values equal the fill_value, instead of returning the expected index like numpy arrays do.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_argmin_2025-09-25_01-21_nirr.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_argmin_2025-09-25_01-21_nirr.md",
      "call_id": "ee7e2e00",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray fill_value Setter Mutates Data",
      "target": "pandas.core.arrays.sparse.SparseArray.fill_value",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Setting the `fill_value` property of a SparseArray can unexpectedly mutate the logical data represented by the array when the original data contains values equal to the original fill_value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_fill_value_setter_2025-09-25_01-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_fill_value_setter_2025-09-25_01-30_k3m9.md",
      "call_id": "e604e137",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.astype Contract Violation",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `SparseArray.astype()` method violates its documented contract by returning a regular numpy array instead of a SparseArray when converting to a non-SparseDtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_sparse_astype_2025-09-25_08-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_sparse_astype_2025-09-25_08-16_k3m9.md",
      "call_id": "8acb1425",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.astype Returns Wrong Type",
      "target": "pandas.core.sparse.SparseArray.astype",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `astype()` method of `SparseArray` violates its documented contract by returning a numpy ndarray instead of a SparseArray when converting to non-SparseDtype types.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_astype_2025-09-25_00-00_m7w2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_astype_2025-09-25_00-00_m7w2.md",
      "call_id": "df592e67",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.astype() Contract Violation",
      "target": "pandas.core.sparse.api.SparseArray.astype",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `astype()` method's docstring explicitly states \"The output will always be a SparseArray\", but when converting to a non-SparseDtype (e.g., `np.float64`), it returns a numpy ndarray instead.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_astype_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_astype_2025-09-25_00-00_x7k9.md",
      "call_id": "6b22a2a8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.sparse.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method of `SparseArray` enters infinite recursion when called on arrays with non-null fill values, causing a RecursionError crash.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_cumsum_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_cumsum_2025-09-25_00-00_k3x9.md",
      "call_id": "7ce9933e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.cumsum Infinite Recursion",
      "target": "pandas.core.arrays.sparse.array.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `cumsum()` method on `SparseArray` enters infinite recursion when the fill value is not null (e.g., integer arrays with fill_value=0), causing a `RecursionError` instead of computing the cumulative sum.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_cumsum_2025-09-25_10-18_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_cumsum_2025-09-25_10-18_k3x9.md",
      "call_id": "81e4c5dc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.cumsum() Infinite Recursion",
      "target": "pandas.core.sparse.api.SparseArray.cumsum",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `cumsum()` on a SparseArray causes infinite recursion and crashes with RecursionError when the fill value is not null.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_cumsum_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_cumsum_2025-09-25_00-00_k3m9.md",
      "call_id": "c025d08e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.density Division by Zero",
      "target": "pandas.core.sparse.SparseArray.density",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `density` property of `SparseArray` raises `ZeroDivisionError` when called on an empty array.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_density_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_density_2025-09-25_00-00_k3j9.md",
      "call_id": "29e6daaf",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.mean Incorrect with NaN Fill Value",
      "target": "pandas.core.sparse.SparseArray.mean",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `mean()` method of `SparseArray` returns an incorrect result when the fill value is NaN and the sparse values array contains NaN values. It ignores NaN values in `sp_values` when computing the mean, returning a non-NaN result when it should return NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparse_mean_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparse_mean_2025-09-25_00-00_x7k2.md",
      "call_id": "a68703f7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.SparseArray.nonzero() Returns Incorrect Indices When fill_value Is Non-Zero",
      "target": "pandas.core.arrays.sparse.SparseArray.nonzero()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `nonzero()` method of `SparseArray` returns incorrect indices when the `fill_value` is non-zero. It only checks sparse values for non-zero, ignoring that the fill_value itself might be non-zero and should be included in the result.",
      "package": "pandas",
      "file_name": "bug_report_pandas_SparseArray_nonzero_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_SparseArray_nonzero_2025-09-25_15-30_x7k9.md",
      "call_id": "9b499695",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.sparse.api.SparseArray.astype returns ndarray instead of SparseArray",
      "target": "pandas.core.sparse.api.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`SparseArray.astype()` violates its documented contract by returning a `numpy.ndarray` instead of a `SparseArray` when converting to a non-SparseDtype (e.g., `np.int64`, `np.float32`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_sparsearray_astype_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sparsearray_astype_2025-09-25_15-30_k3m9.md",
      "call_id": "752a4d8f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings cat_core Empty List Type Error",
      "target": "pandas.core.strings.accessor.cat_core",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`cat_core` and `cat_safe` return an integer `0` instead of a numpy array when given an empty list, violating their documented return type contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_strings_cat_core_empty_list_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_strings_cat_core_empty_list_2025-09-25_00-00_x7k9.md",
      "call_id": "62620cd7",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings count() Missing regex Parameter",
      "target": "pandas.core.strings.accessor.StringMethods.count",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `count()` method always treats patterns as regex but lacks a `regex=False` parameter, making it impossible to count literal regex metacharacters. This is inconsistent with `replace()` which provides `regex=False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_strings_count_2025-09-25_10-21_br78.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_strings_count_2025-09-25_10-21_br78.md",
      "call_id": "a6f9c858",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings rsplit() Missing regex Parameter",
      "target": "pandas.core.strings.accessor.StringMethods.rsplit",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `rsplit()` method lacks the `regex` parameter that its mirror operation `split()` has, creating an API inconsistency between two closely related methods that perform the same operation from different directions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_strings_rsplit_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_strings_rsplit_2025-09-25_00-00_x3k9.md",
      "call_id": "a495a754",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings rsplit() Missing regex Parameter",
      "target": "pandas.core.strings.accessor.StringMethods.rsplit",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `rsplit()` method lacks a `regex` parameter while its counterpart `split()` has one, creating API inconsistency between two related methods.",
      "package": "pandas",
      "file_name": "bug_report_pandas_strings_rsplit_2025-09-25_10-22_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_strings_rsplit_2025-09-25_10-22_x9k2.md",
      "call_id": "0bf7d574",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings slice_replace Invalid Behavior with Empty Slices",
      "target": "pandas.core.strings.accessor.StringMethods.slice_replace",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `slice_replace` method deviates from Python's standard slicing behavior when `start > stop`, incorrectly adjusting the stop position and producing wrong results instead of following Python's empty slice semantics.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_slice_replace_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_slice_replace_2025-09-25_14-30_k3m9.md",
      "call_id": "220577e4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings slice_replace empty slice handling",
      "target": "pandas.core.strings.object_array.ObjectStringArrayMixin._str_slice_replace",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `slice_replace` is called with `start > stop` (creating an empty slice), it incorrectly treats this as an insertion at position `start`, ignoring the `stop` parameter, instead of following the literal slice replacement semantics.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_slice_replace_2025-09-25_01-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_slice_replace_2025-09-25_01-14_k3m9.md",
      "call_id": "e857c740",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings slice_replace with None boundaries",
      "target": "pandas.core.strings.object_array.ObjectStringArrayMixin._str_slice_replace",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_str_slice_replace` method incorrectly handles `None` values for `start` and `stop` parameters, returning an empty string instead of preserving the original string content outside the slice boundaries.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_slice_replace_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_slice_replace_2025-09-25_00-00_k3x9.md",
      "call_id": "34d21553",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings._str_index and _str_rindex Incorrect end Parameter Handling",
      "target": "pandas.core.strings.object_array.ObjectStringArrayMixin._str_index",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_str_index` and `_str_rindex` methods in `object_array.py` have identical code in both branches of their conditional, causing incorrect behavior when `end=0` or `end=False` is passed. The methods should omit the `end` parameter when `end is None`, but currently pass it unconditionally in the else branch.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_index_end_2025-09-25_01-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_index_end_2025-09-25_01-48_k3m9.md",
      "call_id": "6be582d2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings.accessor.StringMethods.slice_replace - Incorrect behavior when start >= stop",
      "target": "pandas.core.strings.accessor.StringMethods.slice_replace",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`slice_replace()` deviates from documented behavior and Python slicing semantics when `start >= stop`. Instead of following the documented pattern `s[:start] + repl + s[stop:]`, it uses `s[:start] + repl + s[start:]`, effectively ignoring the `stop` parameter.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_strings_slice_replace_2025-09-25_05-51_ca90.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_strings_slice_replace_2025-09-25_05-51_ca90.md",
      "call_id": "90085e81",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings.accessor.cat_core Null Byte Separator Silently Dropped",
      "target": "pandas.core.strings.accessor.cat_core",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cat_core` function silently drops null byte (`\\x00`) characters when used as separators, resulting in incorrect concatenation. All other characters work correctly, but null bytes are completely omitted from the output.",
      "package": "pandas",
      "file_name": "bug_report_pandas_strings_cat_core_null_byte_2025-09-25_09-47_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_strings_cat_core_null_byte_2025-09-25_09-47_x8k3.md",
      "call_id": "c8fefc62",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hash_tuples Empty List Handling",
      "target": "pandas.core.util.hashing.hash_tuples",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`hash_tuples()` crashes with a `TypeError` when given an empty list, while the related `hash_array()` function handles empty inputs gracefully. This inconsistency violates the principle of least surprise.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_hash_tuples_2025-09-25_01-18_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_hash_tuples_2025-09-25_01-18_k3m9.md",
      "call_id": "1de283aa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing Complex64 Handling",
      "target": "pandas.core.util.hashing._hash_ndarray",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_hash_ndarray` function incorrectly handles `complex64` arrays differently from `complex128` arrays due to an overly-specific type check, leading to inconsistent hashing behavior between complex types.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hashing_complex64_2025-09-25_10-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hashing_complex64_2025-09-25_10-14_k3m9.md",
      "call_id": "461da7c1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing Complex64 Inconsistent Hashing",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hash_array` function handles `complex128` arrays specially by splitting them into real and imaginary parts and using the formula `hash_real + 23 * hash_imag`, but it does not apply the same logic to `complex64` arrays. This creates an inconsistency where equivalent complex numbers in different precisions produce different hashes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_hashing_complex64_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_hashing_complex64_2025-09-25_00-00_k3x9.md",
      "call_id": "8af7d5e5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing Undocumented hash_key Length Requirement",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_key` parameter in `hash_array()` and `hash_pandas_object()` must be exactly 16 bytes when UTF-8 encoded, but this requirement is undocumented and not validated at the API level. This causes confusing ValueError crashes deep in the call stack when users provide hash keys of different lengths.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_hashing_hash_key_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_hashing_hash_key_2025-09-25_00-00_k3m9.md",
      "call_id": "abab510d",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing UnicodeEncodeError with Surrogate Characters",
      "target": "pandas.core.util.hashing._hash_ndarray",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`hash_array()` raises `UnicodeEncodeError` when hashing object arrays containing Unicode surrogate characters (U+D800 to U+DFFF), instead of handling them gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_hashing_unicode_surrogates_2025-09-25_01-48_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_hashing_unicode_surrogates_2025-09-25_01-48_k9x2.md",
      "call_id": "acecbc81",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing hash_key Validation",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_key` parameter in hashing functions requires exactly 16 bytes when encoded, but this constraint is not documented and validation only occurs deep in the implementation, producing a confusing error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hashing_hash_key_validation_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hashing_hash_key_validation_2025-09-25_00-00_k3x9.md",
      "call_id": "1ad368f8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.combine_hash_arrays Array Length Mismatch",
      "target": "pandas.core.util.hashing.combine_hash_arrays",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`combine_hash_arrays` crashes with a confusing ValueError when given arrays of different lengths, despite not documenting or validating this precondition.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_hashing_combine_hash_arrays_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_hashing_combine_hash_arrays_2025-09-25_00-00_k3m9.md",
      "call_id": "7ba2e53e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.combine_hash_arrays Bypasses Assertion on Empty Iterator",
      "target": "pandas.core.util.hashing.combine_hash_arrays",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `combine_hash_arrays` function contains an assertion to validate that the number of arrays provided matches the `num_items` parameter. However, this assertion is bypassed when an empty iterator is provided, allowing invalid inputs to succeed silently.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_util_combine_hash_arrays_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_util_combine_hash_arrays_2025-09-25_k3m9.md",
      "call_id": "954d65a7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.combine_hash_arrays Empty Iterator Validation",
      "target": "pandas.core.util.hashing.combine_hash_arrays",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `combine_hash_arrays` function fails to validate the `num_items` parameter when passed an empty iterator, allowing invalid inputs to silently succeed instead of raising an AssertionError as intended.",
      "package": "pandas",
      "file_name": "bug_report_pandas_combine_hash_arrays_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_combine_hash_arrays_2025-09-25_00-00_k3x9.md",
      "call_id": "6764bd67",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Categorize Parameter Changes Hash Values",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hash_array` function produces different hash values for identical inputs depending on the `categorize` parameter. Specifically, when `categorize=True`, the empty string `''` and null character `'\\x00'` are incorrectly treated as identical and produce the same hash, but when `categorize=False`, they correctly produce different hashes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hash_array_categorize_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hash_array_categorize_2025-09-25_15-30_k3m9.md",
      "call_id": "a0ec3c8b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Categorize Parameter Violates Documented Contract",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `categorize` parameter in `hash_array()` is documented as an optimization that should not affect the hash result, but it produces different hashes for certain inputs like `['', '\\x00']` (empty string and null byte).",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_categorize_2025-09-25_00-00_a7b9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_categorize_2025-09-25_00-00_a7b9.md",
      "call_id": "6263f80b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Encoding Incompatibility",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_array` function fails when using non-UTF-8 encodings (like UTF-16) with the default `hash_key` parameter, even though the encoding parameter is documented as valid. The function requires `hash_key` to be exactly 16 bytes when encoded, but this requirement is not documented and incompatible with UTF-16 encoding.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_encoding_2025-09-25_10-50_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_encoding_2025-09-25_10-50_k3m9.md",
      "call_id": "88cd88d7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Ignores hash_key for Numeric Arrays",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_array` function accepts a `hash_key` parameter that is documented to affect the hash output, but this parameter is completely ignored when hashing numeric arrays (int, float, bool, datetime, timedelta). This violates the API contract and makes the parameter misleading.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_hash_key_2025-09-25_14-32_k3x7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_hash_key_2025-09-25_14-32_k3x7.md",
      "call_id": "918428f1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Ignores hash_key for Numeric Arrays",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_array` function accepts a `hash_key` parameter but silently ignores it for numeric arrays (int, float, bool, datetime, timedelta), only using it for object arrays. This violates the documented API contract and makes the parameter's behavior inconsistent and confusing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_hash_key_2025-09-25_00-00_m7p3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_hash_key_2025-09-25_00-00_m7p3.md",
      "call_id": "4b9ae349",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Incorrect Hash Collision",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hash_array` function produces incorrect hash collisions when `categorize=True`, causing distinct string values (empty string `''` and null byte `'\\x00'`) to hash to the same value. This violates the fundamental property that different values should have different hashes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_categorize_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_categorize_2025-09-25_00-00_x7k9.md",
      "call_id": "3f2bf8cb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Multi-byte Hash Key Encoding",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`hash_array()` crashes with a ValueError when given a 16-character hash_key containing non-ASCII characters that encode to more than 16 bytes in UTF-8.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hash_array_2025-09-25_00-00_a8b3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hash_array_2025-09-25_00-00_a8b3.md",
      "call_id": "944d1a05",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_array Signed Zero Inconsistency",
      "target": "pandas.core.util.hashing.hash_array",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`hash_array()` produces different hash values for `0.0` and `-0.0` even though these values are equal according to IEEE 754 and numpy. This violates the fundamental hash property that equal values must have equal hashes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_array_signed_zero_2025-09-25_00-01_x7m4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_array_signed_zero_2025-09-25_00-01_x7m4.md",
      "call_id": "86ff3520",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.util.hashing.hash_tuples Empty Input Handling",
      "target": "pandas.core.util.hashing.hash_tuples",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`hash_tuples([])` raises a TypeError instead of handling empty input gracefully like the related functions `hash_array` and `combine_hash_arrays`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_hash_tuples_empty_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_hash_tuples_empty_2025-09-25_00-00_a7f2.md",
      "call_id": "9ba7ca62",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window Rolling Sum Precision Loss",
      "target": "pandas.core.window.rolling.Rolling.sum",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Rolling sum operations lose very small floating-point numbers, returning 0.0 instead of the correct sum when the window contains values near the limits of float64 precision.",
      "package": "pandas",
      "file_name": "bug_report_pandas_window_rolling_sum_precision_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_window_rolling_sum_precision_2025-09-25_12-00_k3m9.md",
      "call_id": "7dbd7883",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window Rolling Variance Returns Negative Values",
      "target": "pandas.core.window.rolling.Rolling.var",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The rolling variance calculation can return negative values due to numerical instability when processing data containing extremely small values (near machine epsilon) mixed with zeros. Mathematically, variance must be non-negative, so any negative result is incorrect.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_var_negative_2025-09-25_15-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_var_negative_2025-09-25_15-30_k3x9.md",
      "call_id": "ef87bd2c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window Rolling Variance Returns Negative Values",
      "target": "pandas.core.window.rolling.Rolling.var",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The rolling variance computation can return mathematically impossible negative values when processing certain sequences of data, particularly after computing variance on very large numbers followed by small numbers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_var_negative_2025-09-25_09-49_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_var_negative_2025-09-25_09-49_k3m9.md",
      "call_id": "7e82182f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window Rolling Variance Returns Negative Values and Inconsistent with Std",
      "target": "pandas.core.window.rolling.Rolling.var",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Rolling.var()` method can return negative variance values and produces results inconsistent with `Rolling.std()` due to numerical precision issues when processing data with large magnitude differences. Mathematically, variance must always be non-negative and must equal the square of standard deviation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_variance_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_variance_2025-09-25_00-00_x7k9.md",
      "call_id": "937a6405",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.Rolling.mean Precision Error with Large Values",
      "target": "pandas.core.window.Rolling.mean",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The rolling mean calculation in pandas accumulates precision errors when the series contains very large numbers, causing subsequent window calculations to return wildly incorrect results that violate the fundamental property that mean must be between min and max.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_mean_precision_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_mean_precision_2025-09-25_00-00_k3m9.md",
      "call_id": "6fc57bdf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.Rolling.var() Returns Negative Variance",
      "target": "pandas.core.window.Rolling.var()",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `rolling().var()` method can return negative variance values due to numerical stability issues, violating the fundamental mathematical property that variance must be non-negative.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_var_negative_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_var_negative_2025-09-25_00-00_k3m9.md",
      "call_id": "c7f5f3e9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.common.prep_binary Infinity Converted to NaN",
      "target": "pandas.core.window.common.prep_binary",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `prep_binary` function silently converts infinity values to NaN when aligning two Series. When one Series contains infinity at index i and the other contains a finite value at index i, the finite value is incorrectly converted to NaN.",
      "package": "pandas",
      "file_name": "bug_report_pandas_window_prep_binary_2025-09-25_14-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_window_prep_binary_2025-09-25_14-30_k7m2.md",
      "call_id": "b26d9f64",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.common.zsqrt Crashes on Scalar Input",
      "target": "pandas.core.window.common.zsqrt",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `zsqrt` function in `pandas.core.window.common` crashes with `AttributeError` when passed scalar numeric values, despite using `np.sqrt` which accepts scalars and having no documented restriction against scalar inputs.",
      "package": "pandas",
      "file_name": "bug_report_pandas_zsqrt_scalar_2025-09-25_04-49_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_zsqrt_scalar_2025-09-25_04-49_k3x9.md",
      "call_id": "bfe4c5a1",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.common.zsqrt Crashes on Scalar Input",
      "target": "pandas.core.window.common.zsqrt",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `zsqrt` function crashes with `AttributeError` when given scalar numeric inputs instead of pandas Series or DataFrame objects.",
      "package": "pandas",
      "file_name": "bug_report_pandas_window_zsqrt_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_window_zsqrt_2025-09-25_00-00_k3m9.md",
      "call_id": "cac2233d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.common.zsqrt Crashes on Scalar Inputs",
      "target": "pandas.core.window.common.zsqrt",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `zsqrt` function in pandas.core.window.common crashes with an AttributeError when called with scalar numeric inputs instead of Series/DataFrame objects.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_window_zsqrt_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_window_zsqrt_2025-09-25_14-30_k3x9.md",
      "call_id": "57787ffa",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.expanding.sum Precision Loss Bug",
      "target": "pandas.core.window.expanding.Expanding.sum",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `expanding().sum()` method in pandas loses numerical precision in certain cases, causing the cumulative sum to decrease when adding zero or small values. This violates the fundamental property that cumulative sums of non-negative values should be monotonically non-decreasing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_expanding_sum_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_expanding_sum_2025-09-25_00-00_k3m9.md",
      "call_id": "994d1b7f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.rolling Malformed Error Message",
      "target": "pandas.core.window.rolling.BaseWindow._validate",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message for invalid `method` parameter in rolling window validation has an unmatched quote, resulting in a malformed error message that is confusing to users.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_method_error_message_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_method_error_message_2025-09-25_00-00_k3m9.md",
      "call_id": "2a14bdc2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.window.rolling step=0 Validation Bug",
      "target": "pandas.core.window.rolling.BaseWindow._validate",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The validation for the `step` parameter in rolling windows accepts `step=0`, but using `step=0` causes a crash during computation when slicing operations are performed. The validation should reject `step=0` to prevent this crash.",
      "package": "pandas",
      "file_name": "bug_report_pandas_rolling_step_zero_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_rolling_step_zero_2025-09-25_00-01_x7k9.md",
      "call_id": "0ffe6ef9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut Returns All NaN for Tiny Float Values",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.cut()` returns all NaN values when binning arrays containing extremely small floating-point numbers (near the denormalized float range), even though all input values are valid and within the computed bin ranges.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_tiny_floats_2025-09-25_05-48_xsj4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_tiny_floats_2025-09-25_05-48_xsj4.md",
      "call_id": "cd2934eb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut Subnormal Float Handling",
      "target": "pandas.cut",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.cut` silently returns all NaN values when binning data with a range in the subnormal float region (< ~1e-300), and can crash with ValueError for negative subnormal values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_subnormal_2025-09-25_06-55_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_subnormal_2025-09-25_06-55_k3x9.md",
      "call_id": "1340acd6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut and pandas.qcut fail with very small floating-point numbers",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pd.cut()` and `pd.qcut()` functions crash with a `ValueError` when the input data contains very small floating-point numbers (e.g., values close to the minimum representable float like 2.2e-313). The crash occurs in the `_round_frac` helper function, which produces NaN values when attempting to round very small numbers, leading to an invalid IntervalArray.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_qcut_small_floats_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_qcut_small_floats_2025-09-25_k3m9.md",
      "call_id": "cee46cac",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut duplicates='drop' Crashes on Near-Duplicate Edges",
      "target": "pandas.cut()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.cut()` with `duplicates='drop'` crashes with a confusing error when applied to data with very small range. The error message initially suggests using `duplicates='drop'` to handle duplicate bin edges, but using that parameter causes a crash with an unrelated error about \"missing values must be missing in the same location\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_duplicates_2025-09-25_02-56_q8x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_duplicates_2025-09-25_02-56_q8x3.md",
      "call_id": "856e9992",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut fails with denormalized floats",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.cut` crashes with a `ValueError` when binning data containing denormalized floating-point numbers, due to numerical instability in bin edge calculation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_denormalized_float_2025-09-25_14-45_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_denormalized_float_2025-09-25_14-45_a7k3.md",
      "call_id": "78f36e69",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.cut() Loses Values with duplicates='drop'",
      "target": "pandas.core.reshape.tile.cut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `pd.cut()` is called with `duplicates='drop'` on data with a very small range, it incorrectly marks most valid input values as NaN. The bins after dropping duplicates don't cover all the input values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_duplicates_drop_2025-09-25_00-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_duplicates_drop_2025-09-25_00-15_k3m9.md",
      "call_id": "e408659e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError - AttributeError when using classmethod with instance",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AbstractMethodError` crashes with `AttributeError` when initialized with an instance and `methodtype='classmethod'`, then converted to string.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_02-16_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_02-16_k3x9.md",
      "call_id": "bae2c18b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError - Swapped error message parameters",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The validation error message in `AbstractMethodError.__init__` has swapped parameters, showing \"methodtype must be one of {invalid_value}, got {valid_types}\" instead of the correct order.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_validation_message_2025-09-25_02-16_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_validation_message_2025-09-25_02-16_a7f2.md",
      "call_id": "60cc9a12",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crash with classmethod",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AbstractMethodError` crashes with `AttributeError` when `methodtype='classmethod'` is used with a class instance, which is the documented usage pattern.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_00-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_00-06_k3m9.md",
      "call_id": "8f4f126a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crashes When Converting to String with methodtype='classmethod'",
      "target": "pandas.errors.AbstractMethodError.__str__",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AbstractMethodError.__str__` crashes with `AttributeError` when `methodtype='classmethod'` and `class_instance` is an instance rather than a class, because it tries to access `__name__` attribute on an instance object.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_10-18_aovr.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_10-18_aovr.md",
      "call_id": "bf49e574",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crashes on __str__ with classmethod",
      "target": "pandas.errors.AbstractMethodError.__str__",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `AbstractMethodError` is created with `methodtype=\"classmethod\"` and an instance object (rather than a class), calling `str()` on the error raises an `AttributeError` because the code assumes `class_instance` will be a class with a `__name__` attribute.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_05-56_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_05-56_x7k2.md",
      "call_id": "511972ce",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crashes on str() with Incorrect Usage",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__str__` method crashes with an `AttributeError` when `methodtype=\"classmethod\"` and the user passes an instance instead of a class. This should either be validated during initialization or handled gracefully in `__str__`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_02-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_02-45_x7k9.md",
      "call_id": "ab348367",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crashes with Instance and methodtype='classmethod'",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AbstractMethodError.__str__` crashes with `AttributeError` when `methodtype='classmethod'` is used with a class instance instead of a class object, because it incorrectly assumes `class_instance` will have a `__name__` attribute.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_23-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_classmethod_crash_2025-09-25_23-01_k3m9.md",
      "call_id": "303aaf09",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Crashes with classmethod",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`AbstractMethodError` crashes with `AttributeError` when `methodtype='classmethod'` is used with an instance object instead of a class object. The `__str__` method incorrectly assumes `class_instance` is always a class when `methodtype='classmethod'`, but it can also be an instance.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_05-11_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_05-11_x7k9.md",
      "call_id": "88428287",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Error Message Format",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__init__` method has swapped variables in its error message format string, causing it to display the invalid input where it should show valid options, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_02-44_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_02-44_k3m9.md",
      "call_id": "f6f5054f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Error Message Parameters Swapped",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `AbstractMethodError.__init__` has swapped parameters when raising `ValueError` for invalid `methodtype`. The message says \"methodtype must be one of [invalid value], got [valid set] instead\" when it should say \"methodtype must be one of [valid set], got [invalid value] instead\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_10-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_10-47_k3m9.md",
      "call_id": "c910b6e2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Error Message Swapped Parameters",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `AbstractMethodError.__init__` has swapped format string parameters, causing it to display the user's invalid input where it should show valid options, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_00-00_k3x9.md",
      "call_id": "0eab3830",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Error Message Variables Swapped",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `AbstractMethodError.__init__` has the variables swapped - it displays the invalid value where it should show valid options, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_01-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_01-12_k3m9.md",
      "call_id": "9dee1c01",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Error Message Variables Swapped",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `AbstractMethodError.__init__` has swapped variables in the f-string, causing it to display the invalid methodtype value where it should show valid options, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_09-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_09-46_k3m9.md",
      "call_id": "ed5df929",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Error Message",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message in `AbstractMethodError.__init__` has swapped variable names, showing the invalid input as the expected values and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_04-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_04-16_k3m9.md",
      "call_id": "c386b4d2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Error Message",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When an invalid `methodtype` is passed to `AbstractMethodError.__init__`, the error message has swapped variables, displaying the invalid input where the valid options should be and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_23-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_23-00_x7k9.md",
      "call_id": "f3038165",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Methodtype Error Message",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__init__` method has swapped variables in its ValueError message. When an invalid methodtype is provided, the error message incorrectly shows the invalid value where it should show the valid options, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-00_k9x3.md",
      "call_id": "66021e6e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Methodtype Error Message",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message when an invalid `methodtype` is passed to `AbstractMethodError.__init__` has the arguments swapped, displaying the invalid value where the valid types should be shown and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_05-56_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_error_message_2025-09-25_05-56_k3m9.md",
      "call_id": "f60bbc55",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Methodtype Error Message",
      "target": "pandas.errors.AbstractMethodError",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__init__` method raises a `ValueError` when an invalid `methodtype` is provided, but the error message has swapped variables - it shows the invalid input where valid types should be listed, and shows valid types where the invalid input should be shown.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_03-19_w06t.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_03-19_w06t.md",
      "call_id": "d8eeaf71",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Invalid Parameter Error Message",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The error message raised when an invalid `methodtype` parameter is passed to `AbstractMethodError.__init__` has its format string parameters swapped, resulting in a confusing error message that shows the invalid value where the valid options should be, and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_04-49_m5k5.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_04-49_m5k5.md",
      "call_id": "8c3e3922",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Swapped Error Message",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__init__` method has swapped values in its error message when an invalid `methodtype` is provided. The message says \"methodtype must be one of <invalid_value>, got <valid_types> instead\" when it should say \"methodtype must be one of <valid_types>, got <invalid_value> instead\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-00_k3m9.md",
      "call_id": "1fbb6ea6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Swapped Error Message Arguments",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AbstractMethodError.__init__` method has swapped arguments in its validation error message, making the error message confusing and backwards.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-47_2egz.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_00-47_2egz.md",
      "call_id": "eb63e2dd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError Swapped Error Message Arguments",
      "target": "pandas.errors.AbstractMethodError.__init__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When AbstractMethodError is initialized with an invalid methodtype, the error message has swapped arguments, showing the invalid value where valid options should be shown and vice versa.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_2025-09-25_05-56_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_2025-09-25_05-56_k3j9.md",
      "call_id": "eff978d9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.AbstractMethodError.__str__ Crashes with AttributeError",
      "target": "pandas.errors.AbstractMethodError.__str__",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `AbstractMethodError` is created with `methodtype=\"classmethod\"` but receives an instance instead of a class, calling `str()` on it raises an `AttributeError` because the code tries to access `__name__` on an instance object.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_AbstractMethodError_str_crash_2025-09-25_00-00_x7k2.md",
      "call_id": "d3b9115e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.PyperclipWindowsException Crashes on Non-Windows Platforms",
      "target": "pandas.errors.PyperclipWindowsException",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`PyperclipWindowsException` crashes when instantiated on non-Windows platforms (Linux, macOS) because it unconditionally calls `ctypes.WinError()`, which only exists on Windows. This makes the exception unusable for error handling on non-Windows systems.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_PyperclipWindowsException_2025-09-25_05-11_m3p9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_PyperclipWindowsException_2025-09-25_05-11_m3p9.md",
      "call_id": "2412712b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.errors.PyperclipWindowsException Cross-Platform Instantiation Crash",
      "target": "pandas.errors.PyperclipWindowsException",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`PyperclipWindowsException` crashes with an `AttributeError` when instantiated on non-Windows platforms (Linux, macOS) because it unconditionally calls `ctypes.WinError()`, which only exists on Windows.",
      "package": "pandas",
      "file_name": "bug_report_pandas_errors_PyperclipWindowsException_cross_platform_2025-09-25_01-43_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_errors_PyperclipWindowsException_cross_platform_2025-09-25_01-43_k3m9.md",
      "call_id": "38d1b1c6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.from_dummies fails with empty DataFrame",
      "target": "pandas.core.reshape.encoding.from_dummies",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`from_dummies` fails to invert `get_dummies(..., drop_first=True)` when all categorical columns have only one unique value, violating the documented contract that it \"inverts the operation performed by get_dummies\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_from_dummies_empty_dataframe_2025-09-25_14-30_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_from_dummies_empty_dataframe_2025-09-25_14-30_k8f3.md",
      "call_id": "ba42f534",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io CSV Large Integer Type Corruption",
      "target": "pandas.io.parsers.read_csv",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame containing Python integers beyond int64 range is written to CSV and read back, the integer values are silently converted to strings, causing type corruption and comparison failures.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_csv_large_integer_type_corruption_2025-09-25_02-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_csv_large_integer_type_corruption_2025-09-25_02-30_k3m9.md",
      "call_id": "b89badc0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io._util Duplicate Dictionary Key",
      "target": "pandas.io._util._arrow_dtype_mapping()",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_arrow_dtype_mapping()` function contains a duplicate dictionary key `pa.string()` at lines 41 and 44, causing one mapping to be silently lost.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_duplicate_key_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_duplicate_key_2025-09-25_00-00_x7k2.md",
      "call_id": "1d07e089",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io._util._arrow_dtype_mapping Duplicate Dictionary Key",
      "target": "pandas.io._util._arrow_dtype_mapping",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_arrow_dtype_mapping()` function contains a duplicate dictionary key `pa.string()` on lines 41 and 44, making line 44 dead code.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_util_arrow_dtype_mapping_2025-09-25_05-56_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_util_arrow_dtype_mapping_2025-09-25_05-56_x9k2.md",
      "call_id": "f7456e55",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Encoding Exception Type Inconsistency",
      "target": "pandas.io.clipboards.read_clipboard()",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `read_clipboard()` and `to_clipboard()` functions raise different exception types for the same error condition (invalid encoding). `read_clipboard()` raises `NotImplementedError` while `to_clipboard()` raises `ValueError`, creating an inconsistent API.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_encoding_exception_inconsistency_2025-09-25_00-01_a8f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_encoding_exception_inconsistency_2025-09-25_00-01_a8f2.md",
      "call_id": "dde63d3d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Encoding Validation Inconsistency",
      "target": "pandas.io.clipboard",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `read_clipboard` and `to_clipboard` functions perform identical encoding validation but raise different exception types: `read_clipboard` raises `NotImplementedError` while `to_clipboard` raises `ValueError` for non-UTF-8 encodings. This inconsistency violates the principle of least surprise and makes error handling unnecessarily complex for users.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_encoding_2025-09-25_14-30_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_encoding_2025-09-25_14-30_k8x2.md",
      "call_id": "70d64ddc",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Index Column Detection",
      "target": "pandas.io.clipboards.read_clipboard",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_clipboard()` function incorrectly detects the number of index columns when clipboard data contains leading spaces before tabs. It counts the total number of leading whitespace **characters** instead of counting leading **tab characters**, causing the wrong number of columns to be treated as index columns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_index_detection_2025-09-25_07-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_index_detection_2025-09-25_07-46_k3m9.md",
      "call_id": "26f02e39",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Invalid Regex Separator Crash",
      "target": "pandas.io.clipboard.read_clipboard",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`read_clipboard()` (and `read_csv()`) crash with confusing regex errors when multi-character separators contain regex metacharacters. Common separators like `**`, `++`, or `0(` cause `re.PatternError` exceptions instead of being treated as literal strings or providing helpful error messages.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_regex_sep_2025-09-25_02-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_regex_sep_2025-09-25_02-16_k3m9.md",
      "call_id": "c1ccb601",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Klipper Assertions",
      "target": "pandas.io.clipboard.init_klipper_clipboard",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `paste_klipper()` function in `pandas.io.clipboard` uses assertions to validate clipboard data, which can cause crashes when the clipboard is empty or doesn't end with a newline. Assertions are inappropriate for input validation because they can be disabled with `python -O` and should be used for debugging, not handling expected edge cases.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_klipper_assertions_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_klipper_assertions_2025-09-25_00-00_k9x2.md",
      "call_id": "914bbf03",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Klipper Implementation Crashes on Null Bytes",
      "target": "pandas.io.clipboard.init_klipper_clipboard",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The Klipper clipboard implementation in pandas crashes with `ValueError: embedded null byte` when attempting to copy text containing null bytes (`\\x00`). This is caused by incorrectly passing encoded bytes as a subprocess argument instead of a string.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_klipper_2025-09-25_14-30_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_klipper_2025-09-25_14-30_k7x9.md",
      "call_id": "d81a85bf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Line Parsing Discards Last Line",
      "target": "pandas.io.clipboards.read_clipboard",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_clipboard()` function incorrectly parses clipboard text when determining tab separation, discarding the last line when the text doesn't end with a trailing newline. This causes tab auto-detection to fail for clipboard content with 2+ lines that lack a trailing newline.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_line_parsing_2025-09-25_01-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_line_parsing_2025-09-25_01-46_k3m9.md",
      "call_id": "6aa7007b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard Timeout Functions Hang with NaN or Infinity",
      "target": "pandas.io.clipboard.waitForPaste",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `waitForPaste` and `waitForNewPaste` functions hang indefinitely when passed `float('nan')` or `float('inf')` as timeout values, instead of either rejecting these values or handling them appropriately.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_timeout_2025-09-25_11-20_x6mb.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_timeout_2025-09-25_11-20_x6mb.md",
      "call_id": "def8af62",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard macOS pbcopy/pbpaste Invalid Arguments",
      "target": "pandas.io.clipboard.init_osx_pbcopy_clipboard",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `init_osx_pbcopy_clipboard` function passes invalid arguments `\"w\"` and `\"r\"` to the `pbcopy` and `pbpaste` commands, causing clipboard operations to fail on macOS systems that use this clipboard mechanism.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_pbcopy_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_pbcopy_2025-09-25_00-00_x3k9.md",
      "call_id": "6618be88",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard macOS pbcopy/pbpaste Invalid Arguments",
      "target": "pandas.io.clipboard.init_osx_pbcopy_clipboard",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The macOS pbcopy/pbpaste clipboard backend passes invalid arguments `\"w\"` and `\"r\"` to the `pbcopy` and `pbpaste` commands, causing clipboard operations to fail on macOS systems when the pyobjc library is not installed.",
      "package": "pandas",
      "file_name": "bug_report_pandas_clipboard_osx_pbcopy_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_clipboard_osx_pbcopy_2025-09-25_12-00_x7k9.md",
      "call_id": "e6d8fbca",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard paste_klipper Empty Clipboard Crash",
      "target": "pandas.io.clipboard.paste_klipper",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `paste_klipper()` function crashes with `AssertionError` when the clipboard is empty, instead of returning an empty string like all other paste implementations. This violates the contract that paste() should gracefully handle empty clipboard state.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_paste_klipper_assertion_2025-09-25_05-13_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_paste_klipper_assertion_2025-09-25_05-13_x7k9.md",
      "call_id": "fd81ef5b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard waitForPaste/waitForNewPaste Timeout Precision",
      "target": "pandas.io.clipboard.waitForPaste",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `waitForPaste()` and `waitForNewPaste()` functions do not respect timeout values \u2264 0.01 seconds. Even with `timeout=0` or negative values, both functions wait at least ~0.01 seconds before timing out, rather than timing out immediately.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_waitForPaste_timeout_2025-09-25_21-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_waitForPaste_timeout_2025-09-25_21-00_k3x9.md",
      "call_id": "1cfb6eab",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard waitForPaste/waitForNewPaste Timeout Violation",
      "target": "pandas.io.clipboard.waitForPaste",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `waitForPaste` and `waitForNewPaste` functions violate their documented contracts by raising `PyperclipException` immediately when the clipboard is unavailable, instead of waiting for the specified timeout and raising `PyperclipTimeoutException`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_waitForPaste_timeout_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_waitForPaste_timeout_2025-09-25_k3m9.md",
      "call_id": "5eb60f42",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard.waitForNewPaste Type Checking Issue",
      "target": "pandas.io.clipboard.waitForNewPaste",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`waitForNewPaste()` incorrectly returns on any changed value (including None, 0, False, [], {}) instead of waiting for an actual text string as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_waitForNewPaste_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_waitForNewPaste_2025-09-25_00-01_x7k2.md",
      "call_id": "6e2e4c96",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.clipboard.waitForPaste Type Checking Issue",
      "target": "pandas.io.clipboard.waitForPaste",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`waitForPaste()` incorrectly returns on any non-empty-string value (including None, 0, False, [], {}) instead of waiting for an actual non-empty text string as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_clipboard_waitForPaste_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_clipboard_waitForPaste_2025-09-25_00-00_k3m9.md",
      "call_id": "e482bbf6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common Null Byte Crash in File Path Handling",
      "target": "pandas.io.common.stringify_path",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "File path functions crash with `ValueError: embedded null byte` when given paths containing null bytes, instead of handling them gracefully or providing a more informative error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_common_stringify_path_null_byte_2025-09-25_09-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_common_stringify_path_null_byte_2025-09-25_09-01_k3m9.md",
      "call_id": "53cd178c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common._expand_user Crashes on Null Bytes",
      "target": "pandas.io.common._expand_user",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_expand_user` function crashes with `ValueError: embedded null byte` when given strings containing null bytes, instead of returning the input unchanged as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_expand_user_2025-09-25_01-22_p2x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_expand_user_2025-09-25_01-22_p2x9.md",
      "call_id": "68f4d42b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common.dedup_names AssertionError with non-tuple duplicates",
      "target": "pandas.io.common.dedup_names",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `dedup_names` function has a type signature that accepts `Sequence[Hashable]`, but raises an `AssertionError` when called with duplicate non-tuple elements and `is_potential_multiindex=True`. This violates the function's documented interface.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_common_dedup_names_2025-09-25_05-22_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_common_dedup_names_2025-09-25_05-22_a7f2.md",
      "call_id": "2fdfd984",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common.dedup_names Crashes with Non-Tuple Columns",
      "target": "pandas.io.common.dedup_names",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `dedup_names` function crashes with an `AssertionError` when `is_potential_multiindex=True` is passed with non-tuple column names, despite accepting any boolean value for the parameter and not documenting this precondition.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_common_dedup_names_2025-09-25_01-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_common_dedup_names_2025-09-25_01-45_k3m9.md",
      "call_id": "82fc4432",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common.is_url Crashes on Malformed IPv6 URLs",
      "target": "pandas.io.common.is_url",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_url` function crashes with `ValueError: Invalid IPv6 URL` when given malformed URLs containing unmatched brackets, instead of returning `False` as documented.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_is_url_2025-09-25_01-22_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_is_url_2025-09-25_01-22_x3k9.md",
      "call_id": "6b8f0f66",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.common.is_url Raises ValueError on Malformed URLs",
      "target": "pandas.io.common.is_url",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `is_url` function violates its documented contract by raising `ValueError` on malformed URLs instead of returning `False`. The docstring explicitly states it should return a boolean value, but certain inputs cause it to raise an exception.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_common_is_url_2025-09-25_02-49_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_common_is_url_2025-09-25_02-49_x7k9.md",
      "call_id": "072e9c22",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Control Character Column Name Transformation",
      "target": "pandas.io.excel.to_excel",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Column names containing certain control characters are silently transformed during Excel round-trip operations (e.g., `\\x08` becomes `_x0008_`), violating the round-trip property and causing data integrity issues.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_column_escaping_2025-09-25_00-00_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_column_escaping_2025-09-25_00-00_x8k2.md",
      "call_id": "95e04ae9",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Control Character Crash",
      "target": "pandas.io.excel.to_excel",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "DataFrames containing control characters (e.g., `\\x1f`) in string columns cause an unhandled `IllegalCharacterError` when writing to Excel via `to_excel()` with the openpyxl engine.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_control_char_crash_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_control_char_crash_2025-09-25_00-01_k3m9.md",
      "call_id": "8cdb2ee5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Empty String Data Loss",
      "target": "pandas.io.excel.read_excel",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame containing rows with only empty strings is written to Excel and read back, the rows are silently lost. This is a data corruption bug.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_empty_string_loss_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_empty_string_loss_2025-09-25_00-00_a7f2.md",
      "call_id": "685d6a95",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Empty String Data Loss",
      "target": "pandas.io.excel.to_excel",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Empty strings in DataFrames are silently converted to NaN during Excel round-trip operations, violating the fundamental property that `read_excel(to_excel(df))` should preserve the original data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_empty_string_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_empty_string_2025-09-25_00-00_k3f9.md",
      "call_id": "3a761385",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Empty String Row Data Loss",
      "target": "pandas.io.excel",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Round-tripping a DataFrame through Excel causes complete row loss when all cells in a row contain None or empty strings. These rows disappear entirely when written to Excel and read back, even with `na_filter=False`. Rows with mixed empty/non-empty values are preserved correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_empty_string_data_loss_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_empty_string_data_loss_2025-09-25_00-00_a7f2.md",
      "call_id": "7b4c9ce1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Large Float Overflow",
      "target": "pandas.io.excel.read_excel",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Reading an Excel file containing very large float values (close to `sys.float_info.max`) causes an `OverflowError` crash in pandas, even though writing those values succeeds without error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_large_float_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_large_float_2025-09-25_00-00_k3x9.md",
      "call_id": "31e13c54",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Rows with All None Values Are Silently Dropped",
      "target": "pandas.DataFrame.to_excel()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing a DataFrame to Excel using `to_excel()`, rows that consist entirely of `None` or `NaN` values are silently dropped and not written to the Excel file. This causes data loss and violates the fundamental expectation that the number of rows should be preserved during serialization.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_none_rows_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_none_rows_2025-09-25_00-00_k3m9.md",
      "call_id": "7fbe0d26",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel Surrogate Character Crash",
      "target": "pandas.io.excel",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Writing a DataFrame containing Unicode surrogate characters (U+D800 to U+DFFF) to Excel causes a `UnicodeEncodeError` crash with a cryptic error message deep in the library stack.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_surrogate_2025-09-25_00-01_a7b2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_surrogate_2025-09-25_00-01_a7b2.md",
      "call_id": "527e490b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel read_excel Drops Trailing All-NA Rows",
      "target": "pandas.io.excel.read_excel",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pandas.read_excel()` silently drops trailing rows where all cells contain NA/None values, causing data loss during round-trip operations. This occurs even when `na_filter=False` is specified.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_trailing_na_rows_2025-09-25_11-23_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_trailing_na_rows_2025-09-25_11-23_k3j9.md",
      "call_id": "f4679ff0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel.ExcelWriter.close() Not Idempotent",
      "target": "pandas.io.excel.ExcelWriter.close()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Calling `ExcelWriter.close()` twice raises `ValueError: I/O operation on closed file`, violating the common expectation that close methods should be idempotent.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excelwriter_close_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excelwriter_close_2025-09-25_00-00_k3m9.md",
      "call_id": "bfac3f9c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._excel2num Empty String Handling",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns `-1` for empty or whitespace-only strings instead of raising a `ValueError` as documented. This violates the function's contract and can lead to negative column indices being passed to downstream code.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_excel2num_2025-09-25_10-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_excel2num_2025-09-25_10-48_k3m9.md",
      "call_id": "41d042b6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._excel2num Returns -1 for Empty String",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns `-1` when given an empty string or whitespace-only string instead of raising a `ValueError`. This invalid return value propagates to other functions like `_range2cols`, potentially causing incorrect behavior when processing Excel column specifications.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel2num_empty_string_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel2num_empty_string_2025-09-25_15-30_k3m9.md",
      "call_id": "29088206",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._excel2num Empty String",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns -1 for empty strings and whitespace-only strings instead of raising a `ValueError` as documented in its contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_util_excel2num_2025-09-25_02-52_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_util_excel2num_2025-09-25_02-52_k9f2.md",
      "call_id": "b035fc5c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._excel2num Empty String Handling",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num()` function returns `-1` for empty strings instead of raising a `ValueError` as documented. This violates its contract and causes downstream issues in `_range2cols()`, which can affect the `read_excel()` function's `usecols` parameter.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_excel2num_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_excel2num_2025-09-25_00-00_k3m9.md",
      "call_id": "f9248322",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._excel2num Empty String Handling",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns -1 for empty or whitespace-only strings instead of raising a `ValueError`. This invalid column index can cause unexpected behavior when passed to Excel parsers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_empty_string_2025-09-25_08-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_empty_string_2025-09-25_08-16_k3m9.md",
      "call_id": "2b927fe4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._excel2num Empty String Returns Invalid Index",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns -1 when given an empty string or whitespace-only string, instead of raising a `ValueError` as documented. This invalid column index can cause downstream errors or silent failures.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_excel2num_empty_2025-09-25_03-49_m8k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_excel2num_empty_2025-09-25_03-49_m8k3.md",
      "call_id": "b24dfc2a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._excel2num Whitespace Input",
      "target": "pandas.io.excel._util._excel2num",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_excel2num` function returns `-1` for whitespace-only or empty strings instead of raising `ValueError` as documented. This violates the function's contract and could cause silent failures in downstream code.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_excel2num_whitespace_2025-09-25_04-50_pc7n.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_excel2num_whitespace_2025-09-25_04-50_pc7n.md",
      "call_id": "f7836bd7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._range2cols Duplicate Columns",
      "target": "pandas.io.excel._util._range2cols",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_range2cols` function returns duplicate column indices when given overlapping ranges or repeated column specifications. This causes the Excel reader to include the same columns multiple times in the output DataFrame.",
      "package": "pandas",
      "file_name": "bug_report_pandas_excel_duplicates_2025-09-25_08-17_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_excel_duplicates_2025-09-25_08-17_x7k9.md",
      "call_id": "8aef325b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util._range2cols Reverse Range Handling",
      "target": "pandas.io.excel._util._range2cols",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_range2cols` function silently returns an empty list when given a reverse range (e.g., \"C:A\" instead of \"A:C\"), rather than either handling it correctly or raising a clear error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_range2cols_reverse_2025-09-25_03-47_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_range2cols_reverse_2025-09-25_03-47_x9k2.md",
      "call_id": "f7df08a8",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util.fill_mi_header Empty Row Crash",
      "target": "pandas.io.excel._util.fill_mi_header",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `fill_mi_header` function crashes with an `IndexError` when given an empty row, instead of handling it gracefully or providing a clear error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_fill_mi_header_empty_row_2025-09-25_06-15_a3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_fill_mi_header_empty_row_2025-09-25_06-15_a3x9.md",
      "call_id": "979b7515",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel._util.fill_mi_header Forward Fill Fails at Boundaries",
      "target": "pandas.io.excel._util.fill_mi_header",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `fill_mi_header` function fails to forward-fill None values when `control_row[i]` is False and `row[i]` is None. Instead of preserving the last valid value for forward filling, it resets `last` to None, breaking the forward-fill chain.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_fill_mi_header_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_fill_mi_header_2025-09-25_00-00_k3f9.md",
      "call_id": "0b9a8ac2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.excel.inspect_excel_format Empty Stream Handling",
      "target": "pandas.io.excel._base.inspect_excel_format",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `inspect_excel_format` function's docstring claims it raises `ValueError` when the input stream is empty, but it actually returns `None` instead. This violates the documented contract and could cause issues for callers expecting an exception.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_excel_inspect_excel_format_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_excel_inspect_excel_format_2025-09-25_14-30_x7k9.md",
      "call_id": "a5c359c9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.css CSSResolver.size_to_pt Scientific Notation",
      "target": "pandas.io.formats.css.CSSResolver.size_to_pt",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `size_to_pt` method fails to parse CSS sizes specified in scientific notation (e.g., `\"1e-5pt\"`, `\"2.5e3px\"`), incorrectly treating them as invalid and falling back to a default value of `\"0pt\"`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_css_size_to_pt_scientific_2025-09-25_00-09_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_css_size_to_pt_scientific_2025-09-25_00-09_x7k2.md",
      "call_id": "83d89705",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.css Excessive Trailing Zeros in Float PT Values",
      "target": "pandas.io.formats.css.CSSResolver.size_to_pt",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `size_to_pt` method in `CSSResolver` outputs non-integer pt values with excessive trailing zeros (e.g., `1.500000pt` instead of `1.5pt`), resulting in unnecessarily verbose CSS output.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_css_float_formatting_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_css_float_formatting_2025-09-25_00-00_a7f2.md",
      "call_id": "7484ed0c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.css.CSSResolver.size_to_pt Scientific Notation Parsing",
      "target": "pandas.io.formats.css.CSSResolver.size_to_pt",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CSSResolver.size_to_pt()` method cannot correctly parse CSS size values written in scientific notation (e.g., `1e-5pt`), causing incorrect conversions and precision loss.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_css_scientific_notation_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_css_scientific_notation_2025-09-25_00-00_x7k9.md",
      "call_id": "b8f1a4ea",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.css.CSSResolver.size_to_pt Scientific Notation Parsing",
      "target": "pandas.io.formats.css.CSSResolver.size_to_pt",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `size_to_pt` method in `CSSResolver` incorrectly parses CSS size values in scientific notation (e.g., `1e-10pt`, `1.5e-20px`), treating them as \"Unhandled size\" and returning incorrect results (0pt instead of the proper conversion).",
      "package": "pandas",
      "file_name": "bug_report_pandas_css_scientific_notation_2025-09-25_10-51_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_css_scientific_notation_2025-09-25_10-51_x7k9.md",
      "call_id": "e667dfa1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format._trim_zeros_complex Loses Closing Parenthesis",
      "target": "pandas.io.formats.format._trim_zeros_complex",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_trim_zeros_complex` function in `pandas.io.formats.format` incorrectly strips the closing parenthesis from complex number string representations that include parentheses (the standard Python format).",
      "package": "pandas",
      "file_name": "bug_report_pandas_trim_zeros_complex_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_trim_zeros_complex_2025-09-25_00-00_x7k9.md",
      "call_id": "f4d3c01d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format._trim_zeros_float Unequal Trimming",
      "target": "pandas.io.formats.format._trim_zeros_float",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_trim_zeros_float` function does not trim trailing zeros equally from all numbers as documented. When given float strings with different numbers of trailing zeros, the function stops trimming as soon as any number no longer ends in '0', resulting in outputs with unequal decimal lengths.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_trim_zeros_float_2025-09-25_16-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_trim_zeros_float_2025-09-25_16-30_x7k9.md",
      "call_id": "ca38e19c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format.format_percentiles - Numerical Issues with Small Percentiles",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates its documented contract and produces invalid output when given very small percentile values. The function's docstring promises that (1) different inputs remain different after formatting, and (2) no entry is rounded to 0% or 100% unless exactly 0 or 1. Both properties are violated for small percentile values due to numerical overflow in precision calculation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_format_percentiles_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_format_percentiles_2025-09-25_00-00_k3m9.md",
      "call_id": "923f424b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format.format_percentiles Non-Integer Without Decimal Place",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates its documented guarantee that \"Any non-integer is always rounded to at least 1 decimal place\". When given certain non-integer percentiles (e.g., `0.8899967487632947` which is `88.99967487632946%`), the function produces output without a decimal place (`'89%'`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_format_percentiles_decimal_2025-09-25_00-08_fqij.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_format_percentiles_decimal_2025-09-25_00-08_fqij.md",
      "call_id": "d35327ed",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format.format_percentiles Rounds Non-Zero to 0%",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function rounds very small non-zero percentiles to `0%`, violating its documented contract that \"no entry is *rounded* to 0% or 100%\" unless already equal to it. Additionally, it violates the property that \"any non-integer is always rounded to at least 1 decimal place.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_format_percentiles_2025-09-25_16-45_n3k7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_format_percentiles_2025-09-25_16-45_n3k7.md",
      "call_id": "9250275d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format.format_percentiles RuntimeWarnings with Duplicate Values",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`format_percentiles` produces RuntimeWarnings (divide by zero, invalid cast, overflow) when all input percentiles are identical, despite producing correct output. This is inefficient and pollutes the warning stream.",
      "package": "pandas",
      "file_name": "bug_report_pandas_format_percentiles_warnings_2025-09-25_00-01_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_format_percentiles_warnings_2025-09-25_00-01_x7k3.md",
      "call_id": "889587e8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format.format_percentiles Unique Inputs Produce Duplicate Outputs",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `format_percentiles` function violates its documented guarantee that \"if any two elements of percentiles differ, they remain different after rounding\". When given unique percentile values that are extremely close to the same integer (e.g., `[0.0, 7.506590166045388e-253]`), the function produces duplicate outputs (`['0%', '0%']`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_format_percentiles_unique_2025-09-25_00-08_v991.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_format_percentiles_unique_2025-09-25_00-08_v991.md",
      "call_id": "8c275d1b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.format_percentiles Uniqueness Violation",
      "target": "pandas.io.formats.format.format_percentiles",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`format_percentiles` violates its documented guarantee to preserve uniqueness when formatting percentiles. Two different percentile values can produce identical formatted strings, contradicting the function's explicit promise that \"if any two elements of percentiles differ, they remain different after rounding.\"",
      "package": "pandas",
      "file_name": "bug_report_pandas_format_percentiles_uniqueness_2025-09-25_05-50_j2ag.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_format_percentiles_uniqueness_2025-09-25_05-50_j2ag.md",
      "call_id": "fad7e8e3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing ignores max_seq_items=0",
      "target": "pandas.io.formats.printing._pprint_seq",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `max_seq_items=0` is passed to `_pprint_seq` or `pprint_thing`, the parameter is ignored and all items are printed instead of zero items. This happens because the code uses an `or` chain that treats 0 as falsy.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_printing_max_seq_items_2025-09-25_07-23_6yf8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_printing_max_seq_items_2025-09-25_07-23_6yf8.md",
      "call_id": "a6a16063",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing._justify silently truncates data",
      "target": "pandas.io.formats.printing._justify",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_justify` function silently drops elements when input sequences have different lengths, causing data loss without any error or warning.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_printing_justify_2025-09-25_07-21_5neg.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_printing_justify_2025-09-25_07-21_5neg.md",
      "call_id": "7abd56ff",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing.adjoin - Crashes on Empty Lists",
      "target": "pandas.io.formats.printing.adjoin",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `adjoin` function crashes with a `ValueError` when given empty lists as input, even though the function does not document any requirement that lists must be non-empty.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_printing_adjoin_2025-09-25_02-19_m1rt.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_printing_adjoin_2025-09-25_02-19_m1rt.md",
      "call_id": "bc8a6168",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing.adjoin - Inconsistent Use of strlen Parameter",
      "target": "pandas.io.formats.printing.adjoin",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `adjoin` function does not consistently apply the `strlen` parameter to all input lists. It uses `strlen` for all lists except the last one, where it uses the built-in `len()` function instead. This breaks the documented purpose of the `strlen` parameter for unicode handling.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_formats_printing_adjoin_strlen_2025-09-25_02-19_v003.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_formats_printing_adjoin_strlen_2025-09-25_02-19_v003.md",
      "call_id": "7ae12e3e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.formats.printing.adjoin strlen Inconsistency",
      "target": "pandas.io.formats.printing.adjoin",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `adjoin` function inconsistently applies the `strlen` parameter: it uses the custom `strlen` function for all lists except the last one, where it uses the builtin `len` function instead. This breaks the intended abstraction for handling unicode or custom string length calculations.",
      "package": "pandas",
      "file_name": "bug_report_pandas_adjoin_strlen_2025-09-25_08-51_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_adjoin_strlen_2025-09-25_08-51_k3f9.md",
      "call_id": "84f81221",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json - Column Name Data Loss in JSON Round-Trip",
      "target": "pandas.io.json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame with all-numeric string column names is serialized to JSON and deserialized back, the column names are incorrectly converted from strings to integers, causing data loss. Critically, column names like '00' are converted to 0, losing the leading zero.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_column_names_2025-09-25_04-17_a3k7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_column_names_2025-09-25_04-17_a3k7.md",
      "call_id": "72bb4335",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Column Type Conversion",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame has string column names that look like numbers (e.g., \"0\", \"1\"), the round-trip `read_json(to_json(df))` converts these string column names to integers, violating the expected round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_column_type_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_column_type_2025-09-25_00-00_k3m9.md",
      "call_id": "886de98e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Column/Index Type Loss on Round-Trip",
      "target": "pandas.io.json.read_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "String column names and index values that look like numbers (e.g., '0', '123') are silently converted to integers during JSON round-trip with certain orient values, violating the documented round-trip property and causing data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_column_type_loss_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_column_type_loss_2025-09-25_00-00_k3m9.md",
      "call_id": "2edeb7b8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Default Float Precision Loss",
      "target": "pandas.io.json.to_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The default `double_precision=10` parameter in `to_json()` and `ujson_dumps()` causes silent precision loss for float64 values during serialization, violating the fundamental round-trip property that users expect: `read_json(df.to_json()) \u2248 df`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_double_precision_2025-09-25_08-44_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_double_precision_2025-09-25_08-44_k3m9.md",
      "call_id": "3d8fac82",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty DataFrame Index Dtype Changes During Round-Trip",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an empty DataFrame with integer index is serialized to JSON and read back, the index dtype changes from int64 to float64, violating the round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_empty_index_dtype_2025-09-25_11-18_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_empty_index_dtype_2025-09-25_11-18_x3k9.md",
      "call_id": "e3a52af4",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty DataFrame Index Type Not Preserved",
      "target": "pandas.io.json",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When round-tripping an empty DataFrame through JSON with `orient='split'`, the index type is not preserved. A `RangeIndex` is converted to a regular `Index` with `float64` dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_empty_df_index_2025-09-25_07-48_kbqp.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_empty_df_index_2025-09-25_07-48_kbqp.md",
      "call_id": "de6d8aa6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty DataFrame Loses Columns",
      "target": "pandas.io.json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When serializing an empty DataFrame to JSON with `orient='records'`, all column information is lost. The resulting JSON is just `[]`, and when read back, pandas creates a completely empty DataFrame with no columns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_empty_df_columns_2025-09-25_07-48_pgtw.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_empty_df_columns_2025-09-25_07-48_pgtw.md",
      "call_id": "a535fa34",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty DataFrame Loses Columns",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping an empty DataFrame with `orient='records'` or `orient='values'`, the column information is lost. The serialized JSON is `[]`, and when read back, pandas creates a (0, 0) DataFrame instead of preserving the original columns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_empty_columns_2025-09-25_00-01_m9p4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_empty_columns_2025-09-25_00-01_m9p4.md",
      "call_id": "ce4c85a3",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty DataFrame Roundtrip Loses Rows",
      "target": "pandas.io.json.to_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame with rows but no columns is serialized to JSON using `orient='records'` (and other orientations), the roundtrip through JSON loses all rows, resulting in an empty DataFrame instead of preserving the original row count.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_empty_dataframe_roundtrip_2025-09-25_09-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_empty_dataframe_roundtrip_2025-09-25_09-00_x7k9.md",
      "call_id": "55375fe9",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty Index Type Change",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping an empty DataFrame or Series with `orient='split'`, the index type changes from integer to float, violating the documented round-trip guarantee.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_empty_index_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_empty_index_2025-09-25_00-00_x7k3.md",
      "call_id": "f9263a50",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Empty String Becomes NaT",
      "target": "pandas.io.json.read_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping a Series containing empty strings through `to_json`/`read_json`, the empty strings are incorrectly converted to `NaT` (Not-a-Time) datetime values. This happens due to overly aggressive automatic date conversion.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_empty_string_nat_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_empty_string_nat_2025-09-25_00-00_a7f2.md",
      "call_id": "eac6b9c3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Float Dtype Lost During Round-Trip",
      "target": "pandas.io.json.read_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a Series or DataFrame with float64 dtype containing whole number values is serialized to JSON and read back, pandas incorrectly infers the dtype as int64, causing data corruption and breaking the fundamental round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_dtype_loss_2025-09-25_11-18_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_dtype_loss_2025-09-25_11-18_k7m9.md",
      "call_id": "0dbb8986",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Float Dtype Lost on Round-Trip",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame with float columns containing integer-like values (0.0, 1.0, 2.0) is serialized with `to_json()` and deserialized with `read_json()`, the dtype changes from float64 to int64, causing silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_float_dtype_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_float_dtype_2025-09-25_00-00_k3m9.md",
      "call_id": "d144bef5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Integer Overflow on Round-Trip",
      "target": "pandas.io.json.read_json",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a DataFrame contains integer values outside the int64 range, `to_json()` successfully serializes them to JSON, but `read_json()` crashes with `ValueError: Value is too small` when attempting to deserialize, violating the documented round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_integer_overflow_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_integer_overflow_2025-09-25_00-00_x7k9.md",
      "call_id": "3e3e6ffb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Integer Overflow with Table Orient",
      "target": "pandas.io.json.read_json",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping a DataFrame with uint64 values exceeding int64 max through `to_json(orient='table')` and `read_json(orient='table')`, the values silently overflow to negative int64 values, causing silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_integer_overflow_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_integer_overflow_2025-09-25_00-01_x7k9.md",
      "call_id": "2e33c58f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json JsonReader Rejects Valid Large Negative Integers",
      "target": "pandas.io.json.JsonReader",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.read_json()` and `JsonReader` reject integers below -2^63 with \"ValueError: Value is too small\", while accepting integers above 2^63-1. This asymmetric handling violates JSON round-trip properties for valid JSON data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_reader_integer_overflow_2025-09-25_07-15_pb7j.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_reader_integer_overflow_2025-09-25_07-15_pb7j.md",
      "call_id": "664fa888",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Large Float Becomes Infinity",
      "target": "pandas.io.json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping large (but valid finite) floats through `to_json`/`read_json`, the values are silently corrupted and become infinity. This happens because `ujson_dumps` rounds the float in a way that causes `ujson_loads` to parse it as infinity.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_large_float_infinity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_large_float_infinity_2025-09-25_00-00_k3m9.md",
      "call_id": "7a1da853",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Large Float Values Become Infinity",
      "target": "pandas.io.json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping very large but finite float values through JSON with `orient='table'`, they are converted to infinity. The value `1.7976931345e+308` (which is less than `sys.float_info.max`) becomes `inf` after serialization and deserialization.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_large_float_infinity_2025-09-25_07-49_064q.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_large_float_infinity_2025-09-25_07-49_064q.md",
      "call_id": "f29fed36",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Parse Error for Large Integers",
      "target": "pandas.io.json.read_json",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a DataFrame contains very large negative integers (below int64 min: -9,223,372,036,854,775,809), `to_json()` successfully creates JSON with the value for ALL orients, but `read_json()` crashes with \"ValueError: Value is too small\" when trying to parse it back, regardless of which orient is used.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_parse_error_2025-09-25_00-02_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_parse_error_2025-09-25_00-02_m3k8.md",
      "call_id": "0a3f68e7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Round-Trip Converts Numeric Values to Datetime",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When round-tripping a pandas Series containing numeric (float64) values through JSON serialization, `read_json` automatically converts values greater than 31536000 to datetime objects, violating the round-trip property and silently changing both the dtype and values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_roundtrip_2025-09-25_05-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_roundtrip_2025-09-25_05-47_k3m9.md",
      "call_id": "23ac4f36",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json Type coercion breaks round-trip property",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When round-tripping pandas Series and DataFrames through JSON serialization, both data types and index types are coerced due to aggressive type inference, violating the round-trip property implied by the documentation examples. This affects both the `dtype` parameter (data inference) and `convert_axes` parameter (index/column inference), both of which default to enabling type coercion.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_roundtrip_2025-09-25_02-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_roundtrip_2025-09-25_02-20_k3m9.md",
      "call_id": "e9c303df",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json build_table_schema invalid primaryKey type",
      "target": "pandas.io.json.build_table_schema",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `build_table_schema` is called with `primary_key=True` or `primary_key=False`, it produces an invalid Table Schema by setting `primaryKey` to a boolean value instead of an array of column names or omitting it entirely. This violates the Table Schema specification.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_build_table_schema_primary_key_2025-09-25_02-51_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_build_table_schema_primary_key_2025-09-25_02-51_x7k9.md",
      "call_id": "e109223c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json convert_to_line_delimits Logic Error",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has an operator precedence bug that causes it to incorrectly process non-list JSON strings, corrupting valid JSON objects instead of preserving them unchanged.",
      "package": "pandas",
      "file_name": "bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_x7k9.md",
      "call_id": "65ee0931",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json convert_to_line_delimits Operator Precedence",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has an operator precedence bug in its input validation condition, causing crashes on empty strings and incorrect behavior for strings ending with ']' that don't start with '['.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_06-18_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_06-18_x7k9.md",
      "call_id": "22e601f8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json convert_to_line_delimits Operator Precedence Bug",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has an operator precedence bug in its conditional logic that causes it to incorrectly process non-list JSON strings that end with `]` but don't start with `[`. This results in the function stripping the first and last characters and passing them to `convert_json_to_lines`, producing incorrect output.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_06-49_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_06-49_x3k9.md",
      "call_id": "92f2a7fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json convert_to_line_delimits incorrect boolean logic",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`convert_to_line_delimits` has incorrect operator precedence in its guard condition, causing it to incorrectly process malformed inputs and potentially skip valid JSON arrays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_k3f9.md",
      "call_id": "6a7c3122",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json dtype Preservation Failure",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Float columns with integer-like values (e.g., 0.0) are incorrectly converted to int64 during JSON round-trip, violating the documented round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_dtype_preservation_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_dtype_preservation_2025-09-25_00-00_k3f9.md",
      "call_id": "983e9cd6",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json read_json Integer Underflow",
      "target": "pandas.io.json._json.read_json",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.read_json()` exhibits asymmetric handling of integers outside the int64 range: it accepts values above `int64_max` (converting to uint64) but rejects values below `int64_min` with a ValueError, despite both being valid JSON integers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_json_integer_underflow_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_json_integer_underflow_2025-09-25_00-00_x7k9.md",
      "call_id": "7af1de6e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json table orient loses data with null byte in column names",
      "target": "pandas.io.json.to_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame has column names containing null bytes (`\\x00`), the orient='table' round-trip loses data values, violating the fundamental round-trip property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_table_orient_null_byte_2025-09-25_01-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_table_orient_null_byte_2025-09-25_01-35_k3m9.md",
      "call_id": "d9df5c9f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json ujson Float Precision Loss",
      "target": "pandas.io.json.ujson_dumps",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ujson_dumps` function loses precision for floating-point numbers, particularly for large values and values with many significant digits. This violates the expected round-trip property that `ujson_loads(ujson_dumps(x)) == x`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_ujson_precision_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_ujson_precision_2025-09-25_00-01_x7k9.md",
      "call_id": "c7858da8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json ujson Precision Loss",
      "target": "pandas.io.json.ujson_dumps",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When serializing large floats with `ujson_dumps`, precision is lost that cannot be recovered with `ujson_loads`. The stdlib `json` module preserves precision correctly, but ujson does not.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_ujson_precision_loss_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_ujson_precision_loss_2025-09-25_00-00_x7k9.md",
      "call_id": "2ae4da46",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json ujson_dumps Default Precision Too Low",
      "target": "pandas.io.json.ujson_dumps",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ujson_dumps()` with default precision (10) truncates large floats causing them to overflow to infinity when deserialized with `ujson_loads()`, violating the round-trip property. Standard library `json.dumps()` handles these values correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_ujson_dumps_precision_2025-09-25_06-49_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_ujson_dumps_precision_2025-09-25_06-49_k3m9.md",
      "call_id": "57243f1d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json._normalize.convert_to_line_delimits Logic Error",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has a logic error in its condition that checks whether to process a JSON list. Due to operator precedence, the function incorrectly processes JSON objects, plain strings, and malformed JSON arrays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_convert_to_line_delimits_2025-09-25_01-15_j8n3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_convert_to_line_delimits_2025-09-25_01-15_j8n3.md",
      "call_id": "f9f26526",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json._normalize.convert_to_line_delimits Operator Precedence",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has an operator precedence bug that causes it to incorrectly modify non-array JSON strings. The bug occurs when the input string does not start with `[` but also does not end with `]`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_convert_to_line_delimits_2025-09-25_00-00_k3x9.md",
      "call_id": "867053b7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json._normalize.convert_to_line_delimits Operator Precedence Bug",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has an operator precedence bug in its condition check, causing it to incorrectly process strings that start with `[` but don't end with `]`. The function is supposed to only process valid JSON list strings (those enclosed in `[` and `]`), but due to incorrect operator precedence, it processes malformed inputs.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_15-30_k8j2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_15-30_k8j2.md",
      "call_id": "4de0043a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json._normalize.nested_to_record KeyError with Non-String Keys",
      "target": "pandas.io.json._normalize.nested_to_record",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `nested_to_record` function crashes with a `KeyError` when processing nested dictionaries that have non-string keys. The function converts non-string keys to strings but then attempts to use the stringified key to access the original dictionary, which still has the non-string key.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_nested_to_record_2025-09-25_15-32_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_nested_to_record_2025-09-25_15-32_m3k8.md",
      "call_id": "4a39a419",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.convert_to_line_delimits Logic Error",
      "target": "pandas.io.json._normalize.convert_to_line_delimits",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_to_line_delimits` function has a logic error due to incorrect operator precedence in its conditional check. The function incorrectly processes non-JSON-array strings by stripping their first and last characters, leading to data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_03-30_k7x4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_convert_to_line_delimits_2025-09-25_03-30_k7x4.md",
      "call_id": "447e82f2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.read_json Float Dtype Loss",
      "target": "pandas.io.json.read_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`read_json()` incorrectly infers int64 dtype for columns containing float values that happen to be integers (like 1.0, 2.0), breaking the round-trip property for float DataFrames. This occurs for all orient values except 'table'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_float_dtype_loss_2025-09-25_00-01_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_float_dtype_loss_2025-09-25_00-01_a7f2.md",
      "call_id": "797fa81c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.read_json converts numeric string column names to integers",
      "target": "pandas.io.json.read_json",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`read_json` converts string column names that consist only of digits (e.g., `'0'`, `'00'`, `'123'`) to integer types during JSON round-trip, even when the JSON explicitly contains string values. This violates the round-trip property and causes data loss (e.g., leading zeros).",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_read_json_column_types_2025-09-25_05-22_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_read_json_column_types_2025-09-25_05-22_k8m3.md",
      "call_id": "1979c559",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.to_json Unicode Surrogate Crash",
      "target": "pandas.io.json.to_json",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `DataFrame.to_json()` method crashes with a `UnicodeEncodeError` when a DataFrame contains Unicode surrogate characters (U+D800 to U+DFFF), rather than handling them gracefully or escaping them.",
      "package": "pandas",
      "file_name": "bug_report_pandas_json_unicode_surrogates_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_json_unicode_surrogates_2025-09-25_00-00_k3x9.md",
      "call_id": "94fef132",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.ujson_loads Float Overflow to Infinity",
      "target": "pandas.io.json.ujson_loads",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ujson_loads` silently converts large finite floats near `sys.float_info.max` to positive infinity during round-trip serialization, causing data corruption without any error or warning.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_ujson_loads_float_overflow_2025-09-25_07-49_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_ujson_loads_float_overflow_2025-09-25_07-49_x7k9.md",
      "call_id": "c81d6976",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.ujson_loads Integer Overflow Silent Corruption",
      "target": "pandas.io.json.ujson_loads",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ujson_loads` silently returns incorrect values (like 0) when deserializing valid JSON integers around -2^64 (-18,446,744,073,709,551,616), causing silent data corruption without any error or warning. This is more dangerous than a crash because it corrupts data without the user knowing.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_ujson_loads_integer_overflow_silent_corruption_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_ujson_loads_integer_overflow_silent_corruption_2025-09-25_00-00_k3m9.md",
      "call_id": "e9612b2a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.ujson_loads Integer Underflow Crash",
      "target": "pandas.io.json.ujson_loads",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ujson_loads` crashes with `ValueError: Value is too small` when deserializing valid JSON integers less than -2^63 (-9,223,372,036,854,775,808), even though `ujson_dumps` successfully serializes them and Python's stdlib `json.loads` handles them correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_ujson_loads_integer_underflow_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_ujson_loads_integer_underflow_2025-09-25_00-00_x7k9.md",
      "call_id": "c1009ab8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.json.ujson_loads Positive Integer Overflow Crash",
      "target": "pandas.io.json.ujson_loads",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`ujson_loads` crashes with `ValueError: Value is too big!` when deserializing valid JSON integers greater than or equal to 2^64 (18,446,744,073,709,551,616), even though `ujson_dumps` successfully serializes them and Python's stdlib `json.loads` handles them correctly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_json_ujson_loads_positive_integer_overflow_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_json_ujson_loads_positive_integer_overflow_2025-09-25_00-00_a7f2.md",
      "call_id": "1e75d380",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers Duplicate index_col ValueError",
      "target": "pandas.io.parsers.base_parser._clean_index_names",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `read_csv()` is called with duplicate integer values in the `index_col` parameter (e.g., `index_col=[0, 0]`), it raises a `ValueError` due to attempting to remove the same column name from the columns list multiple times.",
      "package": "pandas",
      "file_name": "bug_report_pandas_parsers_duplicate_index_col.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_parsers_duplicate_index_col.md",
      "call_id": "a63f6fb9",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers PyArrow Engine Single-Value CSV Parsing",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The PyArrow engine fails to parse valid single-value CSV files (single row, single column) that are successfully parsed by both the C and Python engines, violating the expected engine equivalence property.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_pyarrow_single_value_2025-09-25_03-35_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_pyarrow_single_value_2025-09-25_03-35_x7k2.md",
      "call_id": "d3624e33",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers Python Engine Skips Quoted Empty Strings",
      "target": "pandas.io.parsers.read_csv",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Python parsing engine incorrectly treats quoted empty strings (`\"\"`) in CSV files as blank lines and skips them when `skip_blank_lines=True` (the default), while the C engine correctly preserves them as valid rows. This causes inconsistent behavior between the two engines.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_python_engine_quoted_empty_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_python_engine_quoted_empty_2025-09-25_00-00_k3m9.md",
      "call_id": "2208ae7a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers Thousands Separator Conflicts with Delimiter",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `thousands` parameter equals `sep` parameter in `read_csv`, the function silently produces incorrect results instead of raising an error or warning. This leads to data corruption where thousands-separated numbers are parsed incorrectly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_thousands_sep_conflict_2025-09-25_04-52_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_thousands_sep_conflict_2025-09-25_04-52_k3m9.md",
      "call_id": "f673b58a",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers _validate_names TypeError",
      "target": "pandas.io.parsers.readers._validate_names",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_validate_names` function raises `TypeError` instead of `ValueError` when given unhashable column names, violating its documented behavior and type contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_parsers_validate_names_2025-09-25_15-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_parsers_validate_names_2025-09-25_15-30_k7m2.md",
      "call_id": "f033bf7b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers memory_map with StringIO",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Using `memory_map=True` with `io.StringIO` causes an unhelpful `UnsupportedOperation` error instead of either working gracefully or providing a clear error message about the limitation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_memory_map_stringio_2025-09-25_10-49_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_memory_map_stringio_2025-09-25_10-49_x7k9.md",
      "call_id": "6f0246ed",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers nrows Parameter Ignored with iterator=True",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `nrows` parameter is ignored when `iterator=True` is passed to `read_csv` and the `.read()` method is called on the resulting `TextFileReader`. Instead of limiting the number of rows read, it reads all available data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_nrows_iterator_2025-09-25_09-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_nrows_iterator_2025-09-25_09-46_k3m9.md",
      "call_id": "ea2e5c44",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers read_csv Integer Overflow Silent Data Corruption",
      "target": "pandas.io.parsers.read_csv",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When reading CSV data with `dtype` specified, values that exceed the dtype's range silently overflow/wraparound instead of raising an error. For example, reading `2147483648` (2^31) with `dtype='int32'` produces `-2147483648` (int32 min) due to integer wraparound.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_integer_overflow_2025-09-25_13-02_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_integer_overflow_2025-09-25_13-02_a7k2.md",
      "call_id": "57323d75",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers read_csv Large Integer Type Loss",
      "target": "pandas.io.parsers.read_csv",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a DataFrame containing Python integers larger than int64 range is written to CSV and read back using `read_csv`, the integers are incorrectly converted to strings instead of being parsed as integers.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_large_int_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_large_int_2025-09-25_00-00_k3m9.md",
      "call_id": "c00abbc6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers validate_integer Min Value Validation",
      "target": "pandas.io.parsers.readers.validate_integer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validate_integer` function fails to validate that float values satisfy the minimum value requirement. When a float can be losslessly converted to an integer, the function skips the minimum value check, allowing negative or otherwise invalid values to pass validation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_validate_integer_2025-09-25_03-50_jxcv.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_validate_integer_2025-09-25_03-50_jxcv.md",
      "call_id": "c76544fc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers validate_integer min_val Inconsistency",
      "target": "pandas.io.parsers.readers.validate_integer",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `validate_integer` function inconsistently enforces the `min_val` constraint depending on whether the input is an integer or a float. Integer inputs are correctly validated against `min_val`, but float inputs that represent whole numbers bypass this check, allowing values below the minimum to pass validation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_parsers_validate_integer_2025-09-25_06-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_parsers_validate_integer_2025-09-25_06-00_k3m9.md",
      "call_id": "ad4cddc5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers._stringify_na_values Float Type Lost",
      "target": "pandas.io.parsers.readers._stringify_na_values",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_stringify_na_values` function incorrectly loses float type information when `floatify=True` and the input is an integer-valued float (e.g., `5.0`, `\"5.0\"`). The function mutates a local variable `v` from float to int, causing the wrong type to be added to the result set.",
      "package": "pandas",
      "file_name": "bug_report_pandas_stringify_na_values_2025-09-25_11-20_kx3m.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_stringify_na_values_2025-09-25_11-20_kx3m.md",
      "call_id": "fecc06c7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers._stringify_na_values NaN Handling",
      "target": "pandas.io.parsers.readers._stringify_na_values",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_stringify_na_values` function incorrectly includes NaN (Not-a-Number) values in its returned set, despite NaN having problematic equality semantics that make set membership testing unreliable. This is inconsistent with the companion function `_floatify_na_values`, which explicitly filters out NaN values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_stringify_na_values_nan_2025-09-25_15-30_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_stringify_na_values_nan_2025-09-25_15-30_k8m2.md",
      "call_id": "2ec0576d",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers._validate_names NaN Duplicate Detection",
      "target": "pandas.io.parsers.readers._validate_names",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_validate_names` function fails to detect duplicate NaN values in column names due to NaN's non-reflexive equality property. The function uses `set()` for duplicate detection, but `NaN != NaN` causes multiple NaN values to be treated as distinct elements in the set.",
      "package": "pandas",
      "file_name": "bug_report_pandas_validate_names_nan_2025-09-25_15-45_a3k7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_validate_names_nan_2025-09-25_15-45_a3k7.md",
      "call_id": "17a438c9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers.read_csv Empty String to NaN Conversion",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `read_csv(df.to_csv()) == df` is violated when the DataFrame contains empty strings. Empty strings are incorrectly converted to NaN values during CSV reading, causing data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_empty_string_2025-09-25_11-30_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_empty_string_2025-09-25_11-30_k8m2.md",
      "call_id": "b00731ab",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers.read_csv Regex Special Characters in Separators",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using multi-character separators containing regex special characters (like `||`, `..`, `++`, etc.) with `read_csv()` and the Python engine, pandas incorrectly interprets them as regex patterns instead of literal strings, causing parsing errors or incorrect results.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_regex_separator_2025-09-25_16-50_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_regex_separator_2025-09-25_16-50_k3f9.md",
      "call_id": "c7c134d5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.parsers.read_csv Whitespace-Only Row Data Loss",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Rows containing only whitespace characters are silently dropped during CSV round-trip, causing data loss. This violates the round-trip property and can lead to silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_whitespace_row_loss_2025-09-25_11-32_p7q3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_whitespace_row_loss_2025-09-25_11-32_p7q3.md",
      "call_id": "1d6c7003",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas Duplicate Assignment",
      "target": "pandas.io.sas.sas7bdat.SAS7BDATReader.__init__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `SAS7BDATReader.__init__` method contains a duplicate assignment to `self._current_row_in_file_index` on consecutive lines, which is redundant and indicates a potential copy-paste error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_duplicate_assignment_2025-09-25_02-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_duplicate_assignment_2025-09-25_02-00_x7k3.md",
      "call_id": "b654adce",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas Format Detection Substring Matching",
      "target": "pandas.io.sas.sasreader.read_sas",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_sas` function uses substring matching (`if \".xpt\" in fname`) instead of proper extension checking (`fname.endswith(\".xpt\")`), causing incorrect format detection for files with embedded extension strings like `\"data.xpt.backup\"` or `\"file.sas7bdat.old\"`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_format_detection_2025-09-25_00-46_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_format_detection_2025-09-25_00-46_k3m9.md",
      "call_id": "299f6825",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas Format Detection Using Substring Match",
      "target": "pandas.io.sas.read_sas",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_sas` function uses substring matching (`in` operator) instead of proper extension checking to infer file format, causing files with embedded extensions in their names (like `file.xpt0` or `data.sas7bdat.backup`) to be incorrectly identified as SAS files.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_format_detection_2025-09-25_10-49_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_format_detection_2025-09-25_10-49_x7k9.md",
      "call_id": "dcc4ad55",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas _handle_truncated_float_vec Invalid Bounds",
      "target": "pandas.io.sas.sas_xport._handle_truncated_float_vec",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_handle_truncated_float_vec` function doesn't validate the `nbytes` parameter, causing obscure dtype errors when `nbytes > 8` (which creates a negative dtype size) or potentially invalid behavior for edge cases like `nbytes <= 0`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_truncated_float_bounds_2025-09-25_10-49_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_truncated_float_bounds_2025-09-25_10-49_a7f2.md",
      "call_id": "e5b32390",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas _parse_datetime OverflowError",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function crashes with an `OverflowError` when processing large float values that exceed Python's `timedelta` limits, instead of handling them gracefully as invalid dates.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_2025-09-25_04-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_2025-09-25_04-16_k3m9.md",
      "call_id": "21e847ba",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas _split_line KeyError",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_split_line` function unconditionally executes `del out[\"_\"]` regardless of whether the `parts` parameter contains a tuple with name `\"_\"`. This causes a KeyError when the function is called with inputs that don't include underscore placeholders.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_split_line_keyerror_2025-09-25_00-46_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_split_line_keyerror_2025-09-25_00-46_x7k9.md",
      "call_id": "214ba87b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas _split_line Unconditional KeyError",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_split_line` helper function unconditionally deletes the `\"_\"` key from the output dictionary, causing a KeyError if the `parts` parameter doesn't include a tuple with name `\"_\"`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_split_line_keyerror_2025-09-25_10-49_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_split_line_keyerror_2025-09-25_10-49_k3m9.md",
      "call_id": "f42f3235",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Fractional Days Truncation",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function silently truncates fractional day components when unit='d', causing data loss and inconsistency with the `_parse_datetime` function.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_fractional_days_2025-09-25_14-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_fractional_days_2025-09-25_14-30_k3f9.md",
      "call_id": "d62c9781",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Fractional Days Truncation",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function in `pandas.io.sas.sas7bdat` silently truncates fractional day values when converting SAS dates (unit=\"d\"), causing data loss. SAS stores dates as float64 values representing days since 1960-01-01, which can include fractional days (e.g., 0.5 = noon), but the current implementation truncates these to whole days.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_fractional_days_2025-09-25_02-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_fractional_days_2025-09-25_02-30_x7k9.md",
      "call_id": "e9f65cdb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Missing Input Validation",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function accepts a `unit` parameter but does not validate it, silently treating any invalid value as \"d\" (days). This is inconsistent with the related `_parse_datetime` function which properly validates the unit parameter, and could lead to silent data corruption.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-00_m7x4.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-00_m7x4.md",
      "call_id": "1780d9f6",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Missing Unit Validation",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`_convert_datetimes` silently treats any invalid unit value as 'd' (days) instead of validating the unit parameter and raising an error. This is inconsistent with `_parse_datetime` which correctly validates the unit parameter.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_unit_validation_2025-09-25_00-06_x9n2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_unit_validation_2025-09-25_00-06_x9n2.md",
      "call_id": "4bc80511",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Overflow Error",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function (vectorized datetime converter) crashes with `OverflowError` or `OutOfBoundsDatetime` when given large float values, instead of handling them gracefully like `_parse_datetime` should do for NaN values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_2025-09-25_03-22_h3ut.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_2025-09-25_03-22_h3ut.md",
      "call_id": "6ab01655",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes Overflow on Very Large Values",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function in `pandas.io.sas.sas7bdat` crashes with an `OverflowError` or `OutOfBoundsDatetime` exception when given very large float values that cannot be represented in pandas datetime64 format. This can occur when reading SAS files with invalid or corrupted datetime columns.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-01_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-01_x7n2.md",
      "call_id": "95d7986a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._convert_datetimes OverflowError on Large Values",
      "target": "pandas.io.sas.sas7bdat._convert_datetimes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_convert_datetimes` function crashes with an OverflowError when processing extremely large datetime values instead of handling them gracefully (e.g., returning NaT or raising a descriptive ValueError).",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_convert_datetimes_2025-09-25_00-00_x7k9.md",
      "call_id": "7c2a7508",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime Dead Code with OverflowError",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function in `pandas/io/sas/sas7bdat.py` is dead code (defined but never called) and contains an unhandled OverflowError bug for large input values that would fail if anyone attempted to use it.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sas_parse_datetime_dead_code_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sas_parse_datetime_dead_code_2025-09-25_00-00_x7k2.md",
      "call_id": "04a14be2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime Overflow Error",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function crashes with `OverflowError` when given large but valid float values, instead of returning `pd.NaT` like it does for `NaN` values. This is inconsistent error handling.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_2025-09-25_03-21_n2s7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_2025-09-25_03-21_n2s7.md",
      "call_id": "262e4f7b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime Overflow on Large Values",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function in `pandas.io.sas.sas7bdat` crashes with an `OverflowError` when given moderately large datetime values that exceed Python's `datetime` and `timedelta` limits. This can occur when reading SAS files with invalid or corrupted datetime values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_2025-09-25_00-00_k3f9.md",
      "call_id": "49fa0ce3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime OverflowError",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`_parse_datetime` crashes with `OverflowError` when given large day values that result in dates beyond Python's `datetime.max` (year 9999).",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_overflow_2025-09-25_00-06_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_overflow_2025-09-25_00-06_k7m3.md",
      "call_id": "04944da7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime OverflowError",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function crashes with `OverflowError` when given SAS date values that exceed Python's datetime range (approximately 8040 years from 1960-01-01), even though such values may be valid SAS dates.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_2025-09-25_14-30_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_2025-09-25_14-30_k7x9.md",
      "call_id": "629faf25",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime OverflowError on Large Date Values",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function crashes with an OverflowError when given large but otherwise valid SAS datetime values. This occurs because Python's datetime type cannot represent years beyond 9999, but the function doesn't validate input ranges or handle this limitation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sas_parse_datetime_2025-09-25_09-52_usvj.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sas_parse_datetime_2025-09-25_09-52_usvj.md",
      "call_id": "67987978",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._parse_datetime OverflowError on Large Values",
      "target": "pandas.io.sas.sas7bdat._parse_datetime",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_parse_datetime` function in `pandas.io.sas.sas7bdat` crashes with an `OverflowError` when given large but valid floating-point values that would result in dates outside Python's `datetime` range. The function accepts `float` values from SAS files but doesn't handle the case where these values exceed the representable date range.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_parse_datetime_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_parse_datetime_2025-09-25_12-00_x7k9.md",
      "call_id": "7b15e37a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._split_line KeyError on Missing '_' Field",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_split_line` function in `pandas.io.sas.sas_xport` crashes with a `KeyError` when called with a `parts` list that doesn't contain a field named `\"_\"`. The function unconditionally attempts to delete `out[\"_\"]` without checking if this key exists.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_split_line_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_split_line_2025-09-25_12-00_k3m9.md",
      "call_id": "da828098",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._split_line KeyError on Missing Underscore",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_split_line` function unconditionally deletes the \"_\" key from its output dictionary, causing a KeyError when the input `parts` list doesn't contain an entry named \"_\".",
      "package": "pandas",
      "file_name": "bug_report_pandas_sas_split_line_2025-09-25_09-51_2qy0.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sas_split_line_2025-09-25_09-51_2qy0.md",
      "call_id": "4d503ca9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._split_line Unconditional KeyError",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_split_line` function unconditionally attempts to delete the key \"_\" from its output dictionary, causing a `KeyError` if the caller does not include a \"_\" field in the `parts` parameter. This violates the principle of least surprise and creates an undocumented contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_split_line_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_split_line_2025-09-25_00-00_k3f9.md",
      "call_id": "631e9ef1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas._split_line Undocumented Precondition",
      "target": "pandas.io.sas.sas_xport._split_line",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The internal function `_split_line` unconditionally deletes the `\"_\"` key from its output dictionary, but fails to document or validate that the `parts` parameter must contain a field named `\"_\"`. This causes a confusing KeyError when called without this undocumented required field.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sas_split_line_2025-09-25_02-21_e5ub.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sas_split_line_2025-09-25_02-21_e5ub.md",
      "call_id": "26ac4262",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas.read_sas Format Detection Uses Substring Instead of Extension",
      "target": "pandas.io.sas.sasreader.read_sas",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_sas` function incorrectly detects file format by checking if \".xpt\" or \".sas7bdat\" appears anywhere in the filename (using `in` operator) instead of properly checking the file extension. This causes incorrect format detection for files with these substrings in their names but different actual extensions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_sas_format_detection_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_sas_format_detection_2025-09-25_00-01_k3m9.md",
      "call_id": "d2c77714",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.io.sas.read_sas Format Detection Uses Substring Matching",
      "target": "pandas.io.sas.read_sas",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `read_sas` function incorrectly detects file format by searching for extension substrings anywhere in the filename, rather than checking the actual file extension. This causes files like `\"data.xpt.backup\"` to be treated as xport files when they should fail format detection.",
      "package": "pandas",
      "file_name": "bug_report_pandas_io_sas_format_detection_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_io_sas_format_detection_2025-09-25_00-00_k3x9.md",
      "call_id": "4e9c8f02",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting deregister_matplotlib_converters Fails to Restore Original State",
      "target": "pandas.plotting.deregister_matplotlib_converters",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`deregister_matplotlib_converters()` does not properly restore the matplotlib units registry to its original state before `register_matplotlib_converters()` was called. It leaves 3 extra converters in the registry that were not there initially.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_deregister_state_2025-09-25_10-21_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_deregister_state_2025-09-25_10-21_k3m9.md",
      "call_id": "ce2867a1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting register/deregister are not true inverses",
      "target": "pandas.plotting.register_matplotlib_converters",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `deregister_matplotlib_converters()` function does not properly inverse `register_matplotlib_converters()` when called multiple times. After multiple register/deregister cycles, converters remain in matplotlib's unit registry even when they were not present initially, violating the documented behavior.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_register_deregister_2025-09-25_05-56_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_register_deregister_2025-09-25_05-56_k3f9.md",
      "call_id": "1f7f1ff6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting._misc._Options get() Method Ignores Aliases",
      "target": "pandas.plotting._misc._Options.get()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_Options.get()` method doesn't handle key aliases, violating the class's documented aliasing behavior. While other dict operations like `__getitem__`, `__setitem__`, and `__contains__` correctly translate aliases to canonical keys, `get()` bypasses this translation.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_Options_get_2025-09-25_15-30_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_Options_get_2025-09-25_15-30_a7k3.md",
      "call_id": "39b83765",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting._misc._Options pop() Method Bypasses Default Key Protection",
      "target": "pandas.plotting._misc._Options.pop()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_Options.pop()` method allows removal of default keys, violating the class's invariant that default keys cannot be deleted. While `__delitem__` correctly raises `ValueError` when attempting to remove default keys, `pop()` bypasses this protection by calling the inherited dict.pop() directly.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_Options_pop_2025-09-25_15-30_b8x1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_Options_pop_2025-09-25_15-30_b8x1.md",
      "call_id": "4adb25be",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.andrews_curves Produces Incorrect Curves for Odd-Dimensioned Data",
      "target": "pandas.plotting.andrews_curves",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `andrews_curves` function produces mathematically incorrect curves when the input DataFrame has an even number of total columns (odd number of feature columns after excluding the class column). This is caused by misuse of `np.resize` which repeats coefficients instead of padding with zeros, violating the Andrews curves mathematical formula.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_andrews_curves_2025-09-25_19-30_vhq8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_andrews_curves_2025-09-25_19-30_vhq8.md",
      "call_id": "7eef1626",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.autocorrelation_plot Crashes with Empty Series",
      "target": "pandas.plotting.autocorrelation_plot",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `autocorrelation_plot()` function crashes with `ZeroDivisionError` when called with an empty Series, instead of validating the input or handling the edge case gracefully.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_autocorrelation_2025-09-25_00-51_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_autocorrelation_2025-09-25_00-51_k9m3.md",
      "call_id": "6f0bc3f2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.autocorrelation_plot Division by Zero",
      "target": "pandas.plotting.autocorrelation_plot",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `autocorrelation_plot` function crashes with a division by zero error when given a Series where all values are identical (constant series), instead of handling this edge case gracefully.",
      "package": "pandas",
      "file_name": "bug_report_autocorrelation_constant_series.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_autocorrelation_constant_series.md",
      "call_id": "be4b36ae",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.autocorrelation_plot produces NaN for constant series",
      "target": "pandas.plotting.autocorrelation_plot",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`autocorrelation_plot` silently produces a meaningless plot with all NaN values when given a constant series, without any warning or error. The root cause is division by zero when calculating the variance.",
      "package": "pandas",
      "file_name": "bug_report_pandas_autocorrelation_plot_constant_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_autocorrelation_plot_constant_2025-09-25_00-01_x7k9.md",
      "call_id": "ef186bbe",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.bootstrap_plot Uses Sampling Without Replacement",
      "target": "pandas.plotting._matplotlib.bootstrap_plot",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `bootstrap_plot` function uses `random.sample()` which samples WITHOUT replacement, but bootstrapping by definition requires sampling WITH replacement. This produces statistically incorrect bootstrap estimates.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_bootstrap_2025-09-25_02-19_oe0h.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_bootstrap_2025-09-25_02-19_oe0h.md",
      "call_id": "24e727b5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.lag_plot Invalid Lag Parameter Validation",
      "target": "pandas.plotting.lag_plot",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`lag_plot()` accepts negative lag values without validation, producing nonsensical plots with incorrect axis labels and data. Additionally, `lag=0` crashes with an unclear error message from matplotlib instead of being properly validated and rejected.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_lag_plot_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_lag_plot_2025-09-25_15-30_k3m9.md",
      "call_id": "518de5df",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.lag_plot Negative Lag Parameter",
      "target": "pandas.plotting.lag_plot",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `lag_plot` function silently accepts negative lag values and produces meaningless plots instead of raising a clear validation error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_lag_plot_negative_lag_2025-09-25_00-07_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_lag_plot_negative_lag_2025-09-25_00-07_k3m9.md",
      "call_id": "a7c36d80",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.lag_plot Silent Failure with Invalid Lag Values",
      "target": "pandas.plotting.lag_plot",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`lag_plot` silently accepts lag values >= len(series) and produces empty, meaningless scatter plots instead of raising a validation error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_lag_plot_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_lag_plot_2025-09-25_12-00_k3m9.md",
      "call_id": "205e74d7",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.parallel_coordinates Crashes with No Numeric Columns",
      "target": "pandas.plotting.parallel_coordinates",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `parallel_coordinates()` function crashes with `IndexError: list index out of range` when called with a DataFrame that has no numeric columns (only the class column), instead of validating the input or providing a clear error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_parallel_coordinates_2025-09-25_00-52_n7p1.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_parallel_coordinates_2025-09-25_00-52_n7p1.md",
      "call_id": "f2804af9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.radviz Division by Zero on Constant Columns",
      "target": "pandas.plotting.radviz",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `radviz` function crashes with a ZeroDivisionError when any numeric column contains all identical values, due to division by zero in the normalization step.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_radviz_constant_column_2025-09-25_04-16_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_radviz_constant_column_2025-09-25_04-16_x7k9.md",
      "call_id": "f3d34de8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.radviz Division by Zero with Constant Column",
      "target": "pandas.plotting.radviz",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `radviz` function crashes with a division by zero error when the input DataFrame contains a column where all values are identical (constant column), instead of handling this edge case gracefully.",
      "package": "pandas",
      "file_name": "bug_report_radviz_constant_column.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_radviz_constant_column.md",
      "call_id": "88192cfb",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.radviz Produces NaN for Constant Columns",
      "target": "pandas.plotting._matplotlib.radviz",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `radviz` function's internal `normalize` helper produces NaN values when a column contains constant values (all the same), causing incorrect visualization coordinates.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_radviz_2025-09-25_02-20_smra.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_radviz_2025-09-25_02-20_smra.md",
      "call_id": "517f1df1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.scatter_matrix Diagonal Parameter Validation",
      "target": "pandas.plotting.scatter_matrix",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scatter_matrix` function silently accepts invalid values for the `diagonal` parameter, resulting in empty diagonal plots instead of raising a validation error.",
      "package": "pandas",
      "file_name": "bug_report_pandas_plotting_scatter_matrix_diagonal_2025-09-25_06-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_plotting_scatter_matrix_diagonal_2025-09-25_06-48_k3m9.md",
      "call_id": "a250dbc1",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.scatter_matrix crashes with infinity values",
      "target": "pandas.plotting.scatter_matrix",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scatter_matrix` crashes with a `ValueError` when the DataFrame contains infinity values, even though DataFrames can legitimately contain such values and the function doesn't document this restriction.",
      "package": "pandas",
      "file_name": "bug_report_pandas_scatter_matrix_infinity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_scatter_matrix_infinity_2025-09-25_00-00_k3m9.md",
      "call_id": "298a4efc",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.plotting.scatter_matrix crashes with single-row DataFrames",
      "target": "pandas.plotting.scatter_matrix",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scatter_matrix` crashes with a `ValueError` when given a single-row DataFrame with certain numeric values, due to matplotlib's histogram being unable to create bins for a single unique value.",
      "package": "pandas",
      "file_name": "bug_report_pandas_scatter_matrix_single_row_2025-09-25_00-02_a3f8.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_scatter_matrix_single_row_2025-09-25_00-02_a3f8.md",
      "call_id": "054f9b18",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.qcut Crash with Subnormal Floats",
      "target": "pandas.core.reshape.tile.qcut",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.qcut` crashes with ValueError when the input data contains subnormal (denormalized) floating-point numbers mixed with normal values, instead of handling them correctly or raising a clear error message.",
      "package": "pandas",
      "file_name": "bug_report_pandas_core_reshape_tile_qcut_2025-09-25_11-21_shaf.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_core_reshape_tile_qcut_2025-09-25_11-21_shaf.md",
      "call_id": "d0ec3024",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.qcut Crashes with duplicates='drop' on Tiny Float Values",
      "target": "pandas.core.reshape.tile.qcut",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.qcut()` with `duplicates='drop'` crashes with a confusing error message when the input contains many duplicate values and one extremely small float value (near the denormalized float range).",
      "package": "pandas",
      "file_name": "bug_report_pandas_qcut_duplicates_drop_2025-09-25_05-49_8b47.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_qcut_duplicates_drop_2025-09-25_05-49_8b47.md",
      "call_id": "8327c483",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.read_csv Converts Quoted 'Inf' Strings to Float",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When reading CSV files, `read_csv` incorrectly converts quoted string values like `\"Inf\"`, `\"NaN\"`, and `\"infinity\"` to their numeric equivalents (float infinity/NaN), even when they are properly quoted and should be treated as literal strings. This violates the round-trip property and the CSV quoting convention that quoted values should be treated as strings.",
      "package": "pandas",
      "file_name": "bug_report_pandas_quoted_inf_conversion_2025-09-25_02-52_cpjp.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_quoted_inf_conversion_2025-09-25_02-52_cpjp.md",
      "call_id": "ac622121",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.read_csv Empty DataFrame Dtype Loss",
      "target": "pandas.io.parsers.read_csv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an empty DataFrame with typed columns (int64, float64, bool, datetime64) is round-tripped through CSV (to_csv \u2192 read_csv), all column dtypes are incorrectly inferred as object instead of preserving their original types.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_csv_empty_dtype_2025-09-25_02-53_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_csv_empty_dtype_2025-09-25_02-53_k3x9.md",
      "call_id": "aa3cacc1",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.read_csv Engine Inconsistency with Empty Strings",
      "target": "pandas.io.parsers.read_csv",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The C and Python parsing engines produce different results when reading CSV files containing quoted empty strings. The C engine treats them as NaN values, while the Python engine (with default skip_blank_lines=True) skips these rows entirely, resulting in different DataFrame shapes and data.",
      "package": "pandas",
      "file_name": "bug_report_pandas_engine_empty_strings_2025-09-25_02-53_m7e0.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_engine_empty_strings_2025-09-25_02-53_m7e0.md",
      "call_id": "0adfe71d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.read_json Column Name Type Corruption",
      "target": "pandas.read_json",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.read_json` incorrectly converts numeric string column names to integers when all column names are numeric, breaking JSON roundtrip serialization.",
      "package": "pandas",
      "file_name": "bug_report_pandas_read_json_columns_2025-09-25_06-55_a7x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_read_json_columns_2025-09-25_06-55_a7x3.md",
      "call_id": "8fd64d7b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.api.guess_datetime_format dayfirst Parameter Incorrectly Guesses Format",
      "target": "pandas.tseries.api.guess_datetime_format",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `guess_datetime_format` function incorrectly guesses the datetime format when `dayfirst=True` is specified. For the input string \"2000-01-02\" with `dayfirst=True`, it returns `'%Y-%d-%m'` instead of `'%Y-%m-%d'`, causing the date to be parsed incorrectly as February 1st instead of January 2nd.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_guess_datetime_format_dayfirst_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_guess_datetime_format_dayfirst_2025-09-25_00-00_x7k9.md",
      "call_id": "8e0e9dc4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inconsistent Frequency Relationship",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod()` and `is_superperiod()` return logically inconsistent results for the frequency pair 'D' (day) and 'B' (business day). Both `is_superperiod('D', 'B')` and `is_superperiod('B', 'D')` return True, which is mathematically impossible.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_2025-09-25_10-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_2025-09-25_10-30_x7k9.md",
      "call_id": "22fe7d1b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inconsistent is_subperiod/is_superperiod for Same Frequency",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`is_subperiod` and `is_superperiod` return inconsistent results when source and target are the same frequency. For annual frequencies like 'Y', `is_subperiod('Y', 'Y')` returns False while `is_superperiod('Y', 'Y')` returns True, violating the expected inverse relationship between these functions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_is_subperiod_superperiod_2025-09-25_11-19_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_is_subperiod_superperiod_2025-09-25_11-19_k3m9.md",
      "call_id": "28bb7d4f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inverse Relationship Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` violate their expected inverse relationship for annual frequencies. When comparing an annual frequency to itself, `is_superperiod(freq, freq)` returns `True` but `is_subperiod(freq, freq)` returns `False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_inverse_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_inverse_2025-09-25_00-00_k3j9.md",
      "call_id": "e94f4b5a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inverse Relationship Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod(source, target)` and `is_superperiod(source, target)` violate the expected inverse relationship. Specifically, `is_subperiod(A, B)` should equal `is_superperiod(B, A)` for all valid frequency pairs, but this property does not hold for several combinations including Daily (D) vs Business Day (B).",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_inverse_2025-09-25_07-47_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_inverse_2025-09-25_07-47_k3m9.md",
      "call_id": "11bd2d47",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Inverse Relationship Violation for Day/BusinessDay",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` violate the inverse relationship property for Day ('D') and BusinessDay ('B') frequencies. Specifically, `is_subperiod('D', 'B')` returns `False` while `is_superperiod('B', 'D')` returns `True`. By definition, if A is a subperiod of B, then B must be a superperiod of A.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_inverse_2025-09-25_15-46_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_inverse_2025-09-25_15-46_x7k9.md",
      "call_id": "ecff2226",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Logical Impossibility in is_superperiod",
      "target": "pandas.tseries.frequencies.is_superperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_superperiod` function incorrectly returns True for both `is_superperiod('D', 'B')` and `is_superperiod('B', 'D')`, violating the mathematical constraint that two frequencies cannot both be superperiods of each other.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_is_superperiod_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_is_superperiod_2025-09-25_00-00_a7f2.md",
      "call_id": "0eeca0ad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Reflexivity Inconsistency",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_subperiod` and `is_superperiod` functions are inconsistent in their handling of reflexivity (whether a frequency is a sub/superperiod of itself). Some frequencies return `True` for both operations when compared to themselves, while others return `False` for both, and annual frequencies return `True` for `is_superperiod` but `False` for `is_subperiod`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_reflexivity_2025-09-25_00-01_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_reflexivity_2025-09-25_00-01_a7b3.md",
      "call_id": "e51c94c0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Reflexivity Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod(X, X)` and `is_superperiod(X, X)` should always return True (a frequency is both a subperiod and superperiod of itself), but they return False for monthly ('M'), quarterly ('Q'), and some annual ('Y') frequencies.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_reflexivity_2025-09-25_00-00_m9x2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_reflexivity_2025-09-25_00-00_m9x2.md",
      "call_id": "f382df35",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Symmetry Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_subperiod` and `is_superperiod` functions violate a fundamental symmetry property: `is_subperiod(a, b)` should equal `is_superperiod(b, a)` for all frequency pairs. This property is violated when both frequencies are annual (e.g., 'Y', 'Y-JAN', 'Y-FEB').",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_symmetry_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_symmetry_2025-09-25_00-00_k3j9.md",
      "call_id": "36db1a32",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Symmetry Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` are not symmetric inverses as their documentation and semantics suggest. If upsampling is possible from frequency A to frequency B (i.e., `is_superperiod(A, B) == True`), then downsampling should be possible from B to A (i.e., `is_subperiod(B, A) == True`). However, this property is violated for several frequency combinations involving 'D' (Day), 'B' (BusinessDay), and 'C' (CustomBusinessDay).",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_symmetry_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_symmetry_2025-09-25_00-00_x7k9.md",
      "call_id": "950ac32c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Symmetry Violation in is_subperiod/is_superperiod",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` violate a fundamental symmetry property: when `source == target == 'Y'` (annual frequency), `is_subperiod('Y', 'Y')` returns `False` but `is_superperiod('Y', 'Y')` returns `True`. These functions should be symmetric - if downsampling from A to B is possible, then upsampling from B to A should also be possible.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_is_subperiod_2025-09-25_04-21_wa69.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_is_subperiod_2025-09-25_04-21_wa69.md",
      "call_id": "35fc430e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies Year Frequency Self-Consistency Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "For the year frequency 'Y', `is_subperiod('Y', 'Y')` returns `False` while `is_superperiod('Y', 'Y')` returns `True`. These functions should return the same value for a frequency compared to itself, as the subperiod and superperiod relationships should be symmetric for self-comparison.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_self_consistency_2025-09-25_15-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_self_consistency_2025-09-25_15-45_k3m9.md",
      "call_id": "8c066a80",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies get_period_alias Not Idempotent",
      "target": "pandas.tseries.frequencies.get_period_alias",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`get_period_alias` is not idempotent. When called on 'ME' it returns 'M', but calling it again on 'M' returns None instead of 'M'. This violates the expected idempotence property that alias functions should have.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_get_period_alias_2025-09-25_11-19_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_get_period_alias_2025-09-25_11-19_x7k9.md",
      "call_id": "adf85f59",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies is_subperiod and is_superperiod Not Inverse",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The functions `is_subperiod` and `is_superperiod` are supposed to be inverse operations, but they are not. Specifically, when `is_superperiod(source, target)` returns `True`, `is_subperiod(target, source)` should also return `True`, but it doesn't for several frequency pairs involving 'D', 'B', and 'C'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_2025-09-25_17-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_2025-09-25_17-30_k7m2.md",
      "call_id": "778cc067",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies is_subperiod/is_superperiod Inconsistent Behavior",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`is_subperiod(freq, freq)` and `is_superperiod(freq, freq)` return inconsistent results across different frequencies. Some frequencies (D, W, h, min, s) return `True` when comparing a frequency to itself, while others (M, Q) return `False`. Additionally, 'Y' returns `False` for `is_subperiod` but `True` for `is_superperiod` when compared to itself. This violates the semantic expectation that a frequency cannot be its own sub-period or super-period.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_is_subperiod_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_is_subperiod_2025-09-25_00-00_x7k9.md",
      "call_id": "349eeb1a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies is_superperiod/is_subperiod Antisymmetry Violation",
      "target": "pandas.tseries.frequencies.is_superperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_superperiod` function violates the antisymmetric property: both `is_superperiod('D', 'B')` and `is_superperiod('B', 'D')` return `True`, which is logically impossible since two frequencies cannot both be superperiods of each other.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_frequencies_is_superperiod_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_frequencies_is_superperiod_2025-09-25_00-00_k3m9.md",
      "call_id": "c6811790",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.frequencies.is_subperiod Reflexivity Violation",
      "target": "pandas.tseries.frequencies.is_subperiod",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_subperiod` function violates the reflexivity property: for certain frequencies (M, Q, Y, and their variants), `is_subperiod(freq, freq)` returns `False` when it should return `True`. Additionally, this creates an inconsistency with `is_superperiod`, where `is_subperiod(freq, freq)` and `is_superperiod(freq, freq)` return different values for annual frequencies.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_is_subperiod_reflexivity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_is_subperiod_reflexivity_2025-09-25_00-00_k3m9.md",
      "call_id": "2e3ea848",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.tseries.holiday.next_monday Misleading Name and Incomplete Documentation",
      "target": "pandas.tseries.holiday.next_monday",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The function `next_monday` has a misleading name that violates the principle of least surprise. Based on its name, users would expect it to return the next Monday from any given date, but it actually only shifts weekend dates (Saturday/Sunday) to Monday and returns weekday dates unchanged. Additionally, the docstring is incomplete and doesn't document the behavior for weekdays.",
      "package": "pandas",
      "file_name": "bug_report_pandas_tseries_next_monday_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_tseries_next_monday_2025-09-25_15-30_x7k9.md",
      "call_id": "d312c52c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util Hash Functions - Undocumented hash_key Length Requirement",
      "target": "pandas.util.hash_pandas_object",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_pandas_object` and `hash_array` functions accept a `hash_key` parameter documented as a string, but the implementation requires it to be exactly 16 bytes when encoded. This requirement is not documented, leading to confusing `ValueError` exceptions for users.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hash_key_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hash_key_2025-09-25_00-00_k3f9.md",
      "call_id": "96a021b1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util._decorators.deprecate Operator Precedence Bug",
      "target": "pandas.util._decorators.deprecate",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `deprecate` function has an operator precedence bug in its docstring validation logic. Due to incorrect operator precedence, it fails to reject docstrings that lack a blank line after the summary, violating the documented format requirement.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_deprecate_precedence_2025-09-25_14-40_m3p7.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_deprecate_precedence_2025-09-25_14-40_m3p7.md",
      "call_id": "fce41ca4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util._validators Exception Handling",
      "target": "pandas.util._validators._check_for_default_values",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_check_for_default_values` function only catches `ValueError` when comparing arguments, but the comparison operation can raise other exceptions (e.g., `TypeError`, `AttributeError`). This causes the function to crash instead of falling back to identity comparison with the `is` operator.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_validators_2025-09-25_05-56_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_validators_2025-09-25_05-56_k3x9.md",
      "call_id": "0d435433",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter - Length Not Preserved with Unicode",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function violates the reasonable expectation that string length is preserved when only the first letter is capitalized. With certain Unicode characters (e.g., German '\u00df'), the function increases string length because `'\u00df'.upper()` produces 'SS'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_03-21_56oz.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_03-21_56oz.md",
      "call_id": "00936424",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Length Change",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function changes the string length for certain Unicode characters (e.g., '\u00df' becomes 'SS'), which violates the expectation that capitalizing only the first letter should preserve string length.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_05-56_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_05-56_k3m9.md",
      "call_id": "5f2a38eb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Unicode Character Expansion",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function violates length preservation for certain Unicode characters that expand when uppercased, such as German \u00df (sharp s) and ligatures like \ufb01 and \ufb02.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_unicode_expansion_2025-09-25_02-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_unicode_expansion_2025-09-25_02-16_k3m9.md",
      "call_id": "ce423e3f",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Unicode Expansion",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function unexpectedly changes string length for Unicode characters that expand when uppercased, such as '\u00df' (German sharp S) \u2192 'SS' and '\ufb01' (ligature) \u2192 'FI'.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_00-00_k3m9.md",
      "call_id": "b2889467",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Unicode Length Change",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function changes string length for certain Unicode characters that expand when uppercased (e.g., German \u00df \u2192 SS).",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_09-51_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_09-51_k3m9.md",
      "call_id": "4eb2f6ca",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Unicode Length Change",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function changes string length for certain Unicode characters that expand when uppercased (e.g., German \u00df \u2192 SS).",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_00-00_x7k9.md",
      "call_id": "6f4ffeee",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.capitalize_first_letter Unicode Length Change",
      "target": "pandas.util.capitalize_first_letter",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `capitalize_first_letter` function changes string length and fails to preserve the suffix for certain Unicode characters that have multi-character uppercase forms.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_capitalize_first_letter_2025-09-25_06-20_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_capitalize_first_letter_2025-09-25_06-20_k3x9.md",
      "call_id": "d88d8537",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.hash_array - categorize Parameter Produces Incorrect Hashes",
      "target": "pandas.util.hash_array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hash_array` function with `categorize=True` produces incorrect hash values for certain inputs containing duplicate values and distinct characters like empty strings and null bytes. Different input values incorrectly receive the same hash, violating the fundamental property of hash functions.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_categorize_2025-09-25_00-00_m8x3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_categorize_2025-09-25_00-00_m8x3.md",
      "call_id": "7bba8c0a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.hash_array Inconsistent hash_key Validation",
      "target": "pandas.util.hash_array",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `hash_array` function accepts a `hash_key` parameter but validates it inconsistently. For numeric arrays, any `hash_key` value is silently accepted (and ignored), while for object arrays, it must be exactly 16 bytes or a ValueError is raised.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_hash_array_2025-09-25_15-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_hash_array_2025-09-25_15-00_k3x9.md",
      "call_id": "7b784603",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version Infinity Comparison Reflexivity Violation",
      "target": "pandas.util.version.InfinityType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Infinity` and `NegativeInfinity` singleton objects violate the reflexivity property of comparison operators. `Infinity > Infinity` returns `True` (should be `False`), and `NegativeInfinity < NegativeInfinity` returns `True` (should be `False`). Similarly, `Infinity <= Infinity` returns `False` (should be `True`) and `NegativeInfinity >= NegativeInfinity` returns `False` (should be `True`).",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_infinity_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_infinity_2025-09-25_00-00_k3x9.md",
      "call_id": "48309d95",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version InfinityType Comparison Inconsistency",
      "target": "pandas.util.version.InfinityType",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `InfinityType` and `NegativeInfinityType` classes violate fundamental comparison operator consistency: when `a == b` is True, both `a <= b` and `a >= b` must be True. However, `Infinity <= Infinity` returns False despite `Infinity == Infinity` being True, and `NegativeInfinity >= NegativeInfinity` returns False despite `NegativeInfinity == NegativeInfinity` being True.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_InfinityType_comparison_2025-09-25_00-08_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_InfinityType_comparison_2025-09-25_00-08_k7m3.md",
      "call_id": "230d34fc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version InfinityType Comparison Operators",
      "target": "pandas.util.version.InfinityType",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The InfinityType and NegativeInfinityType classes violate fundamental comparison operator invariants. Specifically, `Infinity <= Infinity` returns False (should be True), `Infinity > Infinity` returns True (should be False), `NegativeInfinity >= NegativeInfinity` returns False (should be True), and `NegativeInfinity < NegativeInfinity` returns True (should be False).",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_InfinityType_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_InfinityType_2025-09-25_00-00_k3x9.md",
      "call_id": "01a96a59",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version InfinityType Self-Comparison",
      "target": "pandas.util.version.InfinityType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `InfinityType.__gt__()` and `NegativeInfinityType.__lt__()` methods violate the mathematical irreflexivity property by returning `True` when comparing an object with itself. This causes `Infinity > Infinity` and `NegativeInfinity < NegativeInfinity` to both return `True`, when they should return `False`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_infinity_self_comparison_2025-09-25_00-48_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_infinity_self_comparison_2025-09-25_00-48_x7k9.md",
      "call_id": "e1e31542",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version InfinityType Self-Comparison",
      "target": "pandas.util.version.InfinityType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "InfinityType and NegativeInfinityType violate the mathematical property of total ordering by returning True when comparing instances to themselves with `>` and `<` operators respectively.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_infinity_2025-09-25_09-53_h3k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_infinity_2025-09-25_09-53_h3k9.md",
      "call_id": "192f0873",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version LegacyVersion.public Property",
      "target": "pandas.util.version.LegacyVersion.public",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `LegacyVersion.public` property does not remove the local version identifier (part after '+'), while `Version.public` does, causing inconsistent behavior across the version API.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_LegacyVersion_public_2025-09-25_06-50_uyky.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_LegacyVersion_public_2025-09-25_06-50_uyky.md",
      "call_id": "3113381b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version.InfinityType Violates Trichotomy Law",
      "target": "pandas.util.version.InfinityType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`InfinityType.__gt__` always returns `True`, even when comparing Infinity with itself, violating the trichotomy law that requires exactly one of `<`, `==`, or `>` to be true.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_InfinityType_2025-09-25_07-19_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_InfinityType_2025-09-25_07-19_k3x9.md",
      "call_id": "88346cb2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version.NegativeInfinityType Violates Trichotomy Law",
      "target": "pandas.util.version.NegativeInfinityType",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`NegativeInfinityType.__lt__` always returns `True`, even when comparing NegativeInfinity with itself, violating the trichotomy law that requires exactly one of `<`, `==`, or `>` to be true.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_NegativeInfinityType_2025-09-25_07-19_0biq.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_NegativeInfinityType_2025-09-25_07-19_0biq.md",
      "call_id": "dcf1817e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.util.version._parse_letter_version Integer Zero Bug",
      "target": "pandas.util.version._parse_letter_version",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_parse_letter_version` function incorrectly treats integer `0` as falsy, returning `None` instead of `('post', 0)` when called with `_parse_letter_version(None, 0)`.",
      "package": "pandas",
      "file_name": "bug_report_pandas_util_version_parse_letter_version_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_util_version_parse_letter_version_2025-09-25_00-00_k3m9.md",
      "call_id": "f5da1907",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas_dtype None Handling Inconsistency",
      "target": "pandas.api.types.pandas_dtype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `pandas_dtype` function silently accepts `None` and returns `float64`, while the related internal function `_get_dtype` raises a `TypeError` for `None`. This inconsistency violates the expected behavior documented in `_get_dtype` and creates surprising behavior where `None` is treated as a valid dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_dtype_none_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_dtype_none_2025-09-25_00-00_k3m9.md",
      "call_id": "08875536",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas_dtype None Handling Inconsistency",
      "target": "pandas.api.types.pandas_dtype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `pandas_dtype` function silently accepts `None` and returns `float64`, while the related internal function `_get_dtype` raises a `TypeError` for `None`. This inconsistency violates the expected behavior documented in `_get_dtype` and creates surprising behavior where `None` is treated as a valid dtype.",
      "package": "pandas",
      "file_name": "bug_report_pandas_api_types_pandas_dtype_2025-09-25_08-45_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_api_types_pandas_dtype_2025-09-25_08-45_x7k9.md",
      "call_id": "10aa6c08",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas_dtype Raises ValueError Instead of TypeError",
      "target": "pandas.api.types.pandas_dtype",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `pandas_dtype` function's docstring states it \"Raises TypeError if not a dtype\", but for certain invalid dict inputs, it raises `ValueError` instead of `TypeError`, violating its documented contract.",
      "package": "pandas",
      "file_name": "bug_report_pandas_dtype_exception_2025-09-25_00-45_5bhx.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_dtype_exception_2025-09-25_00-45_5bhx.md",
      "call_id": "c9d1e7ff",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pd.cut Crash with Mixed Denormal Floats",
      "target": "pandas.cut",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.cut` crashes with a confusing ValueError when binning data that contains a mix of denormal floats and normal floats, complaining about \"missing values must be missing in the same location\" even though the input contains no missing values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_denormal_crash_2025-09-25_11-14_tbqa.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_denormal_crash_2025-09-25_11-14_tbqa.md",
      "call_id": "c328074c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pd.cut Silent Failure with Denormal Floats",
      "target": "pandas.cut",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`pd.cut` silently returns all NaN values when binning data containing denormal floating-point numbers, even though all input values are valid and within the expected range.",
      "package": "pandas",
      "file_name": "bug_report_pandas_cut_denormal_silent_failure_2025-09-25_11-14_c1zv.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_cut_denormal_silent_failure_2025-09-25_11-14_c1zv.md",
      "call_id": "680e47a2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pd.qcut Crash with Denormal Floats",
      "target": "pandas.qcut",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`pd.qcut` crashes with a confusing ValueError about \"missing values\" when binning data containing denormal floating-point numbers, even though the input contains no missing values.",
      "package": "pandas",
      "file_name": "bug_report_pandas_qcut_denormal_crash_2025-09-25_11-14_bgss.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_qcut_denormal_crash_2025-09-25_11-14_bgss.md",
      "call_id": "1223044e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "result_type_many Incorrect Fallback for Mixed Dtypes",
      "target": "pandas.core.computation.common.result_type_many",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "In the `result_type_many` function, when handling a mix of extension array dtypes and many (>32) non-extension array dtypes, the ValueError fallback incorrectly uses `arrays_and_dtypes` instead of `non_ea_dtypes` in the reduce call. This defeats the purpose of separating extension array dtypes from non-extension array dtypes.",
      "package": "pandas",
      "file_name": "bug_report_pandas_computation_result_type_many_2025-09-25_02-13_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_pandas_computation_result_type_many_2025-09-25_02-13_k3m9.md",
      "call_id": "f4dc21e2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey Symmetry Violation",
      "target": "scipy.signal.windows.tukey",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `tukey` window function violates its symmetry guarantee when `sym=True` for very small `alpha` values due to catastrophic cancellation in floating-point arithmetic.",
      "package": "pandas",
      "file_name": "bug_report_scipy_signal_windows_tukey_2025-09-25_08-54_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_scipy_signal_windows_tukey_2025-09-25_08-54_k3n9.md",
      "call_id": "cb317c1a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.boxcox Numerical Precision",
      "target": "scipy.special.boxcox",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `inv_boxcox(boxcox(x, lmbda), lmbda) == x` fails with significant numerical errors when `lmbda` is very negative (e.g., < -6) and `x` is moderately large (e.g., > 20). In some cases, the relative error exceeds 1%, and in extreme cases, `inv_boxcox` returns infinity or NaN.",
      "package": "pandas",
      "file_name": "bug_report_scipy_special_boxcox_2025-09-25_10-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pandas/bug_reports/bug_report_scipy_special_boxcox_2025-09-25_10-30_x7k9.md",
      "call_id": "54ceb1aa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ByteSize Precision Loss on Fractional Input",
      "target": "pydantic.v1.types.ByteSize",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ByteSize.validate()` silently truncates fractional byte values to integers, causing precision loss. When parsing inputs like \"0.5b\" or \"1.7kb\", the fractional part is discarded without warning, leading to incorrect values when converting back.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_v1_ByteSize_2025-09-25_00-54_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_v1_ByteSize_2025-09-25_00-54_k3m9.md",
      "call_id": "462dfb4b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ENCODERS_BY_TYPE bytes Encoder Crashes on Non-UTF-8 Bytes",
      "target": "pydantic.deprecated.json.ENCODERS_BY_TYPE[bytes]",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The bytes encoder in `ENCODERS_BY_TYPE` crashes with `UnicodeDecodeError` when encoding bytes that contain non-UTF-8 data, even though Python's `bytes` type is designed to hold arbitrary binary data.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_bytes_encoder_2025-09-25_04-25_p9x2.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_bytes_encoder_2025-09-25_04-25_p9x2.md",
      "call_id": "08fd2498",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Excluded Fields Break Round-Trip Invariant",
      "target": "pydantic.Field(exclude=True)",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "Fields marked with `exclude=True` are excluded from `model_dump()` output but are still required (or reset to defaults) during `model_validate()`. This breaks the fundamental invariant that `model_validate(model_dump(m))` should equal `m` for all models.",
      "package": "pydantic",
      "file_name": "bug_report_excluded_field.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_excluded_field.md",
      "call_id": "aaba6f38",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Pydantic Experimental Pipeline String Transform Chaining",
      "target": "pydantic.experimental.pipeline._apply_transform",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When chaining multiple string transformations (str_lower, str_upper, str_strip) in a pipeline, only the first transformation is applied, not subsequent ones. The bug occurs because the code optimizes these transforms into schema-level flags, but pydantic-core only applies the first flag when multiple are present.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_string_transform_chaining_2025-09-25_00-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_string_transform_chaining_2025-09-25_00-58_k3m9.md",
      "call_id": "514874a0",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Pydantic Experimental Pipeline datetime_tz() Not Implemented",
      "target": "pydantic.experimental.pipeline._Pipeline.datetime_tz",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `datetime_tz()` method is exposed in the public API but raises `NotImplementedError` when called with an actual timezone, violating the API contract.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_datetime_tz_2025-09-25_04-28_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_datetime_tz_2025-09-25_04-28_x3k9.md",
      "call_id": "0cfda70c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Pydantic Pipeline not_in Constraint Uses Wrong Operator",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `not_in` constraint in pydantic's experimental pipeline uses `operator.__not__()` (bitwise NOT) instead of logical `not`, causing a TypeError when validating values.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_pipeline_not_in_operator_2025-09-25_01-27_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_pipeline_not_in_operator_2025-09-25_01-27_x3k9.md",
      "call_id": "d23ad495",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Pydantic model_dump_json round_trip Parameter Violates Contract with by_alias=False",
      "target": "pydantic.BaseModel.model_dump_json",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When using `model_dump_json(by_alias=False, round_trip=True)` on models with field aliases, the output JSON cannot be parsed back into the model, violating the documented contract of the `round_trip` parameter which states \"dumped values should be valid as input for the model\".",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_round_trip_by_alias_2025-09-25_02-28_6yrb.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_round_trip_by_alias_2025-09-25_02-28_6yrb.md",
      "call_id": "6ff90c40",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic Field Alias Round-Trip Broken",
      "target": "pydantic.BaseModel.model_dump",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a model uses field aliases and `model_dump(by_alias=False)` is called, the resulting dictionary cannot be validated with `model_validate()` unless `populate_by_name=True` is set in the model config. This breaks the fundamental round-trip property of serialization.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_field_alias_roundtrip_2025-09-25_03-54_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_field_alias_roundtrip_2025-09-25_03-54_k3x9.md",
      "call_id": "90246e58",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.alias_generators Number Handling",
      "target": "pydantic.alias_generators.to_snake",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_snake()` function incorrectly inserts underscores before digits when converting from PascalCase/camelCase, even when the original snake_case input did not have underscores before numbers.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_alias_generators_numbers_2025-09-25_07-31_m3k8.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_alias_generators_numbers_2025-09-25_07-31_m3k8.md",
      "call_id": "d6aa7bbf",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.alias_generators Round-Trip Failure",
      "target": "pydantic.alias_generators.to_pascal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_pascal()` and `to_snake()` functions fail to round-trip correctly for snake_case strings containing single-letter segments, causing data loss when converting between naming conventions.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_alias_generators_roundtrip_2025-09-25_07-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_alias_generators_roundtrip_2025-09-25_07-30_x7k9.md",
      "call_id": "5185157b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.alias_generators.to_pascal Idempotence Violation",
      "target": "pydantic.alias_generators.to_pascal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_pascal` function is not idempotent: applying it twice to the same input produces different results. Specifically, `to_pascal(to_pascal('A_A'))` != `to_pascal('A_A')`.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_to_pascal_idempotence_2025-09-25_09-59_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_to_pascal_idempotence_2025-09-25_09-59_k3m9.md",
      "call_id": "7b4260a5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.alias_generators.to_snake Idempotence Violation",
      "target": "pydantic.alias_generators.to_snake",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_snake` function is not idempotent: applying it twice to the same input produces different results. Specifically, `to_snake(to_snake('A0'))` != `to_snake('A0')`.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_to_snake_idempotence_2025-09-25_09-59_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_to_snake_idempotence_2025-09-25_09-59_x7k9.md",
      "call_id": "0373d176",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.color Color HSL Round-Trip Precision Loss",
      "target": "pydantic.color.Color.as_hsl",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Color.as_hsl()` method loses precision when converting colors to HSL string format, causing RGB values to change by 1-2 units when round-tripping through HSL strings.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_color_hsl_precision_2025-09-25_07-32_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_color_hsl_precision_2025-09-25_07-32_k3m9.md",
      "call_id": "a5f516c3",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.color.Color HSL Round-trip Data Loss",
      "target": "pydantic.color.Color.as_hsl()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Color.as_hsl()` method loses color information for very dark colors due to rounding saturation and lightness to 0 decimal places, violating the round-trip property `Color(color.as_hsl()) == color`.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_color_hsl_round_trip_2025-09-25_08-25_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_color_hsl_round_trip_2025-09-25_08-25_x3m9.md",
      "call_id": "d9a28826",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.color.Color RGBA Alpha Precision Loss",
      "target": "pydantic.color.Color.as_rgb()",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Color.as_rgb()` method rounds alpha values to 2 decimal places, causing precision loss and violating the round-trip property `Color(color.as_rgb()) == color` for colors with alpha values that don't round cleanly to 2 decimal places.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_color_rgba_alpha_precision_2025-09-25_08-25_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_color_rgba_alpha_precision_2025-09-25_08-25_k7m2.md",
      "call_id": "7bbca328",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.decorator.to_pascal - Non-idempotent behavior",
      "target": "pydantic.deprecated.decorator.to_pascal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `to_pascal` function is not idempotent - applying it twice to the same input produces different results. Specifically, when the function converts a snake_case string to PascalCase, applying it again to the result incorrectly lowercases some characters.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_to_pascal_2025-09-25_05-28_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_to_pascal_2025-09-25_05-28_k3m9.md",
      "call_id": "cf5db790",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json bytes Encoder Crashes on Non-UTF-8 Bytes",
      "target": "pydantic.deprecated.json.pydantic_encoder",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pydantic_encoder` function crashes with `UnicodeDecodeError` when encoding bytes containing non-UTF-8 sequences. The bytes encoder calls `o.decode()` without specifying encoding or error handling.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_bytes_encoder_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_bytes_encoder_2025-09-25_00-00_k3m9.md",
      "call_id": "72ff8a44",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.decimal_encoder - Precision Loss for Fractional Decimals",
      "target": "pydantic.deprecated.json.decimal_encoder",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function silently loses precision when encoding `Decimal` values with fractional components. While the function correctly preserves integer-valued decimals by encoding them as `int`, it encodes fractional decimals as `float`, which introduces floating-point representation errors that violate the round-trip property implied by the function's docstring.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_decimal_encoder_2025-09-25_15-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_decimal_encoder_2025-09-25_15-30_k3x9.md",
      "call_id": "841c1e74",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.decimal_encoder Integer Detection",
      "target": "pydantic.deprecated.json.decimal_encoder",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function incorrectly detects integer-valued Decimals, causing values like `Decimal('1.0')` and `Decimal('42.00')` to be encoded as floats instead of ints, contradicting the function's documented purpose of preserving integer values.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_00-00_k3m9.md",
      "call_id": "308a83b8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.decimal_encoder Precision Loss",
      "target": "pydantic.deprecated.json.decimal_encoder",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function causes precision loss when encoding Decimal values with fractional parts, despite its docstring claiming it helps avoid \"failed round-tripping between encode and parse.\"",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_04-25_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_04-25_k7m3.md",
      "call_id": "921b38b0",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.decimal_encoder Precision Loss",
      "target": "pydantic.deprecated.json.decimal_encoder",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `decimal_encoder` function loses precision when encoding `Decimal` values with fractional parts, violating its documented purpose of avoiding \"failed round-tripping between encode and parse.\"",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_10-57_fw9n.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_decimal_encoder_2025-09-25_10-57_fw9n.md",
      "call_id": "084b6eaf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.pydantic_encoder Crashes on Non-UTF-8 Bytes",
      "target": "pydantic.deprecated.json.pydantic_encoder",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pydantic_encoder` function crashes with `UnicodeDecodeError` when encoding bytes objects that contain invalid UTF-8 sequences. The encoder assumes all bytes are UTF-8 encoded strings, but Python's `bytes` type can contain arbitrary binary data.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_encoder_bytes_2025-09-25_m8w3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_encoder_bytes_2025-09-25_m8w3.md",
      "call_id": "75c1f6a1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.pydantic_encoder UnicodeDecodeError on Non-UTF8 Bytes",
      "target": "pydantic.deprecated.json.pydantic_encoder",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pydantic_encoder` function crashes with a `UnicodeDecodeError` when encoding bytes that contain invalid UTF-8 sequences, which is a common occurrence for arbitrary binary data.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_pydantic_encoder_bytes_2025-09-25_01-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_pydantic_encoder_bytes_2025-09-25_01-30_k3m9.md",
      "call_id": "49fbc8dc",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.timedelta_isoformat - Incorrect handling of negative timedeltas",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `timedelta_isoformat` function incorrectly encodes negative timedeltas to ISO 8601 format. Due to Python's internal representation of negative timedeltas (where negative durations are stored as negative days plus positive seconds), the function produces incorrect ISO strings that don't represent the actual duration.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_05-28_x7n9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_05-28_x7n9.md",
      "call_id": "e94f211e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.timedelta_isoformat ISO 8601 Encoding",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `timedelta_isoformat` function produces incorrect ISO 8601 duration strings for negative timedeltas where `days < 0` but `seconds > 0` or `microseconds > 0`. The encoded duration cannot be correctly round-tripped back to the original timedelta value.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_07-51_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_07-51_x9k3.md",
      "call_id": "0c1aabb0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.timedelta_isoformat Incorrect Encoding",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`timedelta_isoformat` incorrectly encodes negative timedeltas with non-zero sub-day components, producing ISO 8601 strings that represent different values than the input.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_03-56_eejv.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_03-56_eejv.md",
      "call_id": "863ee5a3",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.json.timedelta_isoformat Incorrect ISO 8601 Encoding for Negative Timedeltas",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `timedelta_isoformat` function produces incorrect ISO 8601 duration strings for negative timedeltas that have non-zero seconds or microseconds components. The function incorrectly applies the negative sign to all components instead of properly handling Python's internal timedelta representation.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_04-56_7xwu.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_04-56_7xwu.md",
      "call_id": "63071173",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.parse.load_str_bytes Encoding Parameter Ignored for Pickle Protocol",
      "target": "pydantic.deprecated.parse.load_str_bytes",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `load_str_bytes` function ignores the `encoding` parameter when converting string input to bytes for pickle protocol, causing unpickling failures when the string contains non-ASCII characters.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_parse_load_str_bytes_2025-09-25_10-25_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_parse_load_str_bytes_2025-09-25_10-25_k7m3.md",
      "call_id": "8a749d80",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.parse.load_str_bytes Ignores encoding Parameter for Pickle",
      "target": "pydantic.deprecated.parse.load_str_bytes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_str_bytes` function ignores the `encoding` parameter when converting a string to bytes for pickle deserialization, always using UTF-8 encoding instead.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_load_str_bytes_encoding_2025-09-25_01-35_a7k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_load_str_bytes_encoding_2025-09-25_01-35_a7k3.md",
      "call_id": "feed600d",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.parse.load_str_bytes Rejects Content-Type with Parameters",
      "target": "pydantic.deprecated.parse.load_str_bytes",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `load_str_bytes` function incorrectly rejects valid HTTP Content-Type headers that include parameters such as charset. For example, `'application/json; charset=utf-8'` is rejected as an \"Unknown content-type\" even though it's a standard JSON Content-Type header.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_load_str_bytes_2025-09-25_q7k4.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_load_str_bytes_2025-09-25_q7k4.md",
      "call_id": "3fbcb88c",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.deprecated.parse.load_str_bytes Rejects Valid Content-Type Headers with Parameters",
      "target": "pydantic.deprecated.parse.load_str_bytes",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `load_str_bytes` function incorrectly rejects valid HTTP Content-Type headers that include parameters (e.g., `application/json; charset=utf-8`). The function uses `str.endswith()` to check content types, which fails when the content type includes standard parameters like charset.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_load_str_bytes_content_type_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_load_str_bytes_content_type_2025-09-25_00-01_x7k2.md",
      "call_id": "89dd02b8",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline == and != Operators",
      "target": "pydantic.experimental.pipeline._Pipeline",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `==` and `!=` operators on `_Pipeline` return `bool` instead of `_Pipeline` objects, inconsistent with the `.eq()` and `.not_eq()` methods which correctly return `_Pipeline` objects.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_operators_2025-09-25_00-16_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_operators_2025-09-25_00-16_x7k9.md",
      "call_id": "25683520",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Constraint Application Redundancy",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_apply_constraint` function applies constraints inconsistently: `Gt` correctly uses an `else` clause to avoid redundant validation, but `Ge`, `Lt`, `Le`, `Len`, and `MultipleOf` always add a redundant function validator wrapper even when the constraint is already embedded in the schema.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_constraint_redundancy_2025-09-25_15-30_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_constraint_redundancy_2025-09-25_15-30_k8m3.md",
      "call_id": "b8d074c0",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Double Validation for Ge/Lt/Le/MultipleOf Constraints",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_apply_constraint` function applies Ge, Lt, Le, and MultipleOf constraints twice - once to the schema and once as a validator function. This is inconsistent with how Gt constraints are handled and causes unnecessary validation overhead.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_double_validation_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_double_validation_2025-09-25_00-00_k3m9.md",
      "call_id": "22ddf40b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Ge Constraint Inconsistency",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Ge` (greater-than-or-equal) constraint in `_apply_constraint` creates unnecessarily complex schemas compared to `Gt`, `Lt`, and `Le` constraints due to always applying an additional validator function even when the constraint can be set directly in the schema.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_ge_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_ge_2025-09-25_00-00_k3m9.md",
      "call_id": "f82b2602",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Ge/Lt/Le Double Validation",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Ge` (>=), `Lt` (<), and `Le` (<=) constraint implementations apply validation twice when the schema type is int/float/decimal, unlike `Gt` (>) which correctly applies validation once.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_double_validation_2025-09-25_00-56_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_double_validation_2025-09-25_00-56_x9k3.md",
      "call_id": "bf1ea1bf",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Ge/Lt/Le Redundant Validation",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Ge`, `Lt`, and `Le` constraints apply validation twice for numeric types (int/float/decimal), causing redundant checks, unlike `Gt` which correctly uses an `else` clause.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_ge_redundant_2025-09-25_00-01_p3m8.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_ge_redundant_2025-09-25_00-01_p3m8.md",
      "call_id": "572ff86c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Gt Constraint Fails with Type Mismatch",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `gt()` (greater than) constraint in pydantic's experimental pipeline API fails to validate when the constraint value type doesn't match the schema type (e.g., using `gt(5.5)` on an integer field). The constraint silently passes invalid values instead of raising a ValidationError.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_gt_2025-09-25_00-00_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_gt_2025-09-25_00-00_x9k3.md",
      "call_id": "55eac342",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Invalid use of operator.__not__",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_NotIn` constraint implementation uses `operator.__not__()` which does not exist in Python's operator module, causing an `AttributeError` when the `not_in()` constraint is used.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_operator_not_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_operator_not_2025-09-25_00-01_x7k2.md",
      "call_id": "1e79cb71",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Multiple Constraint Implementation Bugs",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Five constraint types (`Ge`, `Lt`, `Le`, `MultipleOf`, `Len`) in `_apply_constraint` create unnecessarily complex schemas by always applying an additional validator function even when the constraint can be set directly in the schema. Only `Gt` is implemented correctly with the proper `else` clause.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_constraints_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_constraints_2025-09-25_00-00_k3m9.md",
      "call_id": "6ea7018e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Multiple Constraints Applied Twice",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Five constraint types (Ge, Lt, Le, Len, MultipleOf) in `_apply_constraint` are incorrectly applied twice: once as a schema constraint and again as a wrapper validator function. This is due to missing `else:` clauses that would prevent the double application. The `Gt` constraint is implemented correctly and shows the intended behavior.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_constraints_2025-09-25_00-00_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_constraints_2025-09-25_00-00_k8x3.md",
      "call_id": "a336247f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Multiple Constraints Apply Validation Twice",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiple constraint types (Ge, Lt, Le, Len, MultipleOf) in `_apply_constraint` apply validation checks twice - once in the schema and once via a validator function. This is inconsistent with Gt's implementation and causes unnecessary performance overhead.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_comprehensive_double_validation_2025-09-25_00-02_p9k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_comprehensive_double_validation_2025-09-25_00-02_p9k3.md",
      "call_id": "6f76f7ca",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Redundant Validation in Ge, Lt, Le Constraints",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Ge`, `Lt`, and `Le` constraints apply validation twice: once through the optimized schema constraint and once through a redundant `function-after` validator. The `Gt` constraint correctly avoids this redundancy by only using `_check_func` when the schema optimization is not applied.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_redundant_validation_2025-09-25_02-25_co8j.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_redundant_validation_2025-09-25_02-25_co8j.md",
      "call_id": "bb85b4e9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline Redundant Validation in Ge/Lt/Le Constraints",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Ge`, `Lt`, and `Le` constraint implementations in `pydantic.experimental.pipeline._apply_constraint` add redundant validator functions even when schema-level constraints are already set, unlike the `Gt` constraint which correctly uses an `else` clause to avoid redundancy. This causes double validation and reduced performance for these constraints on numeric types.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_pipeline_redundant_validation_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_pipeline_redundant_validation_2025-09-25_00-00_k3m9.md",
      "call_id": "07e7da2f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline String Transform Chaining",
      "target": "pydantic.experimental.pipeline._apply_transform",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When chaining string transformations like `transform(str.lower).str_upper()`, only the first transformation is applied. The schema incorrectly sets both `to_lower: true` and `to_upper: true`, but pydantic-core only applies the first flag.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_string_transform_chaining_2025-09-25_02-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_string_transform_chaining_2025-09-25_02-58_k3m9.md",
      "call_id": "102389b4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline _NotIn Constraint",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_NotIn` constraint uses bitwise NOT (`operator.__not__`) instead of logical not, causing it to always accept values regardless of whether they're in the exclusion list.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_not_in_2025-09-25_00-00_xk7f.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_not_in_2025-09-25_00-00_xk7f.md",
      "call_id": "c5d3c4b8",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline not_in Constraint Uses Bitwise NOT Instead of Logical NOT",
      "target": "pydantic.experimental.pipeline._apply_constraint",
      "severity": "Critical",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `not_in` constraint is broken because it uses `operator.__not__` (bitwise NOT) instead of logical `not`. This causes the constraint to always pass validation, even for values that should be rejected.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_not_in_bitwise_2025-09-25_15-31_j7q9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_not_in_bitwise_2025-09-25_15-31_j7q9.md",
      "call_id": "9a9232d0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline str_strip Inconsistency",
      "target": "pydantic.experimental.pipeline._Pipeline.str_strip",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `str_strip()` method in pydantic's experimental pipeline API does not behave identically to Python's `str.strip()` method. It fails to strip certain whitespace characters that Python's `str.strip()` removes.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_str_strip_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_str_strip_2025-09-25_00-00_x3k9.md",
      "call_id": "168f18e2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline str_strip Inconsistent With Python's str.strip()",
      "target": "pydantic.experimental.pipeline.str_strip()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `str_strip()` method in pydantic's experimental pipeline API doesn't strip the same whitespace characters as Python's `str.strip()`. Specifically, it fails to strip ASCII separator characters `\\x1c`, `\\x1d`, `\\x1e`, and `\\x1f` that Python considers whitespace.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_str_strip_2025-09-25_17-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_str_strip_2025-09-25_17-00_a7b3.md",
      "call_id": "bab5bfec",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.experimental.pipeline str_strip() Doesn't Strip Unicode Whitespace",
      "target": "pydantic.experimental.pipeline._Pipeline.str_strip",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `str_strip()` method in pipeline doesn't strip Unicode whitespace characters, only ASCII whitespace. This is inconsistent with Python's `str.strip()` behavior.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_experimental_str_strip_unicode_2025-09-25_03-12_a8f3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_experimental_str_strip_unicode_2025-09-25_03-12_a8f3.md",
      "call_id": "f4ce5b60",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.networks.AnyUrl.build() Inserts Default Port",
      "target": "pydantic.networks.AnyUrl.build()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`AnyUrl.build()` violates the round-trip property by inserting default ports (80 for HTTP, 443 for HTTPS) when `port=None` is explicitly provided. This causes the extracted `.port` property to return the default port instead of `None`, breaking the invariant that `build(**components).port == components['port']`.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_anyurl_build_default_port_2025-09-25_10-27_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_anyurl_build_default_port_2025-09-25_10-27_k3m9.md",
      "call_id": "a57f0836",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin Handler Exceptions Mask Validation Results",
      "target": "pydantic.plugin._schema_validator.build_wrapper()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When plugin event handlers (`on_success`, `on_error`, `on_exception`) raise exceptions, they mask the original validation result or error, violating the principle that handlers should observe but not interfere with validation.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_handler_exceptions_2025-09-25_09-30_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_handler_exceptions_2025-09-25_09-30_k8x3.md",
      "call_id": "6904f666",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin Whitespace Handling in PYDANTIC_DISABLE_PLUGINS",
      "target": "pydantic.plugin._loader.get_plugins",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `get_plugins` function doesn't strip whitespace when parsing `PYDANTIC_DISABLE_PLUGINS`, causing plugin names after commas (with spaces) to not match actual entry point names.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_whitespace_2025-09-25_11-24_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_whitespace_2025-09-25_11-24_x7k9.md",
      "call_id": "782470c2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin build_wrapper Exception Masking",
      "target": "pydantic.plugin._schema_validator.build_wrapper",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When event handlers (on_error, on_success, on_exception) raise exceptions, they mask the original error/return value and prevent subsequent handlers from executing. This causes silent failures and breaks the plugin handler chain.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_build_wrapper_2025-09-25_21-30_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_build_wrapper_2025-09-25_21-30_x7k3.md",
      "call_id": "e9e4e310",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin build_wrapper on_error Handler Exception Suppression",
      "target": "pydantic.plugin._schema_validator.build_wrapper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an `on_error` handler raises an exception while handling a `ValidationError`, the handler's exception replaces the original `ValidationError`, causing it to be lost. This breaks the guarantee that validation errors are always propagated to the caller.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_build_wrapper_on_error_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_build_wrapper_on_error_2025-09-25_00-00_k3m9.md",
      "call_id": "e798c12f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin build_wrapper on_exception Handler Exception Suppression",
      "target": "pydantic.plugin._schema_validator.build_wrapper",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When an `on_exception` handler raises an exception while handling a non-ValidationError exception, the handler's exception replaces the original exception, causing it to be lost. This breaks exception transparency and makes debugging impossible.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_build_wrapper_on_exception_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_build_wrapper_on_exception_2025-09-25_00-00_x7k9.md",
      "call_id": "1443373b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin filter_handlers AttributeError",
      "target": "pydantic.plugin._schema_validator.filter_handlers",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `filter_handlers` function in `pydantic.plugin._schema_validator` directly accesses the `__module__` attribute without checking if it exists, which can cause an `AttributeError` when handler methods are callable objects that lack this attribute.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_filter_handlers_2025-09-25_04-26_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_filter_handlers_2025-09-25_04-26_k8m3.md",
      "call_id": "f50e3d6c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin get_plugins Case-Sensitive Environment Variable",
      "target": "pydantic.plugin._loader.get_plugins",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `PYDANTIC_DISABLE_PLUGINS` environment variable check is case-sensitive, only recognizing lowercase `'true'` but not common variations like `'True'` or `'TRUE'`. This is inconsistent with typical environment variable conventions where boolean values are case-insensitive.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_disable_case_sensitivity_2025-09-25_04-26_p7q1.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_disable_case_sensitivity_2025-09-25_04-26_p7q1.md",
      "call_id": "7a33a2a0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin._loader Whitespace Handling in PYDANTIC_DISABLE_PLUGINS",
      "target": "pydantic.plugin._loader.get_plugins()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The plugin loader fails to correctly parse the `PYDANTIC_DISABLE_PLUGINS` environment variable when plugin names are separated by commas with spaces (e.g., `\"plugin1, plugin2\"`). The code splits by comma but doesn't strip whitespace, causing plugin names with leading/trailing spaces to not match actual plugin names.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_loader_whitespace_2025-09-25_12-00_ab3x.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_loader_whitespace_2025-09-25_12-00_ab3x.md",
      "call_id": "8f843765",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin._loader Whitespace in PYDANTIC_DISABLE_PLUGINS",
      "target": "pydantic.plugin._loader.get_plugins()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `PYDANTIC_DISABLE_PLUGINS` environment variable parser does not strip whitespace when splitting the comma-separated list. This causes plugins to not be disabled when the list contains spaces after commas (e.g., `'plugin1, plugin2'`).",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_loader_whitespace_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_loader_whitespace_2025-09-25_14-30_k3m9.md",
      "call_id": "07588d38",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin._schema_validator ValueError Not Caught",
      "target": "pydantic.plugin._schema_validator.PluggableSchemaValidator.__init__",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When a plugin's `new_schema_validator` method returns a tuple with the wrong number of elements, a `ValueError` is raised but not caught by the existing `except TypeError` clause. This results in an unhelpful error message that doesn't identify which plugin caused the problem.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_exception_handling_2025-09-25_03-57_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_exception_handling_2025-09-25_03-57_k3m9.md",
      "call_id": "fb5aa0c8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.plugin.filter_handlers AttributeError on Missing __module__",
      "target": "pydantic.plugin._schema_validator.filter_handlers",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `filter_handlers` function crashes with `AttributeError` when a handler method lacks a `__module__` attribute (e.g., when the method is set to a builtin type instance like `int`, `str`, `list`, etc.).",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_plugin_filter_handlers_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_plugin_filter_handlers_2025-09-25_00-00_x3k9.md",
      "call_id": "300507ce",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.v1 Decimal Precision Loss in JSON Roundtrip",
      "target": "pydantic.v1.BaseModel",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Decimal values lose precision when serialized to JSON via `model.json()` and deserialized via `parse_raw()`, causing silent data corruption.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_v1_decimal_json_roundtrip_2025-09-25_10-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_v1_decimal_json_roundtrip_2025-09-25_10-58_k3m9.md",
      "call_id": "81be3874",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.v1 Field `multiple_of` Constraint Fails for Large Integers",
      "target": "pydantic.v1.Field(multiple_of=...)",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `multiple_of` constraint in pydantic.v1 fails to validate large integers (>= 10^17) correctly due to floating-point precision loss. Values that are not multiples of the specified number incorrectly pass validation, and values that are multiples incorrectly fail validation.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_v1_multiple_of_2025-09-25_02-58_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_v1_multiple_of_2025-09-25_02-58_x7k9.md",
      "call_id": "3e4271e9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic.v1.Color HSL String Precision Loss",
      "target": "pydantic.v1.color.Color.as_hsl()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Color.as_hsl()` method loses precision for very dark or very light colors due to formatting HSL percentages with zero decimal places, breaking round-trip conversion.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_v1_color_hsl_precision_2025-09-25_09-30_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_v1_color_hsl_precision_2025-09-25_09-30_x7k3.md",
      "call_id": "009d5dc0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pydantic_encoder Crashes on Non-UTF8 Bytes",
      "target": "pydantic.deprecated.json.pydantic_encoder",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `pydantic_encoder` function crashes with `UnicodeDecodeError` when encoding bytes objects that contain invalid UTF-8 sequences. The encoder uses `lambda o: o.decode()` which assumes all bytes are valid UTF-8, but this is not always the case for arbitrary binary data.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_encoder_bytes_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_encoder_bytes_2025-09-25_12-00_k3m9.md",
      "call_id": "31454cd1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "timedelta_isoformat Incorrect Encoding for Negative Timedeltas",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `timedelta_isoformat` function incorrectly encodes negative timedeltas when the timedelta has both negative days and positive seconds components (due to Python's normalization). The function applies a negative sign to the entire ISO 8601 string but uses the positive `td.seconds` value, resulting in an ISO format that represents a different duration than the input timedelta.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_23-30_k7h3.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_deprecated_timedelta_isoformat_2025-09-25_23-30_k7h3.md",
      "call_id": "ad3d34c2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "timedelta_isoformat Incorrect Encoding of Negative Timedeltas",
      "target": "pydantic.deprecated.json.timedelta_isoformat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `timedelta_isoformat` function incorrectly encodes negative timedeltas that have positive seconds/microseconds components, producing ISO 8601 duration strings that represent different durations than the original timedelta objects.",
      "package": "pydantic",
      "file_name": "bug_report_pydantic_timedelta_isoformat_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/pydantic/bug_reports/bug_report_pydantic_timedelta_isoformat_2025-09-25_14-30_k3m9.md",
      "call_id": "1a5df8cf",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "BaseMaskedArray.fillna Ignores limit Parameter",
      "target": "pandas.core.arrays.BaseMaskedArray.fillna",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `fillna` method in `BaseMaskedArray` (affecting `IntegerArray`, `FloatingArray`, `BooleanArray`) completely ignores the `limit` parameter when filling with a scalar value, filling all NA values instead of respecting the specified limit.",
      "package": "scipy",
      "file_name": "bug_report_pandas_core_arrays_BaseMaskedArray_fillna_limit_2025-09-25_09-14_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_pandas_core_arrays_BaseMaskedArray_fillna_limit_2025-09-25_09-14_k3m9.md",
      "call_id": "4736f4b9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Django SQLite3 _sqlite_date_trunc TypeError with Timezone",
      "target": "django.db.backends.sqlite3._functions._sqlite_date_trunc",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_sqlite_date_trunc` function crashes with a TypeError when processing date-only strings (without time component) in timezone-aware database connections. The function attempts to call `.replace(tzinfo=...)` on a `date` object, which only works on `datetime` objects.",
      "package": "scipy",
      "file_name": "bug_report_django_sqlite3_date_trunc_timezone_2025-09-25_09-58_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_django_sqlite3_date_trunc_timezone_2025-09-25_09-58_k3x9.md",
      "call_id": "f78736cd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "IntervalArray.contains() Fails for Degenerate Intervals",
      "target": "pandas.core.arrays.IntervalArray.contains()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`IntervalArray.contains()` incorrectly returns `False` for degenerate intervals (where left == right) when testing if they contain their single point value, even when one or both endpoints are closed.",
      "package": "scipy",
      "file_name": "bug_report_pandas_intervalarray_contains_degenerate_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_pandas_intervalarray_contains_degenerate_2025-09-25_00-00_k3x9.md",
      "call_id": "09f21dc6",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "LinearNDInterpolator Returns NaN at Original Data Point",
      "target": "scipy.interpolate.LinearNDInterpolator",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`LinearNDInterpolator` incorrectly returns `NaN` when evaluated at one of its own input data points, violating the fundamental property that an interpolator should return exact values at the data points used to construct it.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_LinearNDInterpolator_2025-09-25_00-55_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_LinearNDInterpolator_2025-09-25_00-55_k3f9.md",
      "call_id": "ba22db3c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RotationSpline Crashes with NaN/Inf on Valid Inputs",
      "target": "scipy.spatial.transform.RotationSpline",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "RotationSpline crashes with \"array must not contain infs or NaNs\" when initialized with certain valid, non-uniformly spaced time arrays. The inputs satisfy all documented requirements (strictly increasing times, valid rotations) but cause numerical overflow during angular rate computation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotationspline_nan_inf_2025-09-25_00-01_m7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotationspline_nan_inf_2025-09-25_00-01_m7k2.md",
      "call_id": "49b24297",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RotationSpline Fails to Pass Through Control Points",
      "target": "scipy.spatial.transform.RotationSpline",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "RotationSpline violates the fundamental interpolation property: it does not always pass through the specified control points. With certain non-uniform time spacings, the spline evaluates to a different rotation than the control rotation at that time.",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotationspline_control_point_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotationspline_control_point_2025-09-25_00-00_k3x9.md",
      "call_id": "b7a3aee0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RotationSpline Produces Zero Norm Quaternions During Evaluation",
      "target": "scipy.spatial.transform.RotationSpline",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "RotationSpline successfully initializes with certain valid inputs but crashes with \"Found zero norm quaternions\" when evaluating the spline at intermediate points. This is a silent failure mode where construction succeeds but usage fails.",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotationspline_zero_norm_2025-09-25_00-02_p3w1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotationspline_zero_norm_2025-09-25_00-02_p3w1.md",
      "call_id": "9b301d80",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "SparseArray.astype Contract Violation",
      "target": "pandas.core.arrays.sparse.SparseArray.astype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `SparseArray.astype()` method's docstring states \"The output will always be a SparseArray\", but the implementation returns a dense numpy ndarray when given a non-SparseDtype argument.",
      "package": "scipy",
      "file_name": "bug_report_sparse_array_astype_2025-09-25_06-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_sparse_array_astype_2025-09-25_06-30_x7k9.md",
      "call_id": "d44b2727",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "csgraph_from_dense Incorrect Null Value Comparison",
      "target": "scipy.sparse.csgraph.csgraph_from_dense",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`csgraph_from_dense` incorrectly treats values that are close to but not equal to `null_value` as null edges, using an inappropriate tolerance for floating-point comparison. This causes legitimate edges to be silently dropped when their weights are numerically close to the null value.",
      "package": "scipy",
      "file_name": "bug_report_csgraph_from_dense_precision_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_csgraph_from_dense_precision_2025-09-25_00-00_a1b2.md",
      "call_id": "1b2dd458",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.conf.urls.include Namespace Override Not Validated",
      "target": "django.conf.urls.include",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `include()` function allows namespace override when a 2-tuple with app_name is passed, but the error message and exception handling suggest this should be prohibited. The validation check for namespace override is misplaced inside the `except ValueError` block, causing it to only trigger for invalid tuple lengths.",
      "package": "scipy",
      "file_name": "bug_report_django_conf_urls_include_2025-09-25_00-00_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_django_conf_urls_include_2025-09-25_00-00_k9x3.md",
      "call_id": "4050d32e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.core.serializers ProgressBar Division by Zero",
      "target": "django.core.serializers.base.ProgressBar",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "ProgressBar crashes with ZeroDivisionError when total_count is 0 and update() is called, which happens when serializing empty querysets with progress_output enabled.",
      "package": "scipy",
      "file_name": "bug_report_django_core_serializers_progressbar_division_by_zero_2025-09-25_05-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_django_core_serializers_progressbar_division_by_zero_2025-09-25_05-25_k3x9.md",
      "call_id": "968caa9e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "floyd_warshall Silent Failure with Fortran-Contiguous Arrays",
      "target": "scipy.sparse.csgraph.floyd_warshall",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`floyd_warshall` with `overwrite=True` silently fails when given a Fortran-contiguous array, returning the unmodified input array instead of computing shortest paths. The function raises a `ValueError(\"ndarray is not C-contiguous\")` internally, but this exception is ignored, leading to incorrect results being returned without any warning to the user.",
      "package": "scipy",
      "file_name": "bug_report_floyd_warshall_fortran_2025-09-25_00-01_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_floyd_warshall_fortran_2025-09-25_00-01_c3d4.md",
      "call_id": "9acad669",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "kaiser_bessel_derived Returns Empty Array for Negative M Instead of Raising ValueError",
      "target": "scipy.signal.windows.kaiser_bessel_derived",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`kaiser_bessel_derived` returns an empty array for negative M values instead of raising a `ValueError`, violating its documented contract. This behavior is inconsistent with all other window functions in `scipy.signal.windows`.",
      "package": "scipy",
      "file_name": "bug_report_kaiser_bessel_derived_negative_m_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_kaiser_bessel_derived_negative_m_2025-09-25_00-00_a1b2.md",
      "call_id": "7517fc59",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.arrays NA Power Zero Inconsistency",
      "target": "pandas.core.arrays.IntegerArray.__pow__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Masked arrays (IntegerArray, FloatingArray, BooleanArray) inconsistently handle NA propagation in power operations. `NA ** 0` returns `1` while `NA * 0` returns `NA`, violating the principle that NA should propagate consistently through operations.",
      "package": "scipy",
      "file_name": "bug_report_pandas_masked_array_pow_zero_2025-09-25_08-23_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_pandas_masked_array_pow_zero_2025-09-25_08-23_k3m9.md",
      "call_id": "6125ea17",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.interchange get_chunks() Creates Empty Chunks",
      "target": "pandas.core.interchange.dataframe.PandasDataFrameXchg.get_chunks()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When `get_chunks(n_chunks)` is called with `n_chunks` greater than the number of rows/elements in the data, the method creates empty chunks instead of returning a reasonable number of non-empty chunks. This violates user expectations and creates wasteful iteration.",
      "package": "scipy",
      "file_name": "bug_report_pandas_interchange_get_chunks_2025-09-25_00-00_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_pandas_interchange_get_chunks_2025-09-25_00-00_x8k3.md",
      "call_id": "d8a17a60",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "pandas.core.strings rsplit() Missing regex Parameter",
      "target": "pandas.core.strings.accessor.StringMethods.rsplit",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `rsplit()` method lacks the `regex` parameter that its mirror operation `split()` has, creating an API inconsistency between two closely related methods.",
      "package": "scipy",
      "file_name": "bug_report_pandas_strings_rsplit_2025-09-25_00-00_ab3f.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_pandas_strings_rsplit_2025-09-25_00-00_ab3f.md",
      "call_id": "21745c5b",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.hierarchy.cophenet Returns NaN Without Error or Documentation",
      "target": "scipy.cluster.hierarchy.cophenet",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `cophenet` function returns `nan` for valid inputs (n=2 observations or constant distance data) without raising an error or documenting this behavior, violating the function's implicit contract with users.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_hierarchy_cophenet_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_hierarchy_cophenet_2025-09-25_14-30_x7k9.md",
      "call_id": "190c0507",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.hierarchy.fcluster - Incorrect cluster count with identical observations",
      "target": "scipy.cluster.hierarchy.fcluster",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using `fcluster` with the `'maxclust'` criterion on a linkage matrix where all merge distances are exactly 0 (i.e., all observations are identical), the function returns fewer clusters than requested for intermediate values of k, but returns exactly k clusters when k equals the number of observations. This inconsistent behavior violates the expected contract of the `maxclust` criterion.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_hierarchy_fcluster_2025-09-25_01-52_wjt1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_hierarchy_fcluster_2025-09-25_01-52_wjt1.md",
      "call_id": "1deb3e69",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq - Incorrect Distance with Duplicate Centroids",
      "target": "scipy.cluster.vq.vq",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The optimized C implementation of `vq()` returns incorrect (non-zero) distances when an observation exactly matches a centroid in a codebook that contains duplicate centroids. The Python reference implementation `py_vq()` correctly returns zero distance in the same scenario.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_vq_duplicate_centroids_2025-09-25_13-30_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_vq_duplicate_centroids_2025-09-25_13-30_k9x2.md",
      "call_id": "a23dbe2a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq k-means++ Division by Zero",
      "target": "scipy.cluster.vq._kpp",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The k-means++ initialization method (`_kpp` function) performs division by zero when selecting centroids from data containing duplicate points, producing a `RuntimeWarning: invalid value encountered in divide`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_vq_kpp_2025-09-25_15-30_a7x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_vq_kpp_2025-09-25_15-30_a7x3.md",
      "call_id": "f5e486cd",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Cholesky Crash",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`kmeans2` crashes with `numpy.linalg.LinAlgError: Matrix is not positive definite` when using the default 'random' initialization method on valid input data. The crash occurs in the `_krandinit` function which attempts a Cholesky decomposition of the covariance matrix without checking if the matrix is positive definite.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_kmeans2_cholesky_2025-09-25_13-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_kmeans2_cholesky_2025-09-25_13-30_k3f9.md",
      "call_id": "b07a42dc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Crash on Small Datasets",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`kmeans2` crashes with `numpy.linalg.LinAlgError: Matrix is not positive definite` when called with small datasets using the default `minit='random'` initialization method.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_kmeans2_2025-09-25_04-22_bb2x.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_kmeans2_2025-09-25_04-22_bb2x.md",
      "call_id": "3a1ab195",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Crashes on Low-Variance Data",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `kmeans2` function crashes with `LinAlgError: Matrix is not positive definite` when clustering data with low variance using the default 'random' initialization method.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_kmeans2_2025-09-25_03-23_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_kmeans2_2025-09-25_03-23_k3m9.md",
      "call_id": "0324d5d2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Crashes on Rank-Deficient Data",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`kmeans2` with `minit='random'` crashes with `LinAlgError: Matrix is not positive definite` when given data where all features are perfectly correlated (rank-deficient data), even though this is valid input.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_kmeans2_rank_deficient_2025-09-25_09-45_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_kmeans2_rank_deficient_2025-09-25_09-45_x7k2.md",
      "call_id": "eb09b137",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Crashes on Square Data",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`kmeans2` with `minit='random'` crashes with `LinAlgError: Matrix is not positive definite` when the number of observations equals the number of features (i.e., square data matrices).",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_vq_kmeans2_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_vq_kmeans2_2025-09-25_14-30_k3m9.md",
      "call_id": "3b4adf09",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.kmeans2 Returns Inconsistent Labels and Centroids",
      "target": "scipy.cluster.vq.kmeans2",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `kmeans2` function returns labels that do not correspond to the returned centroids. The labels represent assignments to the centroids from the second-to-last iteration, not the final centroids.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_kmeans2_labels_2025-09-25_00-15_j7m3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_kmeans2_labels_2025-09-25_00-15_j7m3.md",
      "call_id": "b8c2b782",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.whiten Data Corruption with Zero-Std Columns",
      "target": "scipy.cluster.vq.whiten",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `whiten` function corrupts data when applied to arrays with zero-standard-deviation columns, multiplying values by ~10^16 instead of leaving them unchanged as documented.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_whiten_2025-09-25_03-29_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_whiten_2025-09-25_03-29_x9k2.md",
      "call_id": "a9c871f8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.whiten Float Precision Bug",
      "target": "scipy.cluster.vq.whiten",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `whiten` function incorrectly handles constant-valued columns when floating point precision causes `np.std()` to return a very small non-zero value instead of exactly 0. This causes the function to divide by a tiny number, producing astronomically large incorrect values instead of preserving the original constant values as documented.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_whiten_2025-09-25_02-30_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_whiten_2025-09-25_02-30_k8x3.md",
      "call_id": "fadf6720",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.cluster.vq.whiten Floating-Point Precision Bug",
      "target": "scipy.cluster.vq.whiten",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `whiten` function fails to handle columns with near-zero standard deviation due to floating-point precision issues, producing extremely large values instead of leaving the column unchanged as documented.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cluster_vq_whiten_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cluster_vq_whiten_2025-09-25_00-00_x7k9.md",
      "call_id": "2713f168",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.convert_temperature Accepts Physically Impossible Negative Absolute Temperatures",
      "target": "scipy.constants.convert_temperature",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `convert_temperature` function accepts and converts physically impossible negative values for absolute temperature scales (Kelvin and Rankine) without validation, violating fundamental thermodynamic constraints where absolute zero is the lowest possible temperature (0 K or 0 R).",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_convert_temperature_2025-09-25_10-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_convert_temperature_2025-09-25_10-30_k3x9.md",
      "call_id": "1f9e59e8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.convert_temperature Identity Conversion Loss",
      "target": "scipy.constants.convert_temperature",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `convert_temperature` is called with the same scale for both `old_scale` and `new_scale` (identity conversion), it loses precision for small temperature values due to catastrophic cancellation in floating-point arithmetic. For very small values (< 1e-20), the result becomes 0.0 instead of returning the original value.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_convert_temperature_identity_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_convert_temperature_identity_2025-09-25_00-00_k3m9.md",
      "call_id": "234cf3fa",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.find Cannot Find 90 Constants",
      "target": "scipy.constants.find",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `find()` function searches only the current CODATA 2022 constants but users can access constants from all CODATA versions (2002-2022) through `physical_constants`. This means 90 constants in `physical_constants` cannot be discovered using `find()`, violating the documented purpose of the function.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_find_2025-09-25_04-50_ctzo.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_find_2025-09-25_04-50_ctzo.md",
      "call_id": "e913bcbc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.find() Doesn't Return All Keys",
      "target": "scipy.constants.find()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `find()` function claims in its docstring to \"By default, return all keys\" when called with `None`, but it only returns keys from the current CODATA version (355 keys) instead of all keys in `physical_constants` (445 keys), missing 90 constants.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_find_2025-09-25_00-00_m8x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_find_2025-09-25_00-00_m8x2.md",
      "call_id": "95a4ffcf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.find() Missing 90 Physical Constants",
      "target": "scipy.constants.find",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `find()` function only searches through CODATA 2022 constants (355 keys) instead of all available physical constants (445 keys), making 90 deprecated constants unsearchable despite being present in `physical_constants`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_find_2025-09-25_03-15_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_find_2025-09-25_03-15_k8x2.md",
      "call_id": "2153b4cd",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.find() Type Validation",
      "target": "scipy.constants.find()",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `find()` function crashes with an unclear `AttributeError` when passed a non-string argument, despite having a type hint that suggests it accepts `str | None`. The function should validate the input type and raise a clear `TypeError`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_find_2025-09-25_10-22_296d.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_find_2025-09-25_10-22_296d.md",
      "call_id": "67bcb7d4",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.precision Returns Negative Values",
      "target": "scipy.constants.precision",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `precision()` function in `scipy.constants` returns negative values for physical constants that have negative values, which is physically nonsensical. Precision (relative uncertainty) should always be non-negative.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_precision_negative_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_precision_negative_2025-09-25_00-00_k3x9.md",
      "call_id": "211cf122",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.precision() Docstring Example",
      "target": "scipy.constants.precision()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstring example for `scipy.constants.precision()` shows incorrect output that doesn't match the actual function behavior.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_precision_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_precision_2025-09-25_00-00_k3x9.md",
      "call_id": "2bfabb6b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.precision() Returns Negative Values",
      "target": "scipy.constants.precision()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `precision()` function returns negative relative precision values when the physical constant has a negative value, violating the mathematical definition of relative precision which should always be non-negative.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_precision_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_precision_2025-09-25_00-00_k3f9.md",
      "call_id": "5f900b19",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.constants.precision() Returns Negative Values",
      "target": "scipy.constants.precision()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.constants.precision()` function returns negative values for physical constants that have negative values. This violates standard metrological convention where relative precision/uncertainty should always be non-negative.",
      "package": "scipy",
      "file_name": "bug_report_scipy_constants_precision_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_constants_precision_2025-09-25_00-00_k3m9.md",
      "call_id": "894cd31a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets Inconsistent User-Agent Headers",
      "target": "scipy.datasets.download_all",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`fetch_data()` and `download_all()` use inconsistent User-Agent headers when downloading datasets, despite both referencing the same GitHub issue #21879.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_user_agent_2025-09-25_00-01_a7x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_user_agent_2025-09-25_00-01_a7x2.md",
      "call_id": "8e586607",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets Inconsistent User-Agent Headers",
      "target": "scipy.datasets._download_all.download_all",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The User-Agent header sent to data servers is inconsistent: `fetch_data` includes the SciPy version while `download_all` does not, despite both functions referencing the same GitHub issue (#21879) that introduced User-Agent headers.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_user_agent_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_user_agent_2025-09-25_00-00_x7k2.md",
      "call_id": "fea2c85b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets User-Agent Inconsistency",
      "target": "scipy.datasets",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `fetch_data()` and `download_all()` functions in scipy.datasets use inconsistent User-Agent headers when downloading data. `fetch_data()` includes the SciPy version number while `download_all()` does not, violating the principle of consistency.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_user_agent_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_user_agent_2025-09-25_00-00_k3f9.md",
      "call_id": "bb79f7b5",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets._clear_cache() Uses Assert for Input Validation",
      "target": "scipy.datasets._utils._clear_cache()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`_clear_cache()` uses `assert callable(dataset)` for input validation, which can be disabled with Python's `-O` flag, leading to unpredictable failures.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_assert_validation_2025-09-25_00-01_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_assert_validation_2025-09-25_00-01_k8x3.md",
      "call_id": "c6ec5da2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets._download_all main() Crashes When Pooch Not Installed",
      "target": "scipy.datasets._download_all.main",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `main()` function in `_download_all.py` crashes with `AttributeError` when pooch is not installed, instead of providing a clear error message. The bug occurs because the default argument to `argparse` calls `pooch.os_cache()` at parse time, before the `download_all()` function can check if pooch is installed.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_download_all_main_pooch_2025-09-25_00-00_m3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_download_all_main_pooch_2025-09-25_00-00_m3k9.md",
      "call_id": "2cda717f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets._download_all.main() Crashes Without Pooch",
      "target": "scipy.datasets._download_all.main()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When running `_download_all.py` as a script without the optional `pooch` dependency installed, the `main()` function crashes with a confusing `AttributeError` instead of the helpful `ImportError` that `download_all()` would provide.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_download_all_2025-09-25_15-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_download_all_2025-09-25_15-30_k3x9.md",
      "call_id": "d1b28944",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Input Validation",
      "target": "scipy.datasets.clear_cache",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.datasets.clear_cache()` silently accepts invalid input types (strings, integers, dicts, etc.) when the cache directory doesn't exist, violating its documented API contract that specifies it should only accept `None`, a callable, or a list/tuple of callables.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_01-27_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_01-27_k9m2.md",
      "call_id": "4810ba6c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Input Validation Bypass",
      "target": "scipy.datasets.clear_cache",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`clear_cache()` skips input validation when the cache directory doesn't exist, silently accepting invalid inputs instead of raising appropriate errors.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_00-00_k3x9.md",
      "call_id": "69a2dca3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Input Validation Bypass",
      "target": "scipy.datasets.clear_cache",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clear_cache` function accepts invalid inputs (non-callables) without raising an error when the cache directory doesn't exist, violating its documented contract that it should only accept `callable or list/tuple of callable or None`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_00-00_k3m9.md",
      "call_id": "0ab115fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Input Validation Bypass",
      "target": "scipy.datasets._utils._clear_cache",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_clear_cache` function fails to validate dataset method inputs when the cache directory doesn't exist, violating its documented API contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_08-03_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_08-03_k9x2.md",
      "call_id": "ad80b995",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Input Validation Bypass",
      "target": "scipy.datasets._utils._clear_cache",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clear_cache` function fails to validate input arguments when the cache directory doesn't exist, accepting invalid inputs (strings, integers, dicts) that should raise an AssertionError or TypeError.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_14-30_k3m9.md",
      "call_id": "2cbcb455",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Skips Validation When Cache Directory Doesn't Exist",
      "target": "scipy.datasets._utils.clear_cache",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `clear_cache()` function returns early when the cache directory doesn't exist, skipping validation of the `datasets` parameter. Invalid datasets that should raise `ValueError` are silently ignored.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_validation_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_validation_2025-09-25_00-00_k3x9.md",
      "call_id": "82a2aec7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Uses Assert for Input Validation",
      "target": "scipy.datasets.clear_cache",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clear_cache` function uses an `assert` statement for input validation, which can be bypassed when Python is run with the `-O` optimization flag. This causes confusing error messages when invalid inputs are provided in optimized mode.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_assert_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_assert_2025-09-25_00-00_k3m9.md",
      "call_id": "12d0a528",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache Validation Bypass",
      "target": "scipy.datasets.clear_cache",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clear_cache()` function fails to validate dataset arguments when the cache directory doesn't exist, allowing invalid dataset methods to pass without raising the documented ValueError.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_2025-09-25_08-24_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_2025-09-25_08-24_k3m9.md",
      "call_id": "d6cd401b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.clear_cache() Skips Input Validation",
      "target": "scipy.datasets.clear_cache()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `clear_cache()` function skips input validation when the cache directory doesn't exist, allowing invalid dataset callables to be passed without raising the documented `ValueError`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_clear_cache_validation_2025-09-25_00-00_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_clear_cache_validation_2025-09-25_00-00_x7m9.md",
      "call_id": "3cd7001a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.download_all Inconsistent User-Agent Header",
      "target": "scipy.datasets.download_all",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `download_all` function uses a hardcoded User-Agent header \"SciPy\" without version information, while the `fetch_data` function used by individual dataset methods includes the version as \"SciPy {version}\". This inconsistency violates the principle of uniform behavior and the fix referenced in issue #21879.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_download_all_user_agent_2025-09-25_00-00_a7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_download_all_user_agent_2025-09-25_00-00_a7k9.md",
      "call_id": "a4b68f48",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face Grayscale Conversion Coefficients",
      "target": "scipy.datasets.face",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The grayscale conversion coefficients in `scipy.datasets.face(gray=True)` sum to 0.99 instead of 1.0, causing a 1% loss in overall image brightness.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_grayscale_2025-09-25_07-48_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_grayscale_2025-09-25_07-48_k3m9.md",
      "call_id": "fdef2d15",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face Grayscale Conversion Weights Sum to 0.99",
      "target": "scipy.datasets.face",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The grayscale conversion in `scipy.datasets.face(gray=True)` uses weights (0.21, 0.71, 0.07) that sum to 0.99 instead of 1.0, causing the grayscale image to be systematically darker than expected. This violates the standard luminance preservation property where white (255, 255, 255) should remain white (255) after grayscale conversion.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_grayscale_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_grayscale_2025-09-25_00-00_x7k9.md",
      "call_id": "69994512",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face Uses Identity Check Instead of Truthiness for gray Parameter",
      "target": "scipy.datasets.face",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `face()` function uses `if gray is True:` (identity check) instead of `if gray:` (truthiness check), causing it to reject truthy values like `1` or `np.bool_(True)` that users might reasonably pass for the gray parameter.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_gray_identity_check_2025-09-25_00-00_p3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_gray_identity_check_2025-09-25_00-00_p3k9.md",
      "call_id": "57fd648f",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face() Gray Conversion Coefficients",
      "target": "scipy.datasets.face(gray=True)",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The grayscale conversion in `scipy.datasets.face(gray=True)` uses RGB coefficients (0.21, 0.71, 0.07) that sum to 0.99 instead of 1.0, causing loss of dynamic range.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_gray_coefficients_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_gray_coefficients_2025-09-25_00-00_a7f2.md",
      "call_id": "cd09c881",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face() Grayscale Conversion Incorrect Due to Weight Sum",
      "target": "scipy.datasets.face(gray=True)",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The grayscale conversion in `scipy.datasets.face(gray=True)` uses weights (0.21, 0.71, 0.07) that sum to 0.99 instead of 1.0, causing systematic underestimation of brightness, particularly visible for dark pixels where RGB=(1,1,1) incorrectly converts to gray=0 instead of gray=1.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_grayscale_weights_2025-09-25_00-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_grayscale_weights_2025-09-25_00-00_a7b3.md",
      "call_id": "5a09ae87",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face() Grayscale Conversion Weights",
      "target": "scipy.datasets.face(gray=True)",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The RGB-to-grayscale conversion weights in `scipy.datasets.face()` sum to 0.99 instead of 1.0, causing grayscale images to be 1% darker than they should be.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_grayscale_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_grayscale_2025-09-25_00-00_k3f9.md",
      "call_id": "56767775",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.datasets.face() Silently Ignores Truthy Non-Boolean Values",
      "target": "scipy.datasets.face",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `face()` function uses identity comparison (`is True`) instead of truthiness checking for the `gray` parameter, causing it to silently ignore truthy non-boolean values like `1` and return a color image instead of grayscale, violating user expectations without any error message.",
      "package": "scipy",
      "file_name": "bug_report_scipy_datasets_face_gray_2025-09-25_05-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_datasets_face_gray_2025-09-25_05-20_k3m9.md",
      "call_id": "fd0aa3e2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative Allows step_factor=0",
      "target": "scipy.differentiate.derivative",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `derivative` function's input validation accepts `step_factor=0`, but this value causes division by zero during computation. The validation at lines 31-33 only checks `step_factor >= 0`, when it should require `step_factor > 0`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_step_factor_2025-09-25_03-16_k8p2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_step_factor_2025-09-25_03-16_k8p2.md",
      "call_id": "48358c9f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative Crash with step_factor Near 1.0",
      "target": "scipy.differentiate.derivative",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `derivative` function crashes with `numpy.linalg.LinAlgError: Singular matrix` when `step_factor` is at or very close to 1.0 (tested down to 1.0003), despite no documented restriction on this value.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_step_factor_2025-09-25_10-27_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_step_factor_2025-09-25_10-27_x7k9.md",
      "call_id": "120a4009",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative Crash with step_factor=1.0",
      "target": "scipy.differentiate.derivative",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `derivative` function crashes with `LinAlgError: Singular matrix` when `step_factor=1.0` is passed as a parameter, despite this value passing input validation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_step_factor_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_step_factor_2025-09-25_00-00_k3m9.md",
      "call_id": "b56b1da6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative Invalid initial_step Handling",
      "target": "scipy.differentiate.derivative",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `derivative` function silently accepts non-positive `initial_step` values (\u2264 0) and produces NaN results instead of raising a descriptive error during input validation, violating API contract expectations.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_initial_step_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_initial_step_2025-09-25_00-00_a1b2.md",
      "call_id": "94ef108b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative Missing initial_step Validation",
      "target": "scipy.differentiate.derivative",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `derivative` function fails to validate that `initial_step` must be positive, leading to silent failures when non-positive values are provided. Instead of raising a clear `ValueError` during input validation, the function sets invalid step sizes to NaN and proceeds with computation, resulting in confusing failure modes.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_initial_step_2025-09-25_03-15_x7m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_initial_step_2025-09-25_03-15_x7m9.md",
      "call_id": "fc3a8e1c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.derivative initial_step validation",
      "target": "scipy.differentiate.derivative",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `derivative` function accepts `initial_step=0` and negative `initial_step` values without raising an error during input validation, but these values cause the function to fail silently, returning `success=False` and NaN results. The docstring indicates initial_step should be \"(absolute)\" suggesting it must be positive, but this is not validated.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_initial_step_2025-09-25_00-15_b8x4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_initial_step_2025-09-25_00-15_b8x4.md",
      "call_id": "02ce7164",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.hessian Asymmetric Hessian Matrix",
      "target": "scipy.differentiate.hessian",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hessian` function returns asymmetric Hessian matrices, violating Schwarz's theorem which guarantees that Hessians of smooth functions must be symmetric.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_hessian_2025-09-25_00-12_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_hessian_2025-09-25_00-12_k3m9.md",
      "call_id": "33a5cb09",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.jacobian Returns Incorrectly Reshaped Matrix",
      "target": "scipy.differentiate.jacobian",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `jacobian` function returns a Jacobian matrix with incorrectly ordered elements. The values are flattened in column-major (Fortran) order but reshaped in row-major (C) order, causing the matrix elements to be scrambled.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_jacobian_2025-09-25_09-49_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_jacobian_2025-09-25_09-49_x7k3.md",
      "call_id": "0df07c70",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.jacobian Returns Transposed Jacobian",
      "target": "scipy.differentiate.jacobian",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `jacobian` function returns the transpose of the Jacobian matrix. For a linear function f(x) = Ax, the Jacobian should be A, but the function returns A.T instead.",
      "package": "scipy",
      "file_name": "bug_report_scipy_jacobian_transpose_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_jacobian_transpose_2025-09-25_00-00_x7k9.md",
      "call_id": "0954de21",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.differentiate.jacobian Returns Transposed Jacobian Matrix",
      "target": "scipy.differentiate.jacobian",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `jacobian` function returns the transpose of the Jacobian matrix instead of the Jacobian matrix itself. For a linear function f(x) = Ax, the Jacobian should be A, but the function returns A.T.",
      "package": "scipy",
      "file_name": "bug_report_scipy_differentiate_jacobian_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_differentiate_jacobian_2025-09-25_00-00_k3m9.md",
      "call_id": "067a7a93",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.dct DCT Type 1 Single Element Crash",
      "target": "scipy.fft.dct",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "DCT type 1 crashes with RuntimeError when given a single-element array, while DCT types 2, 3, and 4 handle single-element arrays correctly.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_dct_type1_single_element_2025-09-25_14-37_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_dct_type1_single_element_2025-09-25_14-37_k3m9.md",
      "call_id": "d969fd84",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.dct Type 1 Crashes on Single-Element Arrays",
      "target": "scipy.fft.dct",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "scipy.fft.dct with type=1 crashes with a confusing error message \"zero-length FFT requested\" when given a single-element array, while types 2, 3, and 4 handle single-element arrays correctly. The documentation does not mention any minimum length requirement for DCT type 1.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_dct_type1_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_dct_type1_2025-09-25_00-00_k3m9.md",
      "call_id": "7d48c0e5",
      "category": "FEATURE_REQUEST",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.dct Type 1 Single Element Array Crash",
      "target": "scipy.fft.dct",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `scipy.fft.dct` with `type=1` on a single-element array raises a RuntimeError, despite single-element arrays being valid mathematical inputs for the Discrete Cosine Transform.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_dct_type1_2025-09-25_14-30_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_dct_type1_2025-09-25_14-30_a7f2.md",
      "call_id": "3fc50866",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.idct Type 1 Single Element Array Crash",
      "target": "scipy.fft.idct",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `scipy.fft.idct` with `type=1` on a single-element array raises a RuntimeError, breaking the inverse Discrete Cosine Transform for this edge case.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_idct_type1_2025-09-25_14-31_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_idct_type1_2025-09-25_14-31_k8m3.md",
      "call_id": "a2725a86",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.irfft Crashes on Single-Element Input",
      "target": "scipy.fft.irfft",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.fft.irfft` crashes with a ValueError when given the output of `rfft` applied to a single-element array, despite single-element arrays being valid input to `rfft`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_irfft_2025-09-25_00-00_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_irfft_2025-09-25_00-00_k3f8.md",
      "call_id": "f5f08b48",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.irfft Default n Calculation for Single Element",
      "target": "scipy.fft.irfft",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `scipy.fft.irfft` is called on a single-element complex array without specifying `n`, it raises a ValueError due to computing an invalid default value of 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_irfft_default_n_2025-09-25_14-32_x9p1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_irfft_default_n_2025-09-25_14-32_x9p1.md",
      "call_id": "dcd9a367",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.irfft Fails on Single-Element Arrays",
      "target": "scipy.fft.irfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.fft.irfft` raises a confusing ValueError when processing the output of `scipy.fft.rfft` for single-element arrays, breaking the round-trip property `irfft(rfft(x)) \u2248 x` without an explicit `n` parameter.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_irfft_2025-09-25_09-30_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_irfft_2025-09-25_09-30_k3j9.md",
      "call_id": "10ac4c95",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fft.irfft Single-Element Input Crash",
      "target": "scipy.fft.irfft",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.fft.irfft()` crashes with a ValueError when given a single-element complex array as input, even though such arrays are valid outputs from `scipy.fft.rfft()`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fft_irfft_2025-09-25_00-00_a7x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fft_irfft_2025-09-25_00-00_a7x2.md",
      "call_id": "45cdfcc6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack DCT Type 1 Crashes on Single-Element Arrays",
      "target": "scipy.fftpack.dct",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `scipy.fftpack.dct` function with `type=1` crashes with a `RuntimeError: zero-length FFT requested` when given a single-element array. DCT types 2, 3, and 4 handle single-element arrays correctly, making this an inconsistency that breaks valid use cases.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_dct_type1_crash_2025-09-25_05-53_6zrr.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_dct_type1_crash_2025-09-25_05-53_6zrr.md",
      "call_id": "88919946",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack hilbert/ihilbert Not True Inverses",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The functions `scipy.fftpack.hilbert` and `scipy.fftpack.ihilbert` are documented as inverse operations, but `ihilbert(hilbert(x))` does not return `x`. The functions incorrectly zero out the DC component and Nyquist frequency component in the Fourier domain, breaking the inverse relationship.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_ihilbert_2025-09-25_05-52_98uh.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_ihilbert_2025-09-25_05-52_98uh.md",
      "call_id": "642b2f9e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack hilbert/ihilbert Round-Trip Fails for n % 4 == 2",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The documented property \"If `sum(x, axis=0) == 0` then `hilbert(ihilbert(x)) == x`\" is violated when the array size `n` satisfies `n % 4 == 2` (i.e., n = 2, 6, 10, 14, 18, ...).",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_2025-09-25_14-30_k3x9.md",
      "call_id": "f3afdf44",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack hilbert/ihilbert Round-trip Fails for Even-Length Arrays",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The documentation for `scipy.fftpack.hilbert` claims that \"If sum(x, axis=0) == 0 then hilbert(ihilbert(x)) == x\", but this property is violated for all even-length arrays, while it holds perfectly for odd-length arrays.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_2025-09-25_02-54_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_2025-09-25_02-54_k9x2.md",
      "call_id": "766bd705",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.dct Type-1 Crashes on Single-Element Arrays",
      "target": "scipy.fftpack.dct",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The DCT Type-1 transform crashes with a `RuntimeError` when applied to single-element arrays, while other DCT types handle this case correctly.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_dct_type1_single_element_2025-09-25_05-52_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_dct_type1_single_element_2025-09-25_05-52_x7k9.md",
      "call_id": "e7a68ab0",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.diff Documentation Incorrectly Claims Round-Trip Property",
      "target": "scipy.fftpack.diff",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.fftpack.diff` function documentation claims \"If `sum(x, axis=0) = 0` then `diff(diff(x, k), -k) == x`\", but this property does not hold for many zero-mean signals.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_diff_2025-09-25_08-25_cjcm.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_diff_2025-09-25_08-25_cjcm.md",
      "call_id": "0b2dcadf",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.hilbert - Round-trip Property Fails for Even-Length Arrays",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The documentation for `scipy.fftpack.hilbert` claims that \"If `sum(x, axis=0) == 0` then `hilbert(ihilbert(x)) == x`\", but this property only holds for odd-length arrays. For even-length arrays, the round-trip fails completely, returning zeros instead of the original input.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_2025-09-25_00-00_h8k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_2025-09-25_00-00_h8k3.md",
      "call_id": "6fd8cb64",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.hilbert Round-Trip Failure for Even-Length Arrays",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Hilbert transform round-trip property fails for all even-length arrays, even when `sum(x) == 0`, violating the documented behavior that states \"If `sum(x, axis=0) == 0` then `hilbert(ihilbert(x)) == x`\".",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_2025-09-25_10-19_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_2025-09-25_10-19_k9f2.md",
      "call_id": "4ed8474a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.hilbert/ihilbert Extended Bug for Even-Length Arrays",
      "target": "scipy.fftpack.hilbert",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The previously reported Hilbert transform round-trip bug for length-2 arrays also affects other even-length arrays. The documented property \"If `sum(x, axis=0) == 0` then `hilbert(ihilbert(x)) == x`\" fails for length-4 arrays (and likely other even lengths).",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_hilbert_even_length_2025-09-25_05-52_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_hilbert_even_length_2025-09-25_05-52_a7b3.md",
      "call_id": "20031b58",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.next_fast_len accepts 0 despite documentation requiring positive integer",
      "target": "scipy.fftpack.next_fast_len",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.fftpack.next_fast_len(0)` returns 0 instead of raising `ValueError`, violating its documented API contract that requires the target parameter to be a positive integer.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_next_fast_len_2025-09-25_00-00_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_next_fast_len_2025-09-25_00-00_k8m2.md",
      "call_id": "81ba6820",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.shift Composition Fails for Even-Length Arrays",
      "target": "scipy.fftpack.shift",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.fftpack.shift` function violates the mathematical composition property `shift(shift(x, a), b) = shift(x, a+b)` for all even-length arrays, while correctly implementing it for odd-length arrays.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_shift_2025-09-25_13-00_k3j8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_shift_2025-09-25_13-00_k3j8.md",
      "call_id": "2e62d09c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.fftpack.tilbert/itilbert Round-Trip Failure for Length-2 Arrays",
      "target": "scipy.fftpack.tilbert",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Tilbert transform and its inverse fail to round-trip correctly for length-2 arrays with zero mean, similar to the known issue with `hilbert`/`ihilbert`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_fftpack_tilbert_length2_2025-09-25_05-52_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_fftpack_tilbert_length2_2025-09-25_05-52_k3m9.md",
      "call_id": "6e1d9143",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate Invalid Axis Error Messages",
      "target": "scipy.integrate.trapezoid",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When an invalid `axis` parameter is provided to `trapezoid`, `simpson`, or `cumulative_trapezoid`, these functions raise unclear `IndexError` messages instead of informative error messages like `ValueError` or `AxisError`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_axis_validation_2025-09-25_10-54_55qr.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_axis_validation_2025-09-25_10-54_55qr.md",
      "call_id": "f331e9c8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.cumulative_simpson - Incorrect Intermediate Values",
      "target": "scipy.integrate.cumulative_simpson",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cumulative_simpson` function produces mathematically incorrect intermediate cumulative integral values. For non-negative functions, it can produce negative cumulative values, and for simple linear functions, intermediate values are wrong by a factor of 2.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_cumulative_simpson_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_cumulative_simpson_2025-09-25_k3m9.md",
      "call_id": "51428a0f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.cumulative_simpson - Violates Monotonicity for Positive Functions",
      "target": "scipy.integrate.cumulative_simpson",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`cumulative_simpson` produces negative intermediate values when integrating a non-negative function, violating the fundamental property that the cumulative integral of a non-negative function must be monotonically non-decreasing.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_cumulative_simpson_monotonicity_2025-09-25_17-35_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_cumulative_simpson_monotonicity_2025-09-25_17-35_x7k2.md",
      "call_id": "5e397523",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.cumulative_simpson Monotonicity Violation",
      "target": "scipy.integrate.cumulative_simpson",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`cumulative_simpson` violates the fundamental mathematical property that integrating a non-negative function must produce non-decreasing cumulative values. The function produces negative intermediate integrals when given certain non-negative inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cumulative_simpson_2025-09-25_09-15_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cumulative_simpson_2025-09-25_09-15_x7k2.md",
      "call_id": "0dc500bb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.cumulative_simpson Monotonicity Violation",
      "target": "scipy.integrate.cumulative_simpson",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cumulative_simpson` function violates the fundamental property that the cumulative integral of a non-negative function must be monotonically non-decreasing. This results in negative differences in the cumulative integral even when integrating a non-negative function.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_cumulative_simpson_2025-09-25_15-35_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_cumulative_simpson_2025-09-25_15-35_a7f2.md",
      "call_id": "d8471ec8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.newton_cotes List Input Handling",
      "target": "scipy.integrate.newton_cotes",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`newton_cotes` crashes with a TypeError when given a list input with non-uniform spacing and `equal=0`. The function fails to convert the list to a numpy array before performing arithmetic operations, despite other scipy.integrate functions (trapezoid, simpson) correctly handling list inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_newton_cotes_2025-09-25_17-35_x9k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_newton_cotes_2025-09-25_17-35_x9k3.md",
      "call_id": "5361bb48",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.simpson - Violates Reversal Property",
      "target": "scipy.integrate.simpson",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.integrate.simpson` violates the fundamental reversal property of integration: \u222b_a^b f(x)dx = -\u222b_b^a f(x)dx. Integrating in the forward direction produces a different magnitude than integrating in the reverse direction.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_simpson_reversal_2025-09-25_17-36_m3p5.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_simpson_reversal_2025-09-25_17-36_m3p5.md",
      "call_id": "3cf48942",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.simpson Asymmetric for Even-Length Arrays",
      "target": "scipy.integrate.simpson",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.integrate.simpson` produces different results when given reversed arrays with an even number of points, violating the mathematical property that integration over evenly-spaced samples should be invariant to array reversal.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_simpson_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_simpson_2025-09-25_15-30_x7k9.md",
      "call_id": "48c63018",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.simpson Produces Incorrect Results with Duplicate X Values",
      "target": "scipy.integrate.simpson",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.integrate.simpson` produces mathematically incorrect integration results when the input array `x` contains duplicate values (non-strictly-increasing sequences). The function silently accepts such inputs but computes wrong results, whereas the related function `cumulative_simpson` correctly validates and rejects non-strictly-increasing x values.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_simpson_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_simpson_2025-09-25_k3m9.md",
      "call_id": "f2aedd7b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.simpson Reversal Property Violation",
      "target": "scipy.integrate.simpson",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `simpson` function violates the fundamental integral reversal property (\u222b\u2090\u1d47 f(x)dx = -\u222b\u1d47\u2090 f(x)dx) when given an even number of sample points. This is a mathematical property that should hold for any numerical integration method.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_simpson_reversal_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_simpson_reversal_2025-09-25_k3x9.md",
      "call_id": "c567f613",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.simpson Reversal Property Violation",
      "target": "scipy.integrate.simpson",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `simpson` function violates the fundamental mathematical property that reversing integration limits should negate the result: \u222b\u1d47\u2090 f(x)dx = -\u222b\u2090\u1d47 f(x)dx. This occurs when the number of sample points is even (N % 2 == 0).",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_simpson_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_simpson_2025-09-25_15-30_k3m9.md",
      "call_id": "961380cc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.tanhsinh Crashes with Scalar-Returning Functions",
      "target": "scipy.integrate.tanhsinh",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.integrate.tanhsinh` crashes with an `IndexError` when passed a function that returns a scalar instead of an array, while other scipy integration functions (`quad`, `quad_vec`) handle scalar-returning functions correctly.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_tanhsinh_scalar_2025-09-25_14-30_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_tanhsinh_scalar_2025-09-25_14-30_k3f8.md",
      "call_id": "5c47ebcc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.tanhsinh IndexError on Constant Functions",
      "target": "scipy.integrate.tanhsinh",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `tanhsinh` function crashes with an `IndexError` when attempting to integrate any constant function, regardless of integration limits or constant value. This is a fundamental use case that should work correctly.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_tanhsinh_2025-09-25_04-55_f691.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_tanhsinh_2025-09-25_04-55_f691.md",
      "call_id": "45ff01d8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.integrate.trapezoid Length Validation",
      "target": "scipy.integrate.trapezoid",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.integrate.trapezoid` does not validate that `x` and `y` arrays have matching lengths, leading to inconsistent behavior: sometimes silently producing incorrect results, sometimes raising obscure error messages. This contrasts with `scipy.integrate.simpson` and `scipy.integrate.cumulative_trapezoid`, which properly validate input lengths.",
      "package": "scipy",
      "file_name": "bug_report_scipy_integrate_trapezoid_length_validation_2025-09-25_05-25_b2v6.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_integrate_trapezoid_length_validation_2025-09-25_05-25_b2v6.md",
      "call_id": "680f72a6",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.CubicSpline Returns NaN with Subnormal X-Values",
      "target": "scipy.interpolate.CubicSpline",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CubicSpline` silently returns NaN when evaluating at data points if x-values include subnormal floating-point numbers (spacing ~1e-300), violating the fundamental property that interpolators should pass through their input points.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_CubicSpline_subnormal_2025-09-25_10-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_CubicSpline_subnormal_2025-09-25_10-30_x7k9.md",
      "call_id": "17f5a929",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.PPoly antiderivative loses piecewise structure",
      "target": "scipy.interpolate.PPoly.antiderivative",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When taking the antiderivative of a derivative of a discontinuous piecewise polynomial (e.g., piecewise constant), `PPoly` loses the original piecewise structure. The docstring claims \"derivative is its inverse operation\" for antiderivative, but `p.derivative().antiderivative()` does not equal `p` up to a constant for discontinuous piecewise functions.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ppoly_antiderivative_2025-09-25_15-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ppoly_antiderivative_2025-09-25_15-30_x7k9.md",
      "call_id": "6b918ad1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.PPoly.extend Modifies Existing Values",
      "target": "scipy.interpolate.PPoly.extend",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `PPoly.extend` method incorrectly modifies the polynomial's value at the boundary point between the original and extended domains, violating the expected behavior that extending should only add new intervals without changing existing values.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_ppoly_extend_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_ppoly_extend_2025-09-25_14-30_k3x9.md",
      "call_id": "793478a8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.PPoly.roots() Returns NaN for Constant Zero Polynomial",
      "target": "scipy.interpolate.PPoly.roots()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`PPoly.roots()` returns NaN values when called on a piecewise polynomial representing a constant zero function, instead of returning an empty array or raising an informative error.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ppoly_roots_nan_2025-09-25_15-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ppoly_roots_nan_2025-09-25_15-30_k7m2.md",
      "call_id": "930f5ad9",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.griddata Returns NaN at Input Points",
      "target": "scipy.interpolate.griddata",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`griddata` with `method='linear'` or `method='cubic'` returns NaN for some input points when evaluating at those exact points, violating the fundamental interpolation property that an interpolator should return exact values at input points.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_griddata_2025-09-25_05-52_a7x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_griddata_2025-09-25_05-52_a7x3.md",
      "call_id": "95f3fd07",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.interp1d - Catastrophic Numerical Error at Data Points",
      "target": "scipy.interpolate.interp1d",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.interpolate.interp1d` with `kind='quadratic'` produces catastrophically wrong results (error magnitude ~10^227) at original data points when x-values contain denormalized floats. This violates the fundamental property of interpolation that f(x_i) = y_i.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_interp1d_catastrophic_error_2025-09-25_14-35_m9x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_interp1d_catastrophic_error_2025-09-25_14-35_m9x3.md",
      "call_id": "0551ebd1",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.interp1d - Singular Matrix with Denormalized Floats",
      "target": "scipy.interpolate.interp1d",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.interpolate.interp1d` with `kind='quadratic'` crashes with \"Colocation matrix is singular\" when the x-values contain denormalized floats (values like 1e-245) that are extremely close to but distinct from 0.0, even when the interpolation should be trivial (all y-values are 0).",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_interp1d_denormalized_2025-09-25_14-30_k7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_interp1d_denormalized_2025-09-25_14-30_k7f2.md",
      "call_id": "450cc0be",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.lagrange Fails Interpolation Property",
      "target": "scipy.interpolate.lagrange",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `lagrange` function fails to satisfy the fundamental interpolation property when x-values are widely spaced. The returned polynomial does not pass through all input points, violating its documented behavior.",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_lagrange_2025-09-25_02-48_k7f3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_lagrange_2025-09-25_02-48_k7f3.md",
      "call_id": "ff9cbc1c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.interpolate.lagrange NaN with Near-Duplicate Points",
      "target": "scipy.interpolate.lagrange",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.interpolate.lagrange` returns NaN when evaluated at data points if the input contains points that are unique floating-point values but extremely close together (e.g., `5e-324` and `0.0`).",
      "package": "scipy",
      "file_name": "bug_report_scipy_interpolate_lagrange_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_interpolate_lagrange_2025-09-25_00-00_k3j9.md",
      "call_id": "4d57fefd",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff Date Format Validation Bypass",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method contains a logic error on line 276 where `elif \"yy\":` should be `elif \"yy\" in pattern:`. This causes the method to accept invalid date format patterns that contain no valid date/time components, bypassing the intended validation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_validation_2025-09-25_10-19_x8k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_validation_2025-09-25_10-19_x8k3.md",
      "call_id": "8807ba4e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Incorrect Condition for 'yy'",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_get_date_format` method has a logic error at line 276 where it checks `elif \"yy\":` instead of `elif \"yy\" in pattern:`. This causes the elif block to always execute when the pattern doesn't contain \"yyyy\", even when \"yy\" is not present in the pattern. This results in incorrect `datetime_unit` assignment for date patterns with no date/time components.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_yy_condition_2025-09-25_15-35_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_yy_condition_2025-09-25_15-35_a7f2.md",
      "call_id": "10af51b2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Invalid Format Validation",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method incorrectly accepts invalid date format strings that contain no recognized date/time components, due to a logic error on line 276 where `elif \"yy\":` should be `elif \"yy\" in pattern:`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_format_2025-09-25_01-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_format_2025-09-25_01-00_k3x9.md",
      "call_id": "00264dae",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Invalid Format Validation",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method fails to raise `ValueError` for invalid or empty date format patterns due to a logic error on line 276 where `elif \"yy\":` is always `True`, causing it to incorrectly set `datetime_unit = \"Y\"` even when the pattern contains no valid date components.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_format_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_format_2025-09-25_00-00_x7k9.md",
      "call_id": "c37939a6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Invalid Pattern Validation",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method incorrectly accepts invalid date format patterns due to a logic error on line 276 where `elif \"yy\":` should be `elif \"yy\" in pattern:`. This causes the function to fail to validate date formats properly, accepting patterns that contain no valid date components.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_validation_2025-09-25_13-00_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_validation_2025-09-25_13-00_k7m2.md",
      "call_id": "c44c15d6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Invalid Pattern Validation",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "DateAttribute._get_date_format fails to raise ValueError for invalid date patterns due to a logic error on line 276. The condition `elif \"yy\":` should be `elif \"yy\" in pattern:`, causing the elif branch to always execute and incorrectly set datetime_unit='Y' even for patterns with no valid date components.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_validation_2025-09-25_15-30_k8j2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_validation_2025-09-25_15-30_k8j2.md",
      "call_id": "4bebb754",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute Logic Error",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_get_date_format` method in `DateAttribute` class contains a logic error at line 276 where `elif \"yy\":` is used instead of `elif \"yy\" in pattern:`. This causes the condition to always evaluate to True (since non-empty strings are truthy in Python), leading to incorrect code execution flow even though the bug is masked in most cases by subsequent overwrites.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_format_2025-09-25_06-23_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_format_2025-09-25_06-23_k3m9.md",
      "call_id": "65b5d084",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute._get_date_format Always True Condition",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method has an always-true condition `elif \"yy\":` on line 276, which should be `elif \"yy\" in pattern:`. This causes the method to incorrectly overwrite the `datetime_unit` variable for date formats that don't contain \"yy\" or \"yyyy\".",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_format_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_format_2025-09-25_k3m9.md",
      "call_id": "4c767c3c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff DateAttribute._get_date_format Invalid Pattern Handling",
      "target": "scipy.io.arff._arffread.DateAttribute._get_date_format",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `DateAttribute._get_date_format` method incorrectly accepts invalid date patterns and returns incorrect datetime units instead of raising a ValueError. This is caused by a logic error on line 276 where `elif \"yy\":` is always True.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_date_format_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_date_format_2025-09-25_00-00_k3m9.md",
      "call_id": "737f915e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff Duplicate Attribute Names",
      "target": "scipy.io.arff.loadarff",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.io.arff.loadarff()` crashes with a confusing ValueError when parsing ARFF files with duplicate attribute names, instead of raising a clear ParseArffError during header validation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_duplicate_names_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_duplicate_names_2025-09-25_00-00_x7k9.md",
      "call_id": "26824583",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NominalAttribute Unicode Support",
      "target": "scipy.io.arff._arffread.NominalAttribute",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `NominalAttribute` class uses `np.bytes_` for storing nominal attribute values, which causes a `UnicodeEncodeError` crash when ARFF files contain non-ASCII Unicode characters in nominal attributes. This affects real-world datasets with international names, places, or categories.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_NominalAttribute_unicode_2025-09-25_06-58_pj5o.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_NominalAttribute_unicode_2025-09-25_06-58_pj5o.md",
      "call_id": "8a70e134",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NominalAttribute Value Parsing",
      "target": "scipy.io.arff._arffread.NominalAttribute._get_nom_val",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `NominalAttribute._get_nom_val()` function incorrectly handles nominal attribute values that contain only whitespace or special CSV characters like quotes. Whitespace-only values are completely lost, and quote characters are stripped, causing data corruption when parsing ARFF nominal attribute definitions.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_nominal_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_nominal_2025-09-25_00-00_x7k9.md",
      "call_id": "d5035827",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NominalAttribute.__str__ IndexError on Empty Values",
      "target": "scipy.io.arff._arffread.NominalAttribute.__str__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`NominalAttribute.__str__` raises IndexError when the attribute has an empty values list, due to accessing `self.values[-1]` at line 166 without checking if the list is non-empty.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_nominal_str_empty_2025-09-25_15-31_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_nominal_str_empty_2025-09-25_15-31_x7k9.md",
      "call_id": "0478d222",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NumericAttribute Question Mark Parsing",
      "target": "scipy.io.arff._arffread.NumericAttribute.parse_data",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `NumericAttribute.parse_data` method incorrectly treats any string containing a `?` character as missing data (NaN), instead of only treating standalone `?` as missing data. This causes malformed numeric values like `\"1.5?\"` or `\"?1.5\"` to be silently parsed as NaN instead of raising an appropriate error.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_numeric_question_2025-09-25_00-00_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_numeric_question_2025-09-25_00-00_x7k2.md",
      "call_id": "b9361eba",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NumericAttribute._basic_stats Division by Zero",
      "target": "scipy.io.arff._arffread.NumericAttribute._basic_stats",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `NumericAttribute._basic_stats` method raises `ZeroDivisionError` when called with an array containing a single element due to division by `(data.size - 1)` on line 227.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_basic_stats_2025-09-25_00-01_k9m3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_basic_stats_2025-09-25_00-01_k9m3.md",
      "call_id": "cdef5964",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NumericAttribute._basic_stats Division by Zero",
      "target": "scipy.io.arff._arffread.NumericAttribute._basic_stats",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_basic_stats` method in `NumericAttribute` contains a division by zero error when called with a single-element array, resulting in NaN for the standard deviation instead of 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_basic_stats_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_basic_stats_2025-09-25_00-00_x7k9.md",
      "call_id": "357e8d41",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff NumericAttribute._basic_stats Division by Zero",
      "target": "scipy.io.arff._arffread.NumericAttribute._basic_stats",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`NumericAttribute._basic_stats` produces infinite standard deviation when called on single-element arrays due to division by zero at line 227: `nbfac = data.size * 1. / (data.size - 1)` evaluates to `1.0 / 0 = inf`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_basic_stats_single_element_2025-09-25_15-32_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_basic_stats_single_element_2025-09-25_15-32_a7f2.md",
      "call_id": "39fbf429",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff Unicode Nominal Values",
      "target": "scipy.io.arff.loadarff",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `loadarff` function crashes with `UnicodeEncodeError` when ARFF files contain nominal attribute values with non-ASCII Unicode characters. This occurs because the function uses ASCII byte strings ('S' dtype) instead of Unicode strings ('U' dtype) for nominal attributes.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_unicode_nominal_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_unicode_nominal_2025-09-25_00-00_k3j9.md",
      "call_id": "d89b49fe",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line Crashes on Carriage Return",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with a `csv.Error` when the input contains carriage return characters (`\\r`), because the underlying `csv.reader` interprets `\\r` as a newline character in unquoted fields.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_carriage_return_2025-09-25_15-32_j8x4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_carriage_return_2025-09-25_15-32_j8x4.md",
      "call_id": "9b7b259c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line Empty String Crash",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with an `IndexError` when passed an empty string. This bug is triggered when parsing relational attributes whose data ends with a newline character, as the `.split(\"\\n\")` operation produces an empty string that is then passed to `split_data_line`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_empty_line_2025-09-25_00-00_m3p9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_empty_line_2025-09-25_00-00_m3p9.md",
      "call_id": "085d1ee5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line IndexError on Empty String",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with an `IndexError` when given an empty string, due to attempting to index `line[-1]` without first checking if the string is empty.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_empty_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_empty_2025-09-25_15-30_k3m9.md",
      "call_id": "029109c9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line IndexError on Empty String",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with an IndexError when called with an empty string, due to accessing `line[-1]` without first checking if the string is non-empty.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_2025-09-25_00-51_2zv1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_2025-09-25_00-51_2zv1.md",
      "call_id": "b1fe7a60",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line IndexError on Empty String",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with an `IndexError` when called with an empty string, because it attempts to index `line[-1]` without first checking if the line is non-empty. This can be triggered via `RelationalAttribute.parse_data` which splits data by newlines, producing empty strings for trailing newlines or empty data.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_2025-09-25_06-25_7xa2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_2025-09-25_06-25_7xa2.md",
      "call_id": "c47f4f50",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line IndexError on Empty String",
      "target": "scipy.io.arff._arffread.split_data_line",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line` function crashes with an `IndexError` when called with an empty string, due to unchecked array access on line 476.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_2025-09-25_00-01_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_2025-09-25_00-01_k3m9.md",
      "call_id": "0e6c4987",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.arff split_data_line IndexError on Empty String",
      "target": "scipy.io.arff._arffread.split_data_line()",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `split_data_line()` function raises an `IndexError` when called with an empty string because it accesses `line[-1]` without checking if the string is non-empty. This can occur in practice when ARFF files contain empty lines that are not filtered by the `r_empty` regex.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_arff_split_data_line_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_arff_split_data_line_2025-09-25_00-01_x7k9.md",
      "call_id": "298959cc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.hb_write Crashes on Empty Sparse Matrices",
      "target": "scipy.io.hb_write",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.io.hb_write` crashes with a `ValueError` when attempting to write a sparse matrix that contains no non-zero elements. This is a valid edge case that should be handled gracefully.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_hb_write_empty_2025-09-25_04-27_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_hb_write_empty_2025-09-25_04-27_x7k9.md",
      "call_id": "69d8b71e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.hb_write Empty Sparse Matrix Crash",
      "target": "scipy.io.hb_write",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.io.hb_write` crashes with a `ValueError` when attempting to write an empty sparse matrix (one with no non-zero elements) to a Harwell-Boeing format file.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_hb_write_empty_matrix_2025-09-25_05-20_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_hb_write_empty_matrix_2025-09-25_05-20_x7k9.md",
      "call_id": "a0428937",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.hb_write Empty Sparse Matrix Crash",
      "target": "scipy.io.hb_write",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `hb_write` function crashes with a `ValueError` when attempting to write an empty sparse matrix (nnz=0), despite empty sparse matrices being valid and representing all-zero matrices.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_hb_write_empty_2025-09-25_05-50_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_hb_write_empty_2025-09-25_05-50_k3m9.md",
      "call_id": "2f223f24",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.hb_write Negative Value Formatting",
      "target": "scipy.io.hb_write",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.io.hb_write` incorrectly formats negative floating-point values in Harwell-Boeing files, causing adjacent negative values to be written without separators. This makes the files unreadable by `scipy.io.hb_read`, violating the round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_hb_write_negative_values_2025-09-25_10-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_hb_write_negative_values_2025-09-25_10-30_k3m9.md",
      "call_id": "f72d6704",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.hb_write Round-Trip Failure",
      "target": "scipy.io.hb_write",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `hb_write` function produces Harwell-Boeing format files that cannot be read back by `hb_read`, breaking the fundamental round-trip property. The bug occurs when a sparse matrix contains data values where a negative number appears after a positive number in the same row/column. The root cause is incorrect Fortran format to Python format conversion that produces values without adequate spacing.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_hb_write_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_hb_write_2025-09-25_00-00_k3m9.md",
      "call_id": "304053e3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab 1D Array Round-Trip Shape Loss",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "1D NumPy arrays lose their dimensionality when saved with `savemat` and loaded with `loadmat`, becoming 2D arrays. This breaks the fundamental round-trip property and violates reasonable user expectations, with no complete workaround available.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_1d_array_roundtrip_2025-09-25_08-03_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_1d_array_roundtrip_2025-09-25_08-03_k3m9.md",
      "call_id": "1f3ba997",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Allows Digit-Prefixed Top-Level Keys",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `savemat` function's documentation states that keys starting with digits should not be saved and a warning should be issued, but this validation is only enforced for struct fields, not for top-level variable names in the dictionary.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_digit_keys_2025-09-25_00-05_m3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_digit_keys_2025-09-25_00-05_m3k9.md",
      "call_id": "05ff61d2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Character Array Round-Trip",
      "target": "scipy.io.matlab.loadmat",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Character arrays loaded with `chars_as_strings=False` gain an extra dimension on each save-load cycle, violating the idempotent round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_chars_roundtrip_2025-09-25_14-30_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_chars_roundtrip_2025-09-25_14-30_k9x2.md",
      "call_id": "70dabe4d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Complex Infinity Corruption",
      "target": "scipy.io.matlab.savemat",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Complex numbers with zero real part and infinite imaginary part are corrupted during MATLAB format 4 save/load round-trip. The real part changes from 0 to NaN.",
      "package": "scipy",
      "file_name": "bug_report_scipy_matlab_complex_inf_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_matlab_complex_inf_2025-09-25_00-00_k3f9.md",
      "call_id": "b61fc11a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Empty 1D Array Ignores oned_as Parameter",
      "target": "scipy.io.matlab.matdims",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When saving empty 1D NumPy arrays to MATLAB files, the `oned_as` parameter is ignored, resulting in inconsistent behavior compared to non-empty 1D arrays. Empty arrays always produce shape `(0, 0)` regardless of the `oned_as` setting, breaking the round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_matdims_empty_array_2025-09-25_12-00_k3f8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_matdims_empty_array_2025-09-25_12-00_k3f8.md",
      "call_id": "ad884205",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Empty 1D Array Round-Trip Shape Change",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Empty 1D arrays `(0,)` are inconsistently converted to `(0, 0)` during savemat/loadmat round-trip, while non-empty 1D arrays respect the `oned_as` parameter. This violates the documented round-trip property and creates inconsistent behavior.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_empty_array_2025-09-25_07-20_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_empty_array_2025-09-25_07-20_k3m9.md",
      "call_id": "13fca3d2",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Empty 1D Array Round-trip Shape Inconsistency",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When saving and loading empty 1D NumPy arrays via `savemat`/`loadmat`, the shape is inconsistently transformed compared to non-empty 1D arrays. Empty arrays become `(0, 0)` instead of the expected `(1, 0)` for `oned_as='row'` or `(0, 1)` for `oned_as='column'`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_empty_array_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_empty_array_2025-09-25_00-00_k3m9.md",
      "call_id": "361e86ab",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab Null Character Handling in Strings",
      "target": "scipy.io.matlab",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The savemat/loadmat round-trip corrupts strings containing null characters (`\\x00`) by replacing them with spaces, violating the documented round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_null_chars_2025-09-25_00-00_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_null_chars_2025-09-25_00-00_x7k3.md",
      "call_id": "e3f6d6d4",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab savemat Crashes on Non-Latin1 Variable Names",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `savemat` function crashes with `UnicodeEncodeError` when given variable names containing characters outside the latin-1 encoding range, instead of failing gracefully with a helpful error message.",
      "package": "scipy",
      "file_name": "bug_report_scipy_matlab_unicode_varname_2025-09-25_10-24_m7p2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_matlab_unicode_varname_2025-09-25_10-24_m7p2.md",
      "call_id": "5f9a6910",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab savemat Does Not Filter Variable Names Starting with Digits",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `savemat` function documentation states that variable names starting with a digit will not be saved and `MatWriteWarning` will be issued, but the implementation only filters variable names starting with underscore, allowing digit-starting names through without warning.",
      "package": "scipy",
      "file_name": "bug_report_scipy_matlab_digit_varname_2025-09-25_10-23_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_matlab_digit_varname_2025-09-25_10-23_k3x9.md",
      "call_id": "c38cc2b1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab savemat Variable Names with Non-Latin-1 Characters",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Variable names containing non-Latin-1 Unicode characters (e.g., '\u0100', '\u03c0', '\u4e2d\u6587') cause `savemat()` to crash with a `UnicodeEncodeError`, even though these are valid Python identifiers.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_unicode_2025-09-25_06-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_unicode_2025-09-25_06-00_k3m9.md",
      "call_id": "d70afdb0",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab savemat appendmat Parameter Does Not Append Extension",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `appendmat=True` parameter in `savemat()` does not append the `.mat` extension when saving files, contrary to the documented behavior. Files are saved without the extension.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_appendmat_2025-09-25_06-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_appendmat_2025-09-25_06-01_x7k9.md",
      "call_id": "17422250",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab savemat oned_as Parameter Ignored for Empty Arrays",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `oned_as` parameter in `scipy.io.matlab.savemat` is ignored when saving empty 1D arrays, resulting in inconsistent behavior compared to non-empty 1D arrays. Both `oned_as='row'` and `oned_as='column'` produce a `(0, 0)` shaped array when the input is an empty 1D array `(0,)`, instead of the expected `(1, 0)` and `(0, 1)` shapes respectively.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_oned_as_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_oned_as_2025-09-25_00-00_k3f9.md",
      "call_id": "8d738374",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat - No Warning for Variable Names Starting with Digits",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`savemat` fails to issue a `MatWriteWarning` for dictionary keys starting with digits, and incorrectly saves them to the file. This violates the documented behavior and MATLAB's variable naming rules, potentially creating files that cannot be loaded in MATLAB.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_digit_keys_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_digit_keys_2025-09-25_00-00_x7k9.md",
      "call_id": "e53ee58f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat Unicode Variable Name Encoding Error",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.io.matlab.savemat` raises a cryptic `UnicodeEncodeError` when given variable names containing non-Latin-1 Unicode characters, instead of validating input and providing a clear error message.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_unicode_2025-09-25_00-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_unicode_2025-09-25_00-00_a7b3.md",
      "call_id": "63e3b482",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat Unicode Variable Names",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`savemat` crashes with an unhelpful `UnicodeEncodeError` when variable names contain Unicode characters outside the latin1 range (U+0100+), despite Python 3 allowing Unicode identifiers.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_unicode_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_unicode_2025-09-25_14-30_k3x9.md",
      "call_id": "dc011727",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat Variable Name Validation",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.io.matlab.savemat` fails to validate variable names starting with digits. According to the documentation, such variables should not be saved and should trigger a `MatWriteWarning`, but they are actually saved without any warning.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_digit_validation_2025-09-25_06-57_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_digit_validation_2025-09-25_06-57_k3m9.md",
      "call_id": "64ff656b",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat Variable Name Validation",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `savemat` function documentation claims that variable names starting with a digit will not be saved and should issue a `MatWriteWarning`, but the implementation allows such names to be saved without warning.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_2025-09-25_05-24_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_2025-09-25_05-24_k3m9.md",
      "call_id": "269d511c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat allows variable names starting with digits",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `savemat` function violates its documented contract by allowing variable names that start with digits to be saved to MATLAB files, when the documentation explicitly states they should be ignored with a warning.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_digit_2025-09-25_05-53_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_digit_2025-09-25_05-53_x8k2.md",
      "call_id": "ace91f3e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat appendmat Parameter Documentation Mismatch",
      "target": "scipy.io.matlab.savemat",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `appendmat` parameter in `scipy.io.matlab.savemat` does not behave as documented. The documentation claims it will append the `.mat` extension to filenames, but in reality, `savemat` always uses the exact filename provided regardless of the `appendmat` parameter value.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_appendmat_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_appendmat_2025-09-25_14-30_x7k9.md",
      "call_id": "f9195bc6",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.matlab.savemat appendmat Parameter Not Working",
      "target": "scipy.io.matlab.savemat",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `appendmat` parameter in `scipy.io.matlab.savemat` does not work as documented. According to the documentation, when `appendmat=True`, the function should \"append the .mat extension to the end of the given filename, if not already present.\" However, in practice, the function does NOT append the .mat extension when writing files.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_matlab_savemat_appendmat_2025-09-25_04-24_ml2x.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_matlab_savemat_appendmat_2025-09-25_04-24_ml2x.md",
      "call_id": "c20beca2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.mminfo Crash on Repeated Calls",
      "target": "scipy.io.mminfo",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `scipy.io.mminfo()` multiple times in a loop causes a fatal Python crash (segfault) when used with matrices generated by `np.random.rand()`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_mminfo_2025-09-25_14-30_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_mminfo_2025-09-25_14-30_k7x2.md",
      "call_id": "537bd35f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.mmwrite Complex Dtype Loss on Empty Sparse Matrices",
      "target": "scipy.io.mmwrite",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing a sparse complex matrix with all zeros (nnz=0) to a Matrix Market file using `mmwrite`, the field type is incorrectly written as \"real\" instead of \"complex\". This causes the dtype to be lost when reading the file back with `mmread`, violating the round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_mmwrite_complex_dtype_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_mmwrite_complex_dtype_2025-09-25_00-00_k3m9.md",
      "call_id": "7c68986d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.wavfile Round-Trip Shape Inconsistency",
      "target": "scipy.io.wavfile.write",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `wavfile.write()` and `wavfile.read()` functions do not preserve array shape for 2-D single-channel audio data in round-trip operations. When writing a 2-D array with shape `(n, 1)`, reading it back returns a 1-D array with shape `(n,)`, violating the round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_wavfile_shape_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_wavfile_shape_2025-09-25_15-30_k3m9.md",
      "call_id": "5dd5e137",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.io.wavfile Round-Trip Shape Violation",
      "target": "scipy.io.wavfile.write",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When writing mono audio data with shape `(N, 1)` and reading it back, the shape changes to `(N,)`, violating the round-trip property that holds for all other channel counts.",
      "package": "scipy",
      "file_name": "bug_report_scipy_io_wavfile_shape_2025-09-25_08-54_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_io_wavfile_shape_2025-09-25_08-54_x7k9.md",
      "call_id": "ad8b6088",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.funm Incorrect Result for Nilpotent Matrices",
      "target": "scipy.linalg.funm",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.linalg.funm(A, np.exp)` returns incorrect results for certain nilpotent matrices, specifically returning the identity matrix instead of the correct matrix exponential. This differs from the correct result computed by `scipy.linalg.expm`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_funm_2025-09-25_01-54_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_funm_2025-09-25_01-54_k3m9.md",
      "call_id": "3acaa360",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.inv Singular Matrix Detection Failure",
      "target": "scipy.linalg.inv",
      "severity": "High",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.linalg.inv` fails to detect singularity for matrices containing subnormal floating-point values, returning NaN/Inf values instead of raising `LinAlgError` as documented.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_inv_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_inv_2025-09-25_00-00_k3m9.md",
      "call_id": "46857edb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.invpascal - Incorrect Matrix Inversion for n >= 17",
      "target": "scipy.linalg.invpascal",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.linalg.invpascal` function produces an incorrect inverse for symmetric Pascal matrices when `n >= 17`. The product `pascal(n) @ invpascal(n)` does not equal the identity matrix for these values, violating the fundamental property of matrix inverses.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_invpascal_2025-09-25_16-30_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_invpascal_2025-09-25_16-30_k7x9.md",
      "call_id": "a9fd5742",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.invpascal Integer Overflow",
      "target": "scipy.linalg.invpascal",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.linalg.invpascal(n, exact=True)` with `n >= 19` produces incorrect results due to silent integer overflow during matrix multiplication, despite claiming to provide \"exact\" integer arithmetic.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_invpascal_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_invpascal_2025-09-25_00-00_k3m9.md",
      "call_id": "dd2958dc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.logm Round-Trip Property Violation",
      "target": "scipy.linalg.logm",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.linalg.logm` function violates its documented property `expm(logm(A)) == A` for well-conditioned matrices containing very small but valid floating-point values (\u2264 1e-25). The function returns catastrophically inaccurate results (errors of magnitude 1e+9 to 1e+117) instead of either handling the values correctly or raising an exception.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_logm_2025-09-25_06-26_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_logm_2025-09-25_06-26_x3m9.md",
      "call_id": "41516626",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.linalg.lu LU Decomposition with permute_l=True",
      "target": "scipy.linalg.lu",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `scipy.linalg.lu(A, permute_l=True)` is called on certain rectangular matrices, the returned matrices L and U do not satisfy the documented property `A = L @ U`, violating the API contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_linalg_lu_permute_l_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_linalg_lu_permute_l_2025-09-25_00-00_x7k9.md",
      "call_id": "42ca841c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage Binary Morphology Monotonicity Violation",
      "target": "scipy.ndimage.binary_erosion",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`binary_erosion` and `binary_dilation` violate fundamental monotonicity properties when given structures containing only False values. Erosion incorrectly adds True values (should only remove), and dilation incorrectly removes True values (should only add).",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_morphology_monotonicity_2025-09-25_03-15_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_morphology_monotonicity_2025-09-25_03-15_k9m2.md",
      "call_id": "fa6d7787",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage convolve/correlate Even-Kernel Inconsistency",
      "target": "scipy.ndimage.convolve1d",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The mathematical relationship `convolve(x, w) = correlate(x, flip(w))` holds for odd-sized kernels but fails for even-sized kernels in scipy.ndimage, producing results shifted by 1 element.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_convolve_correlate_2025-09-25_10-21_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_convolve_correlate_2025-09-25_10-21_x7k2.md",
      "call_id": "6b299d10",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.binary_closing Violates Extensiveness Property",
      "target": "scipy.ndimage.binary_closing",
      "severity": "High",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.ndimage.binary_closing` violates the fundamental extensiveness property of morphological closing: X \u2286 closing(X). With the default `border_value=0`, closing can remove True pixels at the image border, contradicting both the mathematical definition and documented behavior that closing \"fills holes.\"",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_binary_closing_2025-09-25_01-49_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_binary_closing_2025-09-25_01-49_x3k9.md",
      "call_id": "e44c289d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.gaussian_filter Commutativity Violation with mode='constant'",
      "target": "scipy.ndimage.gaussian_filter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `gaussian_filter` function violates mathematical commutativity when using `mode='constant'` with different sigma values. While `gaussian_filter(gaussian_filter(x, \u03c3\u2081), \u03c3\u2082)` should equal `gaussian_filter(gaussian_filter(x, \u03c3\u2082), \u03c3\u2081)` for all boundary modes, this property fails specifically for `mode='constant'`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_gaussian_filter_commutativity_2025-09-25_15-30_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_gaussian_filter_commutativity_2025-09-25_15-30_k9f2.md",
      "call_id": "e9f80834",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.grey_dilation - Inconsistent Results with Even-Sized Footprints",
      "target": "scipy.ndimage.grey_dilation",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`grey_dilation` with a flat structuring element produces different results than `maximum_filter` when using even-sized footprints (e.g., size=4), violating the documented equivalence. Odd-sized footprints work correctly.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_grey_dilation_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_grey_dilation_2025-09-25_15-30_k3m9.md",
      "call_id": "b58187c7",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.rotate - Data Loss on Non-Square Arrays",
      "target": "scipy.ndimage.rotate",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Rotating a non-square array by 90 degrees four times with `reshape=False` causes significant data loss instead of returning to the original array, violating the mathematical property that 360-degree rotation should be identity.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_rotate_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_rotate_2025-09-25_00-00_k3m9.md",
      "call_id": "e0e4c5a6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.shift with mode='wrap' is not invertible",
      "target": "scipy.ndimage.shift",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When using `scipy.ndimage.shift` with `mode='wrap'` (periodic boundary conditions), shifting by n then -n should be the identity operation, but it produces incorrect values at array boundaries even with `order=0` (nearest neighbor interpolation).",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_shift_wrap_2025-09-25_09-58_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_shift_wrap_2025-09-25_09-58_k3m9.md",
      "call_id": "1c0b4983",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.sobel Incorrect Gradient on Constant Arrays",
      "target": "scipy.ndimage.sobel",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.ndimage.sobel` function incorrectly returns non-zero values on constant arrays when using `mode='constant'`, even when `cval` matches the constant value. The gradient of a constant function should always be zero.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_sobel_2025-09-25_02-59_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_sobel_2025-09-25_02-59_k7m3.md",
      "call_id": "a64f331e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.ndimage.sum Excludes Label 0 When index=None",
      "target": "scipy.ndimage.sum",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `scipy.ndimage.sum` is called with `index=None` on data containing label 0 (background), it incorrectly excludes pixels with label 0 from the sum, violating the documented behavior and user expectations.",
      "package": "scipy",
      "file_name": "bug_report_scipy_ndimage_sum_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_ndimage_sum_2025-09-25_00-00_k3m9.md",
      "call_id": "3a364e8a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr NaN Result with Subnormal Float Initial Guess",
      "target": "scipy.odr.ODR",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When ODR.run() is called with an initial guess (`beta0`) containing subnormal floating-point numbers, the fitting algorithm produces NaN in the result parameters instead of properly converging to the correct solution.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_subnormal_nan_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_subnormal_nan_2025-09-25_15-30_k3m9.md",
      "call_id": "ecc77efa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr ODR Segmentation Fault with job=1",
      "target": "scipy.odr.ODR",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `ODR.run()` with `job=1` parameter causes a segmentation fault, crashing the Python interpreter. This is a critical memory safety issue in the underlying ODRPACK Fortran code.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_job_segfault_2025-09-25_11-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_job_segfault_2025-09-25_11-30_x7k9.md",
      "call_id": "c0113422",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr TypeError when using delta0 without specifying job",
      "target": "scipy.odr.ODR.run()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Using `delta0` parameter in ODR without explicitly specifying `job` causes a `TypeError` when calling `run()`, due to attempting arithmetic operations on `None`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_delta0_job_2025-09-25_13-47_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_delta0_job_2025-09-25_13-47_x8k2.md",
      "call_id": "80048a7e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.ODR.set_iprint Crashes on Valid Inputs",
      "target": "scipy.odr._odrpack.ODR.set_iprint",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `set_iprint` method crashes with a `ValueError` when called with certain valid combinations of init and so_init parameters, because the internal `ip2arg` lookup table doesn't contain all possible combinations.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_set_iprint_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_set_iprint_2025-09-25_00-01_x7k9.md",
      "call_id": "393b0f66",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.ODR.set_iprint Crashes with IndexError/ValueError",
      "target": "scipy.odr.ODR.set_iprint",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ODR.set_iprint()` method crashes with `IndexError` or `ValueError` when the `iprint` attribute contains certain values. This occurs because the method attempts to decode `iprint` digits using a lookup table that only has 7 entries (indices 0-6), but `iprint` digits can be 0-9.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_ODR_set_iprint_2025-09-25_00-00_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_ODR_set_iprint_2025-09-25_00-00_k7m2.md",
      "call_id": "7615a01e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.ODR.set_iprint Crashes with ValueError",
      "target": "scipy.odr.ODR.set_iprint",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `set_iprint` method crashes with `ValueError: [0, 1] is not in list` when attempting to set certain valid combinations of print settings, specifically when trying to print to stdout without printing to file.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_set_iprint_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_set_iprint_2025-09-25_k3m9.md",
      "call_id": "cdcc1d54",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.ODR.set_iprint Missing Input Validation",
      "target": "scipy.odr.ODR.set_iprint",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `ODR.set_iprint` method lacks input validation for its parameters (`init`, `so_init`, `iter`, `so_iter`, `final`, `so_final`), causing a confusing `ValueError` when invalid values are passed. According to the docstring, these parameters should be 0, 1, or 2, but the method doesn't enforce this constraint.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_set_iprint_2025-09-25_05-20_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_set_iprint_2025-09-25_05-20_x3k9.md",
      "call_id": "6f0c81b9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.ODR.set_iprint ValueError on Invalid Input",
      "target": "scipy.odr.ODR.set_iprint",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ODR.set_iprint()` method raises an unhelpful `ValueError` when given invalid parameter values instead of either validating inputs with a clear error message or silently ignoring invalid values like `set_job()` does.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_set_iprint_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_set_iprint_2025-09-25_00-00_k3x9.md",
      "call_id": "27ab4a93",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.RealData Invalid Standard Deviation Handling",
      "target": "scipy.odr.RealData._sd2wt",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.odr.RealData` does not validate that standard deviations (sx, sy) are positive, leading to two issues: (1) zero standard deviations cause division by zero, producing infinite weights, and (2) negative standard deviations are silently accepted and squared, producing logically incorrect positive weights.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_invalid_std_dev_2025-09-25_06-27_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_invalid_std_dev_2025-09-25_06-27_k3m9.md",
      "call_id": "13fb2d70",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr._report_error Returns Empty List",
      "target": "scipy.odr._odrpack._report_error",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_report_error` function returns an empty list when the info code has a ten-thousands digit (I[0]) of 7 or higher, violating its documented contract to always return a list of messages.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_report_error_2025-09-25_00-00_k3n9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_report_error_2025-09-25_00-00_k3n9.md",
      "call_id": "bdfd6b01",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr._report_error Returns Empty List",
      "target": "scipy.odr._odrpack._report_error",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_report_error` function returns an empty list for certain error codes (e.g., 10000, 20000, 30000), which violates the documented contract that it should return \"A list of messages about why the odr() routine stopped.\"",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_report_error_2025-09-25_empty_list.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_report_error_2025-09-25_empty_list.md",
      "call_id": "332f0fbc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr._report_error Returns Empty List for High Info Values",
      "target": "scipy.odr._odrpack._report_error",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_report_error` function returns an empty list when the `info` parameter has a value >= 70000, violating its documented contract that it should return \"A list of messages about why the odr() routine stopped.\"",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_report_error_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_report_error_2025-09-25_00-00_k3m9.md",
      "call_id": "8e7781b0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.polynomial Pickle Failure",
      "target": "scipy.odr.polynomial",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Models created with `scipy.odr.polynomial()` cannot be pickled, while all other predefined ODR models (multilinear, exponential, quadratic, unilinear) can be pickled successfully. This is inconsistent and breaks the expected behavior that Model objects should be serializable.",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_polynomial_pickle_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_polynomial_pickle_2025-09-25_00-00_k3m9.md",
      "call_id": "bb0b5669",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.odr.unilinear IndexError with 1-parameter beta0",
      "target": "scipy.odr.unilinear",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.odr.unilinear` model has a misleading name and raises an `IndexError` when used with a single-parameter `beta0`, despite \"unilinear\" typically meaning a line through the origin (one parameter: `y = B[0] * x`).",
      "package": "scipy",
      "file_name": "bug_report_scipy_odr_unilinear_2025-09-25_13-45_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_odr_unilinear_2025-09-25_13-45_k3f9.md",
      "call_id": "7611b4d5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize BFGS and SR1 Symmetry Violation",
      "target": "scipy.optimize.BFGS",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The BFGS and SR1 Hessian update strategies produce asymmetric matrices when updated with certain step vectors, violating a fundamental mathematical property of these algorithms. Both algorithms are required to maintain symmetric positive-definite (BFGS) or symmetric (SR1) Hessian approximations.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_hessian_symmetry_2025-09-25_05-51_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_hessian_symmetry_2025-09-25_05-51_x7k9.md",
      "call_id": "0d24e992",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize Bracketing Methods Under-Report Function Calls",
      "target": "scipy.optimize.{bisect, ridder, brenth, brentq}",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The bracketing root-finding methods (`bisect`, `ridder`, `brenth`, `brentq`) under-report the actual number of function evaluations by 2. The methods make initial calls to `f(a)` and `f(b)` to verify the sign condition, but these calls are not included in the `function_calls` field of the returned `RootResults` object.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_funcalls_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_funcalls_2025-09-25_00-00_a1b2.md",
      "call_id": "d7c246de",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize Constraint Classes Missing Input Validation",
      "target": "scipy.optimize.Bounds",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "All three constraint classes (`Bounds`, `LinearConstraint`, `NonlinearConstraint`) accept infeasible constraints where `lb > ub` without raising an error during construction, violating their documented contracts. This makes debugging harder as errors only appear later during optimization.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_constraints_validation_2025-09-25_03-28_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_constraints_validation_2025-09-25_03-28_x7n2.md",
      "call_id": "457b80af",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize Nelder-Mead Convergence Failure",
      "target": "scipy.optimize.minimize",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Nelder-Mead optimization method converges to an incorrect minimum when started from certain initial points with extremely small coordinate values, yet reports `success=True`. For a simple convex quadratic function with a unique minimum at [1, -2], Nelder-Mead finds [1, ~0] starting from [0, ~1e-199].",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_nelder_mead_2025-09-25_00-00_nm4b.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_nelder_mead_2025-09-25_00-00_nm4b.md",
      "call_id": "04f1f696",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize root finders return garbage iterations count for boundary roots",
      "target": "scipy.optimize.{bisect, ridder, brenth, brentq}",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When a root is found exactly at one of the bracketing interval boundaries (either `a` or `b`), the `iterations` field in the returned `RootResults` object contains uninitialized garbage values instead of the actual iteration count.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_boundary_root_iterations_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_boundary_root_iterations_2025-09-25_00-00_x7k9.md",
      "call_id": "3ff4d0d7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.bisect Interval Direction Non-Determinism",
      "target": "scipy.optimize.bisect",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `bisect` root-finding function returns different roots when the interval endpoints are swapped, exhibiting non-deterministic behavior at specific floating-point boundary values.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_bisect_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_bisect_2025-09-25_k3m9.md",
      "call_id": "a50ab9ab",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.curve_fit returns infinite covariance matrix",
      "target": "scipy.optimize.curve_fit",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.optimize.curve_fit` returns a covariance matrix filled with `inf` values when fitting exact data with certain parameter values (specifically when the intercept is 0), despite issuing a warning that \"Covariance of the parameters could not be estimated\". This creates an inconsistent API where the function warns about a problem but still returns invalid data instead of raising an exception or returning None.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_curve_fit_inf_covariance_2025-09-25_07-03_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_curve_fit_inf_covariance_2025-09-25_07-03_a1b2.md",
      "call_id": "24578677",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Iteration Count Corruption",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function returns corrupted iteration counts in the output dictionary. The `iterations` field contains nonsensical values including negative numbers and values that vastly exceed the maximum iteration limit. The values are also non-deterministic, changing between runs with identical inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_cython_optimize_iteration_count_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_cython_optimize_iteration_count_2025-09-25_00-00_k3x9.md",
      "call_id": "f6542def",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Misleading Documentation",
      "target": "scipy.optimize.cython_optimize._zeros",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The docstrings for functions in EXAMPLES_MAP do not clearly document the polynomial form or coefficient order, leading users to pass incorrect arguments and get wrong results.",
      "package": "scipy",
      "file_name": "bug_report_cython_optimize_documentation_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_cython_optimize_documentation_2025-09-25_00-01_x7k2.md",
      "call_id": "fdff5e2a",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Sign Error Detection Failure",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function fails to detect sign errors (no root bracketing) when the lower bound `xa` is extremely small (< ~1e-10) but still positive. The function incorrectly reports convergence (`error_num=0`) and returns `root=0.0` even though both `f(xa)` and `f(xb)` have the same sign.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cython_optimize_sign_error_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cython_optimize_sign_error_2025-09-25_14-30_k3m9.md",
      "call_id": "407c1d23",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Silent Failure on Invalid Inputs",
      "target": "scipy.optimize.cython_optimize._zeros",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Functions in EXAMPLES_MAP (brentq, bisect, ridder, brenth) silently swallow exceptions from invalid inputs and return garbage values (0.0) instead of raising errors. This causes silent failures that are difficult to debug.",
      "package": "scipy",
      "file_name": "bug_report_cython_optimize_silent_failure_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_cython_optimize_silent_failure_2025-09-25_00-00_k3m9.md",
      "call_id": "326c2351",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Undocumented Negative Error Code",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function returns an undocumented negative error code (`error_num = -2`) when the root-finding algorithm fails to converge within the maximum iterations, violating API contract expectations and differing from the behavior of scipy's standard optimize functions.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cython_optimize_error_num_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cython_optimize_error_num_2025-09-25_00-00_k3x9.md",
      "call_id": "1501d627",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize Uninitialized Memory in iterations Field",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `iterations` field in the `zeros_full_output` struct contains uninitialized memory when root-finding functions (brentq, bisect, ridder, brenth) find a root at or very close to a boundary value (xa or xb). This results in garbage values like `-281778880` or `234072704` instead of valid iteration counts.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_cython_optimize_2025-09-25_00-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_cython_optimize_2025-09-25_00-00_a7b3.md",
      "call_id": "4050d403",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize full_output_example Returns Corrupted Data",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function returns corrupted data in its output dictionary, including nonsensical iteration counts and negative error numbers, even with valid inputs.",
      "package": "scipy",
      "file_name": "bug_report_cython_optimize_full_output_corrupted_2025-09-25_00-02_p9m4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_cython_optimize_full_output_corrupted_2025-09-25_00-02_p9m4.md",
      "call_id": "2fca17a5",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize full_output_example iterations field contains garbage",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function in `scipy.optimize.cython_optimize._zeros` returns a dictionary with an `iterations` field that contains uninitialized memory (garbage values) instead of the actual number of iterations performed.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_cython_optimize_iterations_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_cython_optimize_iterations_2025-09-25_00-00_x7k9.md",
      "call_id": "28f46b13",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize._zeros.full_output_example Returns Uninitialized Memory",
      "target": "scipy.optimize.cython_optimize._zeros.full_output_example",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `full_output_example` function in `scipy.optimize.cython_optimize._zeros` returns uninitialized memory and invalid error codes when given an incorrect number of arguments, instead of raising a proper exception.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cython_optimize_full_output_example_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cython_optimize_full_output_example_2025-09-25_00-00_k3m9.md",
      "call_id": "3144d8b1",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.cython_optimize._zeros.loop_example Silent Failure on Same-Sign Inputs",
      "target": "scipy.optimize.cython_optimize._zeros.loop_example",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `loop_example` function silently returns an invalid \"root\" (xa) when f(xa) and f(xb) have the same sign, instead of raising an error like the Python versions do. This violates the fundamental contract of root-finding algorithms and can lead to silent data corruption.",
      "package": "scipy",
      "file_name": "bug_report_scipy_cython_optimize_loop_example_2025-09-25_13-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_cython_optimize_loop_example_2025-09-25_13-00_k3x9.md",
      "call_id": "208f5973",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.least_squares False Convergence with Small Initial Values",
      "target": "scipy.optimize.least_squares",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.optimize.least_squares` with method='lm' (Levenberg-Marquardt) reports `success=True` but fails to converge when given initial values that are very small or zero. The gradient norm remains large (>2.0) even though the function claims successful termination via `ftol` condition.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_least_squares_2025-09-25_03-55_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_least_squares_2025-09-25_03-55_k9m2.md",
      "call_id": "34b8a310",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.newton Does Not Validate rtol Parameter",
      "target": "scipy.optimize.newton",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `newton` function does not validate its `rtol` parameter, allowing negative and potentially nonsensical values. This is inconsistent with the other root-finding methods (`bisect`, `ridder`, `brenth`, `brentq`) which all validate that `rtol >= 4 * np.finfo(float).eps`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_newton_rtol_2025-09-25_00-00_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_newton_rtol_2025-09-25_00-00_c3d4.md",
      "call_id": "fd676793",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.ridder Convergence Failure with Custom Tolerances",
      "target": "scipy.optimize.ridder",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ridder` root-finding method fails to converge when using custom tolerance settings (`xtol`, `rtol`) for certain inputs, even though it finds the root to machine precision. The bug exhibits asymmetric behavior: it fails to converge when finding negative roots but succeeds for positive roots with the same tolerance settings.",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_ridder_convergence_2025-09-25_16-30_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_ridder_convergence_2025-09-25_16-30_k9x2.md",
      "call_id": "0a83a5bb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.optimize.root False Convergence",
      "target": "scipy.optimize.root",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.optimize.root()` with the default 'hybr' method (and 'lm' method) incorrectly reports `success=True` when residuals are large (far from zero), violating its documented purpose to \"find a root of a vector function.\"",
      "package": "scipy",
      "file_name": "bug_report_scipy_optimize_root_false_convergence_2025-09-25_11-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_optimize_root_false_convergence_2025-09-25_11-30_x7k9.md",
      "call_id": "f2d3edaa",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal Butterworth Filter Instability at Low Cutoff Frequencies",
      "target": "scipy.signal.butter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Butterworth and Chebyshev Type I digital filters designed with very low cutoff frequencies produce unstable filters with poles outside the unit circle, violating the fundamental stability requirement for digital filters.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_butter_instability_2025-09-25_07-30_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_butter_instability_2025-09-25_07-30_k8m2.md",
      "call_id": "c398a225",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal Repeated Poles Precision Loss",
      "target": "scipy.signal.zpk2tf",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip conversion zpk2tf \u2192 tf2zpk loses significant precision when the original zero-pole-gain representation contains repeated poles or zeros. For 4 repeated poles at s=-5, the error can exceed 0.001, which is 0.02% relative error.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_zpk_roundtrip_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_zpk_roundtrip_2025-09-25_00-00_k3m9.md",
      "call_id": "4097edfd",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal zpk2ss/ss2zpk Round-Trip Failure",
      "target": "scipy.signal.zpk2ss",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip conversion zpk \u2192 ss \u2192 zpk does not preserve the zeros correctly when the system has fewer zeros than poles. The function `ss2tf` returns a numerator polynomial with unnecessary leading zeros, causing `tf2zpk` to compute spurious zeros with extremely large magnitudes.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_zpk_ss_roundtrip_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_zpk_ss_roundtrip_2025-09-25_14-30_k3m9.md",
      "call_id": "ed1db4f5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.butter Produces Unstable Filters",
      "target": "scipy.signal.butter",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "scipy.signal.butter produces unstable digital filters (with poles outside the unit circle) for certain valid parameter combinations, specifically high-order filters with very low cutoff frequencies. Butterworth filters are analytically guaranteed to be stable, so this represents a numerical precision bug.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_butter_unstable_2025-09-25_08-54_p8x3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_butter_unstable_2025-09-25_08-54_p8x3.md",
      "call_id": "b1a00efc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Crashes on Leading Zeros",
      "target": "scipy.signal.deconvolve",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` crashes with a ValueError when the divisor array has leading zero coefficients, displaying the message \"BUG: filter coefficient a[0] == 0 not supported yet\". This violates the documented behavior and prevents legitimate use cases.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_leading_zeros.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_leading_zeros.md",
      "call_id": "8368dfb9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Crashes on Leading Zeros",
      "target": "scipy.signal.deconvolve",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` crashes with a ValueError when the divisor array has leading zero coefficients, displaying the message \"BUG: filter coefficient a[0] == 0 not supported yet\". This violates the documented behavior and prevents legitimate use cases.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_2025-09-25_01-24_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_2025-09-25_01-24_k3f9.md",
      "call_id": "f2c0601b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Crashes with Zero Leading Coefficient",
      "target": "scipy.signal.deconvolve",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` crashes with a ValueError when the divisor's leading coefficient is zero, despite this being a mathematically valid input for polynomial division.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_zero_coefficient_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_zero_coefficient_2025-09-25_00-00_k3x9.md",
      "call_id": "887b4275",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Numerical Instability",
      "target": "scipy.signal.deconvolve",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` exhibits severe numerical instability for certain divisor patterns, violating its documented property that `signal = convolve(divisor, quotient) + remainder`. For signals of moderate length (>20 elements), the reconstruction error can exceed 6% relative error.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_2025-09-25_12-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_2025-09-25_12-00_x3k9.md",
      "call_id": "441566f5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Round-Trip Property Violated with Small Leading Coefficient",
      "target": "scipy.signal.deconvolve",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` violates its documented round-trip property `signal = convolve(divisor, quotient) + remainder` when the divisor's leading coefficient is extremely small (near float minimum), producing incorrect results due to numerical instability.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_small_coefficient_2025-09-25_00-01_m7p2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_small_coefficient_2025-09-25_00-01_m7p2.md",
      "call_id": "155d2f39",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve ValueError with Leading Zero Coefficient",
      "target": "scipy.signal.deconvolve",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` raises a ValueError with message \"BUG: filter coefficient a[0] == 0 not supported yet\" when the divisor array has a leading zero coefficient. This violates the function's documented contract and prevents deconvolution of valid polynomial inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_2025-09-25_08-28_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_2025-09-25_08-28_x3m9.md",
      "call_id": "c15663fb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Violates Documented Inverse Property",
      "target": "scipy.signal.deconvolve",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.signal.deconvolve` violates its documented contract that `signal = convolve(divisor, quotient) + remainder` for certain inputs with poorly conditioned divisors.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_2025-09-25_11-24_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_2025-09-25_11-24_k3f9.md",
      "call_id": "8898e6d4",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.deconvolve Violates Documented Property",
      "target": "scipy.signal.deconvolve",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.signal.deconvolve` function violates its documented mathematical property: `signal = convolve(divisor, quotient) + remainder`. Due to numerical instability in the underlying `lfilter` implementation, the reconstructed signal differs from the original for certain inputs, with errors as large as 451.0 in this example.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_deconvolve_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_deconvolve_2025-09-25_00-00_k3m9.md",
      "call_id": "e2157b8a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.hilbert Empty Array Crash",
      "target": "scipy.signal.hilbert",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.hilbert` crashes with `ValueError: N must be positive.` when given an empty array as input, instead of handling the edge case gracefully.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_hilbert_2025-09-25_05-51_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_hilbert_2025-09-25_05-51_k3m9.md",
      "call_id": "a3189fad",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.normalize Leading Zero Stripping",
      "target": "scipy.signal.normalize",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.signal.normalize()` function incorrectly strips leading zeros from the numerator coefficients of a transfer function, which silently changes the filter's behavior. This affects multiple conversion functions including `tf2zpk()`, `zpk2tf()`, `tf2sos()`, and `sos2tf()`, causing them to violate round-trip properties.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_normalize_2025-09-25_01-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_normalize_2025-09-25_01-30_x7k9.md",
      "call_id": "5a34814c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.resample Empty Array Crash",
      "target": "scipy.signal.resample",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.resample` crashes with `ValueError` when given an empty array as input, instead of handling the edge case gracefully.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_resample_2025-09-25_05-51_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_resample_2025-09-25_05-51_x7k9.md",
      "call_id": "8190967a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.ss2tf Incorrect Polynomial Degree for Pure Feedthrough Systems",
      "target": "scipy.signal.ss2tf",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`ss2tf` incorrectly increases the polynomial degree when converting pure feedthrough state-space systems (where B and C matrices are all zeros) back to transfer function form. This breaks the round-trip property tf2ss \u2192 ss2tf for constant transfer functions.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_ss2tf_2025-09-25_09-15_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_ss2tf_2025-09-25_09-15_k3m9.md",
      "call_id": "3179df4c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows Periodic Window Normalization Failure for Odd M",
      "target": "scipy.signal.windows",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Periodic windows (`sym=False`) fail to achieve the expected maximum value of 1.0 when the window length M is odd. This causes normalization inconsistencies and amplitude errors of up to 37% in spectral analysis applications.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_periodic_normalization_2025-09-25_12-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_periodic_normalization_2025-09-25_12-00_a7f2.md",
      "call_id": "cf76df7c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.blackman Negative Endpoint Values",
      "target": "scipy.signal.windows.blackman",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `blackman` window function returns negative values at its endpoints due to floating point rounding errors, violating the expected property that window values should be non-negative.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_blackman_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_blackman_2025-09-25_14-30_k3m9.md",
      "call_id": "03b56449",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.flattop Maximum Value Exceeds 1.0",
      "target": "scipy.signal.windows.flattop",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `flattop` window function violates its documented contract that \"the maximum value normalized to 1\". For all odd values of M, the window's maximum value is approximately 1.000000003, exceeding 1.0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_flattop_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_flattop_2025-09-25_14-30_k3m9.md",
      "call_id": "3c03e37e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.flattop Maximum Value Exceeds Documented Limit",
      "target": "scipy.signal.windows.flattop",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `flattop` window function produces values that slightly exceed the documented maximum of 1.0, violating its API contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_flattop_2025-09-25_08-25_avwn.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_flattop_2025-09-25_08-25_avwn.md",
      "call_id": "160a2e43",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.flattop Normalization Exceeds 1.0",
      "target": "scipy.signal.windows.flattop",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `flattop` window function claims in its documentation to return \"a window, with the maximum value normalized to 1\", but for all odd values of M, the actual maximum value is 1.000000003, exceeding 1.0 by approximately 3e-9.",
      "package": "scipy",
      "file_name": "bug_report_scipy_flattop_normalization_2025-09-25_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_flattop_normalization_2025-09-25_k3f9.md",
      "call_id": "cb299765",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.flattop Normalization Violation",
      "target": "scipy.signal.windows.flattop",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `flattop` window function violates its documented contract that \"the maximum value normalized to 1\". For all odd values of M, the function returns a maximum value of 1.000000003, exceeding the claimed normalization by 3\u00d710\u207b\u2079.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_flattop_2025-09-25_10-55_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_flattop_2025-09-25_10-55_k3m9.md",
      "call_id": "e75ec035",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.gaussian produces NaN with std=0",
      "target": "scipy.signal.windows.gaussian",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.windows.gaussian(M, std=0.0)` produces NaN values for all odd M >= 3, causing silent data corruption. The function should either reject std=0 with a clear error message or handle it gracefully.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_gaussian_std_zero_2025-09-25_12-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_gaussian_std_zero_2025-09-25_12-00_x3k9.md",
      "call_id": "805b31b9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.get_window Default Parameter Inconsistency",
      "target": "scipy.signal.windows.get_window",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `get_window` function has inconsistent default parameters compared to the window functions it wraps. Specifically, `get_window('hann', M)` returns a different result than `hann(M)` because `get_window` defaults to `fftbins=True` (periodic window) while individual window functions default to `sym=True` (symmetric window).",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_get_window_2025-09-25_03-27_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_get_window_2025-09-25_03-27_k8m2.md",
      "call_id": "d6d3b1f3",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.get_window Kaiser-Bessel Derived Naming Inconsistency",
      "target": "scipy.signal.windows.get_window",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `get_window` function cannot dispatch to `kaiser_bessel_derived` using the function's actual name (with underscores). Instead, it requires using 'kaiser bessel derived' (with spaces), which violates the principle of least surprise and is inconsistent with how all other window functions work.",
      "package": "scipy",
      "file_name": "bug_report_scipy_windows_get_window_kaiser_bessel_derived_2025-09-25_06-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_windows_get_window_kaiser_bessel_derived_2025-09-25_06-25_k3m9.md",
      "call_id": "4e00d177",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.kaiser NaN with Large Beta Values",
      "target": "scipy.signal.windows.kaiser",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `kaiser` window function returns NaN values when beta is large (>= 710) and M is small, due to numerical overflow in the Bessel function calculation. This violates the expectation that window functions should return finite values for all valid inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_kaiser_2025-09-25_07-23_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_kaiser_2025-09-25_07-23_k9x2.md",
      "call_id": "2a2cda91",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.taylor Missing Input Validation",
      "target": "scipy.signal.windows.taylor",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `taylor` window function silently returns NaN values when given negative `sll` parameter values, despite documentation stating `sll` \"should be a positive number.\" The function lacks input validation and produces invalid output instead of raising an appropriate error.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_taylor_2025-09-25_08-55_x7m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_taylor_2025-09-25_08-55_x7m2.md",
      "call_id": "0af76f2a",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey NaN Values for Very Small Alpha",
      "target": "scipy.signal.windows.tukey",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `tukey` window function produces NaN values when the `alpha` parameter is very small (but greater than 0). This occurs due to numerical overflow in the computation `-2.0/alpha` when alpha approaches the smallest positive float.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_tukey_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_tukey_2025-09-25_00-00_a7f2.md",
      "call_id": "be89cf30",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey NaN Values with Tiny Alpha",
      "target": "scipy.signal.windows.tukey",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `tukey` window function produces NaN values when called with very small but valid alpha parameter values (e.g., alpha < 1e-300), instead of returning a valid window array.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_tukey_2025-09-25_06-00_xy7k.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_tukey_2025-09-25_06-00_xy7k.md",
      "call_id": "ec6899ad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey NaN for Small Alpha Values",
      "target": "scipy.signal.windows.tukey",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `tukey` window function returns NaN values for very small but valid alpha parameters (approximately < 1e-300) due to numerical overflow when dividing by alpha.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_tukey_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_tukey_2025-09-25_00-00_k9x2.md",
      "call_id": "f3cd5541",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey Produces NaN with Very Small Alpha",
      "target": "scipy.signal.windows.tukey",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `tukey` window function produces NaN values when the `alpha` parameter is very small but non-zero (approximately 1e-313 to 1e-310), due to numerical overflow in the computation `2.0/alpha`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_tukey_2025-09-25_03-56_4fcn.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_tukey_2025-09-25_03-56_4fcn.md",
      "call_id": "e5671aa5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.signal.windows.tukey produces NaN with extremely small alpha",
      "target": "scipy.signal.windows.tukey",
      "severity": "High - Violates fundamental interpolation contract",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.signal.windows.tukey(M, alpha)` produces NaN values when alpha is extremely small (< ~1e-307). While this is a rare edge case, the function should either handle it gracefully or document the minimum alpha requirement.",
      "package": "scipy",
      "file_name": "bug_report_scipy_signal_windows_tukey_small_alpha_2025-09-25_12-01_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_signal_windows_tukey_small_alpha_2025-09-25_12-01_k7m3.md",
      "call_id": "13ec6863",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse COO Canonical Format Flag Not Set on CSR Conversion",
      "target": "scipy.sparse.coo_matrix",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "When converting a CSR matrix to COO format using `tocoo()`, the resulting COO matrix has no duplicate entries (as expected from CSR format) but the `has_canonical_format` flag is incorrectly set to `False`. This violates the semantic contract that a COO matrix with no duplicates should have `has_canonical_format=True`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_coo_canonical_format_2025-09-25_05-55_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_coo_canonical_format_2025-09-25_05-55_k3x9.md",
      "call_id": "32bc1542",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse COO Matrix Canonical Format Flag Lost After tocsr().tocoo()",
      "target": "scipy.sparse.coo_matrix",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When converting a COO matrix to CSR and back to COO, the resulting COO matrix loses its `has_canonical_format` flag even when it contains no duplicate coordinates. This causes the internal state flag to be incorrect, potentially leading to performance issues or incorrect behavior in code that relies on this flag.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_coo_tocsr_tocoo_2025-09-25_03-50_x4k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_coo_tocsr_tocoo_2025-09-25_03-50_x4k2.md",
      "call_id": "2d813008",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse COO Matrix Transpose Loses Canonical Format Flag",
      "target": "scipy.sparse.coo_matrix.transpose()",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `transpose()` method of `coo_matrix` does not preserve the `has_canonical_format` flag, even though transposing a matrix with no duplicate entries cannot introduce duplicates.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_coo_transpose_canonical_format_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_coo_transpose_canonical_format_2025-09-25_00-00_k3x9.md",
      "call_id": "950f164d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse COO Matrix copy() Doesn't Preserve has_canonical_format Flag",
      "target": "scipy.sparse.coo_matrix.copy()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When copying a COO matrix that has `has_canonical_format=True` (e.g., after calling `sum_duplicates()`), the copy has `has_canonical_format=False` even though it has the same data with no duplicate coordinates. This violates the expectation that `copy()` creates an identical matrix with the same internal state.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_coo_copy_2025-09-25_03-51_m8n3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_coo_copy_2025-09-25_03-51_m8n3.md",
      "call_id": "ebf6c33e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse DIA Array Incorrect nnz Property",
      "target": "scipy.sparse.dia_array.nnz",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `nnz` (number of nonzero elements) property of DIA sparse arrays incorrectly reports the number of stored elements rather than the actual number of nonzero elements in the matrix, leading to overcounting when diagonals contain zeros.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_dia_nnz_2025-09-25_j7p2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_dia_nnz_2025-09-25_j7p2.md",
      "call_id": "d69a819e",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse DIA Matrix Multiplication Crash",
      "target": "scipy.sparse.dia_array @ scipy.sparse.dia_array",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Matrix multiplication of empty DIA sparse arrays causes a `RuntimeError: vector::_M_default_append` crash instead of returning the expected zero matrix result.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_dia_matmul_2025-09-25_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_dia_matmul_2025-09-25_k3x9.md",
      "call_id": "9d4d3370",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse Scalar Multiplication by Zero",
      "target": "scipy.sparse",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "Multiplying a sparse matrix by zero leaves explicit zero values in the sparse structure, wasting memory and violating the sparse matrix principle of only storing nonzero values.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_multiply_zero_2025-09-25_03-56_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_multiply_zero_2025-09-25_03-56_x7k9.md",
      "call_id": "65207859",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.coo_matrix has_canonical_format Flag Not Invalidated",
      "target": "scipy.sparse.coo_matrix.has_canonical_format",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `has_canonical_format` flag in `scipy.sparse.coo_matrix` is not invalidated when the underlying data arrays are modified directly, leading to a violated contract where the flag indicates canonical format but the actual data may not be canonical.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_canonical_format_flag_2025-09-25_08-54_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_canonical_format_flag_2025-09-25_08-54_x3k9.md",
      "call_id": "86ef0279",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph._laplacian._laplacian_dense contains dead code",
      "target": "scipy.sparse.csgraph._laplacian._laplacian_dense",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_laplacian_dense` function contains unreachable dead code at lines 545-546. The code checks `if dtype is None` twice, but the second check can never be True because `dtype` is always set in the first check.",
      "package": "scipy",
      "file_name": "bug_report_laplacian_dead_code_2025-09-25_12-01_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_laplacian_dead_code_2025-09-25_12-01_x7n2.md",
      "call_id": "8372c7d3",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph._validation.validate_graph ignores dtype parameter",
      "target": "scipy.sparse.csgraph._validation.validate_graph",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `validate_graph` function accepts a `dtype` parameter but ignores it completely, always using the module-level `DTYPE` constant (`np.float64`) instead. This violates the function's API contract.",
      "package": "scipy",
      "file_name": "bug_report_validate_graph_dtype_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_validate_graph_dtype_2025-09-25_12-00_k3m9.md",
      "call_id": "e65ea7b7",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.csgraph_from_dense Incorrectly Drops Small Non-Zero Values",
      "target": "scipy.sparse.csgraph.csgraph_from_dense",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`csgraph_from_dense` incorrectly treats values smaller than approximately 1e-10 as if they equal the `null_value`, dropping them from the sparse representation even though they are mathematically distinct from zero.",
      "package": "scipy",
      "file_name": "bug_report_scipy_csgraph_from_dense_threshold_2025-09-25_00-01_a3k8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_csgraph_from_dense_threshold_2025-09-25_00-01_a3k8.md",
      "call_id": "584e9b18",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.csgraph_from_dense Silent Data Loss",
      "target": "scipy.sparse.csgraph.csgraph_from_dense",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `csgraph_from_dense` function silently drops non-zero floating-point values smaller than approximately `1e-8`, violating the documented round-trip property and causing silent data corruption.",
      "package": "scipy",
      "file_name": "bug_report_scipy_csgraph_from_dense_roundtrip_2025-09-25_09-56_07hi.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_csgraph_from_dense_roundtrip_2025-09-25_09-56_07hi.md",
      "call_id": "edcf1cb9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.csgraph_from_masked Crashes on Unmasked Arrays",
      "target": "scipy.sparse.csgraph.csgraph_from_masked",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`csgraph_from_masked` crashes with `AxisError` when given a masked array with no masked values, because NumPy optimizes the mask to a scalar `False` instead of an array.",
      "package": "scipy",
      "file_name": "bug_report_scipy_csgraph_from_masked_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_csgraph_from_masked_2025-09-25_00-00_x7k9.md",
      "call_id": "1143b0fc",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.laplacian LinearOperator matvec Returns Wrong Shape",
      "target": "scipy.sparse.csgraph.laplacian",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `scipy.sparse.csgraph.laplacian` is called with `form='lo'` to return a LinearOperator, the resulting LinearOperator crashes when performing matrix-vector multiplication due to incorrect output shape.",
      "package": "scipy",
      "file_name": "bug_report_scipy_laplacian_linearoperator_2025-09-25_12-00_a7x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_laplacian_linearoperator_2025-09-25_12-00_a7x9.md",
      "call_id": "636adf40",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.laplacian form='array' Returns Sparse Matrix",
      "target": "scipy.sparse.csgraph.laplacian",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `laplacian` function with `form='array'` returns a sparse matrix instead of a numpy array, violating its documented API contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_csgraph_laplacian_form_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_csgraph_laplacian_form_2025-09-25_12-00_x7k9.md",
      "call_id": "43833f12",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csgraph.reconstruct_path Crash",
      "target": "scipy.sparse.csgraph.reconstruct_path",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`reconstruct_path` crashes with \"ValueError: object too deep for desired array\" when given valid predecessor matrices from `dijkstra`, even though the documentation states it should work with such input.",
      "package": "scipy",
      "file_name": "bug_report_scipy_csgraph_reconstruct_path_2025-09-25_03-29_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_csgraph_reconstruct_path_2025-09-25_03-29_x7k9.md",
      "call_id": "97aec5aa",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.csr_matrix has_sorted_indices Flag Not Invalidated",
      "target": "scipy.sparse.csr_matrix.has_sorted_indices",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `has_sorted_indices` flag in `scipy.sparse.csr_matrix` (and `csc_matrix`) is not invalidated when the underlying indices array is modified directly, leading to a violated contract where the flag indicates sorted indices but the actual indices may not be sorted.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_sorted_indices_flag_2025-09-25_08-54_y7m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_sorted_indices_flag_2025-09-25_08-54_y7m2.md",
      "call_id": "991fbcd0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.eye Offset Validation for Non-Square Matrices",
      "target": "scipy.sparse.eye",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.sparse.eye()` raises an unclear error when the diagonal offset `k` is beyond the valid range for non-square matrices, while `numpy.eye()` handles the same case gracefully by returning a zero matrix. This inconsistency violates user expectations and the API contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_eye_offset_2025-09-25_00-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_eye_offset_2025-09-25_00-01_x7k9.md",
      "call_id": "c4b6e8ef",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.eye_array Inconsistent Offset Bounds Checking",
      "target": "scipy.sparse.eye_array",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.sparse.eye_array` has inconsistent behavior for out-of-bounds diagonal offsets: it successfully returns an empty matrix when `abs(k) == n` but raises a `ValueError` when `abs(k) > n`, despite both cases representing equally valid (empty) diagonal matrices.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_eye_array_2025-09-25_11-28_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_eye_array_2025-09-25_11-28_k3m9.md",
      "call_id": "f2c3d173",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.eye_array ValueError for out-of-bounds diagonals",
      "target": "scipy.sparse.eye_array",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.sparse.eye_array(n, k=k)` raises a `ValueError` when `abs(k) >= n`, while `numpy.eye(n, k=k)` handles the same inputs gracefully by returning a zero matrix. This inconsistency violates the documented expectation that scipy.sparse functions mirror numpy's behavior.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_eye_array_2025-09-25_07-51_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_eye_array_2025-09-25_07-51_k3x9.md",
      "call_id": "6a9df221",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.kron stores explicit zeros",
      "target": "scipy.sparse.kron",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.sparse.kron` creates sparse matrices with explicitly stored zero elements, violating the fundamental sparse matrix invariant that only nonzero values should be stored.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_kron_2025-09-25_00-18_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_kron_2025-09-25_00-18_x7k9.md",
      "call_id": "a723e003",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.expm Documentation Inconsistency",
      "target": "scipy.sparse.linalg.expm",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `expm` function's docstring claims to return an `ndarray` in its \"Returns\" section, but the \"Examples\" section demonstrates it returning a sparse array, and the actual implementation returns a sparse array when given sparse input. This creates confusion about the function's contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_expm_2025-09-25_04-55_jhv1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_expm_2025-09-25_04-55_jhv1.md",
      "call_id": "38424016",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.expm Documentation Incorrect Return Type",
      "target": "scipy.sparse.linalg.expm",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `expm` function's docstring states it returns an `ndarray`, but it actually returns a sparse matrix when given a sparse matrix input.",
      "package": "scipy",
      "file_name": "bug_report_scipy_expm_documentation_2025-09-25_02-54_x7n2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_expm_documentation_2025-09-25_02-54_x7n2.md",
      "call_id": "74320180",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.expm Documentation Incorrectly States Return Type",
      "target": "scipy.sparse.linalg.expm",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.sparse.linalg.expm` function documentation states it returns an `ndarray`, but it actually returns a sparse array when given sparse input, contradicting both the stated return type and the provided example.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_expm_doc_2025-09-25_13-10_b4k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_expm_doc_2025-09-25_13-10_b4k2.md",
      "call_id": "c22df1a5",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.expm_multiply ZeroDivisionError",
      "target": "scipy.sparse.linalg.expm_multiply",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `expm_multiply` function crashes with `ZeroDivisionError` when called with extremely small time intervals (near machine epsilon). The bug occurs in the internal time-stepping logic when the scaling factor `s` becomes zero.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_expm_multiply_2025-09-25_01-35_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_expm_multiply_2025-09-25_01-35_k7x2.md",
      "call_id": "3c0cbfc7",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.inv Inconsistent Return Type",
      "target": "scipy.sparse.linalg.inv",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.sparse.linalg.inv` returns a dense numpy ndarray for 1x1 matrices instead of a sparse array, violating its documented contract that it should return sparse arrays.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_inv_2025-09-25_09-57_a3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_inv_2025-09-25_09-57_a3k9.md",
      "call_id": "6545bed8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.inv Returns Wrong Type for 1\u00d71 Matrices",
      "target": "scipy.sparse.linalg.inv",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.sparse.linalg.inv` function returns a 1D numpy array instead of a sparse matrix when inverting 1\u00d71 sparse matrices, violating its documented contract that it returns sparse arrays.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_inv_2025-09-25_00-11_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_inv_2025-09-25_00-11_k3m9.md",
      "call_id": "557bfadb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.inv Returns ndarray for 1x1 Matrices",
      "target": "scipy.sparse.linalg.inv",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `scipy.sparse.linalg.inv` function returns a `numpy.ndarray` instead of a sparse array when given a 1x1 sparse matrix, violating its documented contract.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_inv_1x1_2025-09-25_13-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_inv_1x1_2025-09-25_13-00_x7k9.md",
      "call_id": "58fb2324",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.spbandwidth Crashes on Empty Sparse Matrices",
      "target": "scipy.sparse.linalg.spbandwidth",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `spbandwidth` function crashes with a `ValueError` when given a sparse matrix with no non-zero elements (zero matrix).",
      "package": "scipy",
      "file_name": "bug_report_scipy_spbandwidth_2025-09-25_02-54_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spbandwidth_2025-09-25_02-54_k3m9.md",
      "call_id": "26e0732b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.sparse.linalg.spsolve Dtype Inconsistency",
      "target": "Unknown",
      "severity": "N/A",
      "bug_type": "Unknown",
      "date": "2025-09-25",
      "summary": "The `scipy.sparse.linalg.spsolve` function exhibits inconsistent dtype promotion behavior when solving linear systems with sparse right-hand side matrices compared to dense right-hand side arrays. When the matrix `A` and right-hand side `b` have different dtypes, the function correctly promotes dtypes for dense RHS but incorrectly uses the original matrix dtype for sparse RHS, leading to inconsistent results and potential precision loss.",
      "package": "scipy",
      "file_name": "bug_report_scipy_sparse_linalg_spsolve_dtype_2025-09-25_dtype_inconsistency.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_sparse_linalg_spsolve_dtype_2025-09-25_dtype_inconsistency.md",
      "call_id": "d8fcfd0b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.ConvexHull Incremental Volume Calculation",
      "target": "scipy.spatial.ConvexHull",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "ConvexHull with `incremental=True` computes incorrect volume after calling `add_points()`. The incremental hull reports a different (smaller) volume than an equivalent non-incremental hull built with all points at once, even when both hulls have identical vertices.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_ConvexHull_incremental_volume_2025-09-25_02-58_m1yk.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_ConvexHull_incremental_volume_2025-09-25_02-58_m1yk.md",
      "call_id": "ff434d88",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.Delaunay.find_simplex Fails to Locate Vertices",
      "target": "scipy.spatial.Delaunay.find_simplex",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`Delaunay.find_simplex()` with default tolerance fails to locate points that are vertices of the triangulation, returning -1 instead of a valid simplex index.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_Delaunay_find_simplex_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_Delaunay_find_simplex_2025-09-25_00-00_x7k9.md",
      "call_id": "daf62184",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.Delaunay.find_simplex Fails to Locate Vertices",
      "target": "scipy.spatial.Delaunay.find_simplex",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`Delaunay.find_simplex()` incorrectly returns -1 for some vertices of the triangulation when using the default algorithm, despite these points being part of the triangulation. The bruteforce algorithm correctly finds all vertices.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_delaunay_find_simplex_2025-09-25_00-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_delaunay_find_simplex_2025-09-25_00-00_x3k9.md",
      "call_id": "c7e1acbd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.braycurtis Division by Zero",
      "target": "scipy.spatial.distance.braycurtis",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `braycurtis` distance function returns `nan` when both input vectors are all zeros, due to division by zero, violating the identity property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_braycurtis_2025-09-25_03-29_p2k8.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_braycurtis_2025-09-25_03-29_p2k8.md",
      "call_id": "9649d4e2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.braycurtis Division by Zero",
      "target": "scipy.spatial.distance.braycurtis",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `braycurtis` distance function returns `nan` when both input vectors are all zeros, due to division by zero, violating the identity property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_braycurtis_2025-09-25_03-30_x8j4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_braycurtis_2025-09-25_03-30_x8j4.md",
      "call_id": "bf202fdb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.braycurtis Returns NaN for All-Zero Arrays",
      "target": "scipy.spatial.distance.braycurtis",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `braycurtis` distance function returns `nan` when both input arrays contain only zeros, violating the metric property that the distance between identical vectors should be 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_distance_braycurtis_2025-09-25_04-00_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_distance_braycurtis_2025-09-25_04-00_k9m2.md",
      "call_id": "d26a7604",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.correlation Returns NaN for Constant Arrays",
      "target": "scipy.spatial.distance.correlation",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `correlation` distance function returns `nan` when given constant arrays (zero variance), violating the metric property that the distance between identical vectors should be 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_distance_correlation_2025-09-25_04-00_x3p7.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_distance_correlation_2025-09-25_04-00_x3p7.md",
      "call_id": "ab4b507c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.cosine Returns NaN for Zero Vectors",
      "target": "scipy.spatial.distance.cosine",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cosine` distance function returns `nan` when both input vectors are zero vectors, violating the metric property that the distance between identical vectors should be 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_distance_cosine_2025-09-25_04-01_w8n1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_distance_cosine_2025-09-25_04-01_w8n1.md",
      "call_id": "9eb5008e",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.dice Identity Property Violation",
      "target": "scipy.spatial.distance.dice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dice` dissimilarity function returns `nan` instead of `0.0` when both input boolean arrays are all False, violating the fundamental identity property that `d(x, x) = 0` for all x.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_dice_2025-09-25_05-58_cxkm.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_dice_2025-09-25_05-58_cxkm.md",
      "call_id": "53e53a02",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.dice NaN on All-False Arrays",
      "target": "scipy.spatial.distance.dice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dice` distance function returns NaN when both input boolean arrays contain only False values, due to division by zero in the Dice formula. This violates the expected behavior that identical inputs should have distance 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_dice_2025-09-25_10-00_l4hk.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_dice_2025-09-25_10-00_l4hk.md",
      "call_id": "0a820822",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.dice Returns NaN for All-False Arrays",
      "target": "scipy.spatial.distance.dice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dice` dissimilarity function returns `nan` when both input boolean arrays contain only `False` values, violating the metric property that the distance between identical vectors should be 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_distance_dice_2025-09-25_04-00_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_distance_dice_2025-09-25_04-00_a7b3.md",
      "call_id": "1cd63b4b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.dice Returns NaN for All-False Boolean Arrays",
      "target": "scipy.spatial.distance.dice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dice` function returns NaN when both input boolean arrays contain only False values, instead of returning 0.0 for identical inputs.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_dice_2025-09-25_04-32_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_dice_2025-09-25_04-32_k3m9.md",
      "call_id": "1e698a97",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.dice Returns NaN for All-False Vectors",
      "target": "scipy.spatial.distance.dice",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `dice` function returns NaN when comparing two all-False boolean vectors, violating the metric property that d(x, x) = 0. The similar `jaccard` function correctly handles this case and returns 0.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_dice_2025-09-25_10-27_jml1.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_dice_2025-09-25_10-27_jml1.md",
      "call_id": "454c9b3d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.is_valid_dm TypeError in Error Message Formatting",
      "target": "scipy.spatial.distance.is_valid_dm",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When `is_valid_dm` is called with `name=None` or empty string and encounters a non-zero diagonal with `tol > 0`, it raises `TypeError` instead of the intended `ValueError` due to incorrect string formatting.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_is_valid_dm_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_is_valid_dm_2025-09-25_k3m9.md",
      "call_id": "5192ec4c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.jensenshannon Division by Zero",
      "target": "scipy.spatial.distance.jensenshannon",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `jensenshannon` distance function returns `nan` when both input probability vectors are all zeros, due to division by zero during normalization.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_jensenshannon_2025-09-25_03-31_q5r7.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_jensenshannon_2025-09-25_03-31_q5r7.md",
      "call_id": "68f04d56",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.distance.jensenshannon Invalid Base Parameter",
      "target": "scipy.spatial.distance.jensenshannon",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `jensenshannon` function does not validate the `base` parameter, allowing mathematically invalid values (base \u2264 0 or base = 1) that produce incorrect results (inf or nan) with only runtime warnings instead of proper exceptions.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_distance_jensenshannon_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_distance_jensenshannon_2025-09-25_00-00_k9x2.md",
      "call_id": "3bebf99c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.minkowski_distance Numerical Underflow",
      "target": "scipy.spatial.minkowski_distance",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.spatial.minkowski_distance` returns 0.0 for very small input values due to numerical underflow, while the mathematically equivalent `scipy.spatial.distance.euclidean` function correctly returns the non-zero distance using a more stable BLAS implementation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_minkowski_distance_2025-09-25_07-51_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_minkowski_distance_2025-09-25_07-51_x9k2.md",
      "call_id": "756c4f26",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform Rotation.reduce Fails With Single Rotation Arguments",
      "target": "scipy.spatial.transform.Rotation.reduce",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`Rotation.reduce()` fails with a cryptic ValueError when called on a single rotation with a single rotation as the left or right argument, even though it accepts single rotations as arguments in all other combinations.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_transform_reduce_2025-09-25_00-13_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_transform_reduce_2025-09-25_00-13_x7k9.md",
      "call_id": "9859010c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.Rotation Euler Angle Round-Trip Fails Near Gimbal Lock",
      "target": "scipy.spatial.transform.Rotation.as_euler()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip conversion `Rotation.from_euler(seq, angles).as_euler(seq)` does not preserve the rotation when the middle Euler angle is very close to (but not exactly at) gimbal lock. This violates the expected property that `from_euler(seq, r.as_euler(seq))` should equal `r`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotation_euler_gimbal_lock_2025-09-25_12-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotation_euler_gimbal_lock_2025-09-25_12-00_x7k9.md",
      "call_id": "bd02d6dc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.Rotation rotvec Round-Trip Failure",
      "target": "scipy.spatial.transform.Rotation",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property for rotation vectors fails when the rotation magnitude is exactly \u03c0 radians. Converting a rotation to a rotation vector with `as_rotvec()`, then back with `from_rotvec()`, and again to a rotation vector produces a negated result instead of the original rotation vector.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_transform_rotvec_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_transform_rotvec_2025-09-25_00-00_a1b2.md",
      "call_id": "73541d47",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.Rotation.mean() Fails on Single Rotations",
      "target": "scipy.spatial.transform.Rotation.mean()",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `mean()` method crashes with `TypeError: Single rotation has no len()` when called on a single rotation object, despite this being a reasonable operation (the mean of one rotation should be itself).",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotation_mean_single_2025-09-25_14-45_x7n9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotation_mean_single_2025-09-25_14-45_x7n9.md",
      "call_id": "a5ce5010",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.Rotation.mean() Segmentation Fault",
      "target": "scipy.spatial.transform.Rotation.mean",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Calling `Rotation.mean()` with a Python list containing a single Rotation object causes a segmentation fault, crashing the Python interpreter.",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotation_mean_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotation_mean_2025-09-25_00-00_k9x2.md",
      "call_id": "87be4f52",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.Rotation.reduce Single-Element Group Bug",
      "target": "scipy.spatial.transform.Rotation.reduce",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When a single `Rotation` object is reduced by a group containing only itself (created via `Rotation.concatenate()`), the method incorrectly returns a rotation with magnitude equal to double the original rotation's magnitude, instead of the identity rotation (magnitude 0.0).",
      "package": "scipy",
      "file_name": "bug_report_scipy_transform_reduce_2025-09-25_10-27_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_transform_reduce_2025-09-25_10-27_k3m9.md",
      "call_id": "0e650f1d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.RotationSpline Incorrect Keyframe Value",
      "target": "scipy.spatial.transform.RotationSpline",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "RotationSpline returns the wrong rotation at the last keyframe time when keyframes are closely spaced near the end of the interval.",
      "package": "scipy",
      "file_name": "bug_report_scipy_spatial_transform_RotationSpline_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_spatial_transform_RotationSpline_2025-09-25_00-00_k3m9.md",
      "call_id": "341837d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.spatial.transform.RotationSpline Numerical Overflow",
      "target": "scipy.spatial.transform.RotationSpline",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "RotationSpline crashes with \"array must not contain infs or NaNs\" when time intervals are very small and rotations between those intervals are non-trivial. The issue arises from numerical overflow when computing angular rates (rotation vector / time delta).",
      "package": "scipy",
      "file_name": "bug_report_scipy_rotationspline_overflow_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_rotationspline_overflow_2025-09-25_14-30_k3m9.md",
      "call_id": "39382d4f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special boxcox/inv_boxcox Round-Trip Failure",
      "target": "scipy.special.boxcox",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The Box-Cox transformation functions `boxcox` and `inv_boxcox` fail to correctly round-trip when lambda is extremely small (at the subnormal float level, around 5e-324). While `boxcox` correctly treats such values as effectively zero and returns `log(x)`, `inv_boxcox` does not apply the same threshold logic, resulting in incorrect results.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_boxcox_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_boxcox_2025-09-25_00-00_x7k9.md",
      "call_id": "2a7b3617",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special logit/expit Composition Returns Incorrect Values",
      "target": "scipy.special.logit",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The composition `logit(expit(x))` returns incorrect values for x >= 27 and completely fails (returns inf) for x >= 40, despite documentation claiming these functions are inverses.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_logit_expit_2025-09-25_06-57_k9f2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_logit_expit_2025-09-25_06-57_k9f2.md",
      "call_id": "a6fb945c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.bdtri Returns NaN Without Error When k >= n",
      "target": "scipy.special.bdtri",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.special.bdtri` silently returns NaN when k >= n, violating its documented inverse relationship with `bdtr`. The function should either document this constraint, raise an informative error, or handle the edge case gracefully.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_bdtri_2025-09-25_01-57_k9m2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_bdtri_2025-09-25_01-57_k9m2.md",
      "call_id": "a75c28cd",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.betainccinv Invalid Return Value",
      "target": "scipy.special.betainccinv",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`betainccinv` incorrectly returns `x=1.0` for certain inputs, violating the fundamental property that `betaincc(a, b, 1) = 0` for all valid parameters. This causes the round-trip property `betaincc(a, b, betainccinv(a, b, y)) = y` to fail completely for small y values.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_betainccinv_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_betainccinv_2025-09-25_00-00_k3x9.md",
      "call_id": "537f8db3",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.boxcox/inv_boxcox Subnormal Lambda Inconsistency",
      "target": "scipy.special.boxcox",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `boxcox` and `inv_boxcox` functions handle subnormal (extremely small) lambda values inconsistently, violating the documented inverse relationship and breaking the round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_boxcox_2025-09-25_00-53_8pe2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_boxcox_2025-09-25_00-53_8pe2.md",
      "call_id": "31b98137",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.boxcox1p Inconsistent Lambda Handling",
      "target": "scipy.special.boxcox1p",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When lambda is very small (approximately < 1e-157), `boxcox1p` and `inv_boxcox1p` use inconsistent logic to decide whether to treat lambda as zero, violating the documented inverse relationship and causing round-trip failures with large errors (~0.31).",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_boxcox1p_2025-09-25_00-00_a3k7.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_boxcox1p_2025-09-25_00-00_a3k7.md",
      "call_id": "26650825",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.expit/logit Round-Trip Asymmetry",
      "target": "scipy.special.expit",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `logit(expit(x)) = x`, which is mathematically exact and documented as an inverse relationship, fails catastrophically for large positive x values (\u226520) but works perfectly for large negative x values. This asymmetry indicates a numerical stability bug in the implementation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_expit_logit_2025-09-25_06-24_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_expit_logit_2025-09-25_06-24_k3m9.md",
      "call_id": "8ded1280",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.gammainccinv Returns Incorrect Value for Small Shape Parameters",
      "target": "scipy.special.gammainccinv",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.special.gammainccinv(a, y)` returns 0.0 for very small shape parameters `a` (approximately `a < 0.0003`) when it should return a small positive value, violating the inverse property with `gammaincc`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_gammainccinv_2025-09-25_10-53_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_gammainccinv_2025-09-25_10-53_x7k2.md",
      "call_id": "a66ca16f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.inv_boxcox1p Fails Round-Trip for Subnormal Lambda",
      "target": "scipy.special.inv_boxcox1p",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`inv_boxcox1p` fails to correctly invert `boxcox1p` when the lambda parameter is subnormal (< 2.225e-308), violating the fundamental round-trip property.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_inv_boxcox1p_2025-09-25_12-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_inv_boxcox1p_2025-09-25_12-00_k3m9.md",
      "call_id": "85ddee0d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.inv_boxcox1p Returns Wrong Value for Extremely Small Lambda",
      "target": "scipy.special.inv_boxcox1p",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.special.inv_boxcox1p` returns incorrect values when lambda is extremely small (approximately < 1e-200) but non-zero. Instead of computing the inverse transformation, it incorrectly returns the input `y` unchanged, breaking the round-trip property with `boxcox1p`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_inv_boxcox1p_2025-09-25_14-30_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_inv_boxcox1p_2025-09-25_14-30_k9x2.md",
      "call_id": "60dcbd8a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.special.pseudo_huber NaN for Small Delta Values",
      "target": "scipy.special.pseudo_huber",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `pseudo_huber` function returns NaN instead of a finite value when `delta` is very small (approximately < 10^-190) due to numerical overflow in the intermediate computation.",
      "package": "scipy",
      "file_name": "bug_report_scipy_special_pseudo_huber_2025-09-25_07-23_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_special_pseudo_huber_2025-09-25_07-23_k3m9.md",
      "call_id": "0ab012ad",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.bartlett Returns NaN P-value",
      "target": "scipy.stats.bartlett",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `scipy.stats.bartlett` function returns NaN for the p-value when all input samples have identical variances, instead of returning 1.0 as expected from the chi-squared distribution.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_bartlett_2025-09-25_10-59_45gx.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_bartlett_2025-09-25_10-59_45gx.md",
      "call_id": "a51da981",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.binned_statistic Excludes Values at Rightmost Bin Edge",
      "target": "scipy.stats.binned_statistic",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.stats.binned_statistic` incorrectly excludes values that exactly equal the rightmost bin edge, assigning them a bin number outside the valid range. This causes data loss when counting or aggregating statistics.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_binned_statistic_2025-09-25_02-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_binned_statistic_2025-09-25_02-30_k3m9.md",
      "call_id": "b8e7669f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.binom.pmf OverflowError with Extremely Small Probabilities",
      "target": "scipy.stats.binom.pmf",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`scipy.stats.binom.pmf` raises an `OverflowError` when computing probabilities with extremely small values of p (near machine epsilon ~1e-308), even though the computation is mathematically well-defined and should return a valid result.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_binom_pmf_overflow_2025-09-25_05-22_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_binom_pmf_overflow_2025-09-25_05-22_k3x9.md",
      "call_id": "b00d308c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.entropy KL Divergence Negative",
      "target": "scipy.stats.entropy",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `scipy.stats.entropy` function can return negative KL divergence values when computing relative entropy with extremely small probabilities, violating the mathematical property that KL divergence must always be non-negative.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_entropy_kl_2025-09-25_10-59_a6b2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_entropy_kl_2025-09-25_10-59_a6b2.md",
      "call_id": "82e72cbb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.lognorm Numerical Overflow in Mean Calculation",
      "target": "scipy.stats.lognorm.mean",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The lognormal distribution's mean calculation overflows to infinity for moderately large shape parameters (s \u2265 27), when it should return a finite (though large) value.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_lognorm_mean_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_lognorm_mean_2025-09-25_00-00_x7k9.md",
      "call_id": "7fad4502",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.norm.moment() Returns NaN for Small Location Parameters",
      "target": "scipy.stats.norm.moment()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`scipy.stats.norm.moment(1)` returns NaN instead of the correct value when the location parameter is extremely small (near machine epsilon), while `mean()` correctly returns the location parameter.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_norm_moment_2025-09-25_09-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_norm_moment_2025-09-25_09-00_x7k9.md",
      "call_id": "7864c752",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.percentileofscore Exceeds Documented Range",
      "target": "scipy.stats.percentileofscore",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `percentileofscore` function returns values slightly exceeding 100 due to floating-point arithmetic, violating its documented range of [0, 100].",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_percentileofscore_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_percentileofscore_2025-09-25_00-00_k3x9.md",
      "call_id": "e50482a4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.percentileofscore Returns Values > 100",
      "target": "scipy.stats.percentileofscore",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `percentileofscore` function can return values slightly greater than 100 due to floating point arithmetic errors, violating the documented constraint that percentiles should be in the range [0, 100].",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_percentileofscore_2025-09-25_10-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_percentileofscore_2025-09-25_10-25_k3m9.md",
      "call_id": "11b47f9a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.poisson.ppf Returns Infinity for CDF=1.0",
      "target": "scipy.stats.poisson.ppf",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `ppf` (percent point function) method of scipy.stats' Poisson distribution returns `inf` when the CDF equals exactly 1.0 due to floating-point precision. This violates the expected property that `ppf(cdf(k))` should return a finite value close to `k`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_poisson_ppf_2025-09-25_00-01_x8j2.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_poisson_ppf_2025-09-25_00-01_x8j2.md",
      "call_id": "805e024b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "scipy.stats.quantile Rejects Integer p Values",
      "target": "scipy.stats.quantile",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`scipy.stats.quantile` raises a `ValueError` when passed integer values for the probability parameter `p`, even though this is a natural and mathematically valid usage. This violates user expectations and creates an inconsistency with similar NumPy functions like `percentile`.",
      "package": "scipy",
      "file_name": "bug_report_scipy_stats_quantile_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_scipy_stats_quantile_2025-09-25_00-00_k3m9.md",
      "call_id": "6909b75c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "tukey Window Produces NaN for Very Small Positive Alpha Values",
      "target": "scipy.signal.windows.tukey",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `tukey` window function produces NaN values when given extremely small positive alpha values due to numerical overflow when dividing by alpha. This violates the expectation that all window values should be finite.",
      "package": "scipy",
      "file_name": "bug_report_tukey_nan_small_alpha_2025-09-25_00-00_c3d4.md",
      "file_path": "sonnet-4.5/results_verify/scipy/bug_reports/bug_report_tukey_nan_small_alpha_2025-09-25_00-00_c3d4.md",
      "call_id": "775b0cf2",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Duplicate Headers",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware can produce duplicate headers in its `allow_headers` attribute when users provide headers that differ only in case. Since HTTP headers are case-insensitive (per RFC 2616), headers like `'X-Custom-Header'` and `'x-custom-header'` should be treated as the same header, but the middleware creates duplicates.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_duplicate_headers_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_duplicate_headers_2025-09-25_14-30_k3m9.md",
      "call_id": "b05a9c36",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Duplicate Headers",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware creates duplicate headers in `self.allow_headers` when users provide headers that match safelisted headers with different casing (e.g., user provides \"accept\" when \"Accept\" is in SAFELISTED_HEADERS).",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_duplicate_headers_2025-09-25_00-00_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_duplicate_headers_2025-09-25_00-00_k7m9.md",
      "call_id": "b65676f8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Validation Inconsistency",
      "target": "starlette.middleware.cors.CORSMiddleware.preflight_response",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware has an inconsistency in how it processes allowed headers: headers are lowercased but not stripped when stored, but are lowercased and stripped when validated. This causes headers with leading/trailing whitespace to be rejected even when explicitly allowed.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_header_validation_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_header_validation_2025-09-25_00-00_k3m9.md",
      "call_id": "c51c2e97",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Whitespace Handling",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware incorrectly rejects valid CORS preflight requests when header names in the `allow_headers` configuration contain leading or trailing whitespace, even though the actual request headers are properly formatted without whitespace.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_header_whitespace_2025-09-25_00-00_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_header_whitespace_2025-09-25_00-00_k9x2.md",
      "call_id": "721b0f85",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Header Whitespace Inconsistency",
      "target": "starlette.middleware.cors.CORSMiddleware.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CORSMiddleware` lowercases but doesn't strip whitespace from `allow_headers` during initialization, while the validation logic in `preflight_response()` strips whitespace before comparison. This causes asymmetric behavior where headers with trailing/leading spaces in configuration may incorrectly reject valid requests.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_whitespace_2025-09-25_00-01_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_whitespace_2025-09-25_00-01_a7f2.md",
      "call_id": "62a93acb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Method Whitespace Handling",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware incorrectly rejects valid CORS preflight requests when HTTP methods in the `allow_methods` configuration contain leading or trailing whitespace, even though the actual request methods are properly formatted without whitespace.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_method_whitespace_2025-09-25_00-02_m3p1.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_method_whitespace_2025-09-25_00-02_m3p1.md",
      "call_id": "c78412f1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware Origin Whitespace Handling",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CORSMiddleware incorrectly rejects valid CORS preflight requests when origin URLs in the `allow_origins` configuration contain leading or trailing whitespace, even though the actual request origins are properly formatted without whitespace.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_origin_whitespace_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_origin_whitespace_2025-09-25_00-01_x7k2.md",
      "call_id": "f5837186",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CORSMiddleware allow_headers Incorrect Sorting",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CORSMiddleware` class incorrectly sorts the `allow_headers` list by sorting before lowercasing, resulting in headers that are not in alphabetical order after lowercasing.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_allow_headers_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_allow_headers_2025-09-25_00-00_x7k9.md",
      "call_id": "56fe91a9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FloatConvertor Round-Trip Failure",
      "target": "starlette.convertors.FloatConvertor",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FloatConvertor's `to_string()` method cannot reconstruct small decimal values that its own regex accepts, breaking the round-trip property required for URL routing.",
      "package": "starlette",
      "file_name": "bug_report_starlette_FloatConvertor_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_FloatConvertor_2025-09-25_00-00_k3f9.md",
      "call_id": "9735187e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FloatConvertor Round-Trip Failure",
      "target": "starlette.convertors.FloatConvertor",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FloatConvertor's `to_string()` method cannot reconstruct small decimal values that its own regex accepts, breaking the round-trip property required for URL routing.",
      "package": "starlette",
      "file_name": "bug_report_starlette_FloatConvertor_2025-09-25_03-37_3mmt.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_FloatConvertor_2025-09-25_03-37_3mmt.md",
      "call_id": "b7930570",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "FloatConvertor Round-Trip Precision Loss",
      "target": "starlette.convertors.FloatConvertor",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "FloatConvertor.to_string() loses precision for small floats (< ~1e-20), causing round-trip conversion failures where convert(to_string(x)) != x.",
      "package": "starlette",
      "file_name": "bug_report_starlette_FloatConvertor_precision_2025-09-25_05-01_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_FloatConvertor_precision_2025-09-25_05-01_x7k9.md",
      "call_id": "360dff4c",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "GZipMiddleware Case-Sensitive Encoding Check",
      "target": "starlette.middleware.gzip.GZipMiddleware.__call__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`GZipMiddleware` uses case-sensitive substring matching to check for \"gzip\" in the Accept-Encoding header, violating HTTP specification that header values are case-insensitive. It also incorrectly matches on substrings rather than tokens.",
      "package": "starlette",
      "file_name": "bug_report_starlette_gzip_accept_encoding_2025-09-25_00-03_x7m2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_gzip_accept_encoding_2025-09-25_00-03_x7m2.md",
      "call_id": "5051d1e8",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Jinja2Templates.TemplateResponse crashes with context=None",
      "target": "starlette.templating.Jinja2Templates.TemplateResponse",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `TemplateResponse` method crashes with an `AttributeError` when `context=None` is passed, even though the type signature explicitly allows `context: dict[str, Any] | None = None`.",
      "package": "starlette",
      "file_name": "bug_report_starlette_jinja2templates_none_context_2025-09-25_05-36_x9k4.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_jinja2templates_none_context_2025-09-25_05-36_x9k4.md",
      "call_id": "0eb99afd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Jinja2Templates.__init__ Empty Sequence Handling",
      "target": "starlette.templating.Jinja2Templates.__init__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Jinja2Templates.__init__` method has inconsistent validation logic between its assertion and conditional checks. When an empty sequence (e.g., `[]` or `()`) is passed for the `directory` parameter alongside a valid `env` parameter, the assertion passes but the code incorrectly attempts to create an environment from the empty directory instead of using the provided `env`.",
      "package": "starlette",
      "file_name": "bug_report_starlette_Jinja2Templates_init_2025-09-25_04-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_Jinja2Templates_init_2025-09-25_04-00_k3x9.md",
      "call_id": "49e1219c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Middleware.__repr__ Leading Comma",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces malformed output with a leading comma when the middleware factory is a callable instance without a `__name__` attribute.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_2025-09-25_05-32_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_2025-09-25_05-32_k3x9.md",
      "call_id": "67ad77f9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Middleware.__repr__ Leading Comma",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces malformed output with a leading comma when the middleware factory doesn't have a `__name__` attribute (e.g., lambdas or callable objects).",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_2025-09-25_00-00_k3m9.md",
      "call_id": "c943987a",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ServerErrorMiddleware Incomplete HTML Entity",
      "target": "starlette.middleware.errors.ServerErrorMiddleware.format_line",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ServerErrorMiddleware.format_line` method generates invalid HTML by using incomplete HTML entities (`&nbsp` instead of `&nbsp;`), violating HTML5 specifications.",
      "package": "starlette",
      "file_name": "bug_report_starlette_errors_html_entity_2025-09-25_05-31_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_errors_html_entity_2025-09-25_05-31_x7k9.md",
      "call_id": "b33c7746",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "ServerErrorMiddleware Invalid HTML Entity",
      "target": "starlette.middleware.errors.ServerErrorMiddleware",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "ServerErrorMiddleware generates invalid HTML in debug mode by using `&nbsp` (without semicolon) instead of the correct HTML entity `&nbsp;` (with semicolon) when replacing spaces in code context lines.",
      "package": "starlette",
      "file_name": "bug_report_starlette_errors_nbsp_2025-09-25_23-52_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_errors_nbsp_2025-09-25_23-52_x3k9.md",
      "call_id": "6c0f1a84",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Starlette FileResponse Range Merging",
      "target": "starlette.responses.FileResponse._parse_range_header",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The range merging algorithm in `FileResponse._parse_range_header` fails to properly merge overlapping HTTP Range headers, resulting in overlapping ranges in the output.",
      "package": "starlette",
      "file_name": "bug_report_starlette_range_merge_2025-09-25_09-06_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_range_merge_2025-09-25_09-06_k7m2.md",
      "call_id": "fdda0fa2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Starlette URL.replace() IndexError on Empty Netloc",
      "target": "starlette.datastructures.URL.replace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `URL.replace()` method crashes with an `IndexError` when called on a URL with an empty netloc (e.g., `\"http:///path\"`) and attempting to replace hostname-related parameters like `port`, `username`, or `password`.",
      "package": "starlette",
      "file_name": "bug_report_starlette_url_replace_empty_hostname_2025-09-25_01-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_url_replace_empty_hostname_2025-09-25_01-00_k3m9.md",
      "call_id": "9d3d4699",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Starlette Weak ETag Comparison Fails",
      "target": "starlette.staticfiles.StaticFiles.is_not_modified",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_not_modified()` method fails to correctly match weak ETags because it only normalizes the request ETags but not the response ETag, causing valid cache hits to be missed when weak ETags are used.",
      "package": "starlette",
      "file_name": "bug_report_starlette_etag_weak_comparison_2025-09-25_01-01_p8k2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_etag_weak_comparison_2025-09-25_01-01_p8k2.md",
      "call_id": "945193a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Address Handling",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware incorrectly extracts the hostname from IPv6 addresses in the Host header. It splits on the first colon, which breaks IPv6 addresses that contain multiple colons, making it impossible to allow IPv6 hosts.",
      "package": "starlette",
      "file_name": "bug_report_starlette_trustedhost_ipv6_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_trustedhost_ipv6_2025-09-25_00-01_x7k2.md",
      "call_id": "86038a86",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Host Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware incorrectly parses IPv6 addresses in the HTTP Host header by splitting on `:`, which breaks IPv6 addresses that contain colons as part of their format.",
      "package": "starlette",
      "file_name": "bug_report_starlette_trustedhost_ipv6_2025-09-25_11-25_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_trustedhost_ipv6_2025-09-25_11-25_k9x3.md",
      "call_id": "b3c9b64f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 Host Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware incorrectly parses IPv6 addresses when a port is specified in the Host header. The middleware uses `split(\":\")` to separate the host from the port, which breaks IPv6 addresses (e.g., `[::1]:8000`) because IPv6 addresses contain multiple colons.",
      "package": "starlette",
      "file_name": "bug_report_starlette_trustedhost_ipv6_2025-09-25_23-52_j9m2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_trustedhost_ipv6_2025-09-25_23-52_j9m2.md",
      "call_id": "6b4aea4b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "TrustedHostMiddleware IPv6 URL Parsing Crash",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "TrustedHostMiddleware crashes with `ValueError: Invalid IPv6 URL` when processing certain malformed host headers during www redirect, instead of returning a 400 Bad Request response.",
      "package": "starlette",
      "file_name": "bug_report_starlette_trustedhost_ipv6_crash_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_trustedhost_ipv6_crash_2025-09-25_k3m9.md",
      "call_id": "60a53fa0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "WSGIMiddleware SERVER_PORT Wrong Type",
      "target": "starlette.middleware.wsgi.build_environ",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `build_environ` function in the WSGI middleware sets `SERVER_PORT` as an integer instead of a string, violating the WSGI specification (PEP 3333) which requires it to be a string.",
      "package": "starlette",
      "file_name": "bug_report_starlette_wsgi_server_port_type_2025-09-25_03-07_x2m8.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_wsgi_server_port_type_2025-09-25_03-07_x2m8.md",
      "call_id": "802455a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette URL.replace IndexError with empty hostname",
      "target": "starlette.datastructures.URL.replace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `URL.replace()` method crashes with an `IndexError` when called on URLs with empty hostnames (e.g., `http://@/path`). This occurs when trying to replace URL components like port, username, or password.",
      "package": "starlette",
      "file_name": "bug_report_starlette_url_replace_empty_hostname_2025-09-25_02-00_x3k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_url_replace_empty_hostname_2025-09-25_02-00_x3k9.md",
      "call_id": "b6b46156",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.datastructures.URLPath Path Concatenation",
      "target": "starlette.datastructures.URLPath.make_absolute_url",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "URLPath.make_absolute_url concatenates paths without a separator when the URLPath doesn't start with \"/\", leading to malformed URLs like `/apitest` instead of `/api/test`.",
      "package": "starlette",
      "file_name": "bug_report_starlette_URLPath_relative_path_2025-09-25_11-02_x3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_URLPath_relative_path_2025-09-25_11-02_x3m9.md",
      "call_id": "6074673b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware Middleware.__repr__ crashes with None __name__",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method crashes with a `TypeError` when the wrapped middleware class has `__name__` set to `None` instead of a string.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_none_name_2025-09-25_05-37_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_none_name_2025-09-25_05-37_k3x9.md",
      "call_id": "26a233ef",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.Middleware.__repr__ Leading Comma",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces invalid Python syntax (a leading comma) when the middleware factory callable does not have a `__name__` attribute.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_2025-09-25_04-02_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_2025-09-25_04-02_k3m9.md",
      "call_id": "40eba66e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.Middleware.__repr__ Leading Comma",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces invalid Python-like output with a leading comma when the wrapped callable has no `__name__` attribute, resulting in output like `Middleware(, arg1, arg2)` instead of the expected `Middleware(arg1, arg2)`.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_2025-09-25_03-07_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_2025-09-25_03-07_k8x2.md",
      "call_id": "9ec0f955",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.Middleware.__repr__ Leading Comma",
      "target": "starlette.middleware.Middleware.__repr__",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Middleware.__repr__` method produces invalid output with a leading comma when the middleware class's `__name__` attribute is an empty string.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_repr_2025-09-25_00-00_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_repr_2025-09-25_00-00_x7k9.md",
      "call_id": "60ef3736",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.cors CORSMiddleware Unicode Case-Folding",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The CORS middleware's header matching logic fails for certain Unicode characters that don't round-trip through upper/lower case transformations, causing valid headers to be incorrectly rejected.",
      "package": "starlette",
      "file_name": "bug_report_starlette_cors_unicode_2025-09-25_07-16_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_cors_unicode_2025-09-25_07-16_k3m9.md",
      "call_id": "6f70e3d3",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.cors Unicode Header Encoding Crash",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `CORSMiddleware` crashes with a `UnicodeEncodeError` when `allow_headers` contains non-latin-1 encodable characters. HTTP headers must be latin-1 encodable, but the middleware doesn't validate this constraint when accepting the `allow_headers` parameter.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_cors_unicode_2025-09-25_12-45_j7k3.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_cors_unicode_2025-09-25_12-45_j7k3.md",
      "call_id": "a1a2d995",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.cors.CORSMiddleware Header Whitespace Inconsistency",
      "target": "starlette.middleware.cors.CORSMiddleware",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CORSMiddleware` incorrectly rejects valid CORS preflight requests when `allow_headers` contains header names with leading/trailing whitespace. The middleware stores configured headers without stripping whitespace but strips whitespace from request headers during comparison, causing a mismatch.",
      "package": "starlette",
      "file_name": "bug_report_starlette_CORSMiddleware_header_whitespace_2025-09-25_00-00_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_CORSMiddleware_header_whitespace_2025-09-25_00-00_k3f9.md",
      "call_id": "f794dd36",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.errors Incomplete HTML Entity",
      "target": "starlette.middleware.errors.ServerErrorMiddleware.format_line",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ServerErrorMiddleware.format_line` method uses incomplete HTML entity `&nbsp` (without semicolon) instead of the proper `&nbsp;` when replacing spaces in error traceback output.",
      "package": "starlette",
      "file_name": "bug_report_starlette_errors_nbsp_entity_2025-09-25_03-07_m9x3.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_errors_nbsp_entity_2025-09-25_03-07_m9x3.md",
      "call_id": "81294391",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.errors Invalid HTML Entity",
      "target": "starlette.middleware.errors.ServerErrorMiddleware.format_line",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ServerErrorMiddleware.format_line` method generates invalid HTML by using `&nbsp` instead of `&nbsp;` (missing semicolon) when replacing spaces in error traceback lines.",
      "package": "starlette",
      "file_name": "bug_report_starlette_error_middleware_nbsp_2025-09-25_09-09_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_error_middleware_nbsp_2025-09-25_09-09_k3m9.md",
      "call_id": "2e47c79f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.errors Malformed HTML Entity",
      "target": "starlette.middleware.errors.ServerErrorMiddleware.format_line",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `ServerErrorMiddleware.format_line` method generates malformed HTML by using `&nbsp` without the trailing semicolon, which should be `&nbsp;` according to HTML standards.",
      "package": "starlette",
      "file_name": "bug_report_starlette_middleware_errors_nbsp_2025-09-25_12-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_middleware_errors_nbsp_2025-09-25_12-30_k3x9.md",
      "call_id": "c36b9df9",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.trustedhost IPv6 Address Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware.__call__",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `TrustedHostMiddleware` incorrectly parses IPv6 addresses in the Host header, causing valid IPv6 hosts to be rejected even when they are in the allowed_hosts list.",
      "package": "starlette",
      "file_name": "bug_report_starlette_trustedhost_ipv6_2025-09-25_04-03_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_trustedhost_ipv6_2025-09-25_04-03_x7k9.md",
      "call_id": "6b3ee0db",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.trustedhost.TrustedHostMiddleware IPv6 Address Parsing",
      "target": "starlette.middleware.trustedhost.TrustedHostMiddleware",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`TrustedHostMiddleware` incorrectly parses IPv6 addresses when a port is present in the `Host` header. The middleware splits on `:` to extract the hostname from `host:port`, but IPv6 addresses contain colons (e.g., `[::1]:8000`), causing the extraction to fail.",
      "package": "starlette",
      "file_name": "bug_report_starlette_TrustedHostMiddleware_ipv6_2025-09-25_00-01_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_TrustedHostMiddleware_ipv6_2025-09-25_00-01_x7k2.md",
      "call_id": "9efaf060",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.middleware.wsgi SERVER_PORT Type Violation",
      "target": "starlette.middleware.wsgi.build_environ",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The WSGI middleware's `build_environ` function sets `SERVER_PORT` to an integer, violating PEP 3333 which requires it to be a string.",
      "package": "starlette",
      "file_name": "bug_report_starlette_wsgi_server_port_2025-09-25_07-25_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_wsgi_server_port_2025-09-25_07-25_m3x7.md",
      "call_id": "70e6861b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.staticfiles ETag Parsing Corrupts ETags Ending with 'W' or '/'",
      "target": "starlette.staticfiles.StaticFiles.is_not_modified",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_not_modified` method in `StaticFiles` uses `strip(\" W/\")` to parse ETags from the `If-None-Match` header, which incorrectly strips characters from both ends of the string. This corrupts ETags that end with 'W' or '/' characters, causing false negatives in cache validation.",
      "package": "starlette",
      "file_name": "bug_report_starlette_etag_parsing_2025-09-25_09-07_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_etag_parsing_2025-09-25_09-07_k3m9.md",
      "call_id": "64f642ef",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "starlette.staticfiles Weak ETag Matching",
      "target": "starlette.staticfiles.StaticFiles.is_not_modified",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `is_not_modified` method in `StaticFiles` incorrectly handles weak ETag matching when the ETag value ends with characters 'W', '/', or space. The bug uses `strip(\" W/\")` which removes these characters from both ends of the string, when it should only remove the \"W/\" prefix.",
      "package": "starlette",
      "file_name": "bug_report_starlette_etag_weak_matching_2025-09-25_03-58_k7x2.md",
      "file_path": "sonnet-4.5/results_verify/starlette/bug_reports/bug_report_starlette_etag_weak_matching_2025-09-25_03-58_k7x2.md",
      "call_id": "906961c2",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "AlwaysGreaterThan violates total ordering invariants",
      "target": "xarray.core.dtypes.AlwaysGreaterThan",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AlwaysGreaterThan` class is decorated with `@functools.total_ordering` but violates the fundamental invariant that `a > a` must be `False` for any object `a`. This class returns `True` for `self > self`, breaking the irreflexivity property of strict ordering.",
      "package": "xarray",
      "file_name": "bug_report_xarray_AlwaysGreaterThan_2025-09-25_01-35_k7j3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_AlwaysGreaterThan_2025-09-25_01-35_k7j3.md",
      "call_id": "837f5fa6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "CombineKwargDefault Hash Instability",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault` class violates Python's hash stability requirement: an object's hash changes when the global `OPTIONS[\"use_new_combine_kwarg_defaults\"]` setting changes, breaking set/dict membership and violating the fundamental invariant that an object's hash must remain constant during its lifetime.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_10-37_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_10-37_k3x9.md",
      "call_id": "e6d1963d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex.arange Step Parameter Not Preserved",
      "target": "xarray.indexes.RangeIndex.arange",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeIndex.arange` does not preserve the `step` parameter when creating the range. The actual step used in the resulting index is different from the requested step, violating the documented API contract.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_RangeIndex_arange_step_2025-09-25_04-06_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_RangeIndex_arange_step_2025-09-25_04-06_x7k9.md",
      "call_id": "69884866",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex.linspace Division by Zero",
      "target": "xarray.indexes.RangeIndex.linspace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`RangeIndex.linspace` raises a `ZeroDivisionError` when called with `num=1` and `endpoint=True` due to division by `(num - 1)` without checking if `num == 1`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_RangeIndex_linspace_2025-09-25_10-36_3anz.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_RangeIndex_linspace_2025-09-25_10-36_3anz.md",
      "call_id": "f406f95c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex.linspace Division by Zero",
      "target": "xarray.indexes.RangeIndex.linspace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`RangeIndex.linspace` crashes with `ZeroDivisionError` when called with `num=1` and `endpoint=True`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_RangeIndex_linspace_2025-09-25_04-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_RangeIndex_linspace_2025-09-25_04-06_k3m9.md",
      "call_id": "ccb7b244",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "RangeIndex.linspace Division by Zero",
      "target": "xarray.indexes.RangeIndex.linspace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`RangeIndex.linspace` crashes with a `ZeroDivisionError` when called with `num=1` and `endpoint=True` due to division by `(num - 1)`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_RangeIndex_linspace_2025-09-25_09-10_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_RangeIndex_linspace_2025-09-25_09-10_k3x9.md",
      "call_id": "136f5bfd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "Unknown",
      "target": "Unknown",
      "severity": "N/A",
      "bug_type": "Unknown",
      "date": "Unknown",
      "summary": "",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_rescale_imshow_rgb_division_by_zero.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_rescale_imshow_rgb_division_by_zero.md",
      "call_id": "6328b38f",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.template.backends.jinja2.get_exception_info IndexError",
      "target": "django.template.backends.jinja2.get_exception_info",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_exception_info` function crashes with an `IndexError` when the exception's `lineno` attribute is greater than the actual number of lines in the source code.",
      "package": "xarray",
      "file_name": "bug_report_django_jinja2_get_exception_info_2025-09-25_02-33_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_django_jinja2_get_exception_info_2025-09-25_02-33_x7k9.md",
      "call_id": "e72cfff9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "django.utils.http.quote_etag Non-Idempotence",
      "target": "django.utils.http.quote_etag",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `quote_etag` function violates its documented idempotence property when the input contains quote characters. The docstring states \"If the provided string is already a quoted ETag, return it,\" implying that `quote_etag(quote_etag(x)) == quote_etag(x)`. However, for inputs containing quotes, repeated calls produce different results.",
      "package": "xarray",
      "file_name": "bug_report_django_utils_http_quote_etag_2025-09-25_08-07_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_django_utils_http_quote_etag_2025-09-25_08-07_k3m9.md",
      "call_id": "5e0f9aa8",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray RangeCoordinateTransform Reverse Returns NaN",
      "target": "xarray.indexes.range_index.RangeCoordinateTransform.reverse",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeCoordinateTransform.reverse` returns NaN when `start == stop`, violating the forward/reverse round-trip property.",
      "package": "xarray",
      "file_name": "bug_report_xarray_rangecoordinatetransform_reverse_nan_2025-09-25_09-07_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_rangecoordinatetransform_reverse_nan_2025-09-25_09-07_x7k9.md",
      "call_id": "1d409db2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray RangeIndex linspace endpoint precision",
      "target": "xarray.indexes.RangeIndex.linspace",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeIndex.linspace()` with `endpoint=True` does not guarantee that the last generated value exactly equals the specified `stop` parameter due to floating-point error accumulation in the value generation formula.",
      "package": "xarray",
      "file_name": "bug_report_xarray_rangeindex_linspace_endpoint_2025-09-25_08-05_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_rangeindex_linspace_endpoint_2025-09-25_08-05_k3m9.md",
      "call_id": "2009e490",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray RangeIndex.arange Negative Size",
      "target": "xarray.indexes.RangeIndex.arange",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`RangeIndex.arange` creates an index with negative size when `start`, `stop`, and `step` have incompatible signs.",
      "package": "xarray",
      "file_name": "bug_report_xarray_rangeindex_arange_negative_size_2025-09-25_09-07_m4k8.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_rangeindex_arange_negative_size_2025-09-25_09-07_m4k8.md",
      "call_id": "084e8d47",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray RangeIndex.arange Negative Size",
      "target": "xarray.indexes.range_index.RangeIndex.arange",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `RangeIndex.arange` method creates an index with a negative size when the step direction doesn't match the start-to-stop direction. This violates a fundamental invariant that dimension sizes must be non-negative, and can lead to unexpected behavior or crashes in downstream code.",
      "package": "xarray",
      "file_name": "bug_report_xarray_RangeIndex_arange_2025-09-25_10-15_m7x2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_RangeIndex_arange_2025-09-25_10-15_m7x2.md",
      "call_id": "792be1bd",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray RangeIndex.linspace Division by Zero",
      "target": "xarray.indexes.range_index.RangeIndex.linspace",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `RangeIndex.linspace` method crashes with a `ZeroDivisionError` when called with `num=1` and `endpoint=True`. This occurs because the method attempts to compute `(stop - start) / (num - 1)` without checking if `num == 1`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_RangeIndex_linspace_2025-09-25_10-10_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_RangeIndex_linspace_2025-09-25_10-10_k3x9.md",
      "call_id": "540f1ae3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray collapsible_section Negative n_items Logic Error",
      "target": "xarray.core.formatting_html.collapsible_section",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `collapsible_section` function incorrectly treats negative `n_items` values as truthy, causing sections to appear enabled with negative item counts displayed instead of being disabled.",
      "package": "xarray",
      "file_name": "bug_report_xarray_collapsible_section_negative_items_2025-09-25_05-34_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_collapsible_section_negative_items_2025-09-25_05-34_k7m2.md",
      "call_id": "ffadcda9",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray._load_static_files Cache Mutation",
      "target": "xarray.core.formatting_html._load_static_files",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_load_static_files()` function uses `@lru_cache` but returns a mutable list, allowing callers to corrupt the cached data. This violates the idempotence property expected from cached functions.",
      "package": "xarray",
      "file_name": "bug_report_xarray_load_static_files_cache_mutation_2025-09-25_10-10_m3x7.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_load_static_files_cache_mutation_2025-09-25_10-10_m3x7.md",
      "call_id": "1a6b0ea7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends CombinedLock.locked() Always Returns True",
      "target": "xarray.backends.locks.CombinedLock.locked()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method incorrectly returns `True` whenever the lock contains at least one constituent lock, regardless of whether any locks are actually acquired. This happens because line 236 references the `locked` method instead of calling it.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_combinedlock_locked_2025-09-25_05-39_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_combinedlock_locked_2025-09-25_05-39_x8k2.md",
      "call_id": "237fc731",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends._HashedSequence Stale Hash After Mutation",
      "target": "xarray.backends.file_manager._HashedSequence",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_HashedSequence` class caches its hash value at initialization but inherits from `list`, making it mutable. If the list is mutated after creation, the cached hash becomes stale and no longer reflects the actual content, violating Python's hash contract and potentially causing cache corruption.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_HashedSequence_mutation_2025-09-25_08-06_86g4.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_HashedSequence_mutation_2025-09-25_08-06_86g4.md",
      "call_id": "a03937b2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks build_grid_chunks Sum Invariant Violation",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function violates its core invariant: the returned chunks must sum to exactly the input `size` parameter. When `size < chunk_size`, the function returns chunks that sum to more than `size`, breaking downstream code that relies on this invariant.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_03-10_a7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_03-10_a7k9.md",
      "call_id": "f7cda912",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Incorrect Result for size=0",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function returns chunks that sum to `chunk_size` instead of `0` when `size=0`, violating the fundamental invariant that the sum of chunks should equal the size parameter.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_07-10_m3k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_07-10_m3k9.md",
      "call_id": "173cfb93",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Incorrect Sum",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function returns chunks that sum to more than the specified `size` when `chunk_size > size`. This violates the fundamental invariant that the sum of chunks should equal the total size.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_11-30_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_11-30_k7m2.md",
      "call_id": "61d358ef",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Invalid Chunk Sum",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function returns chunks whose sum exceeds the input `size` when `size < chunk_size`, violating the fundamental invariant that chunks must partition the data exactly.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_01-36_dnb9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_01-36_dnb9.md",
      "call_id": "228f8f95",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Invalid Sum",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function produces chunks that do not sum to the specified `size` parameter when `chunk_size > size`, leading to incorrect chunk calculations that could corrupt data in zarr backends.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_10-37_saxi.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_10-37_saxi.md",
      "call_id": "3cc5dd05",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Returns Incorrect Chunk Sum",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `build_grid_chunks` function returns chunks that sum to more than the specified `size` when `chunk_size > size`, violating its fundamental invariant that the returned chunks must sum to exactly `size`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_build_grid_chunks_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_build_grid_chunks_2025-09-25_15-30_k3m9.md",
      "call_id": "0ccdca8d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.chunks.build_grid_chunks Sum Invariant Violation",
      "target": "xarray.backends.chunks.build_grid_chunks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`build_grid_chunks` violates the fundamental invariant that the sum of returned chunks must equal the input `size` parameter when `size < chunk_size`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_chunks_build_grid_chunks_2025-09-25_00-00_a1b2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_chunks_build_grid_chunks_2025-09-25_00-00_a1b2.md",
      "call_id": "753e5a0a",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.locks.CombinedLock.locked Always Returns True",
      "target": "xarray.backends.locks.CombinedLock.locked",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method always returns `True` when the lock has at least one constituent lock, even when none of the locks are actually locked. This is because it checks the method reference `lock.locked` instead of calling the method `lock.locked()`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_combinedlock_locked_2025-09-25_09-10_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_combinedlock_locked_2025-09-25_09-10_x7k2.md",
      "call_id": "f543a02d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.locks.CombinedLock.locked() Always Returns True",
      "target": "xarray.backends.locks.CombinedLock.locked",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method always returns `True` regardless of whether any constituent locks are actually locked, due to accessing the method object instead of calling it.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_combinedlock_locked_2025-09-25_10-37_q8s4.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_combinedlock_locked_2025-09-25_10-37_q8s4.md",
      "call_id": "d235695f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.locks.CombinedLock.locked() Method Call Error",
      "target": "xarray.backends.locks.CombinedLock.locked()",
      "severity": "High",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method attempts to access `lock.locked` as a property instead of calling the `locked()` method, causing an AttributeError when used with `threading.Lock` objects.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_CombinedLock_locked_2025-09-25_08-41_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_CombinedLock_locked_2025-09-25_08-41_x9k2.md",
      "call_id": "77628c46",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.locks.CombinedLock.locked() Method Call Error",
      "target": "xarray.backends.locks.CombinedLock.locked()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method incorrectly accesses `lock.locked` as an attribute instead of calling `lock.locked()` as a method, causing it to always return a truthy value when locks are present, regardless of their actual locked state.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_combinedlock_locked_2025-09-25_07-10_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_combinedlock_locked_2025-09-25_07-10_k7m2.md",
      "call_id": "7bb4696d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.locks.CombinedLock.locked() Missing Method Call",
      "target": "xarray.backends.locks.CombinedLock.locked",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombinedLock.locked()` method fails to call the `locked()` method on constituent locks, instead checking the truthiness of the method object itself. This causes the method to always return `True` when locks exist, regardless of whether they are actually locked.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_CombinedLock_locked_2025-09-25_05-09_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_CombinedLock_locked_2025-09-25_05-09_k3m9.md",
      "call_id": "af6813c5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.lru_cache.LRUCache.__delitem__ Not Thread-Safe",
      "target": "xarray.backends.lru_cache.LRUCache.__delitem__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `LRUCache.__delitem__` method modifies the internal `_cache` dictionary without acquiring the thread lock, violating the class's documented thread-safety guarantee. This can cause race conditions when deletion occurs concurrently with other cache operations.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_LRUCache_delitem_2025-09-25_05-09_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_LRUCache_delitem_2025-09-25_05-09_x7k2.md",
      "call_id": "d89278cf",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.lru_cache.LRUCache.__delitem__ Not Thread-Safe",
      "target": "xarray.backends.lru_cache.LRUCache.__delitem__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `LRUCache.__delitem__` method does not acquire the thread lock before modifying `self._cache`, violating the class's thread-safety guarantee stated in its docstring.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_lrucache_delitem_2025-09-25_07-10_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_lrucache_delitem_2025-09-25_07-10_x9k2.md",
      "call_id": "c2698e45",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.lru_cache.LRUCache.__delitem__() Missing Thread Lock",
      "target": "xarray.backends.lru_cache.LRUCache.__delitem__()",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `LRUCache.__delitem__()` method does not acquire the thread lock before modifying the internal cache, violating the thread-safety guarantee stated in the class documentation.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_LRUCache_delitem_2025-09-25_08-41_m3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_LRUCache_delitem_2025-09-25_08-41_m3x9.md",
      "call_id": "3a0777cb",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.netcdf3.is_valid_nc3_name Empty String Crash",
      "target": "xarray.backends.netcdf3.is_valid_nc3_name",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_valid_nc3_name` function crashes with an `IndexError` when given an empty string, instead of returning `False` as expected for an invalid name.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_is_valid_nc3_name_2025-09-25_11-08_k7x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_is_valid_nc3_name_2025-09-25_11-08_k7x9.md",
      "call_id": "e9674e71",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.netcdf3.is_valid_nc3_name Empty String Crash",
      "target": "xarray.backends.netcdf3.is_valid_nc3_name",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "`is_valid_nc3_name()` crashes with `IndexError` when passed an empty string, instead of returning `False`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_is_valid_nc3_name_2025-09-25_01-39_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_is_valid_nc3_name_2025-09-25_01-39_k3m9.md",
      "call_id": "fc5e27b3",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.backends.plugins.sort_backends Mutates Input Dictionary",
      "target": "xarray.backends.plugins.sort_backends",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sort_backends` function mutates its input dictionary by removing entries that match names in `NETCDF_BACKENDS_ORDER`, violating the expected immutability of function arguments.",
      "package": "xarray",
      "file_name": "bug_report_xarray_backends_sort_backends_2025-09-25_04-39_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_backends_sort_backends_2025-09-25_04-39_k3m9.md",
      "call_id": "44f617a4",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding CFMaskCoder Fill Value Round-Trip Violation",
      "target": "xarray.coding.variables.CFMaskCoder",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CFMaskCoder` violates the fundamental round-trip property `decode(encode(var)) == var` when data contains values equal to the fill value. Valid data values matching the fill value are incorrectly treated as missing data and replaced with NaN during decoding.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_CFMaskCoder_fill_value_2025-09-25_03-42_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_CFMaskCoder_fill_value_2025-09-25_03-42_k3m9.md",
      "call_id": "911ab88a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.strings - Null Byte Corruption in encode_string_array/decode_bytes_array",
      "target": "xarray.coding.strings.encode_string_array",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The round-trip property `decode_bytes_array(encode_string_array(strings)) == strings` is violated for strings containing null bytes (`'\\x00'`). Null bytes are silently truncated, resulting in data corruption.",
      "package": "xarray",
      "file_name": "bug_report_xarray_strings_null_byte_2025-09-25_09-30_x7k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_strings_null_byte_2025-09-25_09-30_x7k2.md",
      "call_id": "9331fb44",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.strings Null Character Data Loss",
      "target": "xarray.coding.strings.encode_string_array",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "String encoding/decoding in xarray loses null characters (`\\x00`), violating the documented round-trip property that `decode(encode(x)) == x`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_strings_null_2025-09-25_14-30_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_strings_null_2025-09-25_14-30_x7k9.md",
      "call_id": "8b2cccf2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.strings Trailing Null Byte Loss",
      "target": "xarray.coding.strings.encode_string_array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `encode_string_array` and `decode_bytes_array` functions violate their round-trip property when strings contain trailing null bytes (`\\x00`). Trailing null bytes are silently stripped during encoding, causing data corruption.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_strings_trailing_nulls_2025-09-25_20-30_k3f9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_strings_trailing_nulls_2025-09-25_20-30_k3f9.md",
      "call_id": "266a21a5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.strings.encode_string_array Null Character Loss",
      "target": "xarray.coding.strings.encode_string_array",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `encode_string_array` function loses null characters (`\\x00`) when encoding strings, breaking the round-trip property with `decode_bytes_array`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_encode_string_null_2025-09-25_06-40_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_encode_string_null_2025-09-25_06-40_k3m9.md",
      "call_id": "c7de575c",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.times.CFDatetimeCoder Precision Loss on Round-Trip",
      "target": "xarray.coding.times.CFDatetimeCoder",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CFDatetimeCoder violates the documented round-trip property `coder.decode(coder.encode(variable)) == variable` for high-precision datetime values, causing silent data corruption with nanosecond-level precision loss.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_CFDatetimeCoder_precision_loss_2025-09-25_05-09_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_CFDatetimeCoder_precision_loss_2025-09-25_05-09_k7m2.md",
      "call_id": "9a8eb84e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.times.CFTimedeltaCoder Precision Loss on Round-Trip",
      "target": "xarray.coding.times.CFTimedeltaCoder",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "CFTimedeltaCoder violates the documented round-trip property `coder.decode(coder.encode(variable)) == variable` for high-precision timedelta values, causing silent data corruption with nanosecond-level precision loss.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_CFTimedeltaCoder_precision_loss_2025-09-25_05-09_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_CFTimedeltaCoder_precision_loss_2025-09-25_05-09_x9k2.md",
      "call_id": "98f857d8",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.coding.variables.CFMaskCoder Round-Trip Data Corruption",
      "target": "xarray.coding.variables.CFMaskCoder",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`CFMaskCoder` violates the documented round-trip property when data contains values equal to the `_FillValue`. Valid non-NaN data is silently corrupted to NaN during encode/decode, causing data loss.",
      "package": "xarray",
      "file_name": "bug_report_xarray_coding_CFMaskCoder_2025-09-25_02-38_jh4m.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_coding_CFMaskCoder_2025-09-25_02-38_jh4m.md",
      "call_id": "f039fe5c",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.array_api_compat.get_array_namespace Unhashable Namespace Crash",
      "target": "xarray.compat.array_api_compat.get_array_namespace",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `get_array_namespace` function crashes with `TypeError: unhashable type` when arrays return namespace objects that are not hashable via their `__array_namespace__()` method. This violates the Array API standard which does not require namespace objects to be hashable.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_get_array_namespace_2025-09-25_03-04_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_get_array_namespace_2025-09-25_03-04_k3m9.md",
      "call_id": "2a1edf3f",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.array_api_compat.result_type Crashes on String/Bytes Scalars",
      "target": "xarray.compat.array_api_compat.result_type",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `result_type` function crashes with `TypeError` when passed string or bytes scalars, despite the code explicitly supporting these types as \"weak scalar types\".",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_result_type_2025-09-25_05-04_k9x2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_result_type_2025-09-25_05-04_k9x2.md",
      "call_id": "c66b2672",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.array_api_compat.result_type crashes with string/bytes scalars",
      "target": "xarray.compat.array_api_compat.result_type",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `result_type()` function crashes when given string or bytes scalar values because it incorrectly delegates to `np.result_type()`, which interprets strings/bytes as dtype format strings rather than weak scalar values.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_result_type_2025-09-25_00-00_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_result_type_2025-09-25_00-00_a7f2.md",
      "call_id": "6e5a9704",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.dask_array_compat.reshape_blockwise (1,1) to (1,) Edge Case",
      "target": "xarray.compat.dask_array_compat.reshape_blockwise",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `reshape_blockwise` function fails to correctly reshape a (1, 1) dask array to (1,), returning (1, 1) instead. This affects the `least_squares` function in `xarray.compat.dask_array_ops` when residuals have shape (1, 1).",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_reshape_blockwise_2025-09-25_06-40_a7k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_reshape_blockwise_2025-09-25_06-40_a7k2.md",
      "call_id": "38a30b00",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.npcompat.isdtype List Handling",
      "target": "xarray.compat.npcompat.isdtype",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The fallback implementation of `isdtype` (used when numpy < 2.0) crashes with a confusing `TypeError: unhashable type: 'list'` when passed a list of kinds instead of a tuple.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_isdtype_list_2025-09-25_01-09_zdgv.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_isdtype_list_2025-09-25_01-09_zdgv.md",
      "call_id": "edbd394e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.npcompat.isdtype Version-Dependent Behavior",
      "target": "xarray.compat.npcompat.isdtype",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `isdtype` function in `xarray.compat.npcompat` has inconsistent behavior across NumPy versions: it accepts `np.generic` (scalar) values on NumPy < 2.0 but rejects them on NumPy >= 2.0, violating the compatibility layer's purpose.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_npcompat_isdtype_2025-09-25_09-08_k7m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_npcompat_isdtype_2025-09-25_09-08_k7m2.md",
      "call_id": "1876852e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.pdcompat Timestamp Functions Crash on Historical Dates",
      "target": "xarray.compat.pdcompat.timestamp_as_unit",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "Both `timestamp_as_unit` and `default_precision_timestamp` crash with `OutOfBoundsDatetime` when given valid timestamps outside the nanosecond-representable range (years before 1678 or after 2262). The functions don't validate inputs or handle this limitation gracefully.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_pdcompat_timestamp_functions_2025-09-25_10-37_9kak.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_pdcompat_timestamp_functions_2025-09-25_10-37_9kak.md",
      "call_id": "9d5c5f64",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.compat.pdcompat default_precision_timestamp Overflow",
      "target": "xarray.compat.pdcompat.default_precision_timestamp",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `default_precision_timestamp` function crashes when given a datetime beyond the nanosecond precision range (after 2262-04-11), even though `pd.Timestamp` can handle such dates using higher precision units like microseconds or seconds.",
      "package": "xarray",
      "file_name": "bug_report_xarray_compat_default_precision_timestamp_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_compat_default_precision_timestamp_2025-09-25_00-00_k3x9.md",
      "call_id": "b4215d9d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.computation.corr - Correlation can exceed [-1, 1] bounds",
      "target": "xarray.computation.computation.corr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `corr` function can return correlation values slightly outside the mathematical bounds of [-1, 1] due to floating point precision errors. This violates the fundamental mathematical property that Pearson correlation coefficients must lie in the interval [-1, 1].",
      "package": "xarray",
      "file_name": "bug_report_xarray_corr_bounds_2025-09-25_15-30_k8x3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_corr_bounds_2025-09-25_15-30_k8x3.md",
      "call_id": "f4980991",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.computation.corr Correlation Coefficient Exceeds Valid Range",
      "target": "xarray.computation.computation.corr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `xarray.corr()` function can return correlation coefficients that exceed the mathematically valid range of [-1, 1] due to floating-point arithmetic errors. Specifically, values like 1.00000000000000022 (greater than 1.0) can be returned, violating the fundamental mathematical property that correlation coefficients must be bounded.",
      "package": "xarray",
      "file_name": "bug_report_xarray_corr_bounds_2025-09-25_00-00_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_corr_bounds_2025-09-25_00-00_k3j9.md",
      "call_id": "d559a0d6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.computation.cov Incorrect Results with High ddof",
      "target": "xarray.computation.computation.cov",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cov` function returns incorrect values when `ddof >= valid_count`, producing `inf` or negative values instead of `nan`. This occurs due to unguarded division by `(valid_count - ddof)` in the `_cov_corr` helper function.",
      "package": "xarray",
      "file_name": "bug_report_xarray_cov_ddof_2025-09-25_17-00_x4k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_cov_ddof_2025-09-25_17-00_x4k9.md",
      "call_id": "96a8ba20",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.computation.cov Incorrect Results with High ddof",
      "target": "xarray.computation.computation.cov",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `cov` function returns incorrect values when `ddof >= valid_count`, producing `inf` or negative values instead of `nan`. This occurs due to an unguarded division by `(valid_count - ddof)` at line 298 of computation.py.",
      "package": "xarray",
      "file_name": "bug_report_xarray_computation_cov_ddof_2025-09-25_17-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_computation_cov_ddof_2025-09-25_17-45_k3m9.md",
      "call_id": "bd6e046b",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.dtypes AlwaysGreaterThan/AlwaysLessThan Total Ordering Violation",
      "target": "xarray.core.dtypes.AlwaysGreaterThan",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AlwaysGreaterThan` and `AlwaysLessThan` classes violate the antisymmetry property of total ordering despite being decorated with `@functools.total_ordering`. When two instances are equal according to `__eq__`, they incorrectly report being greater than (or less than) each other.",
      "package": "xarray",
      "file_name": "bug_report_xarray_AlwaysGreaterThan_total_ordering_2025-09-25_06-09_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_AlwaysGreaterThan_total_ordering_2025-09-25_06-09_k3m9.md",
      "call_id": "efa5f39b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.dtypes.AlwaysGreaterThan Ordering Violation",
      "target": "xarray.core.dtypes.AlwaysGreaterThan",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AlwaysGreaterThan` and `AlwaysLessThan` sentinel classes violate the mathematical irreflexivity property of strict ordering. Specifically, `AlwaysGreaterThan() > AlwaysGreaterThan()` returns `True` when it should return `False`, and similarly for `AlwaysLessThan`. This breaks fundamental ordering invariants and can cause inconsistent sorting behavior.",
      "package": "xarray",
      "file_name": "bug_report_xarray_dtypes_AlwaysGreaterThan_ordering_2025-09-25_11-09_3fuo.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_dtypes_AlwaysGreaterThan_ordering_2025-09-25_11-09_3fuo.md",
      "call_id": "61973c53",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.dtypes.AlwaysGreaterThan Violates Ordering Antisymmetry",
      "target": "xarray.core.dtypes.AlwaysGreaterThan",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `AlwaysGreaterThan` class violates the antisymmetry property of ordering relations. Specifically, `a > a` returns `True` while `a == a` also returns `True`, which is logically inconsistent. For any ordering relation, if `a > a` then `a` should not equal `a`, and conversely, if `a == a` then `a` should not be strictly greater than itself.",
      "package": "xarray",
      "file_name": "bug_report_xarray_core_dtypes_AlwaysGreaterThan_2025-09-25_03-08_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_core_dtypes_AlwaysGreaterThan_2025-09-25_03-08_k3x9.md",
      "call_id": "f7e6ed0f",
      "category": "INVALID",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.duck_array_ops cumprod/cumsum axis=None",
      "target": "xarray.core.duck_array_ops.cumprod",
      "severity": "High",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "When `axis=None`, xarray's `cumprod()` and `cumsum()` return incorrect shape and values compared to numpy. Instead of flattening the array and computing cumulative operations on the flattened 1D result (like numpy does), xarray applies the operation sequentially along each axis, producing wrong results.",
      "package": "xarray",
      "file_name": "bug_report_xarray_cumprod_cumsum_axis_none_2025-09-25_00-29_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_cumprod_cumsum_axis_none_2025-09-25_00-29_k3x9.md",
      "call_id": "257696f6",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.duck_array_ops.sum_where Inverted Logic",
      "target": "xarray.core.duck_array_ops.sum_where",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `sum_where` function in `xarray.core.duck_array_ops` has inverted conditional logic - it sums values where the condition is **False** instead of **True**, contradicting both its name and the behavior of `numpy.sum`'s `where` parameter.",
      "package": "xarray",
      "file_name": "bug_report_xarray_core_sum_where_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_core_sum_where_2025-09-25_14-30_k3x9.md",
      "call_id": "a836b7d4",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting maybe_truncate and pretty_print violate length constraints",
      "target": "xarray.core.formatting.maybe_truncate",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`maybe_truncate()` can return strings longer than `maxlen` when `maxlen < 3`, and `pretty_print()` can return strings with length different from `numchars`, violating their documented behavior.",
      "package": "xarray",
      "file_name": "bug_report_xarray_formatting_maxlen_violated_2025-09-25_06-06_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_formatting_maxlen_violated_2025-09-25_06-06_k3x9.md",
      "call_id": "81595a3f",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting.pretty_print Length Contract Violation",
      "target": "xarray.core.formatting.pretty_print",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `pretty_print` function violates its documented contract to return a string of exactly `numchars` length when the input string needs truncation for small `numchars` values.",
      "package": "xarray",
      "file_name": "bug_report_xarray_formatting_pretty_print_2025-09-25_01-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_formatting_pretty_print_2025-09-25_01-45_k3m9.md",
      "call_id": "2dc74365",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._icon Missing HTML Escaping",
      "target": "xarray.core.formatting_html._icon",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_icon` function fails to HTML-escape its `icon_name` parameter before inserting it into SVG HTML, violating the expected contract for HTML generation functions.",
      "package": "xarray",
      "file_name": "bug_report_xarray_icon_function_2025-09-25_01-25_a7b3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_icon_function_2025-09-25_01-25_a7b3.md",
      "call_id": "6f0361ba",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._icon() Missing HTML Escaping",
      "target": "xarray.core.formatting_html._icon()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_icon()` function does not escape HTML special characters in the `icon_name` parameter, making it inconsistent with other similar functions in the same module and violating the principle of defense in depth.",
      "package": "xarray",
      "file_name": "bug_report_xarray_formatting_html_icon_escaping_2025-09-25_01-35_a7x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_formatting_html_icon_escaping_2025-09-25_01-35_a7x9.md",
      "call_id": "719db2f0",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._load_static_files Cache Mutation",
      "target": "xarray.core.formatting_html._load_static_files",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_load_static_files()` function uses `@lru_cache` and returns a mutable list, allowing callers to mutate the cached value and affect all subsequent callers.",
      "package": "xarray",
      "file_name": "bug_report_xarray_static_load_static_files_2025-09-25_09-05_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_static_load_static_files_2025-09-25_09-05_k3x9.md",
      "call_id": "5c3fc126",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._load_static_files Cache Mutation",
      "target": "xarray.core.formatting_html._load_static_files",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_load_static_files()` function uses `@lru_cache(None)` but returns a mutable list. Callers can corrupt the cache by modifying the returned list, affecting all subsequent calls.",
      "package": "xarray",
      "file_name": "bug_report_xarray_load_static_files_cache_mutation_2025-09-25_09-10_m7x2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_load_static_files_cache_mutation_2025-09-25_09-10_m7x2.md",
      "call_id": "ed586655",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._load_static_files() Cache Mutation Vulnerability",
      "target": "xarray.core.formatting_html._load_static_files()",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_load_static_files()` function uses `@lru_cache(None)` but returns a mutable list, allowing callers to modify the shared cached object and affect all future calls.",
      "package": "xarray",
      "file_name": "bug_report_xarray_load_static_files_cache_mutation_2025-09-25_10-10_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_load_static_files_cache_mutation_2025-09-25_10-10_x7k9.md",
      "call_id": "a46d1ae5",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html._wrap_datatree_repr Default Parameter Documentation",
      "target": "xarray.core.formatting_html._wrap_datatree_repr",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_wrap_datatree_repr` function's docstring incorrectly states that the default value for the `end` parameter is `True`, when the actual default value in the function signature is `False`. This creates a discrepancy between documented and actual behavior.",
      "package": "xarray",
      "file_name": "bug_report_xarray_formatting_html_wrap_default_2025-09-25_05-05_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_formatting_html_wrap_default_2025-09-25_05-05_k3m9.md",
      "call_id": "646c2d48",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html.collapsible_section HTML Injection",
      "target": "xarray.core.formatting_html.collapsible_section",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `collapsible_section` function in `xarray.core.formatting_html` does not escape the `name` parameter, allowing HTML injection when user-controlled input is passed. This is inconsistent with other functions in the same module that properly escape user input.",
      "package": "xarray",
      "file_name": "bug_report_xarray_collapsible_section_html_injection_2025-09-25_09-10_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_collapsible_section_html_injection_2025-09-25_09-10_k3x9.md",
      "call_id": "18fc358d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html.collapsible_section Incorrect Handling of Negative n_items",
      "target": "xarray.core.formatting_html.collapsible_section",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `collapsible_section` function treats negative `n_items` values as truthy, resulting in sections being enabled and expanded when they should be disabled. While this doesn't occur in the current codebase (since `n_items` is derived from `len()`), the function doesn't validate its input and behaves incorrectly with negative values.",
      "package": "xarray",
      "file_name": "bug_report_xarray_collapsible_section_2025-09-25_16-30_k7n9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_collapsible_section_2025-09-25_16-30_k7n9.md",
      "call_id": "dd95365e",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html.collapsible_section Incorrect Tooltip Logic",
      "target": "xarray.core.formatting_html.collapsible_section",
      "severity": "Low",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `collapsible_section` function has inverted logic for the tooltip: it shows \"Expand/collapse section\" tooltip on disabled checkboxes (where interaction is impossible) but omits it on enabled checkboxes (where it would be helpful).",
      "package": "xarray",
      "file_name": "bug_report_xarray_collapsible_section_tooltip_2025-09-25_02-03_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_collapsible_section_tooltip_2025-09-25_02-03_k3m9.md",
      "call_id": "17d87e45",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.formatting_html.collapsible_section() Missing HTML Escaping",
      "target": "xarray.core.formatting_html.collapsible_section()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `collapsible_section()` function does not escape HTML special characters in the `name` parameter, making it inconsistent with other similar functions in the same module and violating the principle of defense in depth.",
      "package": "xarray",
      "file_name": "bug_report_xarray_formatting_html_collapsible_section_escaping_2025-09-25_01-35_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_formatting_html_collapsible_section_escaping_2025-09-25_01-35_k3m9.md",
      "call_id": "efe51a99",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.groupby._codes_to_group_indices IndexError on Invalid Code Values",
      "target": "xarray.core.groupby._codes_to_group_indices",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_codes_to_group_indices` function crashes with an `IndexError` when code values are >= N (the number of groups), instead of either validating inputs or providing a descriptive error message.",
      "package": "xarray",
      "file_name": "bug_report_xarray_codes_to_group_indices_2025-09-25_15-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_codes_to_group_indices_2025-09-25_15-30_k3m9.md",
      "call_id": "41e6253b",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.indexes.PandasMultiIndex stack/unstack roundtrip failure",
      "target": "xarray.core.indexes.PandasMultiIndex.stack()",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "`PandasMultiIndex.stack()` accepts input variables with duplicate values and successfully creates a MultiIndex with duplicate entries. However, `PandasMultiIndex.unstack()` raises a `ValueError` when attempting to unstack such a MultiIndex, violating the documented stack/unstack roundtrip property.",
      "package": "xarray",
      "file_name": "bug_report_xarray_PandasMultiIndex_stack_unstack_2025-09-25_14-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_PandasMultiIndex_stack_unstack_2025-09-25_14-30_k3x9.md",
      "call_id": "eaed6255",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.nputils.inverse_permutation Accepts Sentinel Values as Input",
      "target": "xarray.core.nputils.inverse_permutation",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `inverse_permutation` function uses -1 as a sentinel value to indicate positions not in the permutation, but does not validate that input indices are non-negative. When the output (containing -1) is used as input, numpy's negative indexing treats -1 as a valid index, producing incorrect results and breaking the expected mathematical property that applying the inverse operation twice should return to the original.",
      "package": "xarray",
      "file_name": "bug_report_xarray_inverse_permutation_2025-09-25_17-30_k8m3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_inverse_permutation_2025-09-25_17-30_k8m3.md",
      "call_id": "b98647f7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.utils.OrderedSet.discard() Raises KeyError",
      "target": "xarray.core.utils.OrderedSet.discard()",
      "severity": "Medium",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `OrderedSet.discard()` method raises `KeyError` when attempting to discard a non-existent element, violating the Python `MutableSet` API contract which requires `discard()` to silently do nothing when the element is not present.",
      "package": "xarray",
      "file_name": "bug_report_xarray_orderedset_discard_2025-09-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_orderedset_discard_2025-09-25_k3m9.md",
      "call_id": "0043f876",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.utils.is_uniform_spaced Crashes on Single-Element Arrays",
      "target": "xarray.core.utils.is_uniform_spaced",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_uniform_spaced` function crashes with a `ValueError` when given a single-element array or an empty array, due to calling `.min()` and `.max()` on an empty differences array.",
      "package": "xarray",
      "file_name": "bug_report_xarray_is_uniform_spaced_crash_2025-09-25_17-35_x7k9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_is_uniform_spaced_crash_2025-09-25_17-35_x7k9.md",
      "call_id": "90df41eb",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.core.utils.is_uniform_spaced ValueError on Small Arrays",
      "target": "xarray.core.utils.is_uniform_spaced",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `is_uniform_spaced` function crashes with ValueError when passed arrays with fewer than 2 elements, despite not documenting this restriction and the question being mathematically meaningful (vacuously true).",
      "package": "xarray",
      "file_name": "bug_report_xarray_is_uniform_spaced_2025-09-25_06-07_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_is_uniform_spaced_2025-09-25_06-07_k3x9.md",
      "call_id": "b943788c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.corr Correlation Bounds Violation",
      "target": "xarray.computation.corr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `xarray.corr()` function can return correlation values slightly outside the mathematically required bounds of [-1, 1] due to floating-point precision issues in the calculation. The Pearson correlation coefficient is mathematically defined to always be in [-1, 1], but xarray's implementation does not enforce this invariant.",
      "package": "xarray",
      "file_name": "bug_report_xarray_corr_bounds_2025-09-25_18-30_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_corr_bounds_2025-09-25_18-30_k7m3.md",
      "call_id": "710e9178",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.corr Exceeds Mathematical Bounds",
      "target": "xarray.corr",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `xarray.corr()` function can return correlation values that exceed the mathematical bounds of [-1, 1] due to floating-point arithmetic errors. This violates the fundamental mathematical property that Pearson correlation coefficients must lie within [-1, 1].",
      "package": "xarray",
      "file_name": "bug_report_xarray_corr_bounds_2025-09-25_06-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_corr_bounds_2025-09-25_06-06_k3m9.md",
      "call_id": "63f487b3",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.corr Returns Values Outside [-1, 1] Due to Floating-Point Precision",
      "target": "xarray.computation.computation.corr",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `xarray.corr()` function can return correlation values slightly outside the mathematically valid range of [-1, 1] due to floating-point precision errors. This violates the fundamental mathematical property that correlation coefficients must lie within [-1, 1].",
      "package": "xarray",
      "file_name": "bug_report_xarray_corr_bounds_2025-09-25_00-00_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_corr_bounds_2025-09-25_00-00_k3x9.md",
      "call_id": "84ea09f0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.cov Division by Zero with Large ddof",
      "target": "xarray.computation.computation._cov_corr",
      "severity": "N/A",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `xarray.cov()` function does not validate that `ddof < n` (where n is the number of valid data points), leading to division by zero when `ddof == n` or nonsensical negative covariance when `ddof > n`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_cov_ddof_2025-09-25_01-40_x7k3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_cov_ddof_2025-09-25_01-40_x7k3.md",
      "call_id": "784fee60",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.indexes Indexes.is_multi() KeyError on Invalid Key",
      "target": "xarray.core.indexes.Indexes.is_multi()",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `Indexes.is_multi()` method raises an unhelpful `KeyError` when called with a key that doesn't exist in the indexes, unlike the similar `get_all_coords()` method which has an `errors` parameter to handle this case gracefully.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_Indexes_is_multi_keyerror_2025-09-25_06-05_m9x2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_Indexes_is_multi_keyerror_2025-09-25_06-05_m9x2.md",
      "call_id": "05a69726",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.indexes PandasIndex.roll crashes on empty index",
      "target": "xarray.core.indexes.PandasIndex.roll",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `PandasIndex.roll` method crashes with `ZeroDivisionError` when called on an empty index, instead of gracefully handling the empty case.",
      "package": "xarray",
      "file_name": "bug_report_xarray_pandasindex_roll_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_pandasindex_roll_2025-09-25_14-30_k3m9.md",
      "call_id": "789fd8e0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.indexes PandasIndex.roll() ZeroDivisionError on Empty Index",
      "target": "xarray.core.indexes.PandasIndex.roll()",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `PandasIndex.roll()` method crashes with a `ZeroDivisionError` when called on an empty index because it performs modulo by the index length without checking if the length is zero.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_PandasIndex_roll_empty_2025-09-25_06-05_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_PandasIndex_roll_empty_2025-09-25_06-05_k3x9.md",
      "call_id": "0c3e1188",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.indexes normalize_label dtype type handling",
      "target": "xarray.core.indexes.normalize_label",
      "severity": "Low",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `normalize_label` function crashes with an `AttributeError` when passed a numpy dtype type (e.g., `np.float32`) instead of a dtype instance (e.g., `np.dtype('float32')`), despite such usage being standard practice in numpy APIs.",
      "package": "xarray",
      "file_name": "bug_report_xarray_indexes_normalize_label_dtype_2025-09-25_18-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_indexes_normalize_label_dtype_2025-09-25_18-00_k3m9.md",
      "call_id": "92ac601a",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.namedarray permute_dims Missing Dims Handling",
      "target": "xarray.namedarray.core.NamedArray.permute_dims",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `permute_dims` method ignores the `missing_dims` parameter when it's set to 'warn' or 'ignore'. Even when these options are used, the function raises a `ValueError` for missing dimensions instead of warning or ignoring them as documented.",
      "package": "xarray",
      "file_name": "bug_report_xarray_namedarray_permute_dims_2025-09-25_13-45_a7f2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_namedarray_permute_dims_2025-09-25_13-45_a7f2.md",
      "call_id": "7606f1fa",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.namedarray.NamedArray.permute_dims() Silent Failure with Duplicate Dimensions",
      "target": "xarray.namedarray.core.NamedArray.permute_dims",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`NamedArray.permute_dims()` silently fails to transpose array data when dimension names are duplicates. The method returns an unchanged copy instead of transposing the array, violating its documented behavior.",
      "package": "xarray",
      "file_name": "bug_report_xarray_namedarray_permute_dims_duplicate_2025-09-25_04-35_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_namedarray_permute_dims_duplicate_2025-09-25_04-35_k3x9.md",
      "call_id": "2666dde0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot _nicetitle maxchar violation",
      "target": "xarray.plot.facetgrid._nicetitle",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_nicetitle` function violates its documented behavior when `maxchar < 3`. The function is supposed to truncate titles to at most `maxchar` characters, but when the title needs truncation and `maxchar < 3`, it returns a string longer than `maxchar`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_nicetitle_2025-09-25_05-09_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_nicetitle_2025-09-25_05-09_k3x9.md",
      "call_id": "25beceeb",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot._infer_interval_breaks Incorrect Validation for Decreasing Arrays",
      "target": "xarray.plot.utils._infer_interval_breaks",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_infer_interval_breaks` function with `check_monotonic=True` fails to validate that coordinates are in increasing order, accepting decreasing arrays and producing incorrect interval breaks.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_infer_interval_breaks_2025-09-25_04-06_or4h.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_infer_interval_breaks_2025-09-25_04-06_or4h.md",
      "call_id": "4ec0e3cc",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot._nicetitle Truncation Violates maxchar Constraint",
      "target": "xarray.plot.facetgrid._nicetitle",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_nicetitle` function violates its documented behavior by returning strings that exceed the `maxchar` parameter when `maxchar < 4`. The function's docstring states it should \"truncate at maxchar\", but it can return strings up to 3 characters longer than specified.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_nicetitle_2025-09-25_01-35_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_nicetitle_2025-09-25_01-35_k3x9.md",
      "call_id": "31ead867",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.facetgrid._nicetitle Maximum Length Violation",
      "target": "xarray.plot.facetgrid._nicetitle",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_nicetitle` function violates its contract by returning strings longer than the specified `maxchar` parameter when `maxchar < 3`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_nicetitle_2025-09-25_09-08_ajys.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_nicetitle_2025-09-25_09-08_ajys.md",
      "call_id": "8ac191ae",
      "category": "WONTFIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._infer_interval_breaks Incorrect Results for Non-Monotonic Data",
      "target": "xarray.plot.utils._infer_interval_breaks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_infer_interval_breaks` function produces incorrect interval breaks for non-monotonic coordinate data, resulting in breaks that don't contain all the original coordinate values. This can cause plotting functions like `pcolormesh` to display data incorrectly.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_infer_interval_breaks_2025-09-25_04-30_x9k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_infer_interval_breaks_2025-09-25_04-30_x9k2.md",
      "call_id": "9190b95b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._infer_interval_breaks Unsorted Coordinates",
      "target": "xarray.plot.utils._infer_interval_breaks",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "`_infer_interval_breaks` produces interval breaks that don't cover the full data range when coordinates are unsorted, leading to incorrect plot boundaries.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_utils_infer_interval_breaks_2025-09-25_00-25_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_utils_infer_interval_breaks_2025-09-25_00-25_k3m9.md",
      "call_id": "c987c9a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._interval_to_bound_points Incorrect handling of non-contiguous intervals",
      "target": "xarray.plot.utils._interval_to_bound_points",
      "severity": "N/A",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The `_interval_to_bound_points` function silently produces incorrect results when given non-contiguous intervals, violating its documented contract to return \"the Intervals' boundaries\".",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_interval_to_bound_points_2025-09-25_08-08_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_interval_to_bound_points_2025-09-25_08-08_k3x9.md",
      "call_id": "e0acd11b",
      "category": "DOCUMENTATION_FIX",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._rescale_imshow_rgb Division by Zero",
      "target": "xarray.plot.utils._rescale_imshow_rgb",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_rescale_imshow_rgb` function produces NaN values when vmin equals vmax (e.g., when rescaling a constant array), violating its postcondition that output values must be in the [0, 1] range.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_10-42_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_10-42_k3m9.md",
      "call_id": "1c30a04c",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._rescale_imshow_rgb Division by Zero",
      "target": "xarray.plot.utils._rescale_imshow_rgb",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_rescale_imshow_rgb` function produces NaN values when all input data values are identical and `robust=True`, due to division by zero when `vmax == vmin`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_rescale_imshow_rgb_division_by_zero_2025-09-25_02-08_k9x3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_rescale_imshow_rgb_division_by_zero_2025-09-25_02-08_k9x3.md",
      "call_id": "78db07a8",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._rescale_imshow_rgb Division by Zero",
      "target": "xarray.plot.utils._rescale_imshow_rgb",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_rescale_imshow_rgb` function produces NaN values when all input values are equal (constant array) in robust mode, due to division by zero when `vmin == vmax`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_03-08_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_03-08_k3m9.md",
      "call_id": "22ec6d4b",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.plot.utils._rescale_imshow_rgb Missing Validation",
      "target": "xarray.plot.utils._rescale_imshow_rgb",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_rescale_imshow_rgb` function fails to validate that `vmin < vmax` when both parameters are explicitly provided, leading to silent incorrect behavior with inverted color scaling.",
      "package": "xarray",
      "file_name": "bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_14-30_k7m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_plot_rescale_imshow_rgb_2025-09-25_14-30_k7m9.md",
      "call_id": "138363b1",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.polyval Negative Degree Coefficients Silently Dropped",
      "target": "xarray.computation.computation.polyval",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `polyval` function silently drops polynomial coefficients with negative degree indices during reindexing, leading to incorrect results without any warning or error.",
      "package": "xarray",
      "file_name": "bug_report_xarray_polyval_negative_degrees_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_polyval_negative_degrees_2025-09-25_00-00_k3m9.md",
      "call_id": "dcb8b80e",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.static _load_static_files Cache Mutability",
      "target": "xarray.core.formatting_html._load_static_files",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `_load_static_files()` function returns a cached mutable list, allowing callers to inadvertently corrupt the cache by modifying the returned list.",
      "package": "xarray",
      "file_name": "bug_report_xarray_static_load_static_files_cache_2025-09-25_07-36_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_static_load_static_files_cache_2025-09-25_07-36_k3m9.md",
      "call_id": "2c914f38",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.static.css CSS var() Syntax Error",
      "target": "xarray.static.css",
      "severity": "Low",
      "bug_type": "Contract",
      "date": "2025-09-25",
      "summary": "The CSS file at `xarray/static/css/style.css` contains a syntax error in a CSS `var()` function call on line 8, where the required comma between the variable name and fallback value is missing.",
      "package": "xarray",
      "file_name": "bug_report_xarray_static_css_var_syntax_2025-09-25_05-45_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_static_css_var_syntax_2025-09-25_05-45_k3m9.md",
      "call_id": "35a65b08",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.structure.alignment.broadcast() String Exclude Parameter",
      "target": "xarray.structure.alignment.broadcast",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `broadcast()` function incorrectly handles string values for the `exclude` parameter, treating the string as a sequence of characters rather than a single dimension name. This causes dimension names that are substrings of the exclude string to be incorrectly excluded.",
      "package": "xarray",
      "file_name": "bug_report_xarray_broadcast_exclude_2025-09-25_17-30_k7m3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_broadcast_exclude_2025-09-25_17-30_k7m3.md",
      "call_id": "d6c9ada7",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.testing._format_message Crashes on 0-Dimensional Arrays",
      "target": "xarray.testing.assertions._format_message",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_format_message` function in `xarray.testing.assertions` crashes with a TypeError when formatting error messages for failed assertions on 0-dimensional (scalar) numpy arrays. This occurs because the function uses Python's built-in `max()` function on numpy arrays, which cannot iterate over 0-dimensional arrays.",
      "package": "xarray",
      "file_name": "bug_report_xarray_testing_format_message_2025-09-25_03-40_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_testing_format_message_2025-09-25_03-40_k3m9.md",
      "call_id": "7a0bc93d",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util CombineKwargDefault Hash Mutability",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The hash of `CombineKwargDefault` objects changes when global OPTIONS change, violating Python's requirement that object hashes must remain constant during their lifetime. This makes these objects unsuitable for use as dictionary keys or set members.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_2025-09-25_01-37_k8f3.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_2025-09-25_01-37_k8f3.md",
      "call_id": "39f4f5a2",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util CombineKwargDefault Mutable Dask Token",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault.__dask_tokenize__",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault.__dask_tokenize__` method returns different tokens based on global OPTIONS, violating dask's requirement that an object's token must remain constant for proper caching and memoization.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_dask_tokenize_2025-09-25_09-10_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_dask_tokenize_2025-09-25_09-10_k3x9.md",
      "call_id": "18700aa9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util _deprecate_positional_args Crash on Excess Arguments",
      "target": "xarray.util.deprecation_helpers._deprecate_positional_args",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_deprecate_positional_args` decorator crashes with a ValueError when a decorated function is called with more positional arguments than it can accept.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_deprecate_positional_args_2025-09-25_05-05_x8k2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_deprecate_positional_args_2025-09-25_05-05_x8k2.md",
      "call_id": "cfc616d5",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util _deprecate_positional_args ValueError Crash",
      "target": "xarray.util.deprecation_helpers._deprecate_positional_args",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "When a decorated function is called with more positional arguments than it accepts, `_deprecate_positional_args` crashes with `ValueError` instead of letting Python raise the appropriate `TypeError`.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_deprecate_positional_args_2025-09-25_01-03_k8m2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_deprecate_positional_args_2025-09-25_01-03_k8m2.md",
      "call_id": "6626b675",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util.CombineKwargDefault Hash Instability",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "N/A",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault` class has an unstable hash that changes when the global `OPTIONS[\"use_new_combine_kwarg_defaults\"]` setting is modified. This violates Python's hash contract and causes objects to become unfindable in sets and dictionaries after the OPTIONS change.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_2025-09-25_15-30_k3j9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_2025-09-25_15-30_k3j9.md",
      "call_id": "35a8db0d",
      "category": "UNKNOWN",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util.CombineKwargDefault Hash Instability",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault` class violates Python's hash contract by allowing an object's hash to change during its lifetime when the global `OPTIONS[\"use_new_combine_kwarg_defaults\"]` setting is modified.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_14-30_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_14-30_k3m9.md",
      "call_id": "f28347e0",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util.CombineKwargDefault Hash Invariant Violation",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault.__hash__()` method violates Python's hash invariant by returning different values for the same object when global `OPTIONS[\"use_new_combine_kwarg_defaults\"]` changes. This causes objects to become inaccessible when used as dictionary keys or in sets.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_00-00_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_00-00_k3m9.md",
      "call_id": "2164d322",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util._deprecate_positional_args Crashes With Too Many Positional Arguments",
      "target": "xarray.util.deprecation_helpers._deprecate_positional_args",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_deprecate_positional_args` decorator crashes with a `ValueError` when a function receives more positional arguments than it has keyword-only parameters. Instead of gracefully handling the error or raising a proper `TypeError`, it crashes during the zip operation.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_deprecate_positional_args_2025-09-25_16-30_k3x9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_deprecate_positional_args_2025-09-25_16-30_k3x9.md",
      "call_id": "d37a9ed9",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util._deprecate_positional_args VAR_POSITIONAL Crash",
      "target": "xarray.util.deprecation_helpers._deprecate_positional_args",
      "severity": "Medium",
      "bug_type": "Crash",
      "date": "2025-09-25",
      "summary": "The `_deprecate_positional_args` decorator crashes with a `ValueError` when applied to functions that have `*args` (VAR_POSITIONAL parameters).",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_deprecate_positional_args_varargs_2025-09-25_03-06_k3m9.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_deprecate_positional_args_varargs_2025-09-25_03-06_k3m9.md",
      "call_id": "20810715",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    },
    {
      "title": "xarray.util.deprecation_helpers.CombineKwargDefault Hash Mutability",
      "target": "xarray.util.deprecation_helpers.CombineKwargDefault",
      "severity": "Medium",
      "bug_type": "Logic",
      "date": "2025-09-25",
      "summary": "The `CombineKwargDefault.__hash__` method returns different hash values for the same object depending on global OPTIONS state, violating Python's hash invariant that an object's hash must remain constant during its lifetime. This breaks hash-based containers like sets and dictionaries.",
      "package": "xarray",
      "file_name": "bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_14-30_k8x2.md",
      "file_path": "sonnet-4.5/results_verify/xarray/bug_reports/bug_report_xarray_util_CombineKwargDefault_hash_2025-09-25_14-30_k8x2.md",
      "call_id": "a91b4053",
      "category": "BUG",
      "bug_status": {
        "status": "unknown",
        "url": ""
      }
    }
  ],
  "stats": {
    "total_reports": 2253,
    "packages": 14,
    "severity_counts": {
      "Medium": 833,
      "N/A": 983,
      "High": 196,
      "Low": 236,
      "Invalid": 2,
      "Critical": 2,
      "High - Violates fundamental interpolation contract": 1
    },
    "category_counts": {
      "BUG": 1270,
      "DOCUMENTATION_FIX": 239,
      "INVALID": 177,
      "FEATURE_REQUEST": 27,
      "WONTFIX": 271,
      "UNKNOWN": 269
    },
    "bug_type_counts": {
      "Contract": 489,
      "Logic": 1194,
      "Crash": 567,
      "Unknown": 3
    },
    "package_counts": {
      "anyio": 41,
      "attrs": 25,
      "cython": 183,
      "dask": 213,
      "django": 187,
      "fastapi": 54,
      "flask": 13,
      "llm": 63,
      "numpy": 252,
      "pandas": 667,
      "pydantic": 68,
      "scipy": 329,
      "starlette": 43,
      "xarray": 115
    }
  }
}